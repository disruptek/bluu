
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: Service Fabric Client APIs
## version: 6.5.0.36
## termsOfService: (not provided)
## license: (not provided)
## 
## Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593439 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593439](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593439): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "servicefabric"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_CancelRepairTask_593661 = ref object of OpenApiRestCall_593439
proc url_CancelRepairTask_593663(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelRepairTask_593662(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593852 = query.getOrDefault("api-version")
  valid_593852 = validateParameter(valid_593852, JString, required = true,
                                 default = newJString("6.0"))
  if valid_593852 != nil:
    section.add "api-version", valid_593852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593876: Call_CancelRepairTask_593661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_593876.validator(path, query, header, formData, body)
  let scheme = call_593876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593876.url(scheme.get, call_593876.host, call_593876.base,
                         call_593876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593876, url, valid)

proc call*(call_593947: Call_CancelRepairTask_593661;
          RepairTaskCancelDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## cancelRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  var query_593948 = newJObject()
  var body_593950 = newJObject()
  add(query_593948, "api-version", newJString(apiVersion))
  if RepairTaskCancelDescription != nil:
    body_593950 = RepairTaskCancelDescription
  result = call_593947.call(nil, query_593948, nil, nil, body_593950)

var cancelRepairTask* = Call_CancelRepairTask_593661(name: "cancelRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CancelRepairTask", validator: validate_CancelRepairTask_593662,
    base: "", url: url_CancelRepairTask_593663, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRepairTask_593989 = ref object of OpenApiRestCall_593439
proc url_CreateRepairTask_593991(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateRepairTask_593990(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593992 = query.getOrDefault("api-version")
  valid_593992 = validateParameter(valid_593992, JString, required = true,
                                 default = newJString("6.0"))
  if valid_593992 != nil:
    section.add "api-version", valid_593992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593994: Call_CreateRepairTask_593989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_593994.validator(path, query, header, formData, body)
  let scheme = call_593994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593994.url(scheme.get, call_593994.host, call_593994.base,
                         call_593994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593994, url, valid)

proc call*(call_593995: Call_CreateRepairTask_593989; RepairTask: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## createRepairTask
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_593996 = newJObject()
  var body_593997 = newJObject()
  if RepairTask != nil:
    body_593997 = RepairTask
  add(query_593996, "api-version", newJString(apiVersion))
  result = call_593995.call(nil, query_593996, nil, nil, body_593997)

var createRepairTask* = Call_CreateRepairTask_593989(name: "createRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CreateRepairTask", validator: validate_CreateRepairTask_593990,
    base: "", url: url_CreateRepairTask_593991, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRepairTask_593998 = ref object of OpenApiRestCall_593439
proc url_DeleteRepairTask_594000(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteRepairTask_593999(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594001 = query.getOrDefault("api-version")
  valid_594001 = validateParameter(valid_594001, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594001 != nil:
    section.add "api-version", valid_594001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594003: Call_DeleteRepairTask_593998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594003.validator(path, query, header, formData, body)
  let scheme = call_594003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594003.url(scheme.get, call_594003.host, call_594003.base,
                         call_594003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594003, url, valid)

proc call*(call_594004: Call_DeleteRepairTask_593998;
          RepairTaskDeleteDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## deleteRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  var query_594005 = newJObject()
  var body_594006 = newJObject()
  add(query_594005, "api-version", newJString(apiVersion))
  if RepairTaskDeleteDescription != nil:
    body_594006 = RepairTaskDeleteDescription
  result = call_594004.call(nil, query_594005, nil, nil, body_594006)

var deleteRepairTask* = Call_DeleteRepairTask_593998(name: "deleteRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/DeleteRepairTask", validator: validate_DeleteRepairTask_593999,
    base: "", url: url_DeleteRepairTask_594000, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ForceApproveRepairTask_594007 = ref object of OpenApiRestCall_593439
proc url_ForceApproveRepairTask_594009(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ForceApproveRepairTask_594008(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594010 = query.getOrDefault("api-version")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594010 != nil:
    section.add "api-version", valid_594010
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594012: Call_ForceApproveRepairTask_594007; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594012.validator(path, query, header, formData, body)
  let scheme = call_594012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594012.url(scheme.get, call_594012.host, call_594012.base,
                         call_594012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594012, url, valid)

proc call*(call_594013: Call_ForceApproveRepairTask_594007;
          RepairTaskApproveDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## forceApproveRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  var query_594014 = newJObject()
  var body_594015 = newJObject()
  add(query_594014, "api-version", newJString(apiVersion))
  if RepairTaskApproveDescription != nil:
    body_594015 = RepairTaskApproveDescription
  result = call_594013.call(nil, query_594014, nil, nil, body_594015)

var forceApproveRepairTask* = Call_ForceApproveRepairTask_594007(
    name: "forceApproveRepairTask", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ForceApproveRepairTask",
    validator: validate_ForceApproveRepairTask_594008, base: "",
    url: url_ForceApproveRepairTask_594009, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAadMetadata_594016 = ref object of OpenApiRestCall_593439
proc url_GetAadMetadata_594018(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAadMetadata_594017(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594020 = query.getOrDefault("timeout")
  valid_594020 = validateParameter(valid_594020, JInt, required = false,
                                 default = newJInt(60))
  if valid_594020 != nil:
    section.add "timeout", valid_594020
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594021 = query.getOrDefault("api-version")
  valid_594021 = validateParameter(valid_594021, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594021 != nil:
    section.add "api-version", valid_594021
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594022: Call_GetAadMetadata_594016; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  let valid = call_594022.validator(path, query, header, formData, body)
  let scheme = call_594022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594022.url(scheme.get, call_594022.host, call_594022.base,
                         call_594022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594022, url, valid)

proc call*(call_594023: Call_GetAadMetadata_594016; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getAadMetadata
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594024 = newJObject()
  add(query_594024, "timeout", newJInt(timeout))
  add(query_594024, "api-version", newJString(apiVersion))
  result = call_594023.call(nil, query_594024, nil, nil, nil)

var getAadMetadata* = Call_GetAadMetadata_594016(name: "getAadMetadata",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/$/GetAadMetadata",
    validator: validate_GetAadMetadata_594017, base: "", url: url_GetAadMetadata_594018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfiguration_594025 = ref object of OpenApiRestCall_593439
proc url_GetClusterConfiguration_594027(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfiguration_594026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: JString (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594028 = query.getOrDefault("timeout")
  valid_594028 = validateParameter(valid_594028, JInt, required = false,
                                 default = newJInt(60))
  if valid_594028 != nil:
    section.add "timeout", valid_594028
  assert query != nil, "query argument is necessary due to required `ConfigurationApiVersion` field"
  var valid_594029 = query.getOrDefault("ConfigurationApiVersion")
  valid_594029 = validateParameter(valid_594029, JString, required = true,
                                 default = nil)
  if valid_594029 != nil:
    section.add "ConfigurationApiVersion", valid_594029
  var valid_594030 = query.getOrDefault("api-version")
  valid_594030 = validateParameter(valid_594030, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594030 != nil:
    section.add "api-version", valid_594030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594031: Call_GetClusterConfiguration_594025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  let valid = call_594031.validator(path, query, header, formData, body)
  let scheme = call_594031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594031.url(scheme.get, call_594031.host, call_594031.base,
                         call_594031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594031, url, valid)

proc call*(call_594032: Call_GetClusterConfiguration_594025;
          ConfigurationApiVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterConfiguration
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: string (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594033 = newJObject()
  add(query_594033, "timeout", newJInt(timeout))
  add(query_594033, "ConfigurationApiVersion", newJString(ConfigurationApiVersion))
  add(query_594033, "api-version", newJString(apiVersion))
  result = call_594032.call(nil, query_594033, nil, nil, nil)

var getClusterConfiguration* = Call_GetClusterConfiguration_594025(
    name: "getClusterConfiguration", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfiguration",
    validator: validate_GetClusterConfiguration_594026, base: "",
    url: url_GetClusterConfiguration_594027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfigurationUpgradeStatus_594034 = ref object of OpenApiRestCall_593439
proc url_GetClusterConfigurationUpgradeStatus_594036(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfigurationUpgradeStatus_594035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594037 = query.getOrDefault("timeout")
  valid_594037 = validateParameter(valid_594037, JInt, required = false,
                                 default = newJInt(60))
  if valid_594037 != nil:
    section.add "timeout", valid_594037
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594038 = query.getOrDefault("api-version")
  valid_594038 = validateParameter(valid_594038, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594038 != nil:
    section.add "api-version", valid_594038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594039: Call_GetClusterConfigurationUpgradeStatus_594034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  let valid = call_594039.validator(path, query, header, formData, body)
  let scheme = call_594039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594039.url(scheme.get, call_594039.host, call_594039.base,
                         call_594039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594039, url, valid)

proc call*(call_594040: Call_GetClusterConfigurationUpgradeStatus_594034;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getClusterConfigurationUpgradeStatus
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594041 = newJObject()
  add(query_594041, "timeout", newJInt(timeout))
  add(query_594041, "api-version", newJString(apiVersion))
  result = call_594040.call(nil, query_594041, nil, nil, nil)

var getClusterConfigurationUpgradeStatus* = Call_GetClusterConfigurationUpgradeStatus_594034(
    name: "getClusterConfigurationUpgradeStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfigurationUpgradeStatus",
    validator: validate_GetClusterConfigurationUpgradeStatus_594035, base: "",
    url: url_GetClusterConfigurationUpgradeStatus_594036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthUsingPolicy_594055 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealthUsingPolicy_594057(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthUsingPolicy_594056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594058 = query.getOrDefault("timeout")
  valid_594058 = validateParameter(valid_594058, JInt, required = false,
                                 default = newJInt(60))
  if valid_594058 != nil:
    section.add "timeout", valid_594058
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594059 = query.getOrDefault("api-version")
  valid_594059 = validateParameter(valid_594059, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594059 != nil:
    section.add "api-version", valid_594059
  var valid_594060 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_594060 = validateParameter(valid_594060, JInt, required = false,
                                 default = newJInt(0))
  if valid_594060 != nil:
    section.add "ApplicationsHealthStateFilter", valid_594060
  var valid_594061 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_594061 = validateParameter(valid_594061, JBool, required = false,
                                 default = newJBool(false))
  if valid_594061 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_594061
  var valid_594062 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594062 = validateParameter(valid_594062, JBool, required = false,
                                 default = newJBool(false))
  if valid_594062 != nil:
    section.add "ExcludeHealthStatistics", valid_594062
  var valid_594063 = query.getOrDefault("EventsHealthStateFilter")
  valid_594063 = validateParameter(valid_594063, JInt, required = false,
                                 default = newJInt(0))
  if valid_594063 != nil:
    section.add "EventsHealthStateFilter", valid_594063
  var valid_594064 = query.getOrDefault("NodesHealthStateFilter")
  valid_594064 = validateParameter(valid_594064, JInt, required = false,
                                 default = newJInt(0))
  if valid_594064 != nil:
    section.add "NodesHealthStateFilter", valid_594064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594066: Call_GetClusterHealthUsingPolicy_594055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_594066.validator(path, query, header, formData, body)
  let scheme = call_594066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594066.url(scheme.get, call_594066.host, call_594066.base,
                         call_594066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594066, url, valid)

proc call*(call_594067: Call_GetClusterHealthUsingPolicy_594055; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ClusterHealthPolicies: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealthUsingPolicy
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_594068 = newJObject()
  var body_594069 = newJObject()
  add(query_594068, "timeout", newJInt(timeout))
  add(query_594068, "api-version", newJString(apiVersion))
  add(query_594068, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_594068, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  if ClusterHealthPolicies != nil:
    body_594069 = ClusterHealthPolicies
  add(query_594068, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594068, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_594068, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_594067.call(nil, query_594068, nil, nil, body_594069)

var getClusterHealthUsingPolicy* = Call_GetClusterHealthUsingPolicy_594055(
    name: "getClusterHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/GetClusterHealth",
    validator: validate_GetClusterHealthUsingPolicy_594056, base: "",
    url: url_GetClusterHealthUsingPolicy_594057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealth_594042 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealth_594044(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealth_594043(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594045 = query.getOrDefault("timeout")
  valid_594045 = validateParameter(valid_594045, JInt, required = false,
                                 default = newJInt(60))
  if valid_594045 != nil:
    section.add "timeout", valid_594045
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594046 = query.getOrDefault("api-version")
  valid_594046 = validateParameter(valid_594046, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594046 != nil:
    section.add "api-version", valid_594046
  var valid_594047 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_594047 = validateParameter(valid_594047, JInt, required = false,
                                 default = newJInt(0))
  if valid_594047 != nil:
    section.add "ApplicationsHealthStateFilter", valid_594047
  var valid_594048 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_594048 = validateParameter(valid_594048, JBool, required = false,
                                 default = newJBool(false))
  if valid_594048 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_594048
  var valid_594049 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594049 = validateParameter(valid_594049, JBool, required = false,
                                 default = newJBool(false))
  if valid_594049 != nil:
    section.add "ExcludeHealthStatistics", valid_594049
  var valid_594050 = query.getOrDefault("EventsHealthStateFilter")
  valid_594050 = validateParameter(valid_594050, JInt, required = false,
                                 default = newJInt(0))
  if valid_594050 != nil:
    section.add "EventsHealthStateFilter", valid_594050
  var valid_594051 = query.getOrDefault("NodesHealthStateFilter")
  valid_594051 = validateParameter(valid_594051, JInt, required = false,
                                 default = newJInt(0))
  if valid_594051 != nil:
    section.add "NodesHealthStateFilter", valid_594051
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594052: Call_GetClusterHealth_594042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  let valid = call_594052.validator(path, query, header, formData, body)
  let scheme = call_594052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594052.url(scheme.get, call_594052.host, call_594052.base,
                         call_594052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594052, url, valid)

proc call*(call_594053: Call_GetClusterHealth_594042; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_594054 = newJObject()
  add(query_594054, "timeout", newJInt(timeout))
  add(query_594054, "api-version", newJString(apiVersion))
  add(query_594054, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_594054, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  add(query_594054, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594054, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_594054, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_594053.call(nil, query_594054, nil, nil, nil)

var getClusterHealth* = Call_GetClusterHealth_594042(name: "getClusterHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterHealth", validator: validate_GetClusterHealth_594043,
    base: "", url: url_GetClusterHealth_594044, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594080(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594079(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594081 = query.getOrDefault("timeout")
  valid_594081 = validateParameter(valid_594081, JInt, required = false,
                                 default = newJInt(60))
  if valid_594081 != nil:
    section.add "timeout", valid_594081
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594082 = query.getOrDefault("api-version")
  valid_594082 = validateParameter(valid_594082, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594082 != nil:
    section.add "api-version", valid_594082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594084: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  let valid = call_594084.validator(path, query, header, formData, body)
  let scheme = call_594084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594084.url(scheme.get, call_594084.host, call_594084.base,
                         call_594084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594084, url, valid)

proc call*(call_594085: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078;
          timeout: int = 60; apiVersion: string = "6.0";
          ClusterHealthChunkQueryDescription: JsonNode = nil): Recallable =
  ## getClusterHealthChunkUsingPolicyAndAdvancedFilters
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  var query_594086 = newJObject()
  var body_594087 = newJObject()
  add(query_594086, "timeout", newJInt(timeout))
  add(query_594086, "api-version", newJString(apiVersion))
  if ClusterHealthChunkQueryDescription != nil:
    body_594087 = ClusterHealthChunkQueryDescription
  result = call_594085.call(nil, query_594086, nil, nil, body_594087)

var getClusterHealthChunkUsingPolicyAndAdvancedFilters* = Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078(
    name: "getClusterHealthChunkUsingPolicyAndAdvancedFilters",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594079,
    base: "", url: url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594080,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunk_594070 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealthChunk_594072(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunk_594071(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594073 = query.getOrDefault("timeout")
  valid_594073 = validateParameter(valid_594073, JInt, required = false,
                                 default = newJInt(60))
  if valid_594073 != nil:
    section.add "timeout", valid_594073
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594074 = query.getOrDefault("api-version")
  valid_594074 = validateParameter(valid_594074, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594074 != nil:
    section.add "api-version", valid_594074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594075: Call_GetClusterHealthChunk_594070; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  let valid = call_594075.validator(path, query, header, formData, body)
  let scheme = call_594075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594075.url(scheme.get, call_594075.host, call_594075.base,
                         call_594075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594075, url, valid)

proc call*(call_594076: Call_GetClusterHealthChunk_594070; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterHealthChunk
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594077 = newJObject()
  add(query_594077, "timeout", newJInt(timeout))
  add(query_594077, "api-version", newJString(apiVersion))
  result = call_594076.call(nil, query_594077, nil, nil, nil)

var getClusterHealthChunk* = Call_GetClusterHealthChunk_594070(
    name: "getClusterHealthChunk", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunk_594071, base: "",
    url: url_GetClusterHealthChunk_594072, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterManifest_594088 = ref object of OpenApiRestCall_593439
proc url_GetClusterManifest_594090(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterManifest_594089(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594091 = query.getOrDefault("timeout")
  valid_594091 = validateParameter(valid_594091, JInt, required = false,
                                 default = newJInt(60))
  if valid_594091 != nil:
    section.add "timeout", valid_594091
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594092 = query.getOrDefault("api-version")
  valid_594092 = validateParameter(valid_594092, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594092 != nil:
    section.add "api-version", valid_594092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594093: Call_GetClusterManifest_594088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  let valid = call_594093.validator(path, query, header, formData, body)
  let scheme = call_594093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594093.url(scheme.get, call_594093.host, call_594093.base,
                         call_594093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594093, url, valid)

proc call*(call_594094: Call_GetClusterManifest_594088; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterManifest
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594095 = newJObject()
  add(query_594095, "timeout", newJInt(timeout))
  add(query_594095, "api-version", newJString(apiVersion))
  result = call_594094.call(nil, query_594095, nil, nil, nil)

var getClusterManifest* = Call_GetClusterManifest_594088(
    name: "getClusterManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterManifest", validator: validate_GetClusterManifest_594089,
    base: "", url: url_GetClusterManifest_594090,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterVersion_594096 = ref object of OpenApiRestCall_593439
proc url_GetClusterVersion_594098(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterVersion_594097(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594099 = query.getOrDefault("timeout")
  valid_594099 = validateParameter(valid_594099, JInt, required = false,
                                 default = newJInt(60))
  if valid_594099 != nil:
    section.add "timeout", valid_594099
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594100 = query.getOrDefault("api-version")
  valid_594100 = validateParameter(valid_594100, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594100 != nil:
    section.add "api-version", valid_594100
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594101: Call_GetClusterVersion_594096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  let valid = call_594101.validator(path, query, header, formData, body)
  let scheme = call_594101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594101.url(scheme.get, call_594101.host, call_594101.base,
                         call_594101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594101, url, valid)

proc call*(call_594102: Call_GetClusterVersion_594096; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## getClusterVersion
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594103 = newJObject()
  add(query_594103, "timeout", newJInt(timeout))
  add(query_594103, "api-version", newJString(apiVersion))
  result = call_594102.call(nil, query_594103, nil, nil, nil)

var getClusterVersion* = Call_GetClusterVersion_594096(name: "getClusterVersion",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterVersion", validator: validate_GetClusterVersion_594097,
    base: "", url: url_GetClusterVersion_594098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterLoad_594104 = ref object of OpenApiRestCall_593439
proc url_GetClusterLoad_594106(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterLoad_594105(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594107 = query.getOrDefault("timeout")
  valid_594107 = validateParameter(valid_594107, JInt, required = false,
                                 default = newJInt(60))
  if valid_594107 != nil:
    section.add "timeout", valid_594107
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594108 = query.getOrDefault("api-version")
  valid_594108 = validateParameter(valid_594108, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594108 != nil:
    section.add "api-version", valid_594108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594109: Call_GetClusterLoad_594104; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
  ## 
  let valid = call_594109.validator(path, query, header, formData, body)
  let scheme = call_594109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594109.url(scheme.get, call_594109.host, call_594109.base,
                         call_594109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594109, url, valid)

proc call*(call_594110: Call_GetClusterLoad_594104; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterLoad
  ## Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594111 = newJObject()
  add(query_594111, "timeout", newJInt(timeout))
  add(query_594111, "api-version", newJString(apiVersion))
  result = call_594110.call(nil, query_594111, nil, nil, nil)

var getClusterLoad* = Call_GetClusterLoad_594104(name: "getClusterLoad",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetLoadInformation", validator: validate_GetClusterLoad_594105,
    base: "", url: url_GetClusterLoad_594106, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricCodeVersionInfoList_594112 = ref object of OpenApiRestCall_593439
proc url_GetProvisionedFabricCodeVersionInfoList_594114(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricCodeVersionInfoList_594113(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: JString
  ##              : The product version of Service Fabric.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594115 = query.getOrDefault("timeout")
  valid_594115 = validateParameter(valid_594115, JInt, required = false,
                                 default = newJInt(60))
  if valid_594115 != nil:
    section.add "timeout", valid_594115
  var valid_594116 = query.getOrDefault("CodeVersion")
  valid_594116 = validateParameter(valid_594116, JString, required = false,
                                 default = nil)
  if valid_594116 != nil:
    section.add "CodeVersion", valid_594116
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594117 = query.getOrDefault("api-version")
  valid_594117 = validateParameter(valid_594117, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594117 != nil:
    section.add "api-version", valid_594117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594118: Call_GetProvisionedFabricCodeVersionInfoList_594112;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_594118.validator(path, query, header, formData, body)
  let scheme = call_594118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594118.url(scheme.get, call_594118.host, call_594118.base,
                         call_594118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594118, url, valid)

proc call*(call_594119: Call_GetProvisionedFabricCodeVersionInfoList_594112;
          timeout: int = 60; CodeVersion: string = ""; apiVersion: string = "6.0"): Recallable =
  ## getProvisionedFabricCodeVersionInfoList
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: string
  ##              : The product version of Service Fabric.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594120 = newJObject()
  add(query_594120, "timeout", newJInt(timeout))
  add(query_594120, "CodeVersion", newJString(CodeVersion))
  add(query_594120, "api-version", newJString(apiVersion))
  result = call_594119.call(nil, query_594120, nil, nil, nil)

var getProvisionedFabricCodeVersionInfoList* = Call_GetProvisionedFabricCodeVersionInfoList_594112(
    name: "getProvisionedFabricCodeVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedCodeVersions",
    validator: validate_GetProvisionedFabricCodeVersionInfoList_594113, base: "",
    url: url_GetProvisionedFabricCodeVersionInfoList_594114,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricConfigVersionInfoList_594121 = ref object of OpenApiRestCall_593439
proc url_GetProvisionedFabricConfigVersionInfoList_594123(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricConfigVersionInfoList_594122(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: JString
  ##                : The config version of Service Fabric.
  section = newJObject()
  var valid_594124 = query.getOrDefault("timeout")
  valid_594124 = validateParameter(valid_594124, JInt, required = false,
                                 default = newJInt(60))
  if valid_594124 != nil:
    section.add "timeout", valid_594124
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594125 = query.getOrDefault("api-version")
  valid_594125 = validateParameter(valid_594125, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594125 != nil:
    section.add "api-version", valid_594125
  var valid_594126 = query.getOrDefault("ConfigVersion")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "ConfigVersion", valid_594126
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594127: Call_GetProvisionedFabricConfigVersionInfoList_594121;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_594127.validator(path, query, header, formData, body)
  let scheme = call_594127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594127.url(scheme.get, call_594127.host, call_594127.base,
                         call_594127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594127, url, valid)

proc call*(call_594128: Call_GetProvisionedFabricConfigVersionInfoList_594121;
          timeout: int = 60; apiVersion: string = "6.0"; ConfigVersion: string = ""): Recallable =
  ## getProvisionedFabricConfigVersionInfoList
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: string
  ##                : The config version of Service Fabric.
  var query_594129 = newJObject()
  add(query_594129, "timeout", newJInt(timeout))
  add(query_594129, "api-version", newJString(apiVersion))
  add(query_594129, "ConfigVersion", newJString(ConfigVersion))
  result = call_594128.call(nil, query_594129, nil, nil, nil)

var getProvisionedFabricConfigVersionInfoList* = Call_GetProvisionedFabricConfigVersionInfoList_594121(
    name: "getProvisionedFabricConfigVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedConfigVersions",
    validator: validate_GetProvisionedFabricConfigVersionInfoList_594122,
    base: "", url: url_GetProvisionedFabricConfigVersionInfoList_594123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRepairTaskList_594130 = ref object of OpenApiRestCall_593439
proc url_GetRepairTaskList_594132(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRepairTaskList_594131(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: JString
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: JString
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: JInt
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594133 = query.getOrDefault("api-version")
  valid_594133 = validateParameter(valid_594133, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594133 != nil:
    section.add "api-version", valid_594133
  var valid_594134 = query.getOrDefault("TaskIdFilter")
  valid_594134 = validateParameter(valid_594134, JString, required = false,
                                 default = nil)
  if valid_594134 != nil:
    section.add "TaskIdFilter", valid_594134
  var valid_594135 = query.getOrDefault("ExecutorFilter")
  valid_594135 = validateParameter(valid_594135, JString, required = false,
                                 default = nil)
  if valid_594135 != nil:
    section.add "ExecutorFilter", valid_594135
  var valid_594136 = query.getOrDefault("StateFilter")
  valid_594136 = validateParameter(valid_594136, JInt, required = false, default = nil)
  if valid_594136 != nil:
    section.add "StateFilter", valid_594136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594137: Call_GetRepairTaskList_594130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594137.validator(path, query, header, formData, body)
  let scheme = call_594137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594137.url(scheme.get, call_594137.host, call_594137.base,
                         call_594137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594137, url, valid)

proc call*(call_594138: Call_GetRepairTaskList_594130; apiVersion: string = "6.0";
          TaskIdFilter: string = ""; ExecutorFilter: string = ""; StateFilter: int = 0): Recallable =
  ## getRepairTaskList
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: string
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: string
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: int
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  var query_594139 = newJObject()
  add(query_594139, "api-version", newJString(apiVersion))
  add(query_594139, "TaskIdFilter", newJString(TaskIdFilter))
  add(query_594139, "ExecutorFilter", newJString(ExecutorFilter))
  add(query_594139, "StateFilter", newJInt(StateFilter))
  result = call_594138.call(nil, query_594139, nil, nil, nil)

var getRepairTaskList* = Call_GetRepairTaskList_594130(name: "getRepairTaskList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetRepairTaskList", validator: validate_GetRepairTaskList_594131,
    base: "", url: url_GetRepairTaskList_594132,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpgradeOrchestrationServiceState_594140 = ref object of OpenApiRestCall_593439
proc url_GetUpgradeOrchestrationServiceState_594142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpgradeOrchestrationServiceState_594141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594143 = query.getOrDefault("timeout")
  valid_594143 = validateParameter(valid_594143, JInt, required = false,
                                 default = newJInt(60))
  if valid_594143 != nil:
    section.add "timeout", valid_594143
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594144 = query.getOrDefault("api-version")
  valid_594144 = validateParameter(valid_594144, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594144 != nil:
    section.add "api-version", valid_594144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594145: Call_GetUpgradeOrchestrationServiceState_594140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_594145.validator(path, query, header, formData, body)
  let scheme = call_594145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594145.url(scheme.get, call_594145.host, call_594145.base,
                         call_594145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594145, url, valid)

proc call*(call_594146: Call_GetUpgradeOrchestrationServiceState_594140;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getUpgradeOrchestrationServiceState
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594147 = newJObject()
  add(query_594147, "timeout", newJInt(timeout))
  add(query_594147, "api-version", newJString(apiVersion))
  result = call_594146.call(nil, query_594147, nil, nil, nil)

var getUpgradeOrchestrationServiceState* = Call_GetUpgradeOrchestrationServiceState_594140(
    name: "getUpgradeOrchestrationServiceState", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeOrchestrationServiceState",
    validator: validate_GetUpgradeOrchestrationServiceState_594141, base: "",
    url: url_GetUpgradeOrchestrationServiceState_594142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterUpgradeProgress_594148 = ref object of OpenApiRestCall_593439
proc url_GetClusterUpgradeProgress_594150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterUpgradeProgress_594149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594151 = query.getOrDefault("timeout")
  valid_594151 = validateParameter(valid_594151, JInt, required = false,
                                 default = newJInt(60))
  if valid_594151 != nil:
    section.add "timeout", valid_594151
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594152 = query.getOrDefault("api-version")
  valid_594152 = validateParameter(valid_594152, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594152 != nil:
    section.add "api-version", valid_594152
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594153: Call_GetClusterUpgradeProgress_594148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  let valid = call_594153.validator(path, query, header, formData, body)
  let scheme = call_594153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594153.url(scheme.get, call_594153.host, call_594153.base,
                         call_594153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594153, url, valid)

proc call*(call_594154: Call_GetClusterUpgradeProgress_594148; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterUpgradeProgress
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594155 = newJObject()
  add(query_594155, "timeout", newJInt(timeout))
  add(query_594155, "api-version", newJString(apiVersion))
  result = call_594154.call(nil, query_594155, nil, nil, nil)

var getClusterUpgradeProgress* = Call_GetClusterUpgradeProgress_594148(
    name: "getClusterUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeProgress",
    validator: validate_GetClusterUpgradeProgress_594149, base: "",
    url: url_GetClusterUpgradeProgress_594150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureCommand_594156 = ref object of OpenApiRestCall_593439
proc url_InvokeInfrastructureCommand_594158(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureCommand_594157(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_594159 = query.getOrDefault("timeout")
  valid_594159 = validateParameter(valid_594159, JInt, required = false,
                                 default = newJInt(60))
  if valid_594159 != nil:
    section.add "timeout", valid_594159
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594160 = query.getOrDefault("api-version")
  valid_594160 = validateParameter(valid_594160, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594160 != nil:
    section.add "api-version", valid_594160
  var valid_594161 = query.getOrDefault("ServiceId")
  valid_594161 = validateParameter(valid_594161, JString, required = false,
                                 default = nil)
  if valid_594161 != nil:
    section.add "ServiceId", valid_594161
  var valid_594162 = query.getOrDefault("Command")
  valid_594162 = validateParameter(valid_594162, JString, required = true,
                                 default = nil)
  if valid_594162 != nil:
    section.add "Command", valid_594162
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594163: Call_InvokeInfrastructureCommand_594156; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594163.validator(path, query, header, formData, body)
  let scheme = call_594163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594163.url(scheme.get, call_594163.host, call_594163.base,
                         call_594163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594163, url, valid)

proc call*(call_594164: Call_InvokeInfrastructureCommand_594156; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureCommand
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_594165 = newJObject()
  add(query_594165, "timeout", newJInt(timeout))
  add(query_594165, "api-version", newJString(apiVersion))
  add(query_594165, "ServiceId", newJString(ServiceId))
  add(query_594165, "Command", newJString(Command))
  result = call_594164.call(nil, query_594165, nil, nil, nil)

var invokeInfrastructureCommand* = Call_InvokeInfrastructureCommand_594156(
    name: "invokeInfrastructureCommand", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureCommand",
    validator: validate_InvokeInfrastructureCommand_594157, base: "",
    url: url_InvokeInfrastructureCommand_594158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureQuery_594166 = ref object of OpenApiRestCall_593439
proc url_InvokeInfrastructureQuery_594168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureQuery_594167(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_594169 = query.getOrDefault("timeout")
  valid_594169 = validateParameter(valid_594169, JInt, required = false,
                                 default = newJInt(60))
  if valid_594169 != nil:
    section.add "timeout", valid_594169
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594170 = query.getOrDefault("api-version")
  valid_594170 = validateParameter(valid_594170, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594170 != nil:
    section.add "api-version", valid_594170
  var valid_594171 = query.getOrDefault("ServiceId")
  valid_594171 = validateParameter(valid_594171, JString, required = false,
                                 default = nil)
  if valid_594171 != nil:
    section.add "ServiceId", valid_594171
  var valid_594172 = query.getOrDefault("Command")
  valid_594172 = validateParameter(valid_594172, JString, required = true,
                                 default = nil)
  if valid_594172 != nil:
    section.add "Command", valid_594172
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594173: Call_InvokeInfrastructureQuery_594166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594173.validator(path, query, header, formData, body)
  let scheme = call_594173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594173.url(scheme.get, call_594173.host, call_594173.base,
                         call_594173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594173, url, valid)

proc call*(call_594174: Call_InvokeInfrastructureQuery_594166; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureQuery
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_594175 = newJObject()
  add(query_594175, "timeout", newJInt(timeout))
  add(query_594175, "api-version", newJString(apiVersion))
  add(query_594175, "ServiceId", newJString(ServiceId))
  add(query_594175, "Command", newJString(Command))
  result = call_594174.call(nil, query_594175, nil, nil, nil)

var invokeInfrastructureQuery* = Call_InvokeInfrastructureQuery_594166(
    name: "invokeInfrastructureQuery", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureQuery",
    validator: validate_InvokeInfrastructureQuery_594167, base: "",
    url: url_InvokeInfrastructureQuery_594168,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeClusterUpgrade_594176 = ref object of OpenApiRestCall_593439
proc url_ResumeClusterUpgrade_594178(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ResumeClusterUpgrade_594177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594179 = query.getOrDefault("timeout")
  valid_594179 = validateParameter(valid_594179, JInt, required = false,
                                 default = newJInt(60))
  if valid_594179 != nil:
    section.add "timeout", valid_594179
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594180 = query.getOrDefault("api-version")
  valid_594180 = validateParameter(valid_594180, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594180 != nil:
    section.add "api-version", valid_594180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594182: Call_ResumeClusterUpgrade_594176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  let valid = call_594182.validator(path, query, header, formData, body)
  let scheme = call_594182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594182.url(scheme.get, call_594182.host, call_594182.base,
                         call_594182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594182, url, valid)

proc call*(call_594183: Call_ResumeClusterUpgrade_594176;
          ResumeClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## resumeClusterUpgrade
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  var query_594184 = newJObject()
  var body_594185 = newJObject()
  add(query_594184, "timeout", newJInt(timeout))
  add(query_594184, "api-version", newJString(apiVersion))
  if ResumeClusterUpgradeDescription != nil:
    body_594185 = ResumeClusterUpgradeDescription
  result = call_594183.call(nil, query_594184, nil, nil, body_594185)

var resumeClusterUpgrade* = Call_ResumeClusterUpgrade_594176(
    name: "resumeClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeClusterUpgrade_594177, base: "",
    url: url_ResumeClusterUpgrade_594178, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionCluster_594186 = ref object of OpenApiRestCall_593439
proc url_ProvisionCluster_594188(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionCluster_594187(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594189 = query.getOrDefault("timeout")
  valid_594189 = validateParameter(valid_594189, JInt, required = false,
                                 default = newJInt(60))
  if valid_594189 != nil:
    section.add "timeout", valid_594189
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594190 = query.getOrDefault("api-version")
  valid_594190 = validateParameter(valid_594190, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594190 != nil:
    section.add "api-version", valid_594190
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594192: Call_ProvisionCluster_594186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  let valid = call_594192.validator(path, query, header, formData, body)
  let scheme = call_594192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594192.url(scheme.get, call_594192.host, call_594192.base,
                         call_594192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594192, url, valid)

proc call*(call_594193: Call_ProvisionCluster_594186;
          ProvisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## provisionCluster
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  var query_594194 = newJObject()
  var body_594195 = newJObject()
  add(query_594194, "timeout", newJInt(timeout))
  add(query_594194, "api-version", newJString(apiVersion))
  if ProvisionFabricDescription != nil:
    body_594195 = ProvisionFabricDescription
  result = call_594193.call(nil, query_594194, nil, nil, body_594195)

var provisionCluster* = Call_ProvisionCluster_594186(name: "provisionCluster",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/$/Provision",
    validator: validate_ProvisionCluster_594187, base: "",
    url: url_ProvisionCluster_594188, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverAllPartitions_594196 = ref object of OpenApiRestCall_593439
proc url_RecoverAllPartitions_594198(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverAllPartitions_594197(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594199 = query.getOrDefault("timeout")
  valid_594199 = validateParameter(valid_594199, JInt, required = false,
                                 default = newJInt(60))
  if valid_594199 != nil:
    section.add "timeout", valid_594199
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594200 = query.getOrDefault("api-version")
  valid_594200 = validateParameter(valid_594200, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594200 != nil:
    section.add "api-version", valid_594200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594201: Call_RecoverAllPartitions_594196; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_594201.validator(path, query, header, formData, body)
  let scheme = call_594201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594201.url(scheme.get, call_594201.host, call_594201.base,
                         call_594201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594201, url, valid)

proc call*(call_594202: Call_RecoverAllPartitions_594196; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverAllPartitions
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594203 = newJObject()
  add(query_594203, "timeout", newJInt(timeout))
  add(query_594203, "api-version", newJString(apiVersion))
  result = call_594202.call(nil, query_594203, nil, nil, nil)

var recoverAllPartitions* = Call_RecoverAllPartitions_594196(
    name: "recoverAllPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverAllPartitions",
    validator: validate_RecoverAllPartitions_594197, base: "",
    url: url_RecoverAllPartitions_594198, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverSystemPartitions_594204 = ref object of OpenApiRestCall_593439
proc url_RecoverSystemPartitions_594206(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverSystemPartitions_594205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594207 = query.getOrDefault("timeout")
  valid_594207 = validateParameter(valid_594207, JInt, required = false,
                                 default = newJInt(60))
  if valid_594207 != nil:
    section.add "timeout", valid_594207
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594208 = query.getOrDefault("api-version")
  valid_594208 = validateParameter(valid_594208, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594208 != nil:
    section.add "api-version", valid_594208
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594209: Call_RecoverSystemPartitions_594204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_594209.validator(path, query, header, formData, body)
  let scheme = call_594209.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594209.url(scheme.get, call_594209.host, call_594209.base,
                         call_594209.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594209, url, valid)

proc call*(call_594210: Call_RecoverSystemPartitions_594204; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverSystemPartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594211 = newJObject()
  add(query_594211, "timeout", newJInt(timeout))
  add(query_594211, "api-version", newJString(apiVersion))
  result = call_594210.call(nil, query_594211, nil, nil, nil)

var recoverSystemPartitions* = Call_RecoverSystemPartitions_594204(
    name: "recoverSystemPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverSystemPartitions",
    validator: validate_RecoverSystemPartitions_594205, base: "",
    url: url_RecoverSystemPartitions_594206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportClusterHealth_594212 = ref object of OpenApiRestCall_593439
proc url_ReportClusterHealth_594214(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ReportClusterHealth_594213(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594215 = query.getOrDefault("Immediate")
  valid_594215 = validateParameter(valid_594215, JBool, required = false,
                                 default = newJBool(false))
  if valid_594215 != nil:
    section.add "Immediate", valid_594215
  var valid_594216 = query.getOrDefault("timeout")
  valid_594216 = validateParameter(valid_594216, JInt, required = false,
                                 default = newJInt(60))
  if valid_594216 != nil:
    section.add "timeout", valid_594216
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594217 = query.getOrDefault("api-version")
  valid_594217 = validateParameter(valid_594217, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594217 != nil:
    section.add "api-version", valid_594217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594219: Call_ReportClusterHealth_594212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_594219.validator(path, query, header, formData, body)
  let scheme = call_594219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594219.url(scheme.get, call_594219.host, call_594219.base,
                         call_594219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594219, url, valid)

proc call*(call_594220: Call_ReportClusterHealth_594212;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportClusterHealth
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var query_594221 = newJObject()
  var body_594222 = newJObject()
  add(query_594221, "Immediate", newJBool(Immediate))
  add(query_594221, "timeout", newJInt(timeout))
  add(query_594221, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_594222 = HealthInformation
  result = call_594220.call(nil, query_594221, nil, nil, body_594222)

var reportClusterHealth* = Call_ReportClusterHealth_594212(
    name: "reportClusterHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ReportClusterHealth",
    validator: validate_ReportClusterHealth_594213, base: "",
    url: url_ReportClusterHealth_594214, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackClusterUpgrade_594223 = ref object of OpenApiRestCall_593439
proc url_RollbackClusterUpgrade_594225(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RollbackClusterUpgrade_594224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594226 = query.getOrDefault("timeout")
  valid_594226 = validateParameter(valid_594226, JInt, required = false,
                                 default = newJInt(60))
  if valid_594226 != nil:
    section.add "timeout", valid_594226
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594227 = query.getOrDefault("api-version")
  valid_594227 = validateParameter(valid_594227, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594227 != nil:
    section.add "api-version", valid_594227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594228: Call_RollbackClusterUpgrade_594223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  let valid = call_594228.validator(path, query, header, formData, body)
  let scheme = call_594228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594228.url(scheme.get, call_594228.host, call_594228.base,
                         call_594228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594228, url, valid)

proc call*(call_594229: Call_RollbackClusterUpgrade_594223; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## rollbackClusterUpgrade
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594230 = newJObject()
  add(query_594230, "timeout", newJInt(timeout))
  add(query_594230, "api-version", newJString(apiVersion))
  result = call_594229.call(nil, query_594230, nil, nil, nil)

var rollbackClusterUpgrade* = Call_RollbackClusterUpgrade_594223(
    name: "rollbackClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RollbackUpgrade",
    validator: validate_RollbackClusterUpgrade_594224, base: "",
    url: url_RollbackClusterUpgrade_594225, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetUpgradeOrchestrationServiceState_594231 = ref object of OpenApiRestCall_593439
proc url_SetUpgradeOrchestrationServiceState_594233(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_SetUpgradeOrchestrationServiceState_594232(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594234 = query.getOrDefault("timeout")
  valid_594234 = validateParameter(valid_594234, JInt, required = false,
                                 default = newJInt(60))
  if valid_594234 != nil:
    section.add "timeout", valid_594234
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594235 = query.getOrDefault("api-version")
  valid_594235 = validateParameter(valid_594235, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594235 != nil:
    section.add "api-version", valid_594235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594237: Call_SetUpgradeOrchestrationServiceState_594231;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_594237.validator(path, query, header, formData, body)
  let scheme = call_594237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594237.url(scheme.get, call_594237.host, call_594237.base,
                         call_594237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594237, url, valid)

proc call*(call_594238: Call_SetUpgradeOrchestrationServiceState_594231;
          UpgradeOrchestrationServiceState: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## setUpgradeOrchestrationServiceState
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  var query_594239 = newJObject()
  var body_594240 = newJObject()
  add(query_594239, "timeout", newJInt(timeout))
  add(query_594239, "api-version", newJString(apiVersion))
  if UpgradeOrchestrationServiceState != nil:
    body_594240 = UpgradeOrchestrationServiceState
  result = call_594238.call(nil, query_594239, nil, nil, body_594240)

var setUpgradeOrchestrationServiceState* = Call_SetUpgradeOrchestrationServiceState_594231(
    name: "setUpgradeOrchestrationServiceState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/SetUpgradeOrchestrationServiceState",
    validator: validate_SetUpgradeOrchestrationServiceState_594232, base: "",
    url: url_SetUpgradeOrchestrationServiceState_594233,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterConfigurationUpgrade_594241 = ref object of OpenApiRestCall_593439
proc url_StartClusterConfigurationUpgrade_594243(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterConfigurationUpgrade_594242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594254 = query.getOrDefault("timeout")
  valid_594254 = validateParameter(valid_594254, JInt, required = false,
                                 default = newJInt(60))
  if valid_594254 != nil:
    section.add "timeout", valid_594254
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594255 = query.getOrDefault("api-version")
  valid_594255 = validateParameter(valid_594255, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594255 != nil:
    section.add "api-version", valid_594255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594257: Call_StartClusterConfigurationUpgrade_594241;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  let valid = call_594257.validator(path, query, header, formData, body)
  let scheme = call_594257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594257.url(scheme.get, call_594257.host, call_594257.base,
                         call_594257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594257, url, valid)

proc call*(call_594258: Call_StartClusterConfigurationUpgrade_594241;
          ClusterConfigurationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterConfigurationUpgrade
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  var query_594259 = newJObject()
  var body_594260 = newJObject()
  add(query_594259, "timeout", newJInt(timeout))
  add(query_594259, "api-version", newJString(apiVersion))
  if ClusterConfigurationUpgradeDescription != nil:
    body_594260 = ClusterConfigurationUpgradeDescription
  result = call_594258.call(nil, query_594259, nil, nil, body_594260)

var startClusterConfigurationUpgrade* = Call_StartClusterConfigurationUpgrade_594241(
    name: "startClusterConfigurationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/StartClusterConfigurationUpgrade",
    validator: validate_StartClusterConfigurationUpgrade_594242, base: "",
    url: url_StartClusterConfigurationUpgrade_594243,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ToggleVerboseServicePlacementHealthReporting_594261 = ref object of OpenApiRestCall_593439
proc url_ToggleVerboseServicePlacementHealthReporting_594263(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ToggleVerboseServicePlacementHealthReporting_594262(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or dropped.
  ## If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Enabled: JBool (required)
  ##          : The verbosity of service placement health reporting.
  section = newJObject()
  var valid_594264 = query.getOrDefault("timeout")
  valid_594264 = validateParameter(valid_594264, JInt, required = false,
                                 default = newJInt(60))
  if valid_594264 != nil:
    section.add "timeout", valid_594264
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594265 = query.getOrDefault("api-version")
  valid_594265 = validateParameter(valid_594265, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594265 != nil:
    section.add "api-version", valid_594265
  var valid_594266 = query.getOrDefault("Enabled")
  valid_594266 = validateParameter(valid_594266, JBool, required = true, default = nil)
  if valid_594266 != nil:
    section.add "Enabled", valid_594266
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594267: Call_ToggleVerboseServicePlacementHealthReporting_594261;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or dropped.
  ## If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
  ## 
  let valid = call_594267.validator(path, query, header, formData, body)
  let scheme = call_594267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594267.url(scheme.get, call_594267.host, call_594267.base,
                         call_594267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594267, url, valid)

proc call*(call_594268: Call_ToggleVerboseServicePlacementHealthReporting_594261;
          Enabled: bool; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## toggleVerboseServicePlacementHealthReporting
  ## If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or dropped.
  ## If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Enabled: bool (required)
  ##          : The verbosity of service placement health reporting.
  var query_594269 = newJObject()
  add(query_594269, "timeout", newJInt(timeout))
  add(query_594269, "api-version", newJString(apiVersion))
  add(query_594269, "Enabled", newJBool(Enabled))
  result = call_594268.call(nil, query_594269, nil, nil, nil)

var toggleVerboseServicePlacementHealthReporting* = Call_ToggleVerboseServicePlacementHealthReporting_594261(
    name: "toggleVerboseServicePlacementHealthReporting",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/ToggleVerboseServicePlacementHealthReporting",
    validator: validate_ToggleVerboseServicePlacementHealthReporting_594262,
    base: "", url: url_ToggleVerboseServicePlacementHealthReporting_594263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionCluster_594270 = ref object of OpenApiRestCall_593439
proc url_UnprovisionCluster_594272(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UnprovisionCluster_594271(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## It is supported to unprovision code and configuration separately.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594273 = query.getOrDefault("timeout")
  valid_594273 = validateParameter(valid_594273, JInt, required = false,
                                 default = newJInt(60))
  if valid_594273 != nil:
    section.add "timeout", valid_594273
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594274 = query.getOrDefault("api-version")
  valid_594274 = validateParameter(valid_594274, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594274 != nil:
    section.add "api-version", valid_594274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594276: Call_UnprovisionCluster_594270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## It is supported to unprovision code and configuration separately.
  ## 
  let valid = call_594276.validator(path, query, header, formData, body)
  let scheme = call_594276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594276.url(scheme.get, call_594276.host, call_594276.base,
                         call_594276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594276, url, valid)

proc call*(call_594277: Call_UnprovisionCluster_594270;
          UnprovisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionCluster
  ## It is supported to unprovision code and configuration separately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  var query_594278 = newJObject()
  var body_594279 = newJObject()
  add(query_594278, "timeout", newJInt(timeout))
  add(query_594278, "api-version", newJString(apiVersion))
  if UnprovisionFabricDescription != nil:
    body_594279 = UnprovisionFabricDescription
  result = call_594277.call(nil, query_594278, nil, nil, body_594279)

var unprovisionCluster* = Call_UnprovisionCluster_594270(
    name: "unprovisionCluster", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Unprovision",
    validator: validate_UnprovisionCluster_594271, base: "",
    url: url_UnprovisionCluster_594272, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairExecutionState_594280 = ref object of OpenApiRestCall_593439
proc url_UpdateRepairExecutionState_594282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairExecutionState_594281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594283 = query.getOrDefault("api-version")
  valid_594283 = validateParameter(valid_594283, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594283 != nil:
    section.add "api-version", valid_594283
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594285: Call_UpdateRepairExecutionState_594280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594285.validator(path, query, header, formData, body)
  let scheme = call_594285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594285.url(scheme.get, call_594285.host, call_594285.base,
                         call_594285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594285, url, valid)

proc call*(call_594286: Call_UpdateRepairExecutionState_594280;
          RepairTask: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## updateRepairExecutionState
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594287 = newJObject()
  var body_594288 = newJObject()
  if RepairTask != nil:
    body_594288 = RepairTask
  add(query_594287, "api-version", newJString(apiVersion))
  result = call_594286.call(nil, query_594287, nil, nil, body_594288)

var updateRepairExecutionState* = Call_UpdateRepairExecutionState_594280(
    name: "updateRepairExecutionState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairExecutionState",
    validator: validate_UpdateRepairExecutionState_594281, base: "",
    url: url_UpdateRepairExecutionState_594282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairTaskHealthPolicy_594289 = ref object of OpenApiRestCall_593439
proc url_UpdateRepairTaskHealthPolicy_594291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairTaskHealthPolicy_594290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594292 = query.getOrDefault("api-version")
  valid_594292 = validateParameter(valid_594292, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594292 != nil:
    section.add "api-version", valid_594292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594294: Call_UpdateRepairTaskHealthPolicy_594289; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594294.validator(path, query, header, formData, body)
  let scheme = call_594294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594294.url(scheme.get, call_594294.host, call_594294.base,
                         call_594294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594294, url, valid)

proc call*(call_594295: Call_UpdateRepairTaskHealthPolicy_594289;
          RepairTaskUpdateHealthPolicyDescription: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## updateRepairTaskHealthPolicy
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  var query_594296 = newJObject()
  var body_594297 = newJObject()
  add(query_594296, "api-version", newJString(apiVersion))
  if RepairTaskUpdateHealthPolicyDescription != nil:
    body_594297 = RepairTaskUpdateHealthPolicyDescription
  result = call_594295.call(nil, query_594296, nil, nil, body_594297)

var updateRepairTaskHealthPolicy* = Call_UpdateRepairTaskHealthPolicy_594289(
    name: "updateRepairTaskHealthPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairTaskHealthPolicy",
    validator: validate_UpdateRepairTaskHealthPolicy_594290, base: "",
    url: url_UpdateRepairTaskHealthPolicy_594291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateClusterUpgrade_594298 = ref object of OpenApiRestCall_593439
proc url_UpdateClusterUpgrade_594300(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateClusterUpgrade_594299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594301 = query.getOrDefault("timeout")
  valid_594301 = validateParameter(valid_594301, JInt, required = false,
                                 default = newJInt(60))
  if valid_594301 != nil:
    section.add "timeout", valid_594301
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594302 = query.getOrDefault("api-version")
  valid_594302 = validateParameter(valid_594302, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594302 != nil:
    section.add "api-version", valid_594302
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594304: Call_UpdateClusterUpgrade_594298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  let valid = call_594304.validator(path, query, header, formData, body)
  let scheme = call_594304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594304.url(scheme.get, call_594304.host, call_594304.base,
                         call_594304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594304, url, valid)

proc call*(call_594305: Call_UpdateClusterUpgrade_594298;
          UpdateClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateClusterUpgrade
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  var query_594306 = newJObject()
  var body_594307 = newJObject()
  add(query_594306, "timeout", newJInt(timeout))
  add(query_594306, "api-version", newJString(apiVersion))
  if UpdateClusterUpgradeDescription != nil:
    body_594307 = UpdateClusterUpgradeDescription
  result = call_594305.call(nil, query_594306, nil, nil, body_594307)

var updateClusterUpgrade* = Call_UpdateClusterUpgrade_594298(
    name: "updateClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateUpgrade",
    validator: validate_UpdateClusterUpgrade_594299, base: "",
    url: url_UpdateClusterUpgrade_594300, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterUpgrade_594308 = ref object of OpenApiRestCall_593439
proc url_StartClusterUpgrade_594310(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterUpgrade_594309(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594311 = query.getOrDefault("timeout")
  valid_594311 = validateParameter(valid_594311, JInt, required = false,
                                 default = newJInt(60))
  if valid_594311 != nil:
    section.add "timeout", valid_594311
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594312 = query.getOrDefault("api-version")
  valid_594312 = validateParameter(valid_594312, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594312 != nil:
    section.add "api-version", valid_594312
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594314: Call_StartClusterUpgrade_594308; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  let valid = call_594314.validator(path, query, header, formData, body)
  let scheme = call_594314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594314.url(scheme.get, call_594314.host, call_594314.base,
                         call_594314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594314, url, valid)

proc call*(call_594315: Call_StartClusterUpgrade_594308;
          StartClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterUpgrade
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  var query_594316 = newJObject()
  var body_594317 = newJObject()
  add(query_594316, "timeout", newJInt(timeout))
  add(query_594316, "api-version", newJString(apiVersion))
  if StartClusterUpgradeDescription != nil:
    body_594317 = StartClusterUpgradeDescription
  result = call_594315.call(nil, query_594316, nil, nil, body_594317)

var startClusterUpgrade* = Call_StartClusterUpgrade_594308(
    name: "startClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Upgrade",
    validator: validate_StartClusterUpgrade_594309, base: "",
    url: url_StartClusterUpgrade_594310, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoList_594318 = ref object of OpenApiRestCall_593439
proc url_GetApplicationTypeInfoList_594320(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationTypeInfoList_594319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: JInt
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594321 = query.getOrDefault("timeout")
  valid_594321 = validateParameter(valid_594321, JInt, required = false,
                                 default = newJInt(60))
  if valid_594321 != nil:
    section.add "timeout", valid_594321
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594322 = query.getOrDefault("api-version")
  valid_594322 = validateParameter(valid_594322, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594322 != nil:
    section.add "api-version", valid_594322
  var valid_594323 = query.getOrDefault("ApplicationTypeDefinitionKindFilter")
  valid_594323 = validateParameter(valid_594323, JInt, required = false,
                                 default = newJInt(0))
  if valid_594323 != nil:
    section.add "ApplicationTypeDefinitionKindFilter", valid_594323
  var valid_594324 = query.getOrDefault("ContinuationToken")
  valid_594324 = validateParameter(valid_594324, JString, required = false,
                                 default = nil)
  if valid_594324 != nil:
    section.add "ContinuationToken", valid_594324
  var valid_594325 = query.getOrDefault("MaxResults")
  valid_594325 = validateParameter(valid_594325, JInt, required = false,
                                 default = newJInt(0))
  if valid_594325 != nil:
    section.add "MaxResults", valid_594325
  var valid_594326 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594326 = validateParameter(valid_594326, JBool, required = false,
                                 default = newJBool(false))
  if valid_594326 != nil:
    section.add "ExcludeApplicationParameters", valid_594326
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594327: Call_GetApplicationTypeInfoList_594318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_594327.validator(path, query, header, formData, body)
  let scheme = call_594327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594327.url(scheme.get, call_594327.host, call_594327.base,
                         call_594327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594327, url, valid)

proc call*(call_594328: Call_GetApplicationTypeInfoList_594318; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationTypeDefinitionKindFilter: int = 0;
          ContinuationToken: string = ""; MaxResults: int = 0;
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoList
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: int
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_594329 = newJObject()
  add(query_594329, "timeout", newJInt(timeout))
  add(query_594329, "api-version", newJString(apiVersion))
  add(query_594329, "ApplicationTypeDefinitionKindFilter",
      newJInt(ApplicationTypeDefinitionKindFilter))
  add(query_594329, "ContinuationToken", newJString(ContinuationToken))
  add(query_594329, "MaxResults", newJInt(MaxResults))
  add(query_594329, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594328.call(nil, query_594329, nil, nil, nil)

var getApplicationTypeInfoList* = Call_GetApplicationTypeInfoList_594318(
    name: "getApplicationTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes",
    validator: validate_GetApplicationTypeInfoList_594319, base: "",
    url: url_GetApplicationTypeInfoList_594320,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionApplicationType_594330 = ref object of OpenApiRestCall_593439
proc url_ProvisionApplicationType_594332(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionApplicationType_594331(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594333 = query.getOrDefault("timeout")
  valid_594333 = validateParameter(valid_594333, JInt, required = false,
                                 default = newJInt(60))
  if valid_594333 != nil:
    section.add "timeout", valid_594333
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594334 = query.getOrDefault("api-version")
  valid_594334 = validateParameter(valid_594334, JString, required = true,
                                 default = newJString("6.2"))
  if valid_594334 != nil:
    section.add "api-version", valid_594334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594336: Call_ProvisionApplicationType_594330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  let valid = call_594336.validator(path, query, header, formData, body)
  let scheme = call_594336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594336.url(scheme.get, call_594336.host, call_594336.base,
                         call_594336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594336, url, valid)

proc call*(call_594337: Call_ProvisionApplicationType_594330;
          ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## provisionApplicationType
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  var query_594338 = newJObject()
  var body_594339 = newJObject()
  add(query_594338, "timeout", newJInt(timeout))
  add(query_594338, "api-version", newJString(apiVersion))
  if ProvisionApplicationTypeDescriptionBaseRequiredBodyParam != nil:
    body_594339 = ProvisionApplicationTypeDescriptionBaseRequiredBodyParam
  result = call_594337.call(nil, query_594338, nil, nil, body_594339)

var provisionApplicationType* = Call_ProvisionApplicationType_594330(
    name: "provisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ApplicationTypes/$/Provision",
    validator: validate_ProvisionApplicationType_594331, base: "",
    url: url_ProvisionApplicationType_594332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoListByName_594340 = ref object of OpenApiRestCall_593439
proc url_GetApplicationTypeInfoListByName_594342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationTypeInfoListByName_594341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594357 = path.getOrDefault("applicationTypeName")
  valid_594357 = validateParameter(valid_594357, JString, required = true,
                                 default = nil)
  if valid_594357 != nil:
    section.add "applicationTypeName", valid_594357
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString
  ##                         : The version of the application type.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594358 = query.getOrDefault("timeout")
  valid_594358 = validateParameter(valid_594358, JInt, required = false,
                                 default = newJInt(60))
  if valid_594358 != nil:
    section.add "timeout", valid_594358
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594359 = query.getOrDefault("api-version")
  valid_594359 = validateParameter(valid_594359, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594359 != nil:
    section.add "api-version", valid_594359
  var valid_594360 = query.getOrDefault("ApplicationTypeVersion")
  valid_594360 = validateParameter(valid_594360, JString, required = false,
                                 default = nil)
  if valid_594360 != nil:
    section.add "ApplicationTypeVersion", valid_594360
  var valid_594361 = query.getOrDefault("ContinuationToken")
  valid_594361 = validateParameter(valid_594361, JString, required = false,
                                 default = nil)
  if valid_594361 != nil:
    section.add "ContinuationToken", valid_594361
  var valid_594362 = query.getOrDefault("MaxResults")
  valid_594362 = validateParameter(valid_594362, JInt, required = false,
                                 default = newJInt(0))
  if valid_594362 != nil:
    section.add "MaxResults", valid_594362
  var valid_594363 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594363 = validateParameter(valid_594363, JBool, required = false,
                                 default = newJBool(false))
  if valid_594363 != nil:
    section.add "ExcludeApplicationParameters", valid_594363
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594364: Call_GetApplicationTypeInfoListByName_594340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_594364.validator(path, query, header, formData, body)
  let scheme = call_594364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594364.url(scheme.get, call_594364.host, call_594364.base,
                         call_594364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594364, url, valid)

proc call*(call_594365: Call_GetApplicationTypeInfoListByName_594340;
          applicationTypeName: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationTypeVersion: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoListByName
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string
  ##                         : The version of the application type.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_594366 = newJObject()
  var query_594367 = newJObject()
  add(query_594367, "timeout", newJInt(timeout))
  add(query_594367, "api-version", newJString(apiVersion))
  add(path_594366, "applicationTypeName", newJString(applicationTypeName))
  add(query_594367, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_594367, "ContinuationToken", newJString(ContinuationToken))
  add(query_594367, "MaxResults", newJInt(MaxResults))
  add(query_594367, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594365.call(path_594366, query_594367, nil, nil, nil)

var getApplicationTypeInfoListByName* = Call_GetApplicationTypeInfoListByName_594340(
    name: "getApplicationTypeInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}",
    validator: validate_GetApplicationTypeInfoListByName_594341, base: "",
    url: url_GetApplicationTypeInfoListByName_594342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationManifest_594368 = ref object of OpenApiRestCall_593439
proc url_GetApplicationManifest_594370(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetApplicationManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationManifest_594369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response contains the application manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594371 = path.getOrDefault("applicationTypeName")
  valid_594371 = validateParameter(valid_594371, JString, required = true,
                                 default = nil)
  if valid_594371 != nil:
    section.add "applicationTypeName", valid_594371
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_594372 = query.getOrDefault("timeout")
  valid_594372 = validateParameter(valid_594372, JInt, required = false,
                                 default = newJInt(60))
  if valid_594372 != nil:
    section.add "timeout", valid_594372
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594373 = query.getOrDefault("api-version")
  valid_594373 = validateParameter(valid_594373, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594373 != nil:
    section.add "api-version", valid_594373
  var valid_594374 = query.getOrDefault("ApplicationTypeVersion")
  valid_594374 = validateParameter(valid_594374, JString, required = true,
                                 default = nil)
  if valid_594374 != nil:
    section.add "ApplicationTypeVersion", valid_594374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594375: Call_GetApplicationManifest_594368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response contains the application manifest XML as a string.
  ## 
  let valid = call_594375.validator(path, query, header, formData, body)
  let scheme = call_594375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594375.url(scheme.get, call_594375.host, call_594375.base,
                         call_594375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594375, url, valid)

proc call*(call_594376: Call_GetApplicationManifest_594368;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationManifest
  ## The response contains the application manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_594377 = newJObject()
  var query_594378 = newJObject()
  add(query_594378, "timeout", newJInt(timeout))
  add(query_594378, "api-version", newJString(apiVersion))
  add(path_594377, "applicationTypeName", newJString(applicationTypeName))
  add(query_594378, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_594376.call(path_594377, query_594378, nil, nil, nil)

var getApplicationManifest* = Call_GetApplicationManifest_594368(
    name: "getApplicationManifest", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest",
    validator: validate_GetApplicationManifest_594369, base: "",
    url: url_GetApplicationManifest_594370, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceManifest_594379 = ref object of OpenApiRestCall_593439
proc url_GetServiceManifest_594381(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceManifest_594380(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594382 = path.getOrDefault("applicationTypeName")
  valid_594382 = validateParameter(valid_594382, JString, required = true,
                                 default = nil)
  if valid_594382 != nil:
    section.add "applicationTypeName", valid_594382
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_594383 = query.getOrDefault("timeout")
  valid_594383 = validateParameter(valid_594383, JInt, required = false,
                                 default = newJInt(60))
  if valid_594383 != nil:
    section.add "timeout", valid_594383
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594384 = query.getOrDefault("api-version")
  valid_594384 = validateParameter(valid_594384, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594384 != nil:
    section.add "api-version", valid_594384
  var valid_594385 = query.getOrDefault("ApplicationTypeVersion")
  valid_594385 = validateParameter(valid_594385, JString, required = true,
                                 default = nil)
  if valid_594385 != nil:
    section.add "ApplicationTypeVersion", valid_594385
  var valid_594386 = query.getOrDefault("ServiceManifestName")
  valid_594386 = validateParameter(valid_594386, JString, required = true,
                                 default = nil)
  if valid_594386 != nil:
    section.add "ServiceManifestName", valid_594386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594387: Call_GetServiceManifest_594379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  let valid = call_594387.validator(path, query, header, formData, body)
  let scheme = call_594387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594387.url(scheme.get, call_594387.host, call_594387.base,
                         call_594387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594387, url, valid)

proc call*(call_594388: Call_GetServiceManifest_594379;
          applicationTypeName: string; ApplicationTypeVersion: string;
          ServiceManifestName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceManifest
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  var path_594389 = newJObject()
  var query_594390 = newJObject()
  add(query_594390, "timeout", newJInt(timeout))
  add(query_594390, "api-version", newJString(apiVersion))
  add(path_594389, "applicationTypeName", newJString(applicationTypeName))
  add(query_594390, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_594390, "ServiceManifestName", newJString(ServiceManifestName))
  result = call_594388.call(path_594389, query_594390, nil, nil, nil)

var getServiceManifest* = Call_GetServiceManifest_594379(
    name: "getServiceManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest",
    validator: validate_GetServiceManifest_594380, base: "",
    url: url_GetServiceManifest_594381, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoList_594391 = ref object of OpenApiRestCall_593439
proc url_GetServiceTypeInfoList_594393(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoList_594392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594394 = path.getOrDefault("applicationTypeName")
  valid_594394 = validateParameter(valid_594394, JString, required = true,
                                 default = nil)
  if valid_594394 != nil:
    section.add "applicationTypeName", valid_594394
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_594395 = query.getOrDefault("timeout")
  valid_594395 = validateParameter(valid_594395, JInt, required = false,
                                 default = newJInt(60))
  if valid_594395 != nil:
    section.add "timeout", valid_594395
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594396 = query.getOrDefault("api-version")
  valid_594396 = validateParameter(valid_594396, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594396 != nil:
    section.add "api-version", valid_594396
  var valid_594397 = query.getOrDefault("ApplicationTypeVersion")
  valid_594397 = validateParameter(valid_594397, JString, required = true,
                                 default = nil)
  if valid_594397 != nil:
    section.add "ApplicationTypeVersion", valid_594397
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594398: Call_GetServiceTypeInfoList_594391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  let valid = call_594398.validator(path, query, header, formData, body)
  let scheme = call_594398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594398.url(scheme.get, call_594398.host, call_594398.base,
                         call_594398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594398, url, valid)

proc call*(call_594399: Call_GetServiceTypeInfoList_594391;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoList
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_594400 = newJObject()
  var query_594401 = newJObject()
  add(query_594401, "timeout", newJInt(timeout))
  add(query_594401, "api-version", newJString(apiVersion))
  add(path_594400, "applicationTypeName", newJString(applicationTypeName))
  add(query_594401, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_594399.call(path_594400, query_594401, nil, nil, nil)

var getServiceTypeInfoList* = Call_GetServiceTypeInfoList_594391(
    name: "getServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes",
    validator: validate_GetServiceTypeInfoList_594392, base: "",
    url: url_GetServiceTypeInfoList_594393, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoByName_594402 = ref object of OpenApiRestCall_593439
proc url_GetServiceTypeInfoByName_594404(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoByName_594403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_594405 = path.getOrDefault("serviceTypeName")
  valid_594405 = validateParameter(valid_594405, JString, required = true,
                                 default = nil)
  if valid_594405 != nil:
    section.add "serviceTypeName", valid_594405
  var valid_594406 = path.getOrDefault("applicationTypeName")
  valid_594406 = validateParameter(valid_594406, JString, required = true,
                                 default = nil)
  if valid_594406 != nil:
    section.add "applicationTypeName", valid_594406
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_594407 = query.getOrDefault("timeout")
  valid_594407 = validateParameter(valid_594407, JInt, required = false,
                                 default = newJInt(60))
  if valid_594407 != nil:
    section.add "timeout", valid_594407
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594408 = query.getOrDefault("api-version")
  valid_594408 = validateParameter(valid_594408, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594408 != nil:
    section.add "api-version", valid_594408
  var valid_594409 = query.getOrDefault("ApplicationTypeVersion")
  valid_594409 = validateParameter(valid_594409, JString, required = true,
                                 default = nil)
  if valid_594409 != nil:
    section.add "ApplicationTypeVersion", valid_594409
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594410: Call_GetServiceTypeInfoByName_594402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  let valid = call_594410.validator(path, query, header, formData, body)
  let scheme = call_594410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594410.url(scheme.get, call_594410.host, call_594410.base,
                         call_594410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594410, url, valid)

proc call*(call_594411: Call_GetServiceTypeInfoByName_594402;
          serviceTypeName: string; applicationTypeName: string;
          ApplicationTypeVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoByName
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_594412 = newJObject()
  var query_594413 = newJObject()
  add(query_594413, "timeout", newJInt(timeout))
  add(path_594412, "serviceTypeName", newJString(serviceTypeName))
  add(query_594413, "api-version", newJString(apiVersion))
  add(path_594412, "applicationTypeName", newJString(applicationTypeName))
  add(query_594413, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_594411.call(path_594412, query_594413, nil, nil, nil)

var getServiceTypeInfoByName* = Call_GetServiceTypeInfoByName_594402(
    name: "getServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetServiceTypeInfoByName_594403, base: "",
    url: url_GetServiceTypeInfoByName_594404, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionApplicationType_594414 = ref object of OpenApiRestCall_593439
proc url_UnprovisionApplicationType_594416(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/Unprovision")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UnprovisionApplicationType_594415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594417 = path.getOrDefault("applicationTypeName")
  valid_594417 = validateParameter(valid_594417, JString, required = true,
                                 default = nil)
  if valid_594417 != nil:
    section.add "applicationTypeName", valid_594417
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594418 = query.getOrDefault("timeout")
  valid_594418 = validateParameter(valid_594418, JInt, required = false,
                                 default = newJInt(60))
  if valid_594418 != nil:
    section.add "timeout", valid_594418
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594419 = query.getOrDefault("api-version")
  valid_594419 = validateParameter(valid_594419, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594419 != nil:
    section.add "api-version", valid_594419
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594421: Call_UnprovisionApplicationType_594414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  let valid = call_594421.validator(path, query, header, formData, body)
  let scheme = call_594421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594421.url(scheme.get, call_594421.host, call_594421.base,
                         call_594421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594421, url, valid)

proc call*(call_594422: Call_UnprovisionApplicationType_594414;
          applicationTypeName: string;
          UnprovisionApplicationTypeDescriptionInfo: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionApplicationType
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  var path_594423 = newJObject()
  var query_594424 = newJObject()
  var body_594425 = newJObject()
  add(query_594424, "timeout", newJInt(timeout))
  add(query_594424, "api-version", newJString(apiVersion))
  add(path_594423, "applicationTypeName", newJString(applicationTypeName))
  if UnprovisionApplicationTypeDescriptionInfo != nil:
    body_594425 = UnprovisionApplicationTypeDescriptionInfo
  result = call_594422.call(path_594423, query_594424, nil, nil, body_594425)

var unprovisionApplicationType* = Call_UnprovisionApplicationType_594414(
    name: "unprovisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/Unprovision",
    validator: validate_UnprovisionApplicationType_594415, base: "",
    url: url_UnprovisionApplicationType_594416,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfoList_594426 = ref object of OpenApiRestCall_593439
proc url_GetApplicationInfoList_594428(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationInfoList_594427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: JInt
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: JString
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594429 = query.getOrDefault("timeout")
  valid_594429 = validateParameter(valid_594429, JInt, required = false,
                                 default = newJInt(60))
  if valid_594429 != nil:
    section.add "timeout", valid_594429
  var valid_594430 = query.getOrDefault("ApplicationDefinitionKindFilter")
  valid_594430 = validateParameter(valid_594430, JInt, required = false,
                                 default = newJInt(0))
  if valid_594430 != nil:
    section.add "ApplicationDefinitionKindFilter", valid_594430
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594431 = query.getOrDefault("api-version")
  valid_594431 = validateParameter(valid_594431, JString, required = true,
                                 default = newJString("6.1"))
  if valid_594431 != nil:
    section.add "api-version", valid_594431
  var valid_594432 = query.getOrDefault("ApplicationTypeName")
  valid_594432 = validateParameter(valid_594432, JString, required = false,
                                 default = nil)
  if valid_594432 != nil:
    section.add "ApplicationTypeName", valid_594432
  var valid_594433 = query.getOrDefault("ContinuationToken")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "ContinuationToken", valid_594433
  var valid_594434 = query.getOrDefault("MaxResults")
  valid_594434 = validateParameter(valid_594434, JInt, required = false,
                                 default = newJInt(0))
  if valid_594434 != nil:
    section.add "MaxResults", valid_594434
  var valid_594435 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594435 = validateParameter(valid_594435, JBool, required = false,
                                 default = newJBool(false))
  if valid_594435 != nil:
    section.add "ExcludeApplicationParameters", valid_594435
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594436: Call_GetApplicationInfoList_594426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  let valid = call_594436.validator(path, query, header, formData, body)
  let scheme = call_594436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594436.url(scheme.get, call_594436.host, call_594436.base,
                         call_594436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594436, url, valid)

proc call*(call_594437: Call_GetApplicationInfoList_594426; timeout: int = 60;
          ApplicationDefinitionKindFilter: int = 0; apiVersion: string = "6.1";
          ApplicationTypeName: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfoList
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: int
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: string
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_594438 = newJObject()
  add(query_594438, "timeout", newJInt(timeout))
  add(query_594438, "ApplicationDefinitionKindFilter",
      newJInt(ApplicationDefinitionKindFilter))
  add(query_594438, "api-version", newJString(apiVersion))
  add(query_594438, "ApplicationTypeName", newJString(ApplicationTypeName))
  add(query_594438, "ContinuationToken", newJString(ContinuationToken))
  add(query_594438, "MaxResults", newJInt(MaxResults))
  add(query_594438, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594437.call(nil, query_594438, nil, nil, nil)

var getApplicationInfoList* = Call_GetApplicationInfoList_594426(
    name: "getApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications",
    validator: validate_GetApplicationInfoList_594427, base: "",
    url: url_GetApplicationInfoList_594428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateApplication_594439 = ref object of OpenApiRestCall_593439
proc url_CreateApplication_594441(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateApplication_594440(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a Service Fabric application using the specified description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594442 = query.getOrDefault("timeout")
  valid_594442 = validateParameter(valid_594442, JInt, required = false,
                                 default = newJInt(60))
  if valid_594442 != nil:
    section.add "timeout", valid_594442
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594443 = query.getOrDefault("api-version")
  valid_594443 = validateParameter(valid_594443, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594443 != nil:
    section.add "api-version", valid_594443
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594445: Call_CreateApplication_594439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric application using the specified description.
  ## 
  let valid = call_594445.validator(path, query, header, formData, body)
  let scheme = call_594445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594445.url(scheme.get, call_594445.host, call_594445.base,
                         call_594445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594445, url, valid)

proc call*(call_594446: Call_CreateApplication_594439;
          ApplicationDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## createApplication
  ## Creates a Service Fabric application using the specified description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  var query_594447 = newJObject()
  var body_594448 = newJObject()
  add(query_594447, "timeout", newJInt(timeout))
  add(query_594447, "api-version", newJString(apiVersion))
  if ApplicationDescription != nil:
    body_594448 = ApplicationDescription
  result = call_594446.call(nil, query_594447, nil, nil, body_594448)

var createApplication* = Call_CreateApplication_594439(name: "createApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/$/Create", validator: validate_CreateApplication_594440,
    base: "", url: url_CreateApplication_594441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfo_594449 = ref object of OpenApiRestCall_593439
proc url_GetApplicationInfo_594451(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationInfo_594450(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594452 = path.getOrDefault("applicationId")
  valid_594452 = validateParameter(valid_594452, JString, required = true,
                                 default = nil)
  if valid_594452 != nil:
    section.add "applicationId", valid_594452
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594453 = query.getOrDefault("timeout")
  valid_594453 = validateParameter(valid_594453, JInt, required = false,
                                 default = newJInt(60))
  if valid_594453 != nil:
    section.add "timeout", valid_594453
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594454 = query.getOrDefault("api-version")
  valid_594454 = validateParameter(valid_594454, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594454 != nil:
    section.add "api-version", valid_594454
  var valid_594455 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594455 = validateParameter(valid_594455, JBool, required = false,
                                 default = newJBool(false))
  if valid_594455 != nil:
    section.add "ExcludeApplicationParameters", valid_594455
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594456: Call_GetApplicationInfo_594449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  let valid = call_594456.validator(path, query, header, formData, body)
  let scheme = call_594456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594456.url(scheme.get, call_594456.host, call_594456.base,
                         call_594456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594456, url, valid)

proc call*(call_594457: Call_GetApplicationInfo_594449; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfo
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_594458 = newJObject()
  var query_594459 = newJObject()
  add(query_594459, "timeout", newJInt(timeout))
  add(query_594459, "api-version", newJString(apiVersion))
  add(path_594458, "applicationId", newJString(applicationId))
  add(query_594459, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594457.call(path_594458, query_594459, nil, nil, nil)

var getApplicationInfo* = Call_GetApplicationInfo_594449(
    name: "getApplicationInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}",
    validator: validate_GetApplicationInfo_594450, base: "",
    url: url_GetApplicationInfo_594451, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteApplication_594460 = ref object of OpenApiRestCall_593439
proc url_DeleteApplication_594462(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteApplication_594461(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594463 = path.getOrDefault("applicationId")
  valid_594463 = validateParameter(valid_594463, JString, required = true,
                                 default = nil)
  if valid_594463 != nil:
    section.add "applicationId", valid_594463
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_594464 = query.getOrDefault("timeout")
  valid_594464 = validateParameter(valid_594464, JInt, required = false,
                                 default = newJInt(60))
  if valid_594464 != nil:
    section.add "timeout", valid_594464
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594465 = query.getOrDefault("api-version")
  valid_594465 = validateParameter(valid_594465, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594465 != nil:
    section.add "api-version", valid_594465
  var valid_594466 = query.getOrDefault("ForceRemove")
  valid_594466 = validateParameter(valid_594466, JBool, required = false, default = nil)
  if valid_594466 != nil:
    section.add "ForceRemove", valid_594466
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594467: Call_DeleteApplication_594460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  let valid = call_594467.validator(path, query, header, formData, body)
  let scheme = call_594467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594467.url(scheme.get, call_594467.host, call_594467.base,
                         call_594467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594467, url, valid)

proc call*(call_594468: Call_DeleteApplication_594460; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteApplication
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594469 = newJObject()
  var query_594470 = newJObject()
  add(query_594470, "timeout", newJInt(timeout))
  add(query_594470, "api-version", newJString(apiVersion))
  add(query_594470, "ForceRemove", newJBool(ForceRemove))
  add(path_594469, "applicationId", newJString(applicationId))
  result = call_594468.call(path_594469, query_594470, nil, nil, nil)

var deleteApplication* = Call_DeleteApplication_594460(name: "deleteApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/Delete",
    validator: validate_DeleteApplication_594461, base: "",
    url: url_DeleteApplication_594462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableApplicationBackup_594471 = ref object of OpenApiRestCall_593439
proc url_DisableApplicationBackup_594473(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableApplicationBackup_594472(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594474 = path.getOrDefault("applicationId")
  valid_594474 = validateParameter(valid_594474, JString, required = true,
                                 default = nil)
  if valid_594474 != nil:
    section.add "applicationId", valid_594474
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594475 = query.getOrDefault("timeout")
  valid_594475 = validateParameter(valid_594475, JInt, required = false,
                                 default = newJInt(60))
  if valid_594475 != nil:
    section.add "timeout", valid_594475
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594476 = query.getOrDefault("api-version")
  valid_594476 = validateParameter(valid_594476, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594476 != nil:
    section.add "api-version", valid_594476
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594478: Call_DisableApplicationBackup_594471; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  let valid = call_594478.validator(path, query, header, formData, body)
  let scheme = call_594478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594478.url(scheme.get, call_594478.host, call_594478.base,
                         call_594478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594478, url, valid)

proc call*(call_594479: Call_DisableApplicationBackup_594471;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableApplicationBackup
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594480 = newJObject()
  var query_594481 = newJObject()
  var body_594482 = newJObject()
  add(query_594481, "timeout", newJInt(timeout))
  add(query_594481, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_594482 = DisableBackupDescription
  add(path_594480, "applicationId", newJString(applicationId))
  result = call_594479.call(path_594480, query_594481, nil, nil, body_594482)

var disableApplicationBackup* = Call_DisableApplicationBackup_594471(
    name: "disableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/DisableBackup",
    validator: validate_DisableApplicationBackup_594472, base: "",
    url: url_DisableApplicationBackup_594473, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableApplicationBackup_594483 = ref object of OpenApiRestCall_593439
proc url_EnableApplicationBackup_594485(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableApplicationBackup_594484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594486 = path.getOrDefault("applicationId")
  valid_594486 = validateParameter(valid_594486, JString, required = true,
                                 default = nil)
  if valid_594486 != nil:
    section.add "applicationId", valid_594486
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594487 = query.getOrDefault("timeout")
  valid_594487 = validateParameter(valid_594487, JInt, required = false,
                                 default = newJInt(60))
  if valid_594487 != nil:
    section.add "timeout", valid_594487
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594488 = query.getOrDefault("api-version")
  valid_594488 = validateParameter(valid_594488, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594488 != nil:
    section.add "api-version", valid_594488
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594490: Call_EnableApplicationBackup_594483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_594490.validator(path, query, header, formData, body)
  let scheme = call_594490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594490.url(scheme.get, call_594490.host, call_594490.base,
                         call_594490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594490, url, valid)

proc call*(call_594491: Call_EnableApplicationBackup_594483;
          EnableBackupDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## enableApplicationBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594492 = newJObject()
  var query_594493 = newJObject()
  var body_594494 = newJObject()
  add(query_594493, "timeout", newJInt(timeout))
  add(query_594493, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_594494 = EnableBackupDescription
  add(path_594492, "applicationId", newJString(applicationId))
  result = call_594491.call(path_594492, query_594493, nil, nil, body_594494)

var enableApplicationBackup* = Call_EnableApplicationBackup_594483(
    name: "enableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/EnableBackup",
    validator: validate_EnableApplicationBackup_594484, base: "",
    url: url_EnableApplicationBackup_594485, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupConfigurationInfo_594495 = ref object of OpenApiRestCall_593439
proc url_GetApplicationBackupConfigurationInfo_594497(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupConfigurationInfo_594496(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594498 = path.getOrDefault("applicationId")
  valid_594498 = validateParameter(valid_594498, JString, required = true,
                                 default = nil)
  if valid_594498 != nil:
    section.add "applicationId", valid_594498
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594499 = query.getOrDefault("timeout")
  valid_594499 = validateParameter(valid_594499, JInt, required = false,
                                 default = newJInt(60))
  if valid_594499 != nil:
    section.add "timeout", valid_594499
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594500 = query.getOrDefault("api-version")
  valid_594500 = validateParameter(valid_594500, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594500 != nil:
    section.add "api-version", valid_594500
  var valid_594501 = query.getOrDefault("ContinuationToken")
  valid_594501 = validateParameter(valid_594501, JString, required = false,
                                 default = nil)
  if valid_594501 != nil:
    section.add "ContinuationToken", valid_594501
  var valid_594502 = query.getOrDefault("MaxResults")
  valid_594502 = validateParameter(valid_594502, JInt, required = false,
                                 default = newJInt(0))
  if valid_594502 != nil:
    section.add "MaxResults", valid_594502
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594503: Call_GetApplicationBackupConfigurationInfo_594495;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  let valid = call_594503.validator(path, query, header, formData, body)
  let scheme = call_594503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594503.url(scheme.get, call_594503.host, call_594503.base,
                         call_594503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594503, url, valid)

proc call*(call_594504: Call_GetApplicationBackupConfigurationInfo_594495;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getApplicationBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_594505 = newJObject()
  var query_594506 = newJObject()
  add(query_594506, "timeout", newJInt(timeout))
  add(query_594506, "api-version", newJString(apiVersion))
  add(path_594505, "applicationId", newJString(applicationId))
  add(query_594506, "ContinuationToken", newJString(ContinuationToken))
  add(query_594506, "MaxResults", newJInt(MaxResults))
  result = call_594504.call(path_594505, query_594506, nil, nil, nil)

var getApplicationBackupConfigurationInfo* = Call_GetApplicationBackupConfigurationInfo_594495(
    name: "getApplicationBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackupConfigurationInfo",
    validator: validate_GetApplicationBackupConfigurationInfo_594496, base: "",
    url: url_GetApplicationBackupConfigurationInfo_594497,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupList_594507 = ref object of OpenApiRestCall_593439
proc url_GetApplicationBackupList_594509(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupList_594508(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594510 = path.getOrDefault("applicationId")
  valid_594510 = validateParameter(valid_594510, JString, required = true,
                                 default = nil)
  if valid_594510 != nil:
    section.add "applicationId", valid_594510
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594511 = query.getOrDefault("timeout")
  valid_594511 = validateParameter(valid_594511, JInt, required = false,
                                 default = newJInt(60))
  if valid_594511 != nil:
    section.add "timeout", valid_594511
  var valid_594512 = query.getOrDefault("Latest")
  valid_594512 = validateParameter(valid_594512, JBool, required = false,
                                 default = newJBool(false))
  if valid_594512 != nil:
    section.add "Latest", valid_594512
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594513 = query.getOrDefault("api-version")
  valid_594513 = validateParameter(valid_594513, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594513 != nil:
    section.add "api-version", valid_594513
  var valid_594514 = query.getOrDefault("StartDateTimeFilter")
  valid_594514 = validateParameter(valid_594514, JString, required = false,
                                 default = nil)
  if valid_594514 != nil:
    section.add "StartDateTimeFilter", valid_594514
  var valid_594515 = query.getOrDefault("EndDateTimeFilter")
  valid_594515 = validateParameter(valid_594515, JString, required = false,
                                 default = nil)
  if valid_594515 != nil:
    section.add "EndDateTimeFilter", valid_594515
  var valid_594516 = query.getOrDefault("ContinuationToken")
  valid_594516 = validateParameter(valid_594516, JString, required = false,
                                 default = nil)
  if valid_594516 != nil:
    section.add "ContinuationToken", valid_594516
  var valid_594517 = query.getOrDefault("MaxResults")
  valid_594517 = validateParameter(valid_594517, JInt, required = false,
                                 default = newJInt(0))
  if valid_594517 != nil:
    section.add "MaxResults", valid_594517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594518: Call_GetApplicationBackupList_594507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_594518.validator(path, query, header, formData, body)
  let scheme = call_594518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594518.url(scheme.get, call_594518.host, call_594518.base,
                         call_594518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594518, url, valid)

proc call*(call_594519: Call_GetApplicationBackupList_594507;
          applicationId: string; timeout: int = 60; Latest: bool = false;
          apiVersion: string = "6.4"; StartDateTimeFilter: string = "";
          EndDateTimeFilter: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getApplicationBackupList
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_594520 = newJObject()
  var query_594521 = newJObject()
  add(query_594521, "timeout", newJInt(timeout))
  add(query_594521, "Latest", newJBool(Latest))
  add(query_594521, "api-version", newJString(apiVersion))
  add(query_594521, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_594521, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_594520, "applicationId", newJString(applicationId))
  add(query_594521, "ContinuationToken", newJString(ContinuationToken))
  add(query_594521, "MaxResults", newJInt(MaxResults))
  result = call_594519.call(path_594520, query_594521, nil, nil, nil)

var getApplicationBackupList* = Call_GetApplicationBackupList_594507(
    name: "getApplicationBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackups",
    validator: validate_GetApplicationBackupList_594508, base: "",
    url: url_GetApplicationBackupList_594509, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealthUsingPolicy_594536 = ref object of OpenApiRestCall_593439
proc url_GetApplicationHealthUsingPolicy_594538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealthUsingPolicy_594537(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594539 = path.getOrDefault("applicationId")
  valid_594539 = validateParameter(valid_594539, JString, required = true,
                                 default = nil)
  if valid_594539 != nil:
    section.add "applicationId", valid_594539
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594540 = query.getOrDefault("timeout")
  valid_594540 = validateParameter(valid_594540, JInt, required = false,
                                 default = newJInt(60))
  if valid_594540 != nil:
    section.add "timeout", valid_594540
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594541 = query.getOrDefault("api-version")
  valid_594541 = validateParameter(valid_594541, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594541 != nil:
    section.add "api-version", valid_594541
  var valid_594542 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594542 = validateParameter(valid_594542, JBool, required = false,
                                 default = newJBool(false))
  if valid_594542 != nil:
    section.add "ExcludeHealthStatistics", valid_594542
  var valid_594543 = query.getOrDefault("EventsHealthStateFilter")
  valid_594543 = validateParameter(valid_594543, JInt, required = false,
                                 default = newJInt(0))
  if valid_594543 != nil:
    section.add "EventsHealthStateFilter", valid_594543
  var valid_594544 = query.getOrDefault("ServicesHealthStateFilter")
  valid_594544 = validateParameter(valid_594544, JInt, required = false,
                                 default = newJInt(0))
  if valid_594544 != nil:
    section.add "ServicesHealthStateFilter", valid_594544
  var valid_594545 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_594545 = validateParameter(valid_594545, JInt, required = false,
                                 default = newJInt(0))
  if valid_594545 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_594545
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594547: Call_GetApplicationHealthUsingPolicy_594536;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_594547.validator(path, query, header, formData, body)
  let scheme = call_594547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594547.url(scheme.get, call_594547.host, call_594547.base,
                         call_594547.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594547, url, valid)

proc call*(call_594548: Call_GetApplicationHealthUsingPolicy_594536;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealthUsingPolicy
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_594549 = newJObject()
  var query_594550 = newJObject()
  var body_594551 = newJObject()
  add(query_594550, "timeout", newJInt(timeout))
  add(query_594550, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_594551 = ApplicationHealthPolicy
  add(query_594550, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594550, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_594549, "applicationId", newJString(applicationId))
  add(query_594550, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_594550, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_594548.call(path_594549, query_594550, nil, nil, body_594551)

var getApplicationHealthUsingPolicy* = Call_GetApplicationHealthUsingPolicy_594536(
    name: "getApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealthUsingPolicy_594537, base: "",
    url: url_GetApplicationHealthUsingPolicy_594538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealth_594522 = ref object of OpenApiRestCall_593439
proc url_GetApplicationHealth_594524(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealth_594523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594525 = path.getOrDefault("applicationId")
  valid_594525 = validateParameter(valid_594525, JString, required = true,
                                 default = nil)
  if valid_594525 != nil:
    section.add "applicationId", valid_594525
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594526 = query.getOrDefault("timeout")
  valid_594526 = validateParameter(valid_594526, JInt, required = false,
                                 default = newJInt(60))
  if valid_594526 != nil:
    section.add "timeout", valid_594526
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594527 = query.getOrDefault("api-version")
  valid_594527 = validateParameter(valid_594527, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594527 != nil:
    section.add "api-version", valid_594527
  var valid_594528 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594528 = validateParameter(valid_594528, JBool, required = false,
                                 default = newJBool(false))
  if valid_594528 != nil:
    section.add "ExcludeHealthStatistics", valid_594528
  var valid_594529 = query.getOrDefault("EventsHealthStateFilter")
  valid_594529 = validateParameter(valid_594529, JInt, required = false,
                                 default = newJInt(0))
  if valid_594529 != nil:
    section.add "EventsHealthStateFilter", valid_594529
  var valid_594530 = query.getOrDefault("ServicesHealthStateFilter")
  valid_594530 = validateParameter(valid_594530, JInt, required = false,
                                 default = newJInt(0))
  if valid_594530 != nil:
    section.add "ServicesHealthStateFilter", valid_594530
  var valid_594531 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_594531 = validateParameter(valid_594531, JInt, required = false,
                                 default = newJInt(0))
  if valid_594531 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_594531
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594532: Call_GetApplicationHealth_594522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  let valid = call_594532.validator(path, query, header, formData, body)
  let scheme = call_594532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594532.url(scheme.get, call_594532.host, call_594532.base,
                         call_594532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594532, url, valid)

proc call*(call_594533: Call_GetApplicationHealth_594522; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealth
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_594534 = newJObject()
  var query_594535 = newJObject()
  add(query_594535, "timeout", newJInt(timeout))
  add(query_594535, "api-version", newJString(apiVersion))
  add(query_594535, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594535, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_594534, "applicationId", newJString(applicationId))
  add(query_594535, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_594535, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_594533.call(path_594534, query_594535, nil, nil, nil)

var getApplicationHealth* = Call_GetApplicationHealth_594522(
    name: "getApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealth_594523, base: "",
    url: url_GetApplicationHealth_594524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationLoadInfo_594552 = ref object of OpenApiRestCall_593439
proc url_GetApplicationLoadInfo_594554(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationLoadInfo_594553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594555 = path.getOrDefault("applicationId")
  valid_594555 = validateParameter(valid_594555, JString, required = true,
                                 default = nil)
  if valid_594555 != nil:
    section.add "applicationId", valid_594555
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594556 = query.getOrDefault("timeout")
  valid_594556 = validateParameter(valid_594556, JInt, required = false,
                                 default = newJInt(60))
  if valid_594556 != nil:
    section.add "timeout", valid_594556
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594557 = query.getOrDefault("api-version")
  valid_594557 = validateParameter(valid_594557, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594557 != nil:
    section.add "api-version", valid_594557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594558: Call_GetApplicationLoadInfo_594552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  let valid = call_594558.validator(path, query, header, formData, body)
  let scheme = call_594558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594558.url(scheme.get, call_594558.host, call_594558.base,
                         call_594558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594558, url, valid)

proc call*(call_594559: Call_GetApplicationLoadInfo_594552; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationLoadInfo
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594560 = newJObject()
  var query_594561 = newJObject()
  add(query_594561, "timeout", newJInt(timeout))
  add(query_594561, "api-version", newJString(apiVersion))
  add(path_594560, "applicationId", newJString(applicationId))
  result = call_594559.call(path_594560, query_594561, nil, nil, nil)

var getApplicationLoadInfo* = Call_GetApplicationLoadInfo_594552(
    name: "getApplicationLoadInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetLoadInformation",
    validator: validate_GetApplicationLoadInfo_594553, base: "",
    url: url_GetApplicationLoadInfo_594554, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfoList_594562 = ref object of OpenApiRestCall_593439
proc url_GetServiceInfoList_594564(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfoList_594563(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594565 = path.getOrDefault("applicationId")
  valid_594565 = validateParameter(valid_594565, JString, required = true,
                                 default = nil)
  if valid_594565 != nil:
    section.add "applicationId", valid_594565
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: JString
  ##                  : The service type name used to filter the services to query for.
  section = newJObject()
  var valid_594566 = query.getOrDefault("timeout")
  valid_594566 = validateParameter(valid_594566, JInt, required = false,
                                 default = newJInt(60))
  if valid_594566 != nil:
    section.add "timeout", valid_594566
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594567 = query.getOrDefault("api-version")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594567 != nil:
    section.add "api-version", valid_594567
  var valid_594568 = query.getOrDefault("ContinuationToken")
  valid_594568 = validateParameter(valid_594568, JString, required = false,
                                 default = nil)
  if valid_594568 != nil:
    section.add "ContinuationToken", valid_594568
  var valid_594569 = query.getOrDefault("ServiceTypeName")
  valid_594569 = validateParameter(valid_594569, JString, required = false,
                                 default = nil)
  if valid_594569 != nil:
    section.add "ServiceTypeName", valid_594569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594570: Call_GetServiceInfoList_594562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  let valid = call_594570.validator(path, query, header, formData, body)
  let scheme = call_594570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594570.url(scheme.get, call_594570.host, call_594570.base,
                         call_594570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594570, url, valid)

proc call*(call_594571: Call_GetServiceInfoList_594562; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          ServiceTypeName: string = ""): Recallable =
  ## getServiceInfoList
  ## Returns the information about all services belonging to the application specified by the application ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: string
  ##                  : The service type name used to filter the services to query for.
  var path_594572 = newJObject()
  var query_594573 = newJObject()
  add(query_594573, "timeout", newJInt(timeout))
  add(query_594573, "api-version", newJString(apiVersion))
  add(path_594572, "applicationId", newJString(applicationId))
  add(query_594573, "ContinuationToken", newJString(ContinuationToken))
  add(query_594573, "ServiceTypeName", newJString(ServiceTypeName))
  result = call_594571.call(path_594572, query_594573, nil, nil, nil)

var getServiceInfoList* = Call_GetServiceInfoList_594562(
    name: "getServiceInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices",
    validator: validate_GetServiceInfoList_594563, base: "",
    url: url_GetServiceInfoList_594564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateService_594574 = ref object of OpenApiRestCall_593439
proc url_CreateService_594576(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/$/Create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateService_594575(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594577 = path.getOrDefault("applicationId")
  valid_594577 = validateParameter(valid_594577, JString, required = true,
                                 default = nil)
  if valid_594577 != nil:
    section.add "applicationId", valid_594577
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594578 = query.getOrDefault("timeout")
  valid_594578 = validateParameter(valid_594578, JInt, required = false,
                                 default = newJInt(60))
  if valid_594578 != nil:
    section.add "timeout", valid_594578
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594579 = query.getOrDefault("api-version")
  valid_594579 = validateParameter(valid_594579, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594579 != nil:
    section.add "api-version", valid_594579
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594581: Call_CreateService_594574; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  let valid = call_594581.validator(path, query, header, formData, body)
  let scheme = call_594581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594581.url(scheme.get, call_594581.host, call_594581.base,
                         call_594581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594581, url, valid)

proc call*(call_594582: Call_CreateService_594574; applicationId: string;
          ServiceDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createService
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  var path_594583 = newJObject()
  var query_594584 = newJObject()
  var body_594585 = newJObject()
  add(query_594584, "timeout", newJInt(timeout))
  add(query_594584, "api-version", newJString(apiVersion))
  add(path_594583, "applicationId", newJString(applicationId))
  if ServiceDescription != nil:
    body_594585 = ServiceDescription
  result = call_594582.call(path_594583, query_594584, nil, nil, body_594585)

var createService* = Call_CreateService_594574(name: "createService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/Create",
    validator: validate_CreateService_594575, base: "", url: url_CreateService_594576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateServiceFromTemplate_594586 = ref object of OpenApiRestCall_593439
proc url_CreateServiceFromTemplate_594588(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetServices/$/CreateFromTemplate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateServiceFromTemplate_594587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594589 = path.getOrDefault("applicationId")
  valid_594589 = validateParameter(valid_594589, JString, required = true,
                                 default = nil)
  if valid_594589 != nil:
    section.add "applicationId", valid_594589
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594590 = query.getOrDefault("timeout")
  valid_594590 = validateParameter(valid_594590, JInt, required = false,
                                 default = newJInt(60))
  if valid_594590 != nil:
    section.add "timeout", valid_594590
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594591 = query.getOrDefault("api-version")
  valid_594591 = validateParameter(valid_594591, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594591 != nil:
    section.add "api-version", valid_594591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594593: Call_CreateServiceFromTemplate_594586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  let valid = call_594593.validator(path, query, header, formData, body)
  let scheme = call_594593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594593.url(scheme.get, call_594593.host, call_594593.base,
                         call_594593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594593, url, valid)

proc call*(call_594594: Call_CreateServiceFromTemplate_594586;
          ServiceFromTemplateDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createServiceFromTemplate
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594595 = newJObject()
  var query_594596 = newJObject()
  var body_594597 = newJObject()
  add(query_594596, "timeout", newJInt(timeout))
  add(query_594596, "api-version", newJString(apiVersion))
  if ServiceFromTemplateDescription != nil:
    body_594597 = ServiceFromTemplateDescription
  add(path_594595, "applicationId", newJString(applicationId))
  result = call_594594.call(path_594595, query_594596, nil, nil, body_594597)

var createServiceFromTemplate* = Call_CreateServiceFromTemplate_594586(
    name: "createServiceFromTemplate", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate",
    validator: validate_CreateServiceFromTemplate_594587, base: "",
    url: url_CreateServiceFromTemplate_594588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfo_594598 = ref object of OpenApiRestCall_593439
proc url_GetServiceInfo_594600(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/"),
               (kind: VariableSegment, value: "serviceId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfo_594599(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594601 = path.getOrDefault("applicationId")
  valid_594601 = validateParameter(valid_594601, JString, required = true,
                                 default = nil)
  if valid_594601 != nil:
    section.add "applicationId", valid_594601
  var valid_594602 = path.getOrDefault("serviceId")
  valid_594602 = validateParameter(valid_594602, JString, required = true,
                                 default = nil)
  if valid_594602 != nil:
    section.add "serviceId", valid_594602
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594603 = query.getOrDefault("timeout")
  valid_594603 = validateParameter(valid_594603, JInt, required = false,
                                 default = newJInt(60))
  if valid_594603 != nil:
    section.add "timeout", valid_594603
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594604 = query.getOrDefault("api-version")
  valid_594604 = validateParameter(valid_594604, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594604 != nil:
    section.add "api-version", valid_594604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594605: Call_GetServiceInfo_594598; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  let valid = call_594605.validator(path, query, header, formData, body)
  let scheme = call_594605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594605.url(scheme.get, call_594605.host, call_594605.base,
                         call_594605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594605, url, valid)

proc call*(call_594606: Call_GetServiceInfo_594598; applicationId: string;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceInfo
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_594607 = newJObject()
  var query_594608 = newJObject()
  add(query_594608, "timeout", newJInt(timeout))
  add(query_594608, "api-version", newJString(apiVersion))
  add(path_594607, "applicationId", newJString(applicationId))
  add(path_594607, "serviceId", newJString(serviceId))
  result = call_594606.call(path_594607, query_594608, nil, nil, nil)

var getServiceInfo* = Call_GetServiceInfo_594598(name: "getServiceInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/{serviceId}",
    validator: validate_GetServiceInfo_594599, base: "", url: url_GetServiceInfo_594600,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationUpgrade_594609 = ref object of OpenApiRestCall_593439
proc url_GetApplicationUpgrade_594611(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationUpgrade_594610(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594612 = path.getOrDefault("applicationId")
  valid_594612 = validateParameter(valid_594612, JString, required = true,
                                 default = nil)
  if valid_594612 != nil:
    section.add "applicationId", valid_594612
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594613 = query.getOrDefault("timeout")
  valid_594613 = validateParameter(valid_594613, JInt, required = false,
                                 default = newJInt(60))
  if valid_594613 != nil:
    section.add "timeout", valid_594613
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594614 = query.getOrDefault("api-version")
  valid_594614 = validateParameter(valid_594614, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594614 != nil:
    section.add "api-version", valid_594614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594615: Call_GetApplicationUpgrade_594609; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_594615.validator(path, query, header, formData, body)
  let scheme = call_594615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594615.url(scheme.get, call_594615.host, call_594615.base,
                         call_594615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594615, url, valid)

proc call*(call_594616: Call_GetApplicationUpgrade_594609; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationUpgrade
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594617 = newJObject()
  var query_594618 = newJObject()
  add(query_594618, "timeout", newJInt(timeout))
  add(query_594618, "api-version", newJString(apiVersion))
  add(path_594617, "applicationId", newJString(applicationId))
  result = call_594616.call(path_594617, query_594618, nil, nil, nil)

var getApplicationUpgrade* = Call_GetApplicationUpgrade_594609(
    name: "getApplicationUpgrade", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetUpgradeProgress",
    validator: validate_GetApplicationUpgrade_594610, base: "",
    url: url_GetApplicationUpgrade_594611, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationUpgrade_594619 = ref object of OpenApiRestCall_593439
proc url_ResumeApplicationUpgrade_594621(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/MoveToNextUpgradeDomain")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationUpgrade_594620(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594622 = path.getOrDefault("applicationId")
  valid_594622 = validateParameter(valid_594622, JString, required = true,
                                 default = nil)
  if valid_594622 != nil:
    section.add "applicationId", valid_594622
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594623 = query.getOrDefault("timeout")
  valid_594623 = validateParameter(valid_594623, JInt, required = false,
                                 default = newJInt(60))
  if valid_594623 != nil:
    section.add "timeout", valid_594623
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594624 = query.getOrDefault("api-version")
  valid_594624 = validateParameter(valid_594624, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594624 != nil:
    section.add "api-version", valid_594624
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594626: Call_ResumeApplicationUpgrade_594619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  let valid = call_594626.validator(path, query, header, formData, body)
  let scheme = call_594626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594626.url(scheme.get, call_594626.host, call_594626.base,
                         call_594626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594626, url, valid)

proc call*(call_594627: Call_ResumeApplicationUpgrade_594619;
          ResumeApplicationUpgradeDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resumeApplicationUpgrade
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594628 = newJObject()
  var query_594629 = newJObject()
  var body_594630 = newJObject()
  add(query_594629, "timeout", newJInt(timeout))
  if ResumeApplicationUpgradeDescription != nil:
    body_594630 = ResumeApplicationUpgradeDescription
  add(query_594629, "api-version", newJString(apiVersion))
  add(path_594628, "applicationId", newJString(applicationId))
  result = call_594627.call(path_594628, query_594629, nil, nil, body_594630)

var resumeApplicationUpgrade* = Call_ResumeApplicationUpgrade_594619(
    name: "resumeApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeApplicationUpgrade_594620, base: "",
    url: url_ResumeApplicationUpgrade_594621, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportApplicationHealth_594631 = ref object of OpenApiRestCall_593439
proc url_ReportApplicationHealth_594633(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportApplicationHealth_594632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594634 = path.getOrDefault("applicationId")
  valid_594634 = validateParameter(valid_594634, JString, required = true,
                                 default = nil)
  if valid_594634 != nil:
    section.add "applicationId", valid_594634
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594635 = query.getOrDefault("Immediate")
  valid_594635 = validateParameter(valid_594635, JBool, required = false,
                                 default = newJBool(false))
  if valid_594635 != nil:
    section.add "Immediate", valid_594635
  var valid_594636 = query.getOrDefault("timeout")
  valid_594636 = validateParameter(valid_594636, JInt, required = false,
                                 default = newJInt(60))
  if valid_594636 != nil:
    section.add "timeout", valid_594636
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594637 = query.getOrDefault("api-version")
  valid_594637 = validateParameter(valid_594637, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594637 != nil:
    section.add "api-version", valid_594637
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594639: Call_ReportApplicationHealth_594631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_594639.validator(path, query, header, formData, body)
  let scheme = call_594639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594639.url(scheme.get, call_594639.host, call_594639.base,
                         call_594639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594639, url, valid)

proc call*(call_594640: Call_ReportApplicationHealth_594631;
          HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportApplicationHealth
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594641 = newJObject()
  var query_594642 = newJObject()
  var body_594643 = newJObject()
  add(query_594642, "Immediate", newJBool(Immediate))
  add(query_594642, "timeout", newJInt(timeout))
  add(query_594642, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_594643 = HealthInformation
  add(path_594641, "applicationId", newJString(applicationId))
  result = call_594640.call(path_594641, query_594642, nil, nil, body_594643)

var reportApplicationHealth* = Call_ReportApplicationHealth_594631(
    name: "reportApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ReportHealth",
    validator: validate_ReportApplicationHealth_594632, base: "",
    url: url_ReportApplicationHealth_594633, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationBackup_594644 = ref object of OpenApiRestCall_593439
proc url_ResumeApplicationBackup_594646(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationBackup_594645(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594647 = path.getOrDefault("applicationId")
  valid_594647 = validateParameter(valid_594647, JString, required = true,
                                 default = nil)
  if valid_594647 != nil:
    section.add "applicationId", valid_594647
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594648 = query.getOrDefault("timeout")
  valid_594648 = validateParameter(valid_594648, JInt, required = false,
                                 default = newJInt(60))
  if valid_594648 != nil:
    section.add "timeout", valid_594648
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594649 = query.getOrDefault("api-version")
  valid_594649 = validateParameter(valid_594649, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594649 != nil:
    section.add "api-version", valid_594649
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594650: Call_ResumeApplicationBackup_594644; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_594650.validator(path, query, header, formData, body)
  let scheme = call_594650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594650.url(scheme.get, call_594650.host, call_594650.base,
                         call_594650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594650, url, valid)

proc call*(call_594651: Call_ResumeApplicationBackup_594644; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeApplicationBackup
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594652 = newJObject()
  var query_594653 = newJObject()
  add(query_594653, "timeout", newJInt(timeout))
  add(query_594653, "api-version", newJString(apiVersion))
  add(path_594652, "applicationId", newJString(applicationId))
  result = call_594651.call(path_594652, query_594653, nil, nil, nil)

var resumeApplicationBackup* = Call_ResumeApplicationBackup_594644(
    name: "resumeApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ResumeBackup",
    validator: validate_ResumeApplicationBackup_594645, base: "",
    url: url_ResumeApplicationBackup_594646, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackApplicationUpgrade_594654 = ref object of OpenApiRestCall_593439
proc url_RollbackApplicationUpgrade_594656(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RollbackApplicationUpgrade_594655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594657 = path.getOrDefault("applicationId")
  valid_594657 = validateParameter(valid_594657, JString, required = true,
                                 default = nil)
  if valid_594657 != nil:
    section.add "applicationId", valid_594657
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594658 = query.getOrDefault("timeout")
  valid_594658 = validateParameter(valid_594658, JInt, required = false,
                                 default = newJInt(60))
  if valid_594658 != nil:
    section.add "timeout", valid_594658
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594659 = query.getOrDefault("api-version")
  valid_594659 = validateParameter(valid_594659, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594659 != nil:
    section.add "api-version", valid_594659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594660: Call_RollbackApplicationUpgrade_594654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  let valid = call_594660.validator(path, query, header, formData, body)
  let scheme = call_594660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594660.url(scheme.get, call_594660.host, call_594660.base,
                         call_594660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594660, url, valid)

proc call*(call_594661: Call_RollbackApplicationUpgrade_594654;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## rollbackApplicationUpgrade
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594662 = newJObject()
  var query_594663 = newJObject()
  add(query_594663, "timeout", newJInt(timeout))
  add(query_594663, "api-version", newJString(apiVersion))
  add(path_594662, "applicationId", newJString(applicationId))
  result = call_594661.call(path_594662, query_594663, nil, nil, nil)

var rollbackApplicationUpgrade* = Call_RollbackApplicationUpgrade_594654(
    name: "rollbackApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/RollbackUpgrade",
    validator: validate_RollbackApplicationUpgrade_594655, base: "",
    url: url_RollbackApplicationUpgrade_594656,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendApplicationBackup_594664 = ref object of OpenApiRestCall_593439
proc url_SuspendApplicationBackup_594666(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendApplicationBackup_594665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594667 = path.getOrDefault("applicationId")
  valid_594667 = validateParameter(valid_594667, JString, required = true,
                                 default = nil)
  if valid_594667 != nil:
    section.add "applicationId", valid_594667
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594668 = query.getOrDefault("timeout")
  valid_594668 = validateParameter(valid_594668, JInt, required = false,
                                 default = newJInt(60))
  if valid_594668 != nil:
    section.add "timeout", valid_594668
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594669 = query.getOrDefault("api-version")
  valid_594669 = validateParameter(valid_594669, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594669 != nil:
    section.add "api-version", valid_594669
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594670: Call_SuspendApplicationBackup_594664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  let valid = call_594670.validator(path, query, header, formData, body)
  let scheme = call_594670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594670.url(scheme.get, call_594670.host, call_594670.base,
                         call_594670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594670, url, valid)

proc call*(call_594671: Call_SuspendApplicationBackup_594664;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendApplicationBackup
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594672 = newJObject()
  var query_594673 = newJObject()
  add(query_594673, "timeout", newJInt(timeout))
  add(query_594673, "api-version", newJString(apiVersion))
  add(path_594672, "applicationId", newJString(applicationId))
  result = call_594671.call(path_594672, query_594673, nil, nil, nil)

var suspendApplicationBackup* = Call_SuspendApplicationBackup_594664(
    name: "suspendApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/SuspendBackup",
    validator: validate_SuspendApplicationBackup_594665, base: "",
    url: url_SuspendApplicationBackup_594666, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateApplicationUpgrade_594674 = ref object of OpenApiRestCall_593439
proc url_UpdateApplicationUpgrade_594676(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/UpdateUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateApplicationUpgrade_594675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594677 = path.getOrDefault("applicationId")
  valid_594677 = validateParameter(valid_594677, JString, required = true,
                                 default = nil)
  if valid_594677 != nil:
    section.add "applicationId", valid_594677
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594678 = query.getOrDefault("timeout")
  valid_594678 = validateParameter(valid_594678, JInt, required = false,
                                 default = newJInt(60))
  if valid_594678 != nil:
    section.add "timeout", valid_594678
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594679 = query.getOrDefault("api-version")
  valid_594679 = validateParameter(valid_594679, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594679 != nil:
    section.add "api-version", valid_594679
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594681: Call_UpdateApplicationUpgrade_594674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  let valid = call_594681.validator(path, query, header, formData, body)
  let scheme = call_594681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594681.url(scheme.get, call_594681.host, call_594681.base,
                         call_594681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594681, url, valid)

proc call*(call_594682: Call_UpdateApplicationUpgrade_594674;
          applicationId: string; ApplicationUpgradeUpdateDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## updateApplicationUpgrade
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  var path_594683 = newJObject()
  var query_594684 = newJObject()
  var body_594685 = newJObject()
  add(query_594684, "timeout", newJInt(timeout))
  add(query_594684, "api-version", newJString(apiVersion))
  add(path_594683, "applicationId", newJString(applicationId))
  if ApplicationUpgradeUpdateDescription != nil:
    body_594685 = ApplicationUpgradeUpdateDescription
  result = call_594682.call(path_594683, query_594684, nil, nil, body_594685)

var updateApplicationUpgrade* = Call_UpdateApplicationUpgrade_594674(
    name: "updateApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/UpdateUpgrade",
    validator: validate_UpdateApplicationUpgrade_594675, base: "",
    url: url_UpdateApplicationUpgrade_594676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartApplicationUpgrade_594686 = ref object of OpenApiRestCall_593439
proc url_StartApplicationUpgrade_594688(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartApplicationUpgrade_594687(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594689 = path.getOrDefault("applicationId")
  valid_594689 = validateParameter(valid_594689, JString, required = true,
                                 default = nil)
  if valid_594689 != nil:
    section.add "applicationId", valid_594689
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594690 = query.getOrDefault("timeout")
  valid_594690 = validateParameter(valid_594690, JInt, required = false,
                                 default = newJInt(60))
  if valid_594690 != nil:
    section.add "timeout", valid_594690
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594691 = query.getOrDefault("api-version")
  valid_594691 = validateParameter(valid_594691, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594691 != nil:
    section.add "api-version", valid_594691
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594693: Call_StartApplicationUpgrade_594686; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  let valid = call_594693.validator(path, query, header, formData, body)
  let scheme = call_594693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594693.url(scheme.get, call_594693.host, call_594693.base,
                         call_594693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594693, url, valid)

proc call*(call_594694: Call_StartApplicationUpgrade_594686; applicationId: string;
          ApplicationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startApplicationUpgrade
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  var path_594695 = newJObject()
  var query_594696 = newJObject()
  var body_594697 = newJObject()
  add(query_594696, "timeout", newJInt(timeout))
  add(query_594696, "api-version", newJString(apiVersion))
  add(path_594695, "applicationId", newJString(applicationId))
  if ApplicationUpgradeDescription != nil:
    body_594697 = ApplicationUpgradeDescription
  result = call_594694.call(path_594695, query_594696, nil, nil, body_594697)

var startApplicationUpgrade* = Call_StartApplicationUpgrade_594686(
    name: "startApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/Upgrade",
    validator: validate_StartApplicationUpgrade_594687, base: "",
    url: url_StartApplicationUpgrade_594688, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupsFromBackupLocation_594698 = ref object of OpenApiRestCall_593439
proc url_GetBackupsFromBackupLocation_594700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupsFromBackupLocation_594699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594701 = query.getOrDefault("timeout")
  valid_594701 = validateParameter(valid_594701, JInt, required = false,
                                 default = newJInt(60))
  if valid_594701 != nil:
    section.add "timeout", valid_594701
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594702 = query.getOrDefault("api-version")
  valid_594702 = validateParameter(valid_594702, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594702 != nil:
    section.add "api-version", valid_594702
  var valid_594703 = query.getOrDefault("ContinuationToken")
  valid_594703 = validateParameter(valid_594703, JString, required = false,
                                 default = nil)
  if valid_594703 != nil:
    section.add "ContinuationToken", valid_594703
  var valid_594704 = query.getOrDefault("MaxResults")
  valid_594704 = validateParameter(valid_594704, JInt, required = false,
                                 default = newJInt(0))
  if valid_594704 != nil:
    section.add "MaxResults", valid_594704
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594706: Call_GetBackupsFromBackupLocation_594698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  let valid = call_594706.validator(path, query, header, formData, body)
  let scheme = call_594706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594706.url(scheme.get, call_594706.host, call_594706.base,
                         call_594706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594706, url, valid)

proc call*(call_594707: Call_GetBackupsFromBackupLocation_594698;
          GetBackupByStorageQueryDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupsFromBackupLocation
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_594708 = newJObject()
  var body_594709 = newJObject()
  add(query_594708, "timeout", newJInt(timeout))
  add(query_594708, "api-version", newJString(apiVersion))
  if GetBackupByStorageQueryDescription != nil:
    body_594709 = GetBackupByStorageQueryDescription
  add(query_594708, "ContinuationToken", newJString(ContinuationToken))
  add(query_594708, "MaxResults", newJInt(MaxResults))
  result = call_594707.call(nil, query_594708, nil, nil, body_594709)

var getBackupsFromBackupLocation* = Call_GetBackupsFromBackupLocation_594698(
    name: "getBackupsFromBackupLocation", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/$/GetBackups",
    validator: validate_GetBackupsFromBackupLocation_594699, base: "",
    url: url_GetBackupsFromBackupLocation_594700,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyList_594710 = ref object of OpenApiRestCall_593439
proc url_GetBackupPolicyList_594712(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupPolicyList_594711(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Get a list of all the backup policies configured.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594713 = query.getOrDefault("timeout")
  valid_594713 = validateParameter(valid_594713, JInt, required = false,
                                 default = newJInt(60))
  if valid_594713 != nil:
    section.add "timeout", valid_594713
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594714 = query.getOrDefault("api-version")
  valid_594714 = validateParameter(valid_594714, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594714 != nil:
    section.add "api-version", valid_594714
  var valid_594715 = query.getOrDefault("ContinuationToken")
  valid_594715 = validateParameter(valid_594715, JString, required = false,
                                 default = nil)
  if valid_594715 != nil:
    section.add "ContinuationToken", valid_594715
  var valid_594716 = query.getOrDefault("MaxResults")
  valid_594716 = validateParameter(valid_594716, JInt, required = false,
                                 default = newJInt(0))
  if valid_594716 != nil:
    section.add "MaxResults", valid_594716
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594717: Call_GetBackupPolicyList_594710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a list of all the backup policies configured.
  ## 
  let valid = call_594717.validator(path, query, header, formData, body)
  let scheme = call_594717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594717.url(scheme.get, call_594717.host, call_594717.base,
                         call_594717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594717, url, valid)

proc call*(call_594718: Call_GetBackupPolicyList_594710; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupPolicyList
  ## Get a list of all the backup policies configured.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_594719 = newJObject()
  add(query_594719, "timeout", newJInt(timeout))
  add(query_594719, "api-version", newJString(apiVersion))
  add(query_594719, "ContinuationToken", newJString(ContinuationToken))
  add(query_594719, "MaxResults", newJInt(MaxResults))
  result = call_594718.call(nil, query_594719, nil, nil, nil)

var getBackupPolicyList* = Call_GetBackupPolicyList_594710(
    name: "getBackupPolicyList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies",
    validator: validate_GetBackupPolicyList_594711, base: "",
    url: url_GetBackupPolicyList_594712, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBackupPolicy_594720 = ref object of OpenApiRestCall_593439
proc url_CreateBackupPolicy_594722(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateBackupPolicy_594721(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594723 = query.getOrDefault("timeout")
  valid_594723 = validateParameter(valid_594723, JInt, required = false,
                                 default = newJInt(60))
  if valid_594723 != nil:
    section.add "timeout", valid_594723
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594724 = query.getOrDefault("api-version")
  valid_594724 = validateParameter(valid_594724, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594724 != nil:
    section.add "api-version", valid_594724
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594726: Call_CreateBackupPolicy_594720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  let valid = call_594726.validator(path, query, header, formData, body)
  let scheme = call_594726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594726.url(scheme.get, call_594726.host, call_594726.base,
                         call_594726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594726, url, valid)

proc call*(call_594727: Call_CreateBackupPolicy_594720;
          BackupPolicyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## createBackupPolicy
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  var query_594728 = newJObject()
  var body_594729 = newJObject()
  add(query_594728, "timeout", newJInt(timeout))
  add(query_594728, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_594729 = BackupPolicyDescription
  result = call_594727.call(nil, query_594728, nil, nil, body_594729)

var createBackupPolicy* = Call_CreateBackupPolicy_594720(
    name: "createBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/$/Create",
    validator: validate_CreateBackupPolicy_594721, base: "",
    url: url_CreateBackupPolicy_594722, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyByName_594730 = ref object of OpenApiRestCall_593439
proc url_GetBackupPolicyByName_594732(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetBackupPolicyByName_594731(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594733 = path.getOrDefault("backupPolicyName")
  valid_594733 = validateParameter(valid_594733, JString, required = true,
                                 default = nil)
  if valid_594733 != nil:
    section.add "backupPolicyName", valid_594733
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594734 = query.getOrDefault("timeout")
  valid_594734 = validateParameter(valid_594734, JInt, required = false,
                                 default = newJInt(60))
  if valid_594734 != nil:
    section.add "timeout", valid_594734
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594735 = query.getOrDefault("api-version")
  valid_594735 = validateParameter(valid_594735, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594735 != nil:
    section.add "api-version", valid_594735
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594736: Call_GetBackupPolicyByName_594730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  let valid = call_594736.validator(path, query, header, formData, body)
  let scheme = call_594736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594736.url(scheme.get, call_594736.host, call_594736.base,
                         call_594736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594736, url, valid)

proc call*(call_594737: Call_GetBackupPolicyByName_594730;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getBackupPolicyByName
  ## Gets a particular backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_594738 = newJObject()
  var query_594739 = newJObject()
  add(query_594739, "timeout", newJInt(timeout))
  add(query_594739, "api-version", newJString(apiVersion))
  add(path_594738, "backupPolicyName", newJString(backupPolicyName))
  result = call_594737.call(path_594738, query_594739, nil, nil, nil)

var getBackupPolicyByName* = Call_GetBackupPolicyByName_594730(
    name: "getBackupPolicyByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}",
    validator: validate_GetBackupPolicyByName_594731, base: "",
    url: url_GetBackupPolicyByName_594732, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBackupPolicy_594740 = ref object of OpenApiRestCall_593439
proc url_DeleteBackupPolicy_594742(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteBackupPolicy_594741(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594743 = path.getOrDefault("backupPolicyName")
  valid_594743 = validateParameter(valid_594743, JString, required = true,
                                 default = nil)
  if valid_594743 != nil:
    section.add "backupPolicyName", valid_594743
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594744 = query.getOrDefault("timeout")
  valid_594744 = validateParameter(valid_594744, JInt, required = false,
                                 default = newJInt(60))
  if valid_594744 != nil:
    section.add "timeout", valid_594744
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594745 = query.getOrDefault("api-version")
  valid_594745 = validateParameter(valid_594745, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594745 != nil:
    section.add "api-version", valid_594745
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594746: Call_DeleteBackupPolicy_594740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  let valid = call_594746.validator(path, query, header, formData, body)
  let scheme = call_594746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594746.url(scheme.get, call_594746.host, call_594746.base,
                         call_594746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594746, url, valid)

proc call*(call_594747: Call_DeleteBackupPolicy_594740; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## deleteBackupPolicy
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_594748 = newJObject()
  var query_594749 = newJObject()
  add(query_594749, "timeout", newJInt(timeout))
  add(query_594749, "api-version", newJString(apiVersion))
  add(path_594748, "backupPolicyName", newJString(backupPolicyName))
  result = call_594747.call(path_594748, query_594749, nil, nil, nil)

var deleteBackupPolicy* = Call_DeleteBackupPolicy_594740(
    name: "deleteBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete",
    validator: validate_DeleteBackupPolicy_594741, base: "",
    url: url_DeleteBackupPolicy_594742, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAllEntitiesBackedUpByPolicy_594750 = ref object of OpenApiRestCall_593439
proc url_GetAllEntitiesBackedUpByPolicy_594752(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/GetBackupEnabledEntities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetAllEntitiesBackedUpByPolicy_594751(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594753 = path.getOrDefault("backupPolicyName")
  valid_594753 = validateParameter(valid_594753, JString, required = true,
                                 default = nil)
  if valid_594753 != nil:
    section.add "backupPolicyName", valid_594753
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594754 = query.getOrDefault("timeout")
  valid_594754 = validateParameter(valid_594754, JInt, required = false,
                                 default = newJInt(60))
  if valid_594754 != nil:
    section.add "timeout", valid_594754
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594755 = query.getOrDefault("api-version")
  valid_594755 = validateParameter(valid_594755, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594755 != nil:
    section.add "api-version", valid_594755
  var valid_594756 = query.getOrDefault("ContinuationToken")
  valid_594756 = validateParameter(valid_594756, JString, required = false,
                                 default = nil)
  if valid_594756 != nil:
    section.add "ContinuationToken", valid_594756
  var valid_594757 = query.getOrDefault("MaxResults")
  valid_594757 = validateParameter(valid_594757, JInt, required = false,
                                 default = newJInt(0))
  if valid_594757 != nil:
    section.add "MaxResults", valid_594757
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594758: Call_GetAllEntitiesBackedUpByPolicy_594750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  let valid = call_594758.validator(path, query, header, formData, body)
  let scheme = call_594758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594758.url(scheme.get, call_594758.host, call_594758.base,
                         call_594758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594758, url, valid)

proc call*(call_594759: Call_GetAllEntitiesBackedUpByPolicy_594750;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getAllEntitiesBackedUpByPolicy
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_594760 = newJObject()
  var query_594761 = newJObject()
  add(query_594761, "timeout", newJInt(timeout))
  add(query_594761, "api-version", newJString(apiVersion))
  add(path_594760, "backupPolicyName", newJString(backupPolicyName))
  add(query_594761, "ContinuationToken", newJString(ContinuationToken))
  add(query_594761, "MaxResults", newJInt(MaxResults))
  result = call_594759.call(path_594760, query_594761, nil, nil, nil)

var getAllEntitiesBackedUpByPolicy* = Call_GetAllEntitiesBackedUpByPolicy_594750(
    name: "getAllEntitiesBackedUpByPolicy", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities",
    validator: validate_GetAllEntitiesBackedUpByPolicy_594751, base: "",
    url: url_GetAllEntitiesBackedUpByPolicy_594752,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBackupPolicy_594762 = ref object of OpenApiRestCall_593439
proc url_UpdateBackupPolicy_594764(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateBackupPolicy_594763(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594765 = path.getOrDefault("backupPolicyName")
  valid_594765 = validateParameter(valid_594765, JString, required = true,
                                 default = nil)
  if valid_594765 != nil:
    section.add "backupPolicyName", valid_594765
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594766 = query.getOrDefault("timeout")
  valid_594766 = validateParameter(valid_594766, JInt, required = false,
                                 default = newJInt(60))
  if valid_594766 != nil:
    section.add "timeout", valid_594766
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594767 = query.getOrDefault("api-version")
  valid_594767 = validateParameter(valid_594767, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594767 != nil:
    section.add "api-version", valid_594767
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594769: Call_UpdateBackupPolicy_594762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  let valid = call_594769.validator(path, query, header, formData, body)
  let scheme = call_594769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594769.url(scheme.get, call_594769.host, call_594769.base,
                         call_594769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594769, url, valid)

proc call*(call_594770: Call_UpdateBackupPolicy_594762;
          BackupPolicyDescription: JsonNode; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## updateBackupPolicy
  ## Updates the backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_594771 = newJObject()
  var query_594772 = newJObject()
  var body_594773 = newJObject()
  add(query_594772, "timeout", newJInt(timeout))
  add(query_594772, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_594773 = BackupPolicyDescription
  add(path_594771, "backupPolicyName", newJString(backupPolicyName))
  result = call_594770.call(path_594771, query_594772, nil, nil, body_594773)

var updateBackupPolicy* = Call_UpdateBackupPolicy_594762(
    name: "updateBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update",
    validator: validate_UpdateBackupPolicy_594763, base: "",
    url: url_UpdateBackupPolicy_594764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatusList_594774 = ref object of OpenApiRestCall_593439
proc url_GetComposeDeploymentStatusList_594776(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetComposeDeploymentStatusList_594775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594777 = query.getOrDefault("timeout")
  valid_594777 = validateParameter(valid_594777, JInt, required = false,
                                 default = newJInt(60))
  if valid_594777 != nil:
    section.add "timeout", valid_594777
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594778 = query.getOrDefault("api-version")
  valid_594778 = validateParameter(valid_594778, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594778 != nil:
    section.add "api-version", valid_594778
  var valid_594779 = query.getOrDefault("ContinuationToken")
  valid_594779 = validateParameter(valid_594779, JString, required = false,
                                 default = nil)
  if valid_594779 != nil:
    section.add "ContinuationToken", valid_594779
  var valid_594780 = query.getOrDefault("MaxResults")
  valid_594780 = validateParameter(valid_594780, JInt, required = false,
                                 default = newJInt(0))
  if valid_594780 != nil:
    section.add "MaxResults", valid_594780
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594781: Call_GetComposeDeploymentStatusList_594774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  let valid = call_594781.validator(path, query, header, formData, body)
  let scheme = call_594781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594781.url(scheme.get, call_594781.host, call_594781.base,
                         call_594781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594781, url, valid)

proc call*(call_594782: Call_GetComposeDeploymentStatusList_594774;
          timeout: int = 60; apiVersion: string = "6.0-preview";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getComposeDeploymentStatusList
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_594783 = newJObject()
  add(query_594783, "timeout", newJInt(timeout))
  add(query_594783, "api-version", newJString(apiVersion))
  add(query_594783, "ContinuationToken", newJString(ContinuationToken))
  add(query_594783, "MaxResults", newJInt(MaxResults))
  result = call_594782.call(nil, query_594783, nil, nil, nil)

var getComposeDeploymentStatusList* = Call_GetComposeDeploymentStatusList_594774(
    name: "getComposeDeploymentStatusList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments",
    validator: validate_GetComposeDeploymentStatusList_594775, base: "",
    url: url_GetComposeDeploymentStatusList_594776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateComposeDeployment_594784 = ref object of OpenApiRestCall_593439
proc url_CreateComposeDeployment_594786(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateComposeDeployment_594785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594787 = query.getOrDefault("timeout")
  valid_594787 = validateParameter(valid_594787, JInt, required = false,
                                 default = newJInt(60))
  if valid_594787 != nil:
    section.add "timeout", valid_594787
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594788 = query.getOrDefault("api-version")
  valid_594788 = validateParameter(valid_594788, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594788 != nil:
    section.add "api-version", valid_594788
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594790: Call_CreateComposeDeployment_594784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  let valid = call_594790.validator(path, query, header, formData, body)
  let scheme = call_594790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594790.url(scheme.get, call_594790.host, call_594790.base,
                         call_594790.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594790, url, valid)

proc call*(call_594791: Call_CreateComposeDeployment_594784;
          CreateComposeDeploymentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## createComposeDeployment
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  var query_594792 = newJObject()
  var body_594793 = newJObject()
  add(query_594792, "timeout", newJInt(timeout))
  add(query_594792, "api-version", newJString(apiVersion))
  if CreateComposeDeploymentDescription != nil:
    body_594793 = CreateComposeDeploymentDescription
  result = call_594791.call(nil, query_594792, nil, nil, body_594793)

var createComposeDeployment* = Call_CreateComposeDeployment_594784(
    name: "createComposeDeployment", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/ComposeDeployments/$/Create",
    validator: validate_CreateComposeDeployment_594785, base: "",
    url: url_CreateComposeDeployment_594786, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatus_594794 = ref object of OpenApiRestCall_593439
proc url_GetComposeDeploymentStatus_594796(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentStatus_594795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594797 = path.getOrDefault("deploymentName")
  valid_594797 = validateParameter(valid_594797, JString, required = true,
                                 default = nil)
  if valid_594797 != nil:
    section.add "deploymentName", valid_594797
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594798 = query.getOrDefault("timeout")
  valid_594798 = validateParameter(valid_594798, JInt, required = false,
                                 default = newJInt(60))
  if valid_594798 != nil:
    section.add "timeout", valid_594798
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594799 = query.getOrDefault("api-version")
  valid_594799 = validateParameter(valid_594799, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594799 != nil:
    section.add "api-version", valid_594799
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594800: Call_GetComposeDeploymentStatus_594794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  let valid = call_594800.validator(path, query, header, formData, body)
  let scheme = call_594800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594800.url(scheme.get, call_594800.host, call_594800.base,
                         call_594800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594800, url, valid)

proc call*(call_594801: Call_GetComposeDeploymentStatus_594794;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentStatus
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594802 = newJObject()
  var query_594803 = newJObject()
  add(query_594803, "timeout", newJInt(timeout))
  add(query_594803, "api-version", newJString(apiVersion))
  add(path_594802, "deploymentName", newJString(deploymentName))
  result = call_594801.call(path_594802, query_594803, nil, nil, nil)

var getComposeDeploymentStatus* = Call_GetComposeDeploymentStatus_594794(
    name: "getComposeDeploymentStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments/{deploymentName}",
    validator: validate_GetComposeDeploymentStatus_594795, base: "",
    url: url_GetComposeDeploymentStatus_594796,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveComposeDeployment_594804 = ref object of OpenApiRestCall_593439
proc url_RemoveComposeDeployment_594806(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveComposeDeployment_594805(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594807 = path.getOrDefault("deploymentName")
  valid_594807 = validateParameter(valid_594807, JString, required = true,
                                 default = nil)
  if valid_594807 != nil:
    section.add "deploymentName", valid_594807
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594808 = query.getOrDefault("timeout")
  valid_594808 = validateParameter(valid_594808, JInt, required = false,
                                 default = newJInt(60))
  if valid_594808 != nil:
    section.add "timeout", valid_594808
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594809 = query.getOrDefault("api-version")
  valid_594809 = validateParameter(valid_594809, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594809 != nil:
    section.add "api-version", valid_594809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594810: Call_RemoveComposeDeployment_594804; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  let valid = call_594810.validator(path, query, header, formData, body)
  let scheme = call_594810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594810.url(scheme.get, call_594810.host, call_594810.base,
                         call_594810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594810, url, valid)

proc call*(call_594811: Call_RemoveComposeDeployment_594804;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## removeComposeDeployment
  ## Deletes an existing Service Fabric compose deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594812 = newJObject()
  var query_594813 = newJObject()
  add(query_594813, "timeout", newJInt(timeout))
  add(query_594813, "api-version", newJString(apiVersion))
  add(path_594812, "deploymentName", newJString(deploymentName))
  result = call_594811.call(path_594812, query_594813, nil, nil, nil)

var removeComposeDeployment* = Call_RemoveComposeDeployment_594804(
    name: "removeComposeDeployment", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Delete",
    validator: validate_RemoveComposeDeployment_594805, base: "",
    url: url_RemoveComposeDeployment_594806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentUpgradeProgress_594814 = ref object of OpenApiRestCall_593439
proc url_GetComposeDeploymentUpgradeProgress_594816(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentUpgradeProgress_594815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594817 = path.getOrDefault("deploymentName")
  valid_594817 = validateParameter(valid_594817, JString, required = true,
                                 default = nil)
  if valid_594817 != nil:
    section.add "deploymentName", valid_594817
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594818 = query.getOrDefault("timeout")
  valid_594818 = validateParameter(valid_594818, JInt, required = false,
                                 default = newJInt(60))
  if valid_594818 != nil:
    section.add "timeout", valid_594818
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594819 = query.getOrDefault("api-version")
  valid_594819 = validateParameter(valid_594819, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594819 != nil:
    section.add "api-version", valid_594819
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594820: Call_GetComposeDeploymentUpgradeProgress_594814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_594820.validator(path, query, header, formData, body)
  let scheme = call_594820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594820.url(scheme.get, call_594820.host, call_594820.base,
                         call_594820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594820, url, valid)

proc call*(call_594821: Call_GetComposeDeploymentUpgradeProgress_594814;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentUpgradeProgress
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594822 = newJObject()
  var query_594823 = newJObject()
  add(query_594823, "timeout", newJInt(timeout))
  add(query_594823, "api-version", newJString(apiVersion))
  add(path_594822, "deploymentName", newJString(deploymentName))
  result = call_594821.call(path_594822, query_594823, nil, nil, nil)

var getComposeDeploymentUpgradeProgress* = Call_GetComposeDeploymentUpgradeProgress_594814(
    name: "getComposeDeploymentUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress",
    validator: validate_GetComposeDeploymentUpgradeProgress_594815, base: "",
    url: url_GetComposeDeploymentUpgradeProgress_594816,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartRollbackComposeDeploymentUpgrade_594824 = ref object of OpenApiRestCall_593439
proc url_StartRollbackComposeDeploymentUpgrade_594826(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartRollbackComposeDeploymentUpgrade_594825(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594827 = path.getOrDefault("deploymentName")
  valid_594827 = validateParameter(valid_594827, JString, required = true,
                                 default = nil)
  if valid_594827 != nil:
    section.add "deploymentName", valid_594827
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  var valid_594828 = query.getOrDefault("timeout")
  valid_594828 = validateParameter(valid_594828, JInt, required = false,
                                 default = newJInt(60))
  if valid_594828 != nil:
    section.add "timeout", valid_594828
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594829 = query.getOrDefault("api-version")
  valid_594829 = validateParameter(valid_594829, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_594829 != nil:
    section.add "api-version", valid_594829
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594830: Call_StartRollbackComposeDeploymentUpgrade_594824;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  let valid = call_594830.validator(path, query, header, formData, body)
  let scheme = call_594830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594830.url(scheme.get, call_594830.host, call_594830.base,
                         call_594830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594830, url, valid)

proc call*(call_594831: Call_StartRollbackComposeDeploymentUpgrade_594824;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.4-preview"): Recallable =
  ## startRollbackComposeDeploymentUpgrade
  ## Rollback a service fabric compose deployment upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594832 = newJObject()
  var query_594833 = newJObject()
  add(query_594833, "timeout", newJInt(timeout))
  add(query_594833, "api-version", newJString(apiVersion))
  add(path_594832, "deploymentName", newJString(deploymentName))
  result = call_594831.call(path_594832, query_594833, nil, nil, nil)

var startRollbackComposeDeploymentUpgrade* = Call_StartRollbackComposeDeploymentUpgrade_594824(
    name: "startRollbackComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade",
    validator: validate_StartRollbackComposeDeploymentUpgrade_594825, base: "",
    url: url_StartRollbackComposeDeploymentUpgrade_594826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartComposeDeploymentUpgrade_594834 = ref object of OpenApiRestCall_593439
proc url_StartComposeDeploymentUpgrade_594836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartComposeDeploymentUpgrade_594835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594837 = path.getOrDefault("deploymentName")
  valid_594837 = validateParameter(valid_594837, JString, required = true,
                                 default = nil)
  if valid_594837 != nil:
    section.add "deploymentName", valid_594837
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594838 = query.getOrDefault("timeout")
  valid_594838 = validateParameter(valid_594838, JInt, required = false,
                                 default = newJInt(60))
  if valid_594838 != nil:
    section.add "timeout", valid_594838
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594839 = query.getOrDefault("api-version")
  valid_594839 = validateParameter(valid_594839, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594839 != nil:
    section.add "api-version", valid_594839
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594841: Call_StartComposeDeploymentUpgrade_594834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  let valid = call_594841.validator(path, query, header, formData, body)
  let scheme = call_594841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594841.url(scheme.get, call_594841.host, call_594841.base,
                         call_594841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594841, url, valid)

proc call*(call_594842: Call_StartComposeDeploymentUpgrade_594834;
          deploymentName: string; ComposeDeploymentUpgradeDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0-preview"): Recallable =
  ## startComposeDeploymentUpgrade
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  var path_594843 = newJObject()
  var query_594844 = newJObject()
  var body_594845 = newJObject()
  add(query_594844, "timeout", newJInt(timeout))
  add(query_594844, "api-version", newJString(apiVersion))
  add(path_594843, "deploymentName", newJString(deploymentName))
  if ComposeDeploymentUpgradeDescription != nil:
    body_594845 = ComposeDeploymentUpgradeDescription
  result = call_594842.call(path_594843, query_594844, nil, nil, body_594845)

var startComposeDeploymentUpgrade* = Call_StartComposeDeploymentUpgrade_594834(
    name: "startComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Upgrade",
    validator: validate_StartComposeDeploymentUpgrade_594835, base: "",
    url: url_StartComposeDeploymentUpgrade_594836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationsEventList_594846 = ref object of OpenApiRestCall_593439
proc url_GetApplicationsEventList_594848(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationsEventList_594847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594849 = query.getOrDefault("timeout")
  valid_594849 = validateParameter(valid_594849, JInt, required = false,
                                 default = newJInt(60))
  if valid_594849 != nil:
    section.add "timeout", valid_594849
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594850 = query.getOrDefault("api-version")
  valid_594850 = validateParameter(valid_594850, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594850 != nil:
    section.add "api-version", valid_594850
  var valid_594851 = query.getOrDefault("SkipCorrelationLookup")
  valid_594851 = validateParameter(valid_594851, JBool, required = false, default = nil)
  if valid_594851 != nil:
    section.add "SkipCorrelationLookup", valid_594851
  var valid_594852 = query.getOrDefault("EventsTypesFilter")
  valid_594852 = validateParameter(valid_594852, JString, required = false,
                                 default = nil)
  if valid_594852 != nil:
    section.add "EventsTypesFilter", valid_594852
  var valid_594853 = query.getOrDefault("EndTimeUtc")
  valid_594853 = validateParameter(valid_594853, JString, required = true,
                                 default = nil)
  if valid_594853 != nil:
    section.add "EndTimeUtc", valid_594853
  var valid_594854 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594854 = validateParameter(valid_594854, JBool, required = false, default = nil)
  if valid_594854 != nil:
    section.add "ExcludeAnalysisEvents", valid_594854
  var valid_594855 = query.getOrDefault("StartTimeUtc")
  valid_594855 = validateParameter(valid_594855, JString, required = true,
                                 default = nil)
  if valid_594855 != nil:
    section.add "StartTimeUtc", valid_594855
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594856: Call_GetApplicationsEventList_594846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_594856.validator(path, query, header, formData, body)
  let scheme = call_594856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594856.url(scheme.get, call_594856.host, call_594856.base,
                         call_594856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594856, url, valid)

proc call*(call_594857: Call_GetApplicationsEventList_594846; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationsEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594858 = newJObject()
  add(query_594858, "timeout", newJInt(timeout))
  add(query_594858, "api-version", newJString(apiVersion))
  add(query_594858, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594858, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594858, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594858, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594858, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594857.call(nil, query_594858, nil, nil, nil)

var getApplicationsEventList* = Call_GetApplicationsEventList_594846(
    name: "getApplicationsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Applications/Events",
    validator: validate_GetApplicationsEventList_594847, base: "",
    url: url_GetApplicationsEventList_594848, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationEventList_594859 = ref object of OpenApiRestCall_593439
proc url_GetApplicationEventList_594861(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationEventList_594860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594862 = path.getOrDefault("applicationId")
  valid_594862 = validateParameter(valid_594862, JString, required = true,
                                 default = nil)
  if valid_594862 != nil:
    section.add "applicationId", valid_594862
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594863 = query.getOrDefault("timeout")
  valid_594863 = validateParameter(valid_594863, JInt, required = false,
                                 default = newJInt(60))
  if valid_594863 != nil:
    section.add "timeout", valid_594863
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594864 = query.getOrDefault("api-version")
  valid_594864 = validateParameter(valid_594864, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594864 != nil:
    section.add "api-version", valid_594864
  var valid_594865 = query.getOrDefault("SkipCorrelationLookup")
  valid_594865 = validateParameter(valid_594865, JBool, required = false, default = nil)
  if valid_594865 != nil:
    section.add "SkipCorrelationLookup", valid_594865
  var valid_594866 = query.getOrDefault("EventsTypesFilter")
  valid_594866 = validateParameter(valid_594866, JString, required = false,
                                 default = nil)
  if valid_594866 != nil:
    section.add "EventsTypesFilter", valid_594866
  var valid_594867 = query.getOrDefault("EndTimeUtc")
  valid_594867 = validateParameter(valid_594867, JString, required = true,
                                 default = nil)
  if valid_594867 != nil:
    section.add "EndTimeUtc", valid_594867
  var valid_594868 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594868 = validateParameter(valid_594868, JBool, required = false, default = nil)
  if valid_594868 != nil:
    section.add "ExcludeAnalysisEvents", valid_594868
  var valid_594869 = query.getOrDefault("StartTimeUtc")
  valid_594869 = validateParameter(valid_594869, JString, required = true,
                                 default = nil)
  if valid_594869 != nil:
    section.add "StartTimeUtc", valid_594869
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594870: Call_GetApplicationEventList_594859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_594870.validator(path, query, header, formData, body)
  let scheme = call_594870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594870.url(scheme.get, call_594870.host, call_594870.base,
                         call_594870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594870, url, valid)

proc call*(call_594871: Call_GetApplicationEventList_594859; EndTimeUtc: string;
          applicationId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594872 = newJObject()
  var query_594873 = newJObject()
  add(query_594873, "timeout", newJInt(timeout))
  add(query_594873, "api-version", newJString(apiVersion))
  add(query_594873, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594873, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594873, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594872, "applicationId", newJString(applicationId))
  add(query_594873, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594873, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594871.call(path_594872, query_594873, nil, nil, nil)

var getApplicationEventList* = Call_GetApplicationEventList_594859(
    name: "getApplicationEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Applications/{applicationId}/$/Events",
    validator: validate_GetApplicationEventList_594860, base: "",
    url: url_GetApplicationEventList_594861, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterEventList_594874 = ref object of OpenApiRestCall_593439
proc url_GetClusterEventList_594876(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterEventList_594875(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ClusterEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594877 = query.getOrDefault("timeout")
  valid_594877 = validateParameter(valid_594877, JInt, required = false,
                                 default = newJInt(60))
  if valid_594877 != nil:
    section.add "timeout", valid_594877
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594878 = query.getOrDefault("api-version")
  valid_594878 = validateParameter(valid_594878, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594878 != nil:
    section.add "api-version", valid_594878
  var valid_594879 = query.getOrDefault("SkipCorrelationLookup")
  valid_594879 = validateParameter(valid_594879, JBool, required = false, default = nil)
  if valid_594879 != nil:
    section.add "SkipCorrelationLookup", valid_594879
  var valid_594880 = query.getOrDefault("EventsTypesFilter")
  valid_594880 = validateParameter(valid_594880, JString, required = false,
                                 default = nil)
  if valid_594880 != nil:
    section.add "EventsTypesFilter", valid_594880
  var valid_594881 = query.getOrDefault("EndTimeUtc")
  valid_594881 = validateParameter(valid_594881, JString, required = true,
                                 default = nil)
  if valid_594881 != nil:
    section.add "EndTimeUtc", valid_594881
  var valid_594882 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594882 = validateParameter(valid_594882, JBool, required = false, default = nil)
  if valid_594882 != nil:
    section.add "ExcludeAnalysisEvents", valid_594882
  var valid_594883 = query.getOrDefault("StartTimeUtc")
  valid_594883 = validateParameter(valid_594883, JString, required = true,
                                 default = nil)
  if valid_594883 != nil:
    section.add "StartTimeUtc", valid_594883
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594884: Call_GetClusterEventList_594874; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ClusterEvent objects.
  ## 
  let valid = call_594884.validator(path, query, header, formData, body)
  let scheme = call_594884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594884.url(scheme.get, call_594884.host, call_594884.base,
                         call_594884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594884, url, valid)

proc call*(call_594885: Call_GetClusterEventList_594874; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getClusterEventList
  ## The response is list of ClusterEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594886 = newJObject()
  add(query_594886, "timeout", newJInt(timeout))
  add(query_594886, "api-version", newJString(apiVersion))
  add(query_594886, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594886, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594886, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594886, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594886, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594885.call(nil, query_594886, nil, nil, nil)

var getClusterEventList* = Call_GetClusterEventList_594874(
    name: "getClusterEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Cluster/Events",
    validator: validate_GetClusterEventList_594875, base: "",
    url: url_GetClusterEventList_594876, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainersEventList_594887 = ref object of OpenApiRestCall_593439
proc url_GetContainersEventList_594889(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetContainersEventList_594888(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594890 = query.getOrDefault("timeout")
  valid_594890 = validateParameter(valid_594890, JInt, required = false,
                                 default = newJInt(60))
  if valid_594890 != nil:
    section.add "timeout", valid_594890
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594891 = query.getOrDefault("api-version")
  valid_594891 = validateParameter(valid_594891, JString, required = true,
                                 default = newJString("6.2-preview"))
  if valid_594891 != nil:
    section.add "api-version", valid_594891
  var valid_594892 = query.getOrDefault("SkipCorrelationLookup")
  valid_594892 = validateParameter(valid_594892, JBool, required = false, default = nil)
  if valid_594892 != nil:
    section.add "SkipCorrelationLookup", valid_594892
  var valid_594893 = query.getOrDefault("EventsTypesFilter")
  valid_594893 = validateParameter(valid_594893, JString, required = false,
                                 default = nil)
  if valid_594893 != nil:
    section.add "EventsTypesFilter", valid_594893
  var valid_594894 = query.getOrDefault("EndTimeUtc")
  valid_594894 = validateParameter(valid_594894, JString, required = true,
                                 default = nil)
  if valid_594894 != nil:
    section.add "EndTimeUtc", valid_594894
  var valid_594895 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594895 = validateParameter(valid_594895, JBool, required = false, default = nil)
  if valid_594895 != nil:
    section.add "ExcludeAnalysisEvents", valid_594895
  var valid_594896 = query.getOrDefault("StartTimeUtc")
  valid_594896 = validateParameter(valid_594896, JString, required = true,
                                 default = nil)
  if valid_594896 != nil:
    section.add "StartTimeUtc", valid_594896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594897: Call_GetContainersEventList_594887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  let valid = call_594897.validator(path, query, header, formData, body)
  let scheme = call_594897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594897.url(scheme.get, call_594897.host, call_594897.base,
                         call_594897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594897, url, valid)

proc call*(call_594898: Call_GetContainersEventList_594887; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.2-preview";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getContainersEventList
  ## The response is list of ContainerInstanceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594899 = newJObject()
  add(query_594899, "timeout", newJInt(timeout))
  add(query_594899, "api-version", newJString(apiVersion))
  add(query_594899, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594899, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594899, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594899, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594899, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594898.call(nil, query_594899, nil, nil, nil)

var getContainersEventList* = Call_GetContainersEventList_594887(
    name: "getContainersEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Containers/Events",
    validator: validate_GetContainersEventList_594888, base: "",
    url: url_GetContainersEventList_594889, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCorrelatedEventList_594900 = ref object of OpenApiRestCall_593439
proc url_GetCorrelatedEventList_594902(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "eventInstanceId" in path, "`eventInstanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/CorrelatedEvents/"),
               (kind: VariableSegment, value: "eventInstanceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetCorrelatedEventList_594901(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of FabricEvents.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   eventInstanceId: JString (required)
  ##                  : The EventInstanceId.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `eventInstanceId` field"
  var valid_594903 = path.getOrDefault("eventInstanceId")
  valid_594903 = validateParameter(valid_594903, JString, required = true,
                                 default = nil)
  if valid_594903 != nil:
    section.add "eventInstanceId", valid_594903
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594904 = query.getOrDefault("timeout")
  valid_594904 = validateParameter(valid_594904, JInt, required = false,
                                 default = newJInt(60))
  if valid_594904 != nil:
    section.add "timeout", valid_594904
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594905 = query.getOrDefault("api-version")
  valid_594905 = validateParameter(valid_594905, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594905 != nil:
    section.add "api-version", valid_594905
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594906: Call_GetCorrelatedEventList_594900; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of FabricEvents.
  ## 
  let valid = call_594906.validator(path, query, header, formData, body)
  let scheme = call_594906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594906.url(scheme.get, call_594906.host, call_594906.base,
                         call_594906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594906, url, valid)

proc call*(call_594907: Call_GetCorrelatedEventList_594900;
          eventInstanceId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getCorrelatedEventList
  ## The response is list of FabricEvents.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   eventInstanceId: string (required)
  ##                  : The EventInstanceId.
  var path_594908 = newJObject()
  var query_594909 = newJObject()
  add(query_594909, "timeout", newJInt(timeout))
  add(query_594909, "api-version", newJString(apiVersion))
  add(path_594908, "eventInstanceId", newJString(eventInstanceId))
  result = call_594907.call(path_594908, query_594909, nil, nil, nil)

var getCorrelatedEventList* = Call_GetCorrelatedEventList_594900(
    name: "getCorrelatedEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events",
    validator: validate_GetCorrelatedEventList_594901, base: "",
    url: url_GetCorrelatedEventList_594902, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodesEventList_594910 = ref object of OpenApiRestCall_593439
proc url_GetNodesEventList_594912(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodesEventList_594911(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594913 = query.getOrDefault("timeout")
  valid_594913 = validateParameter(valid_594913, JInt, required = false,
                                 default = newJInt(60))
  if valid_594913 != nil:
    section.add "timeout", valid_594913
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594914 = query.getOrDefault("api-version")
  valid_594914 = validateParameter(valid_594914, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594914 != nil:
    section.add "api-version", valid_594914
  var valid_594915 = query.getOrDefault("SkipCorrelationLookup")
  valid_594915 = validateParameter(valid_594915, JBool, required = false, default = nil)
  if valid_594915 != nil:
    section.add "SkipCorrelationLookup", valid_594915
  var valid_594916 = query.getOrDefault("EventsTypesFilter")
  valid_594916 = validateParameter(valid_594916, JString, required = false,
                                 default = nil)
  if valid_594916 != nil:
    section.add "EventsTypesFilter", valid_594916
  var valid_594917 = query.getOrDefault("EndTimeUtc")
  valid_594917 = validateParameter(valid_594917, JString, required = true,
                                 default = nil)
  if valid_594917 != nil:
    section.add "EndTimeUtc", valid_594917
  var valid_594918 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594918 = validateParameter(valid_594918, JBool, required = false, default = nil)
  if valid_594918 != nil:
    section.add "ExcludeAnalysisEvents", valid_594918
  var valid_594919 = query.getOrDefault("StartTimeUtc")
  valid_594919 = validateParameter(valid_594919, JString, required = true,
                                 default = nil)
  if valid_594919 != nil:
    section.add "StartTimeUtc", valid_594919
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594920: Call_GetNodesEventList_594910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_594920.validator(path, query, header, formData, body)
  let scheme = call_594920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594920.url(scheme.get, call_594920.host, call_594920.base,
                         call_594920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594920, url, valid)

proc call*(call_594921: Call_GetNodesEventList_594910; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodesEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594922 = newJObject()
  add(query_594922, "timeout", newJInt(timeout))
  add(query_594922, "api-version", newJString(apiVersion))
  add(query_594922, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594922, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594922, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594922, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594922, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594921.call(nil, query_594922, nil, nil, nil)

var getNodesEventList* = Call_GetNodesEventList_594910(name: "getNodesEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/Events", validator: validate_GetNodesEventList_594911,
    base: "", url: url_GetNodesEventList_594912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeEventList_594923 = ref object of OpenApiRestCall_593439
proc url_GetNodeEventList_594925(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeEventList_594924(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_594926 = path.getOrDefault("nodeName")
  valid_594926 = validateParameter(valid_594926, JString, required = true,
                                 default = nil)
  if valid_594926 != nil:
    section.add "nodeName", valid_594926
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594927 = query.getOrDefault("timeout")
  valid_594927 = validateParameter(valid_594927, JInt, required = false,
                                 default = newJInt(60))
  if valid_594927 != nil:
    section.add "timeout", valid_594927
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594928 = query.getOrDefault("api-version")
  valid_594928 = validateParameter(valid_594928, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594928 != nil:
    section.add "api-version", valid_594928
  var valid_594929 = query.getOrDefault("SkipCorrelationLookup")
  valid_594929 = validateParameter(valid_594929, JBool, required = false, default = nil)
  if valid_594929 != nil:
    section.add "SkipCorrelationLookup", valid_594929
  var valid_594930 = query.getOrDefault("EventsTypesFilter")
  valid_594930 = validateParameter(valid_594930, JString, required = false,
                                 default = nil)
  if valid_594930 != nil:
    section.add "EventsTypesFilter", valid_594930
  var valid_594931 = query.getOrDefault("EndTimeUtc")
  valid_594931 = validateParameter(valid_594931, JString, required = true,
                                 default = nil)
  if valid_594931 != nil:
    section.add "EndTimeUtc", valid_594931
  var valid_594932 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594932 = validateParameter(valid_594932, JBool, required = false, default = nil)
  if valid_594932 != nil:
    section.add "ExcludeAnalysisEvents", valid_594932
  var valid_594933 = query.getOrDefault("StartTimeUtc")
  valid_594933 = validateParameter(valid_594933, JString, required = true,
                                 default = nil)
  if valid_594933 != nil:
    section.add "StartTimeUtc", valid_594933
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594934: Call_GetNodeEventList_594923; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_594934.validator(path, query, header, formData, body)
  let scheme = call_594934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594934.url(scheme.get, call_594934.host, call_594934.base,
                         call_594934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594934, url, valid)

proc call*(call_594935: Call_GetNodeEventList_594923; nodeName: string;
          EndTimeUtc: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodeEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594936 = newJObject()
  var query_594937 = newJObject()
  add(query_594937, "timeout", newJInt(timeout))
  add(query_594937, "api-version", newJString(apiVersion))
  add(path_594936, "nodeName", newJString(nodeName))
  add(query_594937, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594937, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594937, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594937, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594937, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594935.call(path_594936, query_594937, nil, nil, nil)

var getNodeEventList* = Call_GetNodeEventList_594923(name: "getNodeEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/{nodeName}/$/Events",
    validator: validate_GetNodeEventList_594924, base: "",
    url: url_GetNodeEventList_594925, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionsEventList_594938 = ref object of OpenApiRestCall_593439
proc url_GetPartitionsEventList_594940(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPartitionsEventList_594939(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594941 = query.getOrDefault("timeout")
  valid_594941 = validateParameter(valid_594941, JInt, required = false,
                                 default = newJInt(60))
  if valid_594941 != nil:
    section.add "timeout", valid_594941
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594942 = query.getOrDefault("api-version")
  valid_594942 = validateParameter(valid_594942, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594942 != nil:
    section.add "api-version", valid_594942
  var valid_594943 = query.getOrDefault("SkipCorrelationLookup")
  valid_594943 = validateParameter(valid_594943, JBool, required = false, default = nil)
  if valid_594943 != nil:
    section.add "SkipCorrelationLookup", valid_594943
  var valid_594944 = query.getOrDefault("EventsTypesFilter")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "EventsTypesFilter", valid_594944
  var valid_594945 = query.getOrDefault("EndTimeUtc")
  valid_594945 = validateParameter(valid_594945, JString, required = true,
                                 default = nil)
  if valid_594945 != nil:
    section.add "EndTimeUtc", valid_594945
  var valid_594946 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594946 = validateParameter(valid_594946, JBool, required = false, default = nil)
  if valid_594946 != nil:
    section.add "ExcludeAnalysisEvents", valid_594946
  var valid_594947 = query.getOrDefault("StartTimeUtc")
  valid_594947 = validateParameter(valid_594947, JString, required = true,
                                 default = nil)
  if valid_594947 != nil:
    section.add "StartTimeUtc", valid_594947
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594948: Call_GetPartitionsEventList_594938; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_594948.validator(path, query, header, formData, body)
  let scheme = call_594948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594948.url(scheme.get, call_594948.host, call_594948.base,
                         call_594948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594948, url, valid)

proc call*(call_594949: Call_GetPartitionsEventList_594938; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionsEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594950 = newJObject()
  add(query_594950, "timeout", newJInt(timeout))
  add(query_594950, "api-version", newJString(apiVersion))
  add(query_594950, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594950, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594950, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594950, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594950, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594949.call(nil, query_594950, nil, nil, nil)

var getPartitionsEventList* = Call_GetPartitionsEventList_594938(
    name: "getPartitionsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/Events",
    validator: validate_GetPartitionsEventList_594939, base: "",
    url: url_GetPartitionsEventList_594940, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionEventList_594951 = ref object of OpenApiRestCall_593439
proc url_GetPartitionEventList_594953(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionEventList_594952(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_594954 = path.getOrDefault("partitionId")
  valid_594954 = validateParameter(valid_594954, JString, required = true,
                                 default = nil)
  if valid_594954 != nil:
    section.add "partitionId", valid_594954
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594955 = query.getOrDefault("timeout")
  valid_594955 = validateParameter(valid_594955, JInt, required = false,
                                 default = newJInt(60))
  if valid_594955 != nil:
    section.add "timeout", valid_594955
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594956 = query.getOrDefault("api-version")
  valid_594956 = validateParameter(valid_594956, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594956 != nil:
    section.add "api-version", valid_594956
  var valid_594957 = query.getOrDefault("SkipCorrelationLookup")
  valid_594957 = validateParameter(valid_594957, JBool, required = false, default = nil)
  if valid_594957 != nil:
    section.add "SkipCorrelationLookup", valid_594957
  var valid_594958 = query.getOrDefault("EventsTypesFilter")
  valid_594958 = validateParameter(valid_594958, JString, required = false,
                                 default = nil)
  if valid_594958 != nil:
    section.add "EventsTypesFilter", valid_594958
  var valid_594959 = query.getOrDefault("EndTimeUtc")
  valid_594959 = validateParameter(valid_594959, JString, required = true,
                                 default = nil)
  if valid_594959 != nil:
    section.add "EndTimeUtc", valid_594959
  var valid_594960 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594960 = validateParameter(valid_594960, JBool, required = false, default = nil)
  if valid_594960 != nil:
    section.add "ExcludeAnalysisEvents", valid_594960
  var valid_594961 = query.getOrDefault("StartTimeUtc")
  valid_594961 = validateParameter(valid_594961, JString, required = true,
                                 default = nil)
  if valid_594961 != nil:
    section.add "StartTimeUtc", valid_594961
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594962: Call_GetPartitionEventList_594951; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_594962.validator(path, query, header, formData, body)
  let scheme = call_594962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594962.url(scheme.get, call_594962.host, call_594962.base,
                         call_594962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594962, url, valid)

proc call*(call_594963: Call_GetPartitionEventList_594951; EndTimeUtc: string;
          partitionId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594964 = newJObject()
  var query_594965 = newJObject()
  add(query_594965, "timeout", newJInt(timeout))
  add(query_594965, "api-version", newJString(apiVersion))
  add(query_594965, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594965, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594965, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594964, "partitionId", newJString(partitionId))
  add(query_594965, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594965, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594963.call(path_594964, query_594965, nil, nil, nil)

var getPartitionEventList* = Call_GetPartitionEventList_594951(
    name: "getPartitionEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Events",
    validator: validate_GetPartitionEventList_594952, base: "",
    url: url_GetPartitionEventList_594953, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicasEventList_594966 = ref object of OpenApiRestCall_593439
proc url_GetPartitionReplicasEventList_594968(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicasEventList_594967(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_594969 = path.getOrDefault("partitionId")
  valid_594969 = validateParameter(valid_594969, JString, required = true,
                                 default = nil)
  if valid_594969 != nil:
    section.add "partitionId", valid_594969
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594970 = query.getOrDefault("timeout")
  valid_594970 = validateParameter(valid_594970, JInt, required = false,
                                 default = newJInt(60))
  if valid_594970 != nil:
    section.add "timeout", valid_594970
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594971 = query.getOrDefault("api-version")
  valid_594971 = validateParameter(valid_594971, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594971 != nil:
    section.add "api-version", valid_594971
  var valid_594972 = query.getOrDefault("SkipCorrelationLookup")
  valid_594972 = validateParameter(valid_594972, JBool, required = false, default = nil)
  if valid_594972 != nil:
    section.add "SkipCorrelationLookup", valid_594972
  var valid_594973 = query.getOrDefault("EventsTypesFilter")
  valid_594973 = validateParameter(valid_594973, JString, required = false,
                                 default = nil)
  if valid_594973 != nil:
    section.add "EventsTypesFilter", valid_594973
  var valid_594974 = query.getOrDefault("EndTimeUtc")
  valid_594974 = validateParameter(valid_594974, JString, required = true,
                                 default = nil)
  if valid_594974 != nil:
    section.add "EndTimeUtc", valid_594974
  var valid_594975 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594975 = validateParameter(valid_594975, JBool, required = false, default = nil)
  if valid_594975 != nil:
    section.add "ExcludeAnalysisEvents", valid_594975
  var valid_594976 = query.getOrDefault("StartTimeUtc")
  valid_594976 = validateParameter(valid_594976, JString, required = true,
                                 default = nil)
  if valid_594976 != nil:
    section.add "StartTimeUtc", valid_594976
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594977: Call_GetPartitionReplicasEventList_594966; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_594977.validator(path, query, header, formData, body)
  let scheme = call_594977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594977.url(scheme.get, call_594977.host, call_594977.base,
                         call_594977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594977, url, valid)

proc call*(call_594978: Call_GetPartitionReplicasEventList_594966;
          EndTimeUtc: string; partitionId: string; StartTimeUtc: string;
          timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicasEventList
  ## The response is list of ReplicaEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594979 = newJObject()
  var query_594980 = newJObject()
  add(query_594980, "timeout", newJInt(timeout))
  add(query_594980, "api-version", newJString(apiVersion))
  add(query_594980, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594980, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594980, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594979, "partitionId", newJString(partitionId))
  add(query_594980, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594980, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594978.call(path_594979, query_594980, nil, nil, nil)

var getPartitionReplicasEventList* = Call_GetPartitionReplicasEventList_594966(
    name: "getPartitionReplicasEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Replicas/Events",
    validator: validate_GetPartitionReplicasEventList_594967, base: "",
    url: url_GetPartitionReplicasEventList_594968,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicaEventList_594981 = ref object of OpenApiRestCall_593439
proc url_GetPartitionReplicaEventList_594983(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicaEventList_594982(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_594984 = path.getOrDefault("replicaId")
  valid_594984 = validateParameter(valid_594984, JString, required = true,
                                 default = nil)
  if valid_594984 != nil:
    section.add "replicaId", valid_594984
  var valid_594985 = path.getOrDefault("partitionId")
  valid_594985 = validateParameter(valid_594985, JString, required = true,
                                 default = nil)
  if valid_594985 != nil:
    section.add "partitionId", valid_594985
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594986 = query.getOrDefault("timeout")
  valid_594986 = validateParameter(valid_594986, JInt, required = false,
                                 default = newJInt(60))
  if valid_594986 != nil:
    section.add "timeout", valid_594986
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594987 = query.getOrDefault("api-version")
  valid_594987 = validateParameter(valid_594987, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594987 != nil:
    section.add "api-version", valid_594987
  var valid_594988 = query.getOrDefault("SkipCorrelationLookup")
  valid_594988 = validateParameter(valid_594988, JBool, required = false, default = nil)
  if valid_594988 != nil:
    section.add "SkipCorrelationLookup", valid_594988
  var valid_594989 = query.getOrDefault("EventsTypesFilter")
  valid_594989 = validateParameter(valid_594989, JString, required = false,
                                 default = nil)
  if valid_594989 != nil:
    section.add "EventsTypesFilter", valid_594989
  var valid_594990 = query.getOrDefault("EndTimeUtc")
  valid_594990 = validateParameter(valid_594990, JString, required = true,
                                 default = nil)
  if valid_594990 != nil:
    section.add "EndTimeUtc", valid_594990
  var valid_594991 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594991 = validateParameter(valid_594991, JBool, required = false, default = nil)
  if valid_594991 != nil:
    section.add "ExcludeAnalysisEvents", valid_594991
  var valid_594992 = query.getOrDefault("StartTimeUtc")
  valid_594992 = validateParameter(valid_594992, JString, required = true,
                                 default = nil)
  if valid_594992 != nil:
    section.add "StartTimeUtc", valid_594992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594993: Call_GetPartitionReplicaEventList_594981; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_594993.validator(path, query, header, formData, body)
  let scheme = call_594993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594993.url(scheme.get, call_594993.host, call_594993.base,
                         call_594993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594993, url, valid)

proc call*(call_594994: Call_GetPartitionReplicaEventList_594981;
          replicaId: string; EndTimeUtc: string; partitionId: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicaEventList
  ## The response is list of ReplicaEvent objects.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594995 = newJObject()
  var query_594996 = newJObject()
  add(path_594995, "replicaId", newJString(replicaId))
  add(query_594996, "timeout", newJInt(timeout))
  add(query_594996, "api-version", newJString(apiVersion))
  add(query_594996, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594996, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594996, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594995, "partitionId", newJString(partitionId))
  add(query_594996, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594996, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594994.call(path_594995, query_594996, nil, nil, nil)

var getPartitionReplicaEventList* = Call_GetPartitionReplicaEventList_594981(
    name: "getPartitionReplicaEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events",
    validator: validate_GetPartitionReplicaEventList_594982, base: "",
    url: url_GetPartitionReplicaEventList_594983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServicesEventList_594997 = ref object of OpenApiRestCall_593439
proc url_GetServicesEventList_594999(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetServicesEventList_594998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_595000 = query.getOrDefault("timeout")
  valid_595000 = validateParameter(valid_595000, JInt, required = false,
                                 default = newJInt(60))
  if valid_595000 != nil:
    section.add "timeout", valid_595000
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595001 = query.getOrDefault("api-version")
  valid_595001 = validateParameter(valid_595001, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595001 != nil:
    section.add "api-version", valid_595001
  var valid_595002 = query.getOrDefault("SkipCorrelationLookup")
  valid_595002 = validateParameter(valid_595002, JBool, required = false, default = nil)
  if valid_595002 != nil:
    section.add "SkipCorrelationLookup", valid_595002
  var valid_595003 = query.getOrDefault("EventsTypesFilter")
  valid_595003 = validateParameter(valid_595003, JString, required = false,
                                 default = nil)
  if valid_595003 != nil:
    section.add "EventsTypesFilter", valid_595003
  var valid_595004 = query.getOrDefault("EndTimeUtc")
  valid_595004 = validateParameter(valid_595004, JString, required = true,
                                 default = nil)
  if valid_595004 != nil:
    section.add "EndTimeUtc", valid_595004
  var valid_595005 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_595005 = validateParameter(valid_595005, JBool, required = false, default = nil)
  if valid_595005 != nil:
    section.add "ExcludeAnalysisEvents", valid_595005
  var valid_595006 = query.getOrDefault("StartTimeUtc")
  valid_595006 = validateParameter(valid_595006, JString, required = true,
                                 default = nil)
  if valid_595006 != nil:
    section.add "StartTimeUtc", valid_595006
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595007: Call_GetServicesEventList_594997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_595007.validator(path, query, header, formData, body)
  let scheme = call_595007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595007.url(scheme.get, call_595007.host, call_595007.base,
                         call_595007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595007, url, valid)

proc call*(call_595008: Call_GetServicesEventList_594997; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServicesEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_595009 = newJObject()
  add(query_595009, "timeout", newJInt(timeout))
  add(query_595009, "api-version", newJString(apiVersion))
  add(query_595009, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_595009, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_595009, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_595009, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_595009, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_595008.call(nil, query_595009, nil, nil, nil)

var getServicesEventList* = Call_GetServicesEventList_594997(
    name: "getServicesEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Services/Events",
    validator: validate_GetServicesEventList_594998, base: "",
    url: url_GetServicesEventList_594999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceEventList_595010 = ref object of OpenApiRestCall_593439
proc url_GetServiceEventList_595012(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceEventList_595011(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_595013 = path.getOrDefault("serviceId")
  valid_595013 = validateParameter(valid_595013, JString, required = true,
                                 default = nil)
  if valid_595013 != nil:
    section.add "serviceId", valid_595013
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_595014 = query.getOrDefault("timeout")
  valid_595014 = validateParameter(valid_595014, JInt, required = false,
                                 default = newJInt(60))
  if valid_595014 != nil:
    section.add "timeout", valid_595014
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595015 = query.getOrDefault("api-version")
  valid_595015 = validateParameter(valid_595015, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595015 != nil:
    section.add "api-version", valid_595015
  var valid_595016 = query.getOrDefault("SkipCorrelationLookup")
  valid_595016 = validateParameter(valid_595016, JBool, required = false, default = nil)
  if valid_595016 != nil:
    section.add "SkipCorrelationLookup", valid_595016
  var valid_595017 = query.getOrDefault("EventsTypesFilter")
  valid_595017 = validateParameter(valid_595017, JString, required = false,
                                 default = nil)
  if valid_595017 != nil:
    section.add "EventsTypesFilter", valid_595017
  var valid_595018 = query.getOrDefault("EndTimeUtc")
  valid_595018 = validateParameter(valid_595018, JString, required = true,
                                 default = nil)
  if valid_595018 != nil:
    section.add "EndTimeUtc", valid_595018
  var valid_595019 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_595019 = validateParameter(valid_595019, JBool, required = false, default = nil)
  if valid_595019 != nil:
    section.add "ExcludeAnalysisEvents", valid_595019
  var valid_595020 = query.getOrDefault("StartTimeUtc")
  valid_595020 = validateParameter(valid_595020, JString, required = true,
                                 default = nil)
  if valid_595020 != nil:
    section.add "StartTimeUtc", valid_595020
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595021: Call_GetServiceEventList_595010; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_595021.validator(path, query, header, formData, body)
  let scheme = call_595021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595021.url(scheme.get, call_595021.host, call_595021.base,
                         call_595021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595021, url, valid)

proc call*(call_595022: Call_GetServiceEventList_595010; EndTimeUtc: string;
          serviceId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServiceEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_595023 = newJObject()
  var query_595024 = newJObject()
  add(query_595024, "timeout", newJInt(timeout))
  add(query_595024, "api-version", newJString(apiVersion))
  add(query_595024, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_595024, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_595024, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_595023, "serviceId", newJString(serviceId))
  add(query_595024, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_595024, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_595022.call(path_595023, query_595024, nil, nil, nil)

var getServiceEventList* = Call_GetServiceEventList_595010(
    name: "getServiceEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Services/{serviceId}/$/Events",
    validator: validate_GetServiceEventList_595011, base: "",
    url: url_GetServiceEventList_595012, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFaultOperationList_595025 = ref object of OpenApiRestCall_593439
proc url_GetFaultOperationList_595027(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFaultOperationList_595026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: JInt (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: JInt (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  section = newJObject()
  var valid_595028 = query.getOrDefault("timeout")
  valid_595028 = validateParameter(valid_595028, JInt, required = false,
                                 default = newJInt(60))
  if valid_595028 != nil:
    section.add "timeout", valid_595028
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595029 = query.getOrDefault("api-version")
  valid_595029 = validateParameter(valid_595029, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595029 != nil:
    section.add "api-version", valid_595029
  var valid_595030 = query.getOrDefault("TypeFilter")
  valid_595030 = validateParameter(valid_595030, JInt, required = true,
                                 default = newJInt(65535))
  if valid_595030 != nil:
    section.add "TypeFilter", valid_595030
  var valid_595031 = query.getOrDefault("StateFilter")
  valid_595031 = validateParameter(valid_595031, JInt, required = true,
                                 default = newJInt(65535))
  if valid_595031 != nil:
    section.add "StateFilter", valid_595031
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595032: Call_GetFaultOperationList_595025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  let valid = call_595032.validator(path, query, header, formData, body)
  let scheme = call_595032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595032.url(scheme.get, call_595032.host, call_595032.base,
                         call_595032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595032, url, valid)

proc call*(call_595033: Call_GetFaultOperationList_595025; timeout: int = 60;
          apiVersion: string = "6.0"; TypeFilter: int = 65535; StateFilter: int = 65535): Recallable =
  ## getFaultOperationList
  ## Gets the list of user-induced fault operations filtered by provided input.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: int (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: int (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  var query_595034 = newJObject()
  add(query_595034, "timeout", newJInt(timeout))
  add(query_595034, "api-version", newJString(apiVersion))
  add(query_595034, "TypeFilter", newJInt(TypeFilter))
  add(query_595034, "StateFilter", newJInt(StateFilter))
  result = call_595033.call(nil, query_595034, nil, nil, nil)

var getFaultOperationList* = Call_GetFaultOperationList_595025(
    name: "getFaultOperationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/",
    validator: validate_GetFaultOperationList_595026, base: "",
    url: url_GetFaultOperationList_595027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelOperation_595035 = ref object of OpenApiRestCall_593439
proc url_CancelOperation_595037(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelOperation_595036(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: JBool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  section = newJObject()
  var valid_595038 = query.getOrDefault("timeout")
  valid_595038 = validateParameter(valid_595038, JInt, required = false,
                                 default = newJInt(60))
  if valid_595038 != nil:
    section.add "timeout", valid_595038
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595039 = query.getOrDefault("api-version")
  valid_595039 = validateParameter(valid_595039, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595039 != nil:
    section.add "api-version", valid_595039
  var valid_595040 = query.getOrDefault("OperationId")
  valid_595040 = validateParameter(valid_595040, JString, required = true,
                                 default = nil)
  if valid_595040 != nil:
    section.add "OperationId", valid_595040
  var valid_595041 = query.getOrDefault("Force")
  valid_595041 = validateParameter(valid_595041, JBool, required = true,
                                 default = newJBool(false))
  if valid_595041 != nil:
    section.add "Force", valid_595041
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595042: Call_CancelOperation_595035; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  let valid = call_595042.validator(path, query, header, formData, body)
  let scheme = call_595042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595042.url(scheme.get, call_595042.host, call_595042.base,
                         call_595042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595042, url, valid)

proc call*(call_595043: Call_CancelOperation_595035; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Force: bool = false): Recallable =
  ## cancelOperation
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: bool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  var query_595044 = newJObject()
  add(query_595044, "timeout", newJInt(timeout))
  add(query_595044, "api-version", newJString(apiVersion))
  add(query_595044, "OperationId", newJString(OperationId))
  add(query_595044, "Force", newJBool(Force))
  result = call_595043.call(nil, query_595044, nil, nil, nil)

var cancelOperation* = Call_CancelOperation_595035(name: "cancelOperation",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/$/Cancel",
    validator: validate_CancelOperation_595036, base: "", url: url_CancelOperation_595037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeTransitionProgress_595045 = ref object of OpenApiRestCall_593439
proc url_GetNodeTransitionProgress_595047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetTransitionProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeTransitionProgress_595046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595048 = path.getOrDefault("nodeName")
  valid_595048 = validateParameter(valid_595048, JString, required = true,
                                 default = nil)
  if valid_595048 != nil:
    section.add "nodeName", valid_595048
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595049 = query.getOrDefault("timeout")
  valid_595049 = validateParameter(valid_595049, JInt, required = false,
                                 default = newJInt(60))
  if valid_595049 != nil:
    section.add "timeout", valid_595049
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595050 = query.getOrDefault("api-version")
  valid_595050 = validateParameter(valid_595050, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595050 != nil:
    section.add "api-version", valid_595050
  var valid_595051 = query.getOrDefault("OperationId")
  valid_595051 = validateParameter(valid_595051, JString, required = true,
                                 default = nil)
  if valid_595051 != nil:
    section.add "OperationId", valid_595051
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595052: Call_GetNodeTransitionProgress_595045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  let valid = call_595052.validator(path, query, header, formData, body)
  let scheme = call_595052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595052.url(scheme.get, call_595052.host, call_595052.base,
                         call_595052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595052, url, valid)

proc call*(call_595053: Call_GetNodeTransitionProgress_595045; nodeName: string;
          OperationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeTransitionProgress
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595054 = newJObject()
  var query_595055 = newJObject()
  add(query_595055, "timeout", newJInt(timeout))
  add(query_595055, "api-version", newJString(apiVersion))
  add(path_595054, "nodeName", newJString(nodeName))
  add(query_595055, "OperationId", newJString(OperationId))
  result = call_595053.call(path_595054, query_595055, nil, nil, nil)

var getNodeTransitionProgress* = Call_GetNodeTransitionProgress_595045(
    name: "getNodeTransitionProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/GetTransitionProgress",
    validator: validate_GetNodeTransitionProgress_595046, base: "",
    url: url_GetNodeTransitionProgress_595047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartNodeTransition_595056 = ref object of OpenApiRestCall_593439
proc url_StartNodeTransition_595058(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/StartTransition/")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartNodeTransition_595057(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595059 = path.getOrDefault("nodeName")
  valid_595059 = validateParameter(valid_595059, JString, required = true,
                                 default = nil)
  if valid_595059 != nil:
    section.add "nodeName", valid_595059
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeInstanceId: JString (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: JInt (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: JString (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595060 = query.getOrDefault("timeout")
  valid_595060 = validateParameter(valid_595060, JInt, required = false,
                                 default = newJInt(60))
  if valid_595060 != nil:
    section.add "timeout", valid_595060
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595061 = query.getOrDefault("api-version")
  valid_595061 = validateParameter(valid_595061, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595061 != nil:
    section.add "api-version", valid_595061
  var valid_595062 = query.getOrDefault("NodeInstanceId")
  valid_595062 = validateParameter(valid_595062, JString, required = true,
                                 default = nil)
  if valid_595062 != nil:
    section.add "NodeInstanceId", valid_595062
  var valid_595063 = query.getOrDefault("StopDurationInSeconds")
  valid_595063 = validateParameter(valid_595063, JInt, required = true, default = nil)
  if valid_595063 != nil:
    section.add "StopDurationInSeconds", valid_595063
  var valid_595064 = query.getOrDefault("NodeTransitionType")
  valid_595064 = validateParameter(valid_595064, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595064 != nil:
    section.add "NodeTransitionType", valid_595064
  var valid_595065 = query.getOrDefault("OperationId")
  valid_595065 = validateParameter(valid_595065, JString, required = true,
                                 default = nil)
  if valid_595065 != nil:
    section.add "OperationId", valid_595065
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595066: Call_StartNodeTransition_595056; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  let valid = call_595066.validator(path, query, header, formData, body)
  let scheme = call_595066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595066.url(scheme.get, call_595066.host, call_595066.base,
                         call_595066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595066, url, valid)

proc call*(call_595067: Call_StartNodeTransition_595056; nodeName: string;
          NodeInstanceId: string; StopDurationInSeconds: int; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          NodeTransitionType: string = "Invalid"): Recallable =
  ## startNodeTransition
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   NodeInstanceId: string (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: int (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: string (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595068 = newJObject()
  var query_595069 = newJObject()
  add(query_595069, "timeout", newJInt(timeout))
  add(query_595069, "api-version", newJString(apiVersion))
  add(path_595068, "nodeName", newJString(nodeName))
  add(query_595069, "NodeInstanceId", newJString(NodeInstanceId))
  add(query_595069, "StopDurationInSeconds", newJInt(StopDurationInSeconds))
  add(query_595069, "NodeTransitionType", newJString(NodeTransitionType))
  add(query_595069, "OperationId", newJString(OperationId))
  result = call_595067.call(path_595068, query_595069, nil, nil, nil)

var startNodeTransition* = Call_StartNodeTransition_595056(
    name: "startNodeTransition", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/StartTransition/",
    validator: validate_StartNodeTransition_595057, base: "",
    url: url_StartNodeTransition_595058, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDataLossProgress_595070 = ref object of OpenApiRestCall_593439
proc url_GetDataLossProgress_595072(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetDataLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDataLossProgress_595071(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595073 = path.getOrDefault("partitionId")
  valid_595073 = validateParameter(valid_595073, JString, required = true,
                                 default = nil)
  if valid_595073 != nil:
    section.add "partitionId", valid_595073
  var valid_595074 = path.getOrDefault("serviceId")
  valid_595074 = validateParameter(valid_595074, JString, required = true,
                                 default = nil)
  if valid_595074 != nil:
    section.add "serviceId", valid_595074
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595075 = query.getOrDefault("timeout")
  valid_595075 = validateParameter(valid_595075, JInt, required = false,
                                 default = newJInt(60))
  if valid_595075 != nil:
    section.add "timeout", valid_595075
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595076 = query.getOrDefault("api-version")
  valid_595076 = validateParameter(valid_595076, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595076 != nil:
    section.add "api-version", valid_595076
  var valid_595077 = query.getOrDefault("OperationId")
  valid_595077 = validateParameter(valid_595077, JString, required = true,
                                 default = nil)
  if valid_595077 != nil:
    section.add "OperationId", valid_595077
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595078: Call_GetDataLossProgress_595070; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  let valid = call_595078.validator(path, query, header, formData, body)
  let scheme = call_595078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595078.url(scheme.get, call_595078.host, call_595078.base,
                         call_595078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595078, url, valid)

proc call*(call_595079: Call_GetDataLossProgress_595070; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDataLossProgress
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595080 = newJObject()
  var query_595081 = newJObject()
  add(query_595081, "timeout", newJInt(timeout))
  add(query_595081, "api-version", newJString(apiVersion))
  add(path_595080, "partitionId", newJString(partitionId))
  add(path_595080, "serviceId", newJString(serviceId))
  add(query_595081, "OperationId", newJString(OperationId))
  result = call_595079.call(path_595080, query_595081, nil, nil, nil)

var getDataLossProgress* = Call_GetDataLossProgress_595070(
    name: "getDataLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress",
    validator: validate_GetDataLossProgress_595071, base: "",
    url: url_GetDataLossProgress_595072, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetQuorumLossProgress_595082 = ref object of OpenApiRestCall_593439
proc url_GetQuorumLossProgress_595084(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetQuorumLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetQuorumLossProgress_595083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595085 = path.getOrDefault("partitionId")
  valid_595085 = validateParameter(valid_595085, JString, required = true,
                                 default = nil)
  if valid_595085 != nil:
    section.add "partitionId", valid_595085
  var valid_595086 = path.getOrDefault("serviceId")
  valid_595086 = validateParameter(valid_595086, JString, required = true,
                                 default = nil)
  if valid_595086 != nil:
    section.add "serviceId", valid_595086
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595087 = query.getOrDefault("timeout")
  valid_595087 = validateParameter(valid_595087, JInt, required = false,
                                 default = newJInt(60))
  if valid_595087 != nil:
    section.add "timeout", valid_595087
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595088 = query.getOrDefault("api-version")
  valid_595088 = validateParameter(valid_595088, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595088 != nil:
    section.add "api-version", valid_595088
  var valid_595089 = query.getOrDefault("OperationId")
  valid_595089 = validateParameter(valid_595089, JString, required = true,
                                 default = nil)
  if valid_595089 != nil:
    section.add "OperationId", valid_595089
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595090: Call_GetQuorumLossProgress_595082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  let valid = call_595090.validator(path, query, header, formData, body)
  let scheme = call_595090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595090.url(scheme.get, call_595090.host, call_595090.base,
                         call_595090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595090, url, valid)

proc call*(call_595091: Call_GetQuorumLossProgress_595082; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getQuorumLossProgress
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595092 = newJObject()
  var query_595093 = newJObject()
  add(query_595093, "timeout", newJInt(timeout))
  add(query_595093, "api-version", newJString(apiVersion))
  add(path_595092, "partitionId", newJString(partitionId))
  add(path_595092, "serviceId", newJString(serviceId))
  add(query_595093, "OperationId", newJString(OperationId))
  result = call_595091.call(path_595092, query_595093, nil, nil, nil)

var getQuorumLossProgress* = Call_GetQuorumLossProgress_595082(
    name: "getQuorumLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress",
    validator: validate_GetQuorumLossProgress_595083, base: "",
    url: url_GetQuorumLossProgress_595084, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestartProgress_595094 = ref object of OpenApiRestCall_593439
proc url_GetPartitionRestartProgress_595096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestartProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestartProgress_595095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595097 = path.getOrDefault("partitionId")
  valid_595097 = validateParameter(valid_595097, JString, required = true,
                                 default = nil)
  if valid_595097 != nil:
    section.add "partitionId", valid_595097
  var valid_595098 = path.getOrDefault("serviceId")
  valid_595098 = validateParameter(valid_595098, JString, required = true,
                                 default = nil)
  if valid_595098 != nil:
    section.add "serviceId", valid_595098
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595099 = query.getOrDefault("timeout")
  valid_595099 = validateParameter(valid_595099, JInt, required = false,
                                 default = newJInt(60))
  if valid_595099 != nil:
    section.add "timeout", valid_595099
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595100 = query.getOrDefault("api-version")
  valid_595100 = validateParameter(valid_595100, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595100 != nil:
    section.add "api-version", valid_595100
  var valid_595101 = query.getOrDefault("OperationId")
  valid_595101 = validateParameter(valid_595101, JString, required = true,
                                 default = nil)
  if valid_595101 != nil:
    section.add "OperationId", valid_595101
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595102: Call_GetPartitionRestartProgress_595094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  let valid = call_595102.validator(path, query, header, formData, body)
  let scheme = call_595102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595102.url(scheme.get, call_595102.host, call_595102.base,
                         call_595102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595102, url, valid)

proc call*(call_595103: Call_GetPartitionRestartProgress_595094;
          partitionId: string; serviceId: string; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionRestartProgress
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595104 = newJObject()
  var query_595105 = newJObject()
  add(query_595105, "timeout", newJInt(timeout))
  add(query_595105, "api-version", newJString(apiVersion))
  add(path_595104, "partitionId", newJString(partitionId))
  add(path_595104, "serviceId", newJString(serviceId))
  add(query_595105, "OperationId", newJString(OperationId))
  result = call_595103.call(path_595104, query_595105, nil, nil, nil)

var getPartitionRestartProgress* = Call_GetPartitionRestartProgress_595094(
    name: "getPartitionRestartProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress",
    validator: validate_GetPartitionRestartProgress_595095, base: "",
    url: url_GetPartitionRestartProgress_595096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartDataLoss_595106 = ref object of OpenApiRestCall_593439
proc url_StartDataLoss_595108(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartDataLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartDataLoss_595107(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595109 = path.getOrDefault("partitionId")
  valid_595109 = validateParameter(valid_595109, JString, required = true,
                                 default = nil)
  if valid_595109 != nil:
    section.add "partitionId", valid_595109
  var valid_595110 = path.getOrDefault("serviceId")
  valid_595110 = validateParameter(valid_595110, JString, required = true,
                                 default = nil)
  if valid_595110 != nil:
    section.add "serviceId", valid_595110
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DataLossMode: JString (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595111 = query.getOrDefault("timeout")
  valid_595111 = validateParameter(valid_595111, JInt, required = false,
                                 default = newJInt(60))
  if valid_595111 != nil:
    section.add "timeout", valid_595111
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595112 = query.getOrDefault("api-version")
  valid_595112 = validateParameter(valid_595112, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595112 != nil:
    section.add "api-version", valid_595112
  var valid_595113 = query.getOrDefault("DataLossMode")
  valid_595113 = validateParameter(valid_595113, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595113 != nil:
    section.add "DataLossMode", valid_595113
  var valid_595114 = query.getOrDefault("OperationId")
  valid_595114 = validateParameter(valid_595114, JString, required = true,
                                 default = nil)
  if valid_595114 != nil:
    section.add "OperationId", valid_595114
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595115: Call_StartDataLoss_595106; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  let valid = call_595115.validator(path, query, header, formData, body)
  let scheme = call_595115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595115.url(scheme.get, call_595115.host, call_595115.base,
                         call_595115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595115, url, valid)

proc call*(call_595116: Call_StartDataLoss_595106; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; DataLossMode: string = "Invalid"): Recallable =
  ## startDataLoss
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   DataLossMode: string (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595117 = newJObject()
  var query_595118 = newJObject()
  add(query_595118, "timeout", newJInt(timeout))
  add(query_595118, "api-version", newJString(apiVersion))
  add(path_595117, "partitionId", newJString(partitionId))
  add(query_595118, "DataLossMode", newJString(DataLossMode))
  add(path_595117, "serviceId", newJString(serviceId))
  add(query_595118, "OperationId", newJString(OperationId))
  result = call_595116.call(path_595117, query_595118, nil, nil, nil)

var startDataLoss* = Call_StartDataLoss_595106(name: "startDataLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss",
    validator: validate_StartDataLoss_595107, base: "", url: url_StartDataLoss_595108,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartQuorumLoss_595119 = ref object of OpenApiRestCall_593439
proc url_StartQuorumLoss_595121(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartQuorumLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartQuorumLoss_595120(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595122 = path.getOrDefault("partitionId")
  valid_595122 = validateParameter(valid_595122, JString, required = true,
                                 default = nil)
  if valid_595122 != nil:
    section.add "partitionId", valid_595122
  var valid_595123 = path.getOrDefault("serviceId")
  valid_595123 = validateParameter(valid_595123, JString, required = true,
                                 default = nil)
  if valid_595123 != nil:
    section.add "serviceId", valid_595123
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: JString (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   QuorumLossDuration: JInt (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595124 = query.getOrDefault("timeout")
  valid_595124 = validateParameter(valid_595124, JInt, required = false,
                                 default = newJInt(60))
  if valid_595124 != nil:
    section.add "timeout", valid_595124
  assert query != nil,
        "query argument is necessary due to required `QuorumLossMode` field"
  var valid_595125 = query.getOrDefault("QuorumLossMode")
  valid_595125 = validateParameter(valid_595125, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595125 != nil:
    section.add "QuorumLossMode", valid_595125
  var valid_595126 = query.getOrDefault("api-version")
  valid_595126 = validateParameter(valid_595126, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595126 != nil:
    section.add "api-version", valid_595126
  var valid_595127 = query.getOrDefault("QuorumLossDuration")
  valid_595127 = validateParameter(valid_595127, JInt, required = true, default = nil)
  if valid_595127 != nil:
    section.add "QuorumLossDuration", valid_595127
  var valid_595128 = query.getOrDefault("OperationId")
  valid_595128 = validateParameter(valid_595128, JString, required = true,
                                 default = nil)
  if valid_595128 != nil:
    section.add "OperationId", valid_595128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595129: Call_StartQuorumLoss_595119; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  let valid = call_595129.validator(path, query, header, formData, body)
  let scheme = call_595129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595129.url(scheme.get, call_595129.host, call_595129.base,
                         call_595129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595129, url, valid)

proc call*(call_595130: Call_StartQuorumLoss_595119; partitionId: string;
          QuorumLossDuration: int; serviceId: string; OperationId: string;
          timeout: int = 60; QuorumLossMode: string = "Invalid";
          apiVersion: string = "6.0"): Recallable =
  ## startQuorumLoss
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: string (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   QuorumLossDuration: int (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595131 = newJObject()
  var query_595132 = newJObject()
  add(query_595132, "timeout", newJInt(timeout))
  add(query_595132, "QuorumLossMode", newJString(QuorumLossMode))
  add(query_595132, "api-version", newJString(apiVersion))
  add(path_595131, "partitionId", newJString(partitionId))
  add(query_595132, "QuorumLossDuration", newJInt(QuorumLossDuration))
  add(path_595131, "serviceId", newJString(serviceId))
  add(query_595132, "OperationId", newJString(OperationId))
  result = call_595130.call(path_595131, query_595132, nil, nil, nil)

var startQuorumLoss* = Call_StartQuorumLoss_595119(name: "startQuorumLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss",
    validator: validate_StartQuorumLoss_595120, base: "", url: url_StartQuorumLoss_595121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartPartitionRestart_595133 = ref object of OpenApiRestCall_593439
proc url_StartPartitionRestart_595135(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartRestart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartPartitionRestart_595134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595136 = path.getOrDefault("partitionId")
  valid_595136 = validateParameter(valid_595136, JString, required = true,
                                 default = nil)
  if valid_595136 != nil:
    section.add "partitionId", valid_595136
  var valid_595137 = path.getOrDefault("serviceId")
  valid_595137 = validateParameter(valid_595137, JString, required = true,
                                 default = nil)
  if valid_595137 != nil:
    section.add "serviceId", valid_595137
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: JString (required)
  ##                       : Describe which partitions to restart.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595138 = query.getOrDefault("timeout")
  valid_595138 = validateParameter(valid_595138, JInt, required = false,
                                 default = newJInt(60))
  if valid_595138 != nil:
    section.add "timeout", valid_595138
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595139 = query.getOrDefault("api-version")
  valid_595139 = validateParameter(valid_595139, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595139 != nil:
    section.add "api-version", valid_595139
  var valid_595140 = query.getOrDefault("RestartPartitionMode")
  valid_595140 = validateParameter(valid_595140, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595140 != nil:
    section.add "RestartPartitionMode", valid_595140
  var valid_595141 = query.getOrDefault("OperationId")
  valid_595141 = validateParameter(valid_595141, JString, required = true,
                                 default = nil)
  if valid_595141 != nil:
    section.add "OperationId", valid_595141
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595142: Call_StartPartitionRestart_595133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  let valid = call_595142.validator(path, query, header, formData, body)
  let scheme = call_595142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595142.url(scheme.get, call_595142.host, call_595142.base,
                         call_595142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595142, url, valid)

proc call*(call_595143: Call_StartPartitionRestart_595133; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; RestartPartitionMode: string = "Invalid"): Recallable =
  ## startPartitionRestart
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: string (required)
  ##                       : Describe which partitions to restart.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595144 = newJObject()
  var query_595145 = newJObject()
  add(query_595145, "timeout", newJInt(timeout))
  add(query_595145, "api-version", newJString(apiVersion))
  add(query_595145, "RestartPartitionMode", newJString(RestartPartitionMode))
  add(path_595144, "partitionId", newJString(partitionId))
  add(path_595144, "serviceId", newJString(serviceId))
  add(query_595145, "OperationId", newJString(OperationId))
  result = call_595143.call(path_595144, query_595145, nil, nil, nil)

var startPartitionRestart* = Call_StartPartitionRestart_595133(
    name: "startPartitionRestart", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart",
    validator: validate_StartPartitionRestart_595134, base: "",
    url: url_StartPartitionRestart_595135, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootContent_595146 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreRootContent_595148(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootContent_595147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595149 = query.getOrDefault("timeout")
  valid_595149 = validateParameter(valid_595149, JInt, required = false,
                                 default = newJInt(60))
  if valid_595149 != nil:
    section.add "timeout", valid_595149
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595150 = query.getOrDefault("api-version")
  valid_595150 = validateParameter(valid_595150, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595150 != nil:
    section.add "api-version", valid_595150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595151: Call_GetImageStoreRootContent_595146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  let valid = call_595151.validator(path, query, header, formData, body)
  let scheme = call_595151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595151.url(scheme.get, call_595151.host, call_595151.base,
                         call_595151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595151, url, valid)

proc call*(call_595152: Call_GetImageStoreRootContent_595146; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getImageStoreRootContent
  ## Returns the information about the image store content at the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_595153 = newJObject()
  add(query_595153, "timeout", newJInt(timeout))
  add(query_595153, "api-version", newJString(apiVersion))
  result = call_595152.call(nil, query_595153, nil, nil, nil)

var getImageStoreRootContent* = Call_GetImageStoreRootContent_595146(
    name: "getImageStoreRootContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore",
    validator: validate_GetImageStoreRootContent_595147, base: "",
    url: url_GetImageStoreRootContent_595148, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CommitImageStoreUploadSession_595154 = ref object of OpenApiRestCall_593439
proc url_CommitImageStoreUploadSession_595156(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CommitImageStoreUploadSession_595155(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595157 = query.getOrDefault("timeout")
  valid_595157 = validateParameter(valid_595157, JInt, required = false,
                                 default = newJInt(60))
  if valid_595157 != nil:
    section.add "timeout", valid_595157
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595158 = query.getOrDefault("api-version")
  valid_595158 = validateParameter(valid_595158, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595158 != nil:
    section.add "api-version", valid_595158
  var valid_595159 = query.getOrDefault("session-id")
  valid_595159 = validateParameter(valid_595159, JString, required = true,
                                 default = nil)
  if valid_595159 != nil:
    section.add "session-id", valid_595159
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595160: Call_CommitImageStoreUploadSession_595154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  let valid = call_595160.validator(path, query, header, formData, body)
  let scheme = call_595160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595160.url(scheme.get, call_595160.host, call_595160.base,
                         call_595160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595160, url, valid)

proc call*(call_595161: Call_CommitImageStoreUploadSession_595154;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## commitImageStoreUploadSession
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_595162 = newJObject()
  add(query_595162, "timeout", newJInt(timeout))
  add(query_595162, "api-version", newJString(apiVersion))
  add(query_595162, "session-id", newJString(sessionId))
  result = call_595161.call(nil, query_595162, nil, nil, nil)

var commitImageStoreUploadSession* = Call_CommitImageStoreUploadSession_595154(
    name: "commitImageStoreUploadSession", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/CommitUploadSession",
    validator: validate_CommitImageStoreUploadSession_595155, base: "",
    url: url_CommitImageStoreUploadSession_595156,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CopyImageStoreContent_595163 = ref object of OpenApiRestCall_593439
proc url_CopyImageStoreContent_595165(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CopyImageStoreContent_595164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595166 = query.getOrDefault("timeout")
  valid_595166 = validateParameter(valid_595166, JInt, required = false,
                                 default = newJInt(60))
  if valid_595166 != nil:
    section.add "timeout", valid_595166
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595167 = query.getOrDefault("api-version")
  valid_595167 = validateParameter(valid_595167, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595167 != nil:
    section.add "api-version", valid_595167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595169: Call_CopyImageStoreContent_595163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  let valid = call_595169.validator(path, query, header, formData, body)
  let scheme = call_595169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595169.url(scheme.get, call_595169.host, call_595169.base,
                         call_595169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595169, url, valid)

proc call*(call_595170: Call_CopyImageStoreContent_595163;
          ImageStoreCopyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## copyImageStoreContent
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  var query_595171 = newJObject()
  var body_595172 = newJObject()
  add(query_595171, "timeout", newJInt(timeout))
  add(query_595171, "api-version", newJString(apiVersion))
  if ImageStoreCopyDescription != nil:
    body_595172 = ImageStoreCopyDescription
  result = call_595170.call(nil, query_595171, nil, nil, body_595172)

var copyImageStoreContent* = Call_CopyImageStoreContent_595163(
    name: "copyImageStoreContent", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/Copy",
    validator: validate_CopyImageStoreContent_595164, base: "",
    url: url_CopyImageStoreContent_595165, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreUploadSession_595173 = ref object of OpenApiRestCall_593439
proc url_DeleteImageStoreUploadSession_595175(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteImageStoreUploadSession_595174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595176 = query.getOrDefault("timeout")
  valid_595176 = validateParameter(valid_595176, JInt, required = false,
                                 default = newJInt(60))
  if valid_595176 != nil:
    section.add "timeout", valid_595176
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595177 = query.getOrDefault("api-version")
  valid_595177 = validateParameter(valid_595177, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595177 != nil:
    section.add "api-version", valid_595177
  var valid_595178 = query.getOrDefault("session-id")
  valid_595178 = validateParameter(valid_595178, JString, required = true,
                                 default = nil)
  if valid_595178 != nil:
    section.add "session-id", valid_595178
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595179: Call_DeleteImageStoreUploadSession_595173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  let valid = call_595179.validator(path, query, header, formData, body)
  let scheme = call_595179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595179.url(scheme.get, call_595179.host, call_595179.base,
                         call_595179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595179, url, valid)

proc call*(call_595180: Call_DeleteImageStoreUploadSession_595173;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreUploadSession
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_595181 = newJObject()
  add(query_595181, "timeout", newJInt(timeout))
  add(query_595181, "api-version", newJString(apiVersion))
  add(query_595181, "session-id", newJString(sessionId))
  result = call_595180.call(nil, query_595181, nil, nil, nil)

var deleteImageStoreUploadSession* = Call_DeleteImageStoreUploadSession_595173(
    name: "deleteImageStoreUploadSession", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/$/DeleteUploadSession",
    validator: validate_DeleteImageStoreUploadSession_595174, base: "",
    url: url_DeleteImageStoreUploadSession_595175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootFolderSize_595182 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreRootFolderSize_595184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootFolderSize_595183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the total size of files at the root and children folders in image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595185 = query.getOrDefault("timeout")
  valid_595185 = validateParameter(valid_595185, JInt, required = false,
                                 default = newJInt(60))
  if valid_595185 != nil:
    section.add "timeout", valid_595185
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595186 = query.getOrDefault("api-version")
  valid_595186 = validateParameter(valid_595186, JString, required = true,
                                 default = newJString("6.5"))
  if valid_595186 != nil:
    section.add "api-version", valid_595186
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595187: Call_GetImageStoreRootFolderSize_595182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the total size of files at the root and children folders in image store.
  ## 
  let valid = call_595187.validator(path, query, header, formData, body)
  let scheme = call_595187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595187.url(scheme.get, call_595187.host, call_595187.base,
                         call_595187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595187, url, valid)

proc call*(call_595188: Call_GetImageStoreRootFolderSize_595182; timeout: int = 60;
          apiVersion: string = "6.5"): Recallable =
  ## getImageStoreRootFolderSize
  ## Returns the total size of files at the root and children folders in image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_595189 = newJObject()
  add(query_595189, "timeout", newJInt(timeout))
  add(query_595189, "api-version", newJString(apiVersion))
  result = call_595188.call(nil, query_595189, nil, nil, nil)

var getImageStoreRootFolderSize* = Call_GetImageStoreRootFolderSize_595182(
    name: "getImageStoreRootFolderSize", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/FolderSize",
    validator: validate_GetImageStoreRootFolderSize_595183, base: "",
    url: url_GetImageStoreRootFolderSize_595184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionById_595190 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreUploadSessionById_595192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreUploadSessionById_595191(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595193 = query.getOrDefault("timeout")
  valid_595193 = validateParameter(valid_595193, JInt, required = false,
                                 default = newJInt(60))
  if valid_595193 != nil:
    section.add "timeout", valid_595193
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595194 = query.getOrDefault("api-version")
  valid_595194 = validateParameter(valid_595194, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595194 != nil:
    section.add "api-version", valid_595194
  var valid_595195 = query.getOrDefault("session-id")
  valid_595195 = validateParameter(valid_595195, JString, required = true,
                                 default = nil)
  if valid_595195 != nil:
    section.add "session-id", valid_595195
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595196: Call_GetImageStoreUploadSessionById_595190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_595196.validator(path, query, header, formData, body)
  let scheme = call_595196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595196.url(scheme.get, call_595196.host, call_595196.base,
                         call_595196.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595196, url, valid)

proc call*(call_595197: Call_GetImageStoreUploadSessionById_595190;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionById
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_595198 = newJObject()
  add(query_595198, "timeout", newJInt(timeout))
  add(query_595198, "api-version", newJString(apiVersion))
  add(query_595198, "session-id", newJString(sessionId))
  result = call_595197.call(nil, query_595198, nil, nil, nil)

var getImageStoreUploadSessionById* = Call_GetImageStoreUploadSessionById_595190(
    name: "getImageStoreUploadSessionById", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionById_595191, base: "",
    url: url_GetImageStoreUploadSessionById_595192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFile_595209 = ref object of OpenApiRestCall_593439
proc url_UploadFile_595211(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFile_595210(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595212 = path.getOrDefault("contentPath")
  valid_595212 = validateParameter(valid_595212, JString, required = true,
                                 default = nil)
  if valid_595212 != nil:
    section.add "contentPath", valid_595212
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595213 = query.getOrDefault("timeout")
  valid_595213 = validateParameter(valid_595213, JInt, required = false,
                                 default = newJInt(60))
  if valid_595213 != nil:
    section.add "timeout", valid_595213
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595214 = query.getOrDefault("api-version")
  valid_595214 = validateParameter(valid_595214, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595214 != nil:
    section.add "api-version", valid_595214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595215: Call_UploadFile_595209; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  let valid = call_595215.validator(path, query, header, formData, body)
  let scheme = call_595215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595215.url(scheme.get, call_595215.host, call_595215.base,
                         call_595215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595215, url, valid)

proc call*(call_595216: Call_UploadFile_595209; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFile
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595217 = newJObject()
  var query_595218 = newJObject()
  add(query_595218, "timeout", newJInt(timeout))
  add(query_595218, "api-version", newJString(apiVersion))
  add(path_595217, "contentPath", newJString(contentPath))
  result = call_595216.call(path_595217, query_595218, nil, nil, nil)

var uploadFile* = Call_UploadFile_595209(name: "uploadFile",
                                      meth: HttpMethod.HttpPut,
                                      host: "azure.local:19080",
                                      route: "/ImageStore/{contentPath}",
                                      validator: validate_UploadFile_595210,
                                      base: "", url: url_UploadFile_595211,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreContent_595199 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreContent_595201(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreContent_595200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595202 = path.getOrDefault("contentPath")
  valid_595202 = validateParameter(valid_595202, JString, required = true,
                                 default = nil)
  if valid_595202 != nil:
    section.add "contentPath", valid_595202
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595203 = query.getOrDefault("timeout")
  valid_595203 = validateParameter(valid_595203, JInt, required = false,
                                 default = newJInt(60))
  if valid_595203 != nil:
    section.add "timeout", valid_595203
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595204 = query.getOrDefault("api-version")
  valid_595204 = validateParameter(valid_595204, JString, required = true,
                                 default = newJString("6.2"))
  if valid_595204 != nil:
    section.add "api-version", valid_595204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595205: Call_GetImageStoreContent_595199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_595205.validator(path, query, header, formData, body)
  let scheme = call_595205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595205.url(scheme.get, call_595205.host, call_595205.base,
                         call_595205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595205, url, valid)

proc call*(call_595206: Call_GetImageStoreContent_595199; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## getImageStoreContent
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595207 = newJObject()
  var query_595208 = newJObject()
  add(query_595208, "timeout", newJInt(timeout))
  add(query_595208, "api-version", newJString(apiVersion))
  add(path_595207, "contentPath", newJString(contentPath))
  result = call_595206.call(path_595207, query_595208, nil, nil, nil)

var getImageStoreContent* = Call_GetImageStoreContent_595199(
    name: "getImageStoreContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_GetImageStoreContent_595200, base: "",
    url: url_GetImageStoreContent_595201, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreContent_595219 = ref object of OpenApiRestCall_593439
proc url_DeleteImageStoreContent_595221(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteImageStoreContent_595220(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595222 = path.getOrDefault("contentPath")
  valid_595222 = validateParameter(valid_595222, JString, required = true,
                                 default = nil)
  if valid_595222 != nil:
    section.add "contentPath", valid_595222
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595223 = query.getOrDefault("timeout")
  valid_595223 = validateParameter(valid_595223, JInt, required = false,
                                 default = newJInt(60))
  if valid_595223 != nil:
    section.add "timeout", valid_595223
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595224 = query.getOrDefault("api-version")
  valid_595224 = validateParameter(valid_595224, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595224 != nil:
    section.add "api-version", valid_595224
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595225: Call_DeleteImageStoreContent_595219; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  let valid = call_595225.validator(path, query, header, formData, body)
  let scheme = call_595225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595225.url(scheme.get, call_595225.host, call_595225.base,
                         call_595225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595225, url, valid)

proc call*(call_595226: Call_DeleteImageStoreContent_595219; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreContent
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595227 = newJObject()
  var query_595228 = newJObject()
  add(query_595228, "timeout", newJInt(timeout))
  add(query_595228, "api-version", newJString(apiVersion))
  add(path_595227, "contentPath", newJString(contentPath))
  result = call_595226.call(path_595227, query_595228, nil, nil, nil)

var deleteImageStoreContent* = Call_DeleteImageStoreContent_595219(
    name: "deleteImageStoreContent", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_DeleteImageStoreContent_595220, base: "",
    url: url_DeleteImageStoreContent_595221, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreFolderSize_595229 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreFolderSize_595231(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/FolderSize")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreFolderSize_595230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595232 = path.getOrDefault("contentPath")
  valid_595232 = validateParameter(valid_595232, JString, required = true,
                                 default = nil)
  if valid_595232 != nil:
    section.add "contentPath", valid_595232
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595233 = query.getOrDefault("timeout")
  valid_595233 = validateParameter(valid_595233, JInt, required = false,
                                 default = newJInt(60))
  if valid_595233 != nil:
    section.add "timeout", valid_595233
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595234 = query.getOrDefault("api-version")
  valid_595234 = validateParameter(valid_595234, JString, required = true,
                                 default = newJString("6.5"))
  if valid_595234 != nil:
    section.add "api-version", valid_595234
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595235: Call_GetImageStoreFolderSize_595229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_595235.validator(path, query, header, formData, body)
  let scheme = call_595235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595235.url(scheme.get, call_595235.host, call_595235.base,
                         call_595235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595235, url, valid)

proc call*(call_595236: Call_GetImageStoreFolderSize_595229; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.5"): Recallable =
  ## getImageStoreFolderSize
  ## Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595237 = newJObject()
  var query_595238 = newJObject()
  add(query_595238, "timeout", newJInt(timeout))
  add(query_595238, "api-version", newJString(apiVersion))
  add(path_595237, "contentPath", newJString(contentPath))
  result = call_595236.call(path_595237, query_595238, nil, nil, nil)

var getImageStoreFolderSize* = Call_GetImageStoreFolderSize_595229(
    name: "getImageStoreFolderSize", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}/$/FolderSize",
    validator: validate_GetImageStoreFolderSize_595230, base: "",
    url: url_GetImageStoreFolderSize_595231, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionByPath_595239 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreUploadSessionByPath_595241(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/GetUploadSession")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreUploadSessionByPath_595240(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595242 = path.getOrDefault("contentPath")
  valid_595242 = validateParameter(valid_595242, JString, required = true,
                                 default = nil)
  if valid_595242 != nil:
    section.add "contentPath", valid_595242
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595243 = query.getOrDefault("timeout")
  valid_595243 = validateParameter(valid_595243, JInt, required = false,
                                 default = newJInt(60))
  if valid_595243 != nil:
    section.add "timeout", valid_595243
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595244 = query.getOrDefault("api-version")
  valid_595244 = validateParameter(valid_595244, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595244 != nil:
    section.add "api-version", valid_595244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595245: Call_GetImageStoreUploadSessionByPath_595239;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_595245.validator(path, query, header, formData, body)
  let scheme = call_595245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595245.url(scheme.get, call_595245.host, call_595245.base,
                         call_595245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595245, url, valid)

proc call*(call_595246: Call_GetImageStoreUploadSessionByPath_595239;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionByPath
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595247 = newJObject()
  var query_595248 = newJObject()
  add(query_595248, "timeout", newJInt(timeout))
  add(query_595248, "api-version", newJString(apiVersion))
  add(path_595247, "contentPath", newJString(contentPath))
  result = call_595246.call(path_595247, query_595248, nil, nil, nil)

var getImageStoreUploadSessionByPath* = Call_GetImageStoreUploadSessionByPath_595239(
    name: "getImageStoreUploadSessionByPath", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionByPath_595240, base: "",
    url: url_GetImageStoreUploadSessionByPath_595241,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFileChunk_595249 = ref object of OpenApiRestCall_593439
proc url_UploadFileChunk_595251(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/UploadChunk")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFileChunk_595250(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595252 = path.getOrDefault("contentPath")
  valid_595252 = validateParameter(valid_595252, JString, required = true,
                                 default = nil)
  if valid_595252 != nil:
    section.add "contentPath", valid_595252
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595253 = query.getOrDefault("timeout")
  valid_595253 = validateParameter(valid_595253, JInt, required = false,
                                 default = newJInt(60))
  if valid_595253 != nil:
    section.add "timeout", valid_595253
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595254 = query.getOrDefault("api-version")
  valid_595254 = validateParameter(valid_595254, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595254 != nil:
    section.add "api-version", valid_595254
  var valid_595255 = query.getOrDefault("session-id")
  valid_595255 = validateParameter(valid_595255, JString, required = true,
                                 default = nil)
  if valid_595255 != nil:
    section.add "session-id", valid_595255
  result.add "query", section
  ## parameters in `header` object:
  ##   Content-Range: JString (required)
  ##                : When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
  section = newJObject()
  assert header != nil,
        "header argument is necessary due to required `Content-Range` field"
  var valid_595256 = header.getOrDefault("Content-Range")
  valid_595256 = validateParameter(valid_595256, JString, required = true,
                                 default = nil)
  if valid_595256 != nil:
    section.add "Content-Range", valid_595256
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595257: Call_UploadFileChunk_595249; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  let valid = call_595257.validator(path, query, header, formData, body)
  let scheme = call_595257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595257.url(scheme.get, call_595257.host, call_595257.base,
                         call_595257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595257, url, valid)

proc call*(call_595258: Call_UploadFileChunk_595249; sessionId: string;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFileChunk
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595259 = newJObject()
  var query_595260 = newJObject()
  add(query_595260, "timeout", newJInt(timeout))
  add(query_595260, "api-version", newJString(apiVersion))
  add(query_595260, "session-id", newJString(sessionId))
  add(path_595259, "contentPath", newJString(contentPath))
  result = call_595258.call(path_595259, query_595260, nil, nil, nil)

var uploadFileChunk* = Call_UploadFileChunk_595249(name: "uploadFileChunk",
    meth: HttpMethod.HttpPut, host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/UploadChunk",
    validator: validate_UploadFileChunk_595250, base: "", url: url_UploadFileChunk_595251,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateName_595261 = ref object of OpenApiRestCall_593439
proc url_CreateName_595263(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateName_595262(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates the specified Service Fabric name.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595264 = query.getOrDefault("timeout")
  valid_595264 = validateParameter(valid_595264, JInt, required = false,
                                 default = newJInt(60))
  if valid_595264 != nil:
    section.add "timeout", valid_595264
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595265 = query.getOrDefault("api-version")
  valid_595265 = validateParameter(valid_595265, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595265 != nil:
    section.add "api-version", valid_595265
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595267: Call_CreateName_595261; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates the specified Service Fabric name.
  ## 
  let valid = call_595267.validator(path, query, header, formData, body)
  let scheme = call_595267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595267.url(scheme.get, call_595267.host, call_595267.base,
                         call_595267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595267, url, valid)

proc call*(call_595268: Call_CreateName_595261; NameDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createName
  ## Creates the specified Service Fabric name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  var query_595269 = newJObject()
  var body_595270 = newJObject()
  add(query_595269, "timeout", newJInt(timeout))
  add(query_595269, "api-version", newJString(apiVersion))
  if NameDescription != nil:
    body_595270 = NameDescription
  result = call_595268.call(nil, query_595269, nil, nil, body_595270)

var createName* = Call_CreateName_595261(name: "createName",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Names/$/Create",
                                      validator: validate_CreateName_595262,
                                      base: "", url: url_CreateName_595263,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNameExistsInfo_595271 = ref object of OpenApiRestCall_593439
proc url_GetNameExistsInfo_595273(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNameExistsInfo_595272(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595274 = path.getOrDefault("nameId")
  valid_595274 = validateParameter(valid_595274, JString, required = true,
                                 default = nil)
  if valid_595274 != nil:
    section.add "nameId", valid_595274
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595275 = query.getOrDefault("timeout")
  valid_595275 = validateParameter(valid_595275, JInt, required = false,
                                 default = newJInt(60))
  if valid_595275 != nil:
    section.add "timeout", valid_595275
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595276 = query.getOrDefault("api-version")
  valid_595276 = validateParameter(valid_595276, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595276 != nil:
    section.add "api-version", valid_595276
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595277: Call_GetNameExistsInfo_595271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  let valid = call_595277.validator(path, query, header, formData, body)
  let scheme = call_595277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595277.url(scheme.get, call_595277.host, call_595277.base,
                         call_595277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595277, url, valid)

proc call*(call_595278: Call_GetNameExistsInfo_595271; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNameExistsInfo
  ## Returns whether the specified Service Fabric name exists.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_595279 = newJObject()
  var query_595280 = newJObject()
  add(query_595280, "timeout", newJInt(timeout))
  add(query_595280, "api-version", newJString(apiVersion))
  add(path_595279, "nameId", newJString(nameId))
  result = call_595278.call(path_595279, query_595280, nil, nil, nil)

var getNameExistsInfo* = Call_GetNameExistsInfo_595271(name: "getNameExistsInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Names/{nameId}",
    validator: validate_GetNameExistsInfo_595272, base: "",
    url: url_GetNameExistsInfo_595273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteName_595281 = ref object of OpenApiRestCall_593439
proc url_DeleteName_595283(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteName_595282(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595284 = path.getOrDefault("nameId")
  valid_595284 = validateParameter(valid_595284, JString, required = true,
                                 default = nil)
  if valid_595284 != nil:
    section.add "nameId", valid_595284
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595285 = query.getOrDefault("timeout")
  valid_595285 = validateParameter(valid_595285, JInt, required = false,
                                 default = newJInt(60))
  if valid_595285 != nil:
    section.add "timeout", valid_595285
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595286 = query.getOrDefault("api-version")
  valid_595286 = validateParameter(valid_595286, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595286 != nil:
    section.add "api-version", valid_595286
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595287: Call_DeleteName_595281; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  let valid = call_595287.validator(path, query, header, formData, body)
  let scheme = call_595287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595287.url(scheme.get, call_595287.host, call_595287.base,
                         call_595287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595287, url, valid)

proc call*(call_595288: Call_DeleteName_595281; nameId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deleteName
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_595289 = newJObject()
  var query_595290 = newJObject()
  add(query_595290, "timeout", newJInt(timeout))
  add(query_595290, "api-version", newJString(apiVersion))
  add(path_595289, "nameId", newJString(nameId))
  result = call_595288.call(path_595289, query_595290, nil, nil, nil)

var deleteName* = Call_DeleteName_595281(name: "deleteName",
                                      meth: HttpMethod.HttpDelete,
                                      host: "azure.local:19080",
                                      route: "/Names/{nameId}",
                                      validator: validate_DeleteName_595282,
                                      base: "", url: url_DeleteName_595283,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfoList_595291 = ref object of OpenApiRestCall_593439
proc url_GetPropertyInfoList_595293(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfoList_595292(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595294 = path.getOrDefault("nameId")
  valid_595294 = validateParameter(valid_595294, JString, required = true,
                                 default = nil)
  if valid_595294 != nil:
    section.add "nameId", valid_595294
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: JBool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  section = newJObject()
  var valid_595295 = query.getOrDefault("timeout")
  valid_595295 = validateParameter(valid_595295, JInt, required = false,
                                 default = newJInt(60))
  if valid_595295 != nil:
    section.add "timeout", valid_595295
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595296 = query.getOrDefault("api-version")
  valid_595296 = validateParameter(valid_595296, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595296 != nil:
    section.add "api-version", valid_595296
  var valid_595297 = query.getOrDefault("ContinuationToken")
  valid_595297 = validateParameter(valid_595297, JString, required = false,
                                 default = nil)
  if valid_595297 != nil:
    section.add "ContinuationToken", valid_595297
  var valid_595298 = query.getOrDefault("IncludeValues")
  valid_595298 = validateParameter(valid_595298, JBool, required = false,
                                 default = newJBool(false))
  if valid_595298 != nil:
    section.add "IncludeValues", valid_595298
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595299: Call_GetPropertyInfoList_595291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  let valid = call_595299.validator(path, query, header, formData, body)
  let scheme = call_595299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595299.url(scheme.get, call_595299.host, call_595299.base,
                         call_595299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595299, url, valid)

proc call*(call_595300: Call_GetPropertyInfoList_595291; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          IncludeValues: bool = false): Recallable =
  ## getPropertyInfoList
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: bool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  var path_595301 = newJObject()
  var query_595302 = newJObject()
  add(query_595302, "timeout", newJInt(timeout))
  add(query_595302, "api-version", newJString(apiVersion))
  add(path_595301, "nameId", newJString(nameId))
  add(query_595302, "ContinuationToken", newJString(ContinuationToken))
  add(query_595302, "IncludeValues", newJBool(IncludeValues))
  result = call_595300.call(path_595301, query_595302, nil, nil, nil)

var getPropertyInfoList* = Call_GetPropertyInfoList_595291(
    name: "getPropertyInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Names/{nameId}/$/GetProperties",
    validator: validate_GetPropertyInfoList_595292, base: "",
    url: url_GetPropertyInfoList_595293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SubmitPropertyBatch_595303 = ref object of OpenApiRestCall_593439
proc url_SubmitPropertyBatch_595305(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties/$/SubmitBatch")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SubmitPropertyBatch_595304(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595306 = path.getOrDefault("nameId")
  valid_595306 = validateParameter(valid_595306, JString, required = true,
                                 default = nil)
  if valid_595306 != nil:
    section.add "nameId", valid_595306
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595307 = query.getOrDefault("timeout")
  valid_595307 = validateParameter(valid_595307, JInt, required = false,
                                 default = newJInt(60))
  if valid_595307 != nil:
    section.add "timeout", valid_595307
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595308 = query.getOrDefault("api-version")
  valid_595308 = validateParameter(valid_595308, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595308 != nil:
    section.add "api-version", valid_595308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595310: Call_SubmitPropertyBatch_595303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  let valid = call_595310.validator(path, query, header, formData, body)
  let scheme = call_595310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595310.url(scheme.get, call_595310.host, call_595310.base,
                         call_595310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595310, url, valid)

proc call*(call_595311: Call_SubmitPropertyBatch_595303; nameId: string;
          PropertyBatchDescriptionList: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## submitPropertyBatch
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  var path_595312 = newJObject()
  var query_595313 = newJObject()
  var body_595314 = newJObject()
  add(query_595313, "timeout", newJInt(timeout))
  add(query_595313, "api-version", newJString(apiVersion))
  add(path_595312, "nameId", newJString(nameId))
  if PropertyBatchDescriptionList != nil:
    body_595314 = PropertyBatchDescriptionList
  result = call_595311.call(path_595312, query_595313, nil, nil, body_595314)

var submitPropertyBatch* = Call_SubmitPropertyBatch_595303(
    name: "submitPropertyBatch", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperties/$/SubmitBatch",
    validator: validate_SubmitPropertyBatch_595304, base: "",
    url: url_SubmitPropertyBatch_595305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutProperty_595326 = ref object of OpenApiRestCall_593439
proc url_PutProperty_595328(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_PutProperty_595327(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595329 = path.getOrDefault("nameId")
  valid_595329 = validateParameter(valid_595329, JString, required = true,
                                 default = nil)
  if valid_595329 != nil:
    section.add "nameId", valid_595329
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595330 = query.getOrDefault("timeout")
  valid_595330 = validateParameter(valid_595330, JInt, required = false,
                                 default = newJInt(60))
  if valid_595330 != nil:
    section.add "timeout", valid_595330
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595331 = query.getOrDefault("api-version")
  valid_595331 = validateParameter(valid_595331, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595331 != nil:
    section.add "api-version", valid_595331
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595333: Call_PutProperty_595326; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  let valid = call_595333.validator(path, query, header, formData, body)
  let scheme = call_595333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595333.url(scheme.get, call_595333.host, call_595333.base,
                         call_595333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595333, url, valid)

proc call*(call_595334: Call_PutProperty_595326; nameId: string;
          PropertyDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## putProperty
  ## Creates or updates the specified Service Fabric property under a given name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  var path_595335 = newJObject()
  var query_595336 = newJObject()
  var body_595337 = newJObject()
  add(query_595336, "timeout", newJInt(timeout))
  add(query_595336, "api-version", newJString(apiVersion))
  add(path_595335, "nameId", newJString(nameId))
  if PropertyDescription != nil:
    body_595337 = PropertyDescription
  result = call_595334.call(path_595335, query_595336, nil, nil, body_595337)

var putProperty* = Call_PutProperty_595326(name: "putProperty",
                                        meth: HttpMethod.HttpPut,
                                        host: "azure.local:19080",
                                        route: "/Names/{nameId}/$/GetProperty",
                                        validator: validate_PutProperty_595327,
                                        base: "", url: url_PutProperty_595328,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfo_595315 = ref object of OpenApiRestCall_593439
proc url_GetPropertyInfo_595317(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfo_595316(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595318 = path.getOrDefault("nameId")
  valid_595318 = validateParameter(valid_595318, JString, required = true,
                                 default = nil)
  if valid_595318 != nil:
    section.add "nameId", valid_595318
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_595319 = query.getOrDefault("timeout")
  valid_595319 = validateParameter(valid_595319, JInt, required = false,
                                 default = newJInt(60))
  if valid_595319 != nil:
    section.add "timeout", valid_595319
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595320 = query.getOrDefault("api-version")
  valid_595320 = validateParameter(valid_595320, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595320 != nil:
    section.add "api-version", valid_595320
  var valid_595321 = query.getOrDefault("PropertyName")
  valid_595321 = validateParameter(valid_595321, JString, required = true,
                                 default = nil)
  if valid_595321 != nil:
    section.add "PropertyName", valid_595321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595322: Call_GetPropertyInfo_595315; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  let valid = call_595322.validator(path, query, header, formData, body)
  let scheme = call_595322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595322.url(scheme.get, call_595322.host, call_595322.base,
                         call_595322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595322, url, valid)

proc call*(call_595323: Call_GetPropertyInfo_595315; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPropertyInfo
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_595324 = newJObject()
  var query_595325 = newJObject()
  add(query_595325, "timeout", newJInt(timeout))
  add(query_595325, "api-version", newJString(apiVersion))
  add(path_595324, "nameId", newJString(nameId))
  add(query_595325, "PropertyName", newJString(PropertyName))
  result = call_595323.call(path_595324, query_595325, nil, nil, nil)

var getPropertyInfo* = Call_GetPropertyInfo_595315(name: "getPropertyInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_GetPropertyInfo_595316,
    base: "", url: url_GetPropertyInfo_595317, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProperty_595338 = ref object of OpenApiRestCall_593439
proc url_DeleteProperty_595340(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteProperty_595339(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595341 = path.getOrDefault("nameId")
  valid_595341 = validateParameter(valid_595341, JString, required = true,
                                 default = nil)
  if valid_595341 != nil:
    section.add "nameId", valid_595341
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_595342 = query.getOrDefault("timeout")
  valid_595342 = validateParameter(valid_595342, JInt, required = false,
                                 default = newJInt(60))
  if valid_595342 != nil:
    section.add "timeout", valid_595342
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595343 = query.getOrDefault("api-version")
  valid_595343 = validateParameter(valid_595343, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595343 != nil:
    section.add "api-version", valid_595343
  var valid_595344 = query.getOrDefault("PropertyName")
  valid_595344 = validateParameter(valid_595344, JString, required = true,
                                 default = nil)
  if valid_595344 != nil:
    section.add "PropertyName", valid_595344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595345: Call_DeleteProperty_595338; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  let valid = call_595345.validator(path, query, header, formData, body)
  let scheme = call_595345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595345.url(scheme.get, call_595345.host, call_595345.base,
                         call_595345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595345, url, valid)

proc call*(call_595346: Call_DeleteProperty_595338; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteProperty
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_595347 = newJObject()
  var query_595348 = newJObject()
  add(query_595348, "timeout", newJInt(timeout))
  add(query_595348, "api-version", newJString(apiVersion))
  add(path_595347, "nameId", newJString(nameId))
  add(query_595348, "PropertyName", newJString(PropertyName))
  result = call_595346.call(path_595347, query_595348, nil, nil, nil)

var deleteProperty* = Call_DeleteProperty_595338(name: "deleteProperty",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_DeleteProperty_595339,
    base: "", url: url_DeleteProperty_595340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSubNameInfoList_595349 = ref object of OpenApiRestCall_593439
proc url_GetSubNameInfoList_595351(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetSubNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetSubNameInfoList_595350(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595352 = path.getOrDefault("nameId")
  valid_595352 = validateParameter(valid_595352, JString, required = true,
                                 default = nil)
  if valid_595352 != nil:
    section.add "nameId", valid_595352
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: JBool
  ##            : Allows specifying that the search performed should be recursive.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_595353 = query.getOrDefault("timeout")
  valid_595353 = validateParameter(valid_595353, JInt, required = false,
                                 default = newJInt(60))
  if valid_595353 != nil:
    section.add "timeout", valid_595353
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595354 = query.getOrDefault("api-version")
  valid_595354 = validateParameter(valid_595354, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595354 != nil:
    section.add "api-version", valid_595354
  var valid_595355 = query.getOrDefault("Recursive")
  valid_595355 = validateParameter(valid_595355, JBool, required = false,
                                 default = newJBool(false))
  if valid_595355 != nil:
    section.add "Recursive", valid_595355
  var valid_595356 = query.getOrDefault("ContinuationToken")
  valid_595356 = validateParameter(valid_595356, JString, required = false,
                                 default = nil)
  if valid_595356 != nil:
    section.add "ContinuationToken", valid_595356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595357: Call_GetSubNameInfoList_595349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  let valid = call_595357.validator(path, query, header, formData, body)
  let scheme = call_595357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595357.url(scheme.get, call_595357.host, call_595357.base,
                         call_595357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595357, url, valid)

proc call*(call_595358: Call_GetSubNameInfoList_595349; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Recursive: bool = false;
          ContinuationToken: string = ""): Recallable =
  ## getSubNameInfoList
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: bool
  ##            : Allows specifying that the search performed should be recursive.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_595359 = newJObject()
  var query_595360 = newJObject()
  add(query_595360, "timeout", newJInt(timeout))
  add(query_595360, "api-version", newJString(apiVersion))
  add(query_595360, "Recursive", newJBool(Recursive))
  add(path_595359, "nameId", newJString(nameId))
  add(query_595360, "ContinuationToken", newJString(ContinuationToken))
  result = call_595358.call(path_595359, query_595360, nil, nil, nil)

var getSubNameInfoList* = Call_GetSubNameInfoList_595349(
    name: "getSubNameInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetSubNames",
    validator: validate_GetSubNameInfoList_595350, base: "",
    url: url_GetSubNameInfoList_595351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfoList_595361 = ref object of OpenApiRestCall_593439
proc url_GetNodeInfoList_595363(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodeInfoList_595362(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: JString
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_595364 = query.getOrDefault("timeout")
  valid_595364 = validateParameter(valid_595364, JInt, required = false,
                                 default = newJInt(60))
  if valid_595364 != nil:
    section.add "timeout", valid_595364
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595365 = query.getOrDefault("api-version")
  valid_595365 = validateParameter(valid_595365, JString, required = true,
                                 default = newJString("6.3"))
  if valid_595365 != nil:
    section.add "api-version", valid_595365
  var valid_595366 = query.getOrDefault("NodeStatusFilter")
  valid_595366 = validateParameter(valid_595366, JString, required = false,
                                 default = newJString("default"))
  if valid_595366 != nil:
    section.add "NodeStatusFilter", valid_595366
  var valid_595367 = query.getOrDefault("ContinuationToken")
  valid_595367 = validateParameter(valid_595367, JString, required = false,
                                 default = nil)
  if valid_595367 != nil:
    section.add "ContinuationToken", valid_595367
  var valid_595368 = query.getOrDefault("MaxResults")
  valid_595368 = validateParameter(valid_595368, JInt, required = false,
                                 default = newJInt(0))
  if valid_595368 != nil:
    section.add "MaxResults", valid_595368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595369: Call_GetNodeInfoList_595361; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  let valid = call_595369.validator(path, query, header, formData, body)
  let scheme = call_595369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595369.url(scheme.get, call_595369.host, call_595369.base,
                         call_595369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595369, url, valid)

proc call*(call_595370: Call_GetNodeInfoList_595361; timeout: int = 60;
          apiVersion: string = "6.3"; NodeStatusFilter: string = "default";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getNodeInfoList
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: string
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_595371 = newJObject()
  add(query_595371, "timeout", newJInt(timeout))
  add(query_595371, "api-version", newJString(apiVersion))
  add(query_595371, "NodeStatusFilter", newJString(NodeStatusFilter))
  add(query_595371, "ContinuationToken", newJString(ContinuationToken))
  add(query_595371, "MaxResults", newJInt(MaxResults))
  result = call_595370.call(nil, query_595371, nil, nil, nil)

var getNodeInfoList* = Call_GetNodeInfoList_595361(name: "getNodeInfoList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Nodes",
    validator: validate_GetNodeInfoList_595362, base: "", url: url_GetNodeInfoList_595363,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfo_595372 = ref object of OpenApiRestCall_593439
proc url_GetNodeInfo_595374(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeInfo_595373(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595375 = path.getOrDefault("nodeName")
  valid_595375 = validateParameter(valid_595375, JString, required = true,
                                 default = nil)
  if valid_595375 != nil:
    section.add "nodeName", valid_595375
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595376 = query.getOrDefault("timeout")
  valid_595376 = validateParameter(valid_595376, JInt, required = false,
                                 default = newJInt(60))
  if valid_595376 != nil:
    section.add "timeout", valid_595376
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595377 = query.getOrDefault("api-version")
  valid_595377 = validateParameter(valid_595377, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595377 != nil:
    section.add "api-version", valid_595377
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595378: Call_GetNodeInfo_595372; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  let valid = call_595378.validator(path, query, header, formData, body)
  let scheme = call_595378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595378.url(scheme.get, call_595378.host, call_595378.base,
                         call_595378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595378, url, valid)

proc call*(call_595379: Call_GetNodeInfo_595372; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getNodeInfo
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595380 = newJObject()
  var query_595381 = newJObject()
  add(query_595381, "timeout", newJInt(timeout))
  add(query_595381, "api-version", newJString(apiVersion))
  add(path_595380, "nodeName", newJString(nodeName))
  result = call_595379.call(path_595380, query_595381, nil, nil, nil)

var getNodeInfo* = Call_GetNodeInfo_595372(name: "getNodeInfo",
                                        meth: HttpMethod.HttpGet,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}",
                                        validator: validate_GetNodeInfo_595373,
                                        base: "", url: url_GetNodeInfo_595374,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableNode_595382 = ref object of OpenApiRestCall_593439
proc url_EnableNode_595384(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Activate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableNode_595383(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595385 = path.getOrDefault("nodeName")
  valid_595385 = validateParameter(valid_595385, JString, required = true,
                                 default = nil)
  if valid_595385 != nil:
    section.add "nodeName", valid_595385
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595386 = query.getOrDefault("timeout")
  valid_595386 = validateParameter(valid_595386, JInt, required = false,
                                 default = newJInt(60))
  if valid_595386 != nil:
    section.add "timeout", valid_595386
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595387 = query.getOrDefault("api-version")
  valid_595387 = validateParameter(valid_595387, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595387 != nil:
    section.add "api-version", valid_595387
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595388: Call_EnableNode_595382; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  let valid = call_595388.validator(path, query, header, formData, body)
  let scheme = call_595388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595388.url(scheme.get, call_595388.host, call_595388.base,
                         call_595388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595388, url, valid)

proc call*(call_595389: Call_EnableNode_595382; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## enableNode
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595390 = newJObject()
  var query_595391 = newJObject()
  add(query_595391, "timeout", newJInt(timeout))
  add(query_595391, "api-version", newJString(apiVersion))
  add(path_595390, "nodeName", newJString(nodeName))
  result = call_595389.call(path_595390, query_595391, nil, nil, nil)

var enableNode* = Call_EnableNode_595382(name: "enableNode",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Nodes/{nodeName}/$/Activate",
                                      validator: validate_EnableNode_595383,
                                      base: "", url: url_EnableNode_595384,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableNode_595392 = ref object of OpenApiRestCall_593439
proc url_DisableNode_595394(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Deactivate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableNode_595393(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595395 = path.getOrDefault("nodeName")
  valid_595395 = validateParameter(valid_595395, JString, required = true,
                                 default = nil)
  if valid_595395 != nil:
    section.add "nodeName", valid_595395
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595396 = query.getOrDefault("timeout")
  valid_595396 = validateParameter(valid_595396, JInt, required = false,
                                 default = newJInt(60))
  if valid_595396 != nil:
    section.add "timeout", valid_595396
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595397 = query.getOrDefault("api-version")
  valid_595397 = validateParameter(valid_595397, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595397 != nil:
    section.add "api-version", valid_595397
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595399: Call_DisableNode_595392; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  let valid = call_595399.validator(path, query, header, formData, body)
  let scheme = call_595399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595399.url(scheme.get, call_595399.host, call_595399.base,
                         call_595399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595399, url, valid)

proc call*(call_595400: Call_DisableNode_595392; nodeName: string;
          DeactivationIntentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## disableNode
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  var path_595401 = newJObject()
  var query_595402 = newJObject()
  var body_595403 = newJObject()
  add(query_595402, "timeout", newJInt(timeout))
  add(query_595402, "api-version", newJString(apiVersion))
  add(path_595401, "nodeName", newJString(nodeName))
  if DeactivationIntentDescription != nil:
    body_595403 = DeactivationIntentDescription
  result = call_595400.call(path_595401, query_595402, nil, nil, body_595403)

var disableNode* = Call_DisableNode_595392(name: "disableNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080", route: "/Nodes/{nodeName}/$/Deactivate",
                                        validator: validate_DisableNode_595393,
                                        base: "", url: url_DisableNode_595394,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeployServicePackageToNode_595404 = ref object of OpenApiRestCall_593439
proc url_DeployServicePackageToNode_595406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/DeployServicePackage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeployServicePackageToNode_595405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595407 = path.getOrDefault("nodeName")
  valid_595407 = validateParameter(valid_595407, JString, required = true,
                                 default = nil)
  if valid_595407 != nil:
    section.add "nodeName", valid_595407
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595408 = query.getOrDefault("timeout")
  valid_595408 = validateParameter(valid_595408, JInt, required = false,
                                 default = newJInt(60))
  if valid_595408 != nil:
    section.add "timeout", valid_595408
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595409 = query.getOrDefault("api-version")
  valid_595409 = validateParameter(valid_595409, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595409 != nil:
    section.add "api-version", valid_595409
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595411: Call_DeployServicePackageToNode_595404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  let valid = call_595411.validator(path, query, header, formData, body)
  let scheme = call_595411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595411.url(scheme.get, call_595411.host, call_595411.base,
                         call_595411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595411, url, valid)

proc call*(call_595412: Call_DeployServicePackageToNode_595404; nodeName: string;
          DeployServicePackageToNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deployServicePackageToNode
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  var path_595413 = newJObject()
  var query_595414 = newJObject()
  var body_595415 = newJObject()
  add(query_595414, "timeout", newJInt(timeout))
  add(query_595414, "api-version", newJString(apiVersion))
  add(path_595413, "nodeName", newJString(nodeName))
  if DeployServicePackageToNodeDescription != nil:
    body_595415 = DeployServicePackageToNodeDescription
  result = call_595412.call(path_595413, query_595414, nil, nil, body_595415)

var deployServicePackageToNode* = Call_DeployServicePackageToNode_595404(
    name: "deployServicePackageToNode", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/DeployServicePackage",
    validator: validate_DeployServicePackageToNode_595405, base: "",
    url: url_DeployServicePackageToNode_595406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfoList_595416 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationInfoList_595418(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfoList_595417(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595419 = path.getOrDefault("nodeName")
  valid_595419 = validateParameter(valid_595419, JString, required = true,
                                 default = nil)
  if valid_595419 != nil:
    section.add "nodeName", valid_595419
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_595420 = query.getOrDefault("timeout")
  valid_595420 = validateParameter(valid_595420, JInt, required = false,
                                 default = newJInt(60))
  if valid_595420 != nil:
    section.add "timeout", valid_595420
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595421 = query.getOrDefault("api-version")
  valid_595421 = validateParameter(valid_595421, JString, required = true,
                                 default = newJString("6.1"))
  if valid_595421 != nil:
    section.add "api-version", valid_595421
  var valid_595422 = query.getOrDefault("IncludeHealthState")
  valid_595422 = validateParameter(valid_595422, JBool, required = false,
                                 default = newJBool(false))
  if valid_595422 != nil:
    section.add "IncludeHealthState", valid_595422
  var valid_595423 = query.getOrDefault("ContinuationToken")
  valid_595423 = validateParameter(valid_595423, JString, required = false,
                                 default = nil)
  if valid_595423 != nil:
    section.add "ContinuationToken", valid_595423
  var valid_595424 = query.getOrDefault("MaxResults")
  valid_595424 = validateParameter(valid_595424, JInt, required = false,
                                 default = newJInt(0))
  if valid_595424 != nil:
    section.add "MaxResults", valid_595424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595425: Call_GetDeployedApplicationInfoList_595416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_595425.validator(path, query, header, formData, body)
  let scheme = call_595425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595425.url(scheme.get, call_595425.host, call_595425.base,
                         call_595425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595425, url, valid)

proc call*(call_595426: Call_GetDeployedApplicationInfoList_595416;
          nodeName: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getDeployedApplicationInfoList
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_595427 = newJObject()
  var query_595428 = newJObject()
  add(query_595428, "timeout", newJInt(timeout))
  add(query_595428, "api-version", newJString(apiVersion))
  add(path_595427, "nodeName", newJString(nodeName))
  add(query_595428, "IncludeHealthState", newJBool(IncludeHealthState))
  add(query_595428, "ContinuationToken", newJString(ContinuationToken))
  add(query_595428, "MaxResults", newJInt(MaxResults))
  result = call_595426.call(path_595427, query_595428, nil, nil, nil)

var getDeployedApplicationInfoList* = Call_GetDeployedApplicationInfoList_595416(
    name: "getDeployedApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications",
    validator: validate_GetDeployedApplicationInfoList_595417, base: "",
    url: url_GetDeployedApplicationInfoList_595418,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfo_595429 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationInfo_595431(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfo_595430(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595432 = path.getOrDefault("nodeName")
  valid_595432 = validateParameter(valid_595432, JString, required = true,
                                 default = nil)
  if valid_595432 != nil:
    section.add "nodeName", valid_595432
  var valid_595433 = path.getOrDefault("applicationId")
  valid_595433 = validateParameter(valid_595433, JString, required = true,
                                 default = nil)
  if valid_595433 != nil:
    section.add "applicationId", valid_595433
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  section = newJObject()
  var valid_595434 = query.getOrDefault("timeout")
  valid_595434 = validateParameter(valid_595434, JInt, required = false,
                                 default = newJInt(60))
  if valid_595434 != nil:
    section.add "timeout", valid_595434
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595435 = query.getOrDefault("api-version")
  valid_595435 = validateParameter(valid_595435, JString, required = true,
                                 default = newJString("6.1"))
  if valid_595435 != nil:
    section.add "api-version", valid_595435
  var valid_595436 = query.getOrDefault("IncludeHealthState")
  valid_595436 = validateParameter(valid_595436, JBool, required = false,
                                 default = newJBool(false))
  if valid_595436 != nil:
    section.add "IncludeHealthState", valid_595436
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595437: Call_GetDeployedApplicationInfo_595429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_595437.validator(path, query, header, formData, body)
  let scheme = call_595437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595437.url(scheme.get, call_595437.host, call_595437.base,
                         call_595437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595437, url, valid)

proc call*(call_595438: Call_GetDeployedApplicationInfo_595429; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false): Recallable =
  ## getDeployedApplicationInfo
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595439 = newJObject()
  var query_595440 = newJObject()
  add(query_595440, "timeout", newJInt(timeout))
  add(query_595440, "api-version", newJString(apiVersion))
  add(path_595439, "nodeName", newJString(nodeName))
  add(query_595440, "IncludeHealthState", newJBool(IncludeHealthState))
  add(path_595439, "applicationId", newJString(applicationId))
  result = call_595438.call(path_595439, query_595440, nil, nil, nil)

var getDeployedApplicationInfo* = Call_GetDeployedApplicationInfo_595429(
    name: "getDeployedApplicationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}",
    validator: validate_GetDeployedApplicationInfo_595430, base: "",
    url: url_GetDeployedApplicationInfo_595431,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedCodePackageInfoList_595441 = ref object of OpenApiRestCall_593439
proc url_GetDeployedCodePackageInfoList_595443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedCodePackageInfoList_595442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595444 = path.getOrDefault("nodeName")
  valid_595444 = validateParameter(valid_595444, JString, required = true,
                                 default = nil)
  if valid_595444 != nil:
    section.add "nodeName", valid_595444
  var valid_595445 = path.getOrDefault("applicationId")
  valid_595445 = validateParameter(valid_595445, JString, required = true,
                                 default = nil)
  if valid_595445 != nil:
    section.add "applicationId", valid_595445
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_595446 = query.getOrDefault("timeout")
  valid_595446 = validateParameter(valid_595446, JInt, required = false,
                                 default = newJInt(60))
  if valid_595446 != nil:
    section.add "timeout", valid_595446
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595447 = query.getOrDefault("api-version")
  valid_595447 = validateParameter(valid_595447, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595447 != nil:
    section.add "api-version", valid_595447
  var valid_595448 = query.getOrDefault("ServiceManifestName")
  valid_595448 = validateParameter(valid_595448, JString, required = false,
                                 default = nil)
  if valid_595448 != nil:
    section.add "ServiceManifestName", valid_595448
  var valid_595449 = query.getOrDefault("CodePackageName")
  valid_595449 = validateParameter(valid_595449, JString, required = false,
                                 default = nil)
  if valid_595449 != nil:
    section.add "CodePackageName", valid_595449
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595450: Call_GetDeployedCodePackageInfoList_595441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_595450.validator(path, query, header, formData, body)
  let scheme = call_595450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595450.url(scheme.get, call_595450.host, call_595450.base,
                         call_595450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595450, url, valid)

proc call*(call_595451: Call_GetDeployedCodePackageInfoList_595441;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          CodePackageName: string = ""): Recallable =
  ## getDeployedCodePackageInfoList
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   CodePackageName: string
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_595452 = newJObject()
  var query_595453 = newJObject()
  add(query_595453, "timeout", newJInt(timeout))
  add(query_595453, "api-version", newJString(apiVersion))
  add(path_595452, "nodeName", newJString(nodeName))
  add(query_595453, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595452, "applicationId", newJString(applicationId))
  add(query_595453, "CodePackageName", newJString(CodePackageName))
  result = call_595451.call(path_595452, query_595453, nil, nil, nil)

var getDeployedCodePackageInfoList* = Call_GetDeployedCodePackageInfoList_595441(
    name: "getDeployedCodePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages",
    validator: validate_GetDeployedCodePackageInfoList_595442, base: "",
    url: url_GetDeployedCodePackageInfoList_595443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeContainerApi_595454 = ref object of OpenApiRestCall_593439
proc url_InvokeContainerApi_595456(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerApi")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_InvokeContainerApi_595455(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595457 = path.getOrDefault("nodeName")
  valid_595457 = validateParameter(valid_595457, JString, required = true,
                                 default = nil)
  if valid_595457 != nil:
    section.add "nodeName", valid_595457
  var valid_595458 = path.getOrDefault("applicationId")
  valid_595458 = validateParameter(valid_595458, JString, required = true,
                                 default = nil)
  if valid_595458 != nil:
    section.add "applicationId", valid_595458
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: JString (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  section = newJObject()
  var valid_595459 = query.getOrDefault("timeout")
  valid_595459 = validateParameter(valid_595459, JInt, required = false,
                                 default = newJInt(60))
  if valid_595459 != nil:
    section.add "timeout", valid_595459
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595460 = query.getOrDefault("api-version")
  valid_595460 = validateParameter(valid_595460, JString, required = true,
                                 default = newJString("6.2"))
  if valid_595460 != nil:
    section.add "api-version", valid_595460
  var valid_595461 = query.getOrDefault("ServiceManifestName")
  valid_595461 = validateParameter(valid_595461, JString, required = true,
                                 default = nil)
  if valid_595461 != nil:
    section.add "ServiceManifestName", valid_595461
  var valid_595462 = query.getOrDefault("CodePackageName")
  valid_595462 = validateParameter(valid_595462, JString, required = true,
                                 default = nil)
  if valid_595462 != nil:
    section.add "CodePackageName", valid_595462
  var valid_595463 = query.getOrDefault("CodePackageInstanceId")
  valid_595463 = validateParameter(valid_595463, JString, required = true,
                                 default = nil)
  if valid_595463 != nil:
    section.add "CodePackageInstanceId", valid_595463
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595465: Call_InvokeContainerApi_595454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_595465.validator(path, query, header, formData, body)
  let scheme = call_595465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595465.url(scheme.get, call_595465.host, call_595465.base,
                         call_595465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595465, url, valid)

proc call*(call_595466: Call_InvokeContainerApi_595454; nodeName: string;
          ServiceManifestName: string; applicationId: string;
          ContainerApiRequestBody: JsonNode; CodePackageName: string;
          CodePackageInstanceId: string; timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## invokeContainerApi
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: string (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  var path_595467 = newJObject()
  var query_595468 = newJObject()
  var body_595469 = newJObject()
  add(query_595468, "timeout", newJInt(timeout))
  add(query_595468, "api-version", newJString(apiVersion))
  add(path_595467, "nodeName", newJString(nodeName))
  add(query_595468, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595467, "applicationId", newJString(applicationId))
  if ContainerApiRequestBody != nil:
    body_595469 = ContainerApiRequestBody
  add(query_595468, "CodePackageName", newJString(CodePackageName))
  add(query_595468, "CodePackageInstanceId", newJString(CodePackageInstanceId))
  result = call_595466.call(path_595467, query_595468, nil, nil, body_595469)

var invokeContainerApi* = Call_InvokeContainerApi_595454(
    name: "invokeContainerApi", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi",
    validator: validate_InvokeContainerApi_595455, base: "",
    url: url_InvokeContainerApi_595456, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainerLogsDeployedOnNode_595470 = ref object of OpenApiRestCall_593439
proc url_GetContainerLogsDeployedOnNode_595472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetContainerLogsDeployedOnNode_595471(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595473 = path.getOrDefault("nodeName")
  valid_595473 = validateParameter(valid_595473, JString, required = true,
                                 default = nil)
  if valid_595473 != nil:
    section.add "nodeName", valid_595473
  var valid_595474 = path.getOrDefault("applicationId")
  valid_595474 = validateParameter(valid_595474, JString, required = true,
                                 default = nil)
  if valid_595474 != nil:
    section.add "applicationId", valid_595474
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   Previous: JBool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_595475 = query.getOrDefault("timeout")
  valid_595475 = validateParameter(valid_595475, JInt, required = false,
                                 default = newJInt(60))
  if valid_595475 != nil:
    section.add "timeout", valid_595475
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595476 = query.getOrDefault("api-version")
  valid_595476 = validateParameter(valid_595476, JString, required = true,
                                 default = newJString("6.2"))
  if valid_595476 != nil:
    section.add "api-version", valid_595476
  var valid_595477 = query.getOrDefault("ServiceManifestName")
  valid_595477 = validateParameter(valid_595477, JString, required = true,
                                 default = nil)
  if valid_595477 != nil:
    section.add "ServiceManifestName", valid_595477
  var valid_595478 = query.getOrDefault("Tail")
  valid_595478 = validateParameter(valid_595478, JString, required = false,
                                 default = nil)
  if valid_595478 != nil:
    section.add "Tail", valid_595478
  var valid_595479 = query.getOrDefault("Previous")
  valid_595479 = validateParameter(valid_595479, JBool, required = false,
                                 default = newJBool(false))
  if valid_595479 != nil:
    section.add "Previous", valid_595479
  var valid_595480 = query.getOrDefault("CodePackageName")
  valid_595480 = validateParameter(valid_595480, JString, required = true,
                                 default = nil)
  if valid_595480 != nil:
    section.add "CodePackageName", valid_595480
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595481: Call_GetContainerLogsDeployedOnNode_595470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_595481.validator(path, query, header, formData, body)
  let scheme = call_595481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595481.url(scheme.get, call_595481.host, call_595481.base,
                         call_595481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595481, url, valid)

proc call*(call_595482: Call_GetContainerLogsDeployedOnNode_595470;
          nodeName: string; ServiceManifestName: string; applicationId: string;
          CodePackageName: string; timeout: int = 60; apiVersion: string = "6.2";
          Tail: string = ""; Previous: bool = false): Recallable =
  ## getContainerLogsDeployedOnNode
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   Previous: bool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_595483 = newJObject()
  var query_595484 = newJObject()
  add(query_595484, "timeout", newJInt(timeout))
  add(query_595484, "api-version", newJString(apiVersion))
  add(path_595483, "nodeName", newJString(nodeName))
  add(query_595484, "ServiceManifestName", newJString(ServiceManifestName))
  add(query_595484, "Tail", newJString(Tail))
  add(path_595483, "applicationId", newJString(applicationId))
  add(query_595484, "Previous", newJBool(Previous))
  add(query_595484, "CodePackageName", newJString(CodePackageName))
  result = call_595482.call(path_595483, query_595484, nil, nil, nil)

var getContainerLogsDeployedOnNode* = Call_GetContainerLogsDeployedOnNode_595470(
    name: "getContainerLogsDeployedOnNode", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs",
    validator: validate_GetContainerLogsDeployedOnNode_595471, base: "",
    url: url_GetContainerLogsDeployedOnNode_595472,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartDeployedCodePackage_595485 = ref object of OpenApiRestCall_593439
proc url_RestartDeployedCodePackage_595487(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartDeployedCodePackage_595486(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595488 = path.getOrDefault("nodeName")
  valid_595488 = validateParameter(valid_595488, JString, required = true,
                                 default = nil)
  if valid_595488 != nil:
    section.add "nodeName", valid_595488
  var valid_595489 = path.getOrDefault("applicationId")
  valid_595489 = validateParameter(valid_595489, JString, required = true,
                                 default = nil)
  if valid_595489 != nil:
    section.add "applicationId", valid_595489
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595490 = query.getOrDefault("timeout")
  valid_595490 = validateParameter(valid_595490, JInt, required = false,
                                 default = newJInt(60))
  if valid_595490 != nil:
    section.add "timeout", valid_595490
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595491 = query.getOrDefault("api-version")
  valid_595491 = validateParameter(valid_595491, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595491 != nil:
    section.add "api-version", valid_595491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595493: Call_RestartDeployedCodePackage_595485; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  let valid = call_595493.validator(path, query, header, formData, body)
  let scheme = call_595493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595493.url(scheme.get, call_595493.host, call_595493.base,
                         call_595493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595493, url, valid)

proc call*(call_595494: Call_RestartDeployedCodePackage_595485; nodeName: string;
          applicationId: string; RestartDeployedCodePackageDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## restartDeployedCodePackage
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  var path_595495 = newJObject()
  var query_595496 = newJObject()
  var body_595497 = newJObject()
  add(query_595496, "timeout", newJInt(timeout))
  add(query_595496, "api-version", newJString(apiVersion))
  add(path_595495, "nodeName", newJString(nodeName))
  add(path_595495, "applicationId", newJString(applicationId))
  if RestartDeployedCodePackageDescription != nil:
    body_595497 = RestartDeployedCodePackageDescription
  result = call_595494.call(path_595495, query_595496, nil, nil, body_595497)

var restartDeployedCodePackage* = Call_RestartDeployedCodePackage_595485(
    name: "restartDeployedCodePackage", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart",
    validator: validate_RestartDeployedCodePackage_595486, base: "",
    url: url_RestartDeployedCodePackage_595487,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealthUsingPolicy_595512 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationHealthUsingPolicy_595514(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealthUsingPolicy_595513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595515 = path.getOrDefault("nodeName")
  valid_595515 = validateParameter(valid_595515, JString, required = true,
                                 default = nil)
  if valid_595515 != nil:
    section.add "nodeName", valid_595515
  var valid_595516 = path.getOrDefault("applicationId")
  valid_595516 = validateParameter(valid_595516, JString, required = true,
                                 default = nil)
  if valid_595516 != nil:
    section.add "applicationId", valid_595516
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595517 = query.getOrDefault("timeout")
  valid_595517 = validateParameter(valid_595517, JInt, required = false,
                                 default = newJInt(60))
  if valid_595517 != nil:
    section.add "timeout", valid_595517
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595518 = query.getOrDefault("api-version")
  valid_595518 = validateParameter(valid_595518, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595518 != nil:
    section.add "api-version", valid_595518
  var valid_595519 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_595519 = validateParameter(valid_595519, JInt, required = false,
                                 default = newJInt(0))
  if valid_595519 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_595519
  var valid_595520 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595520 = validateParameter(valid_595520, JBool, required = false,
                                 default = newJBool(false))
  if valid_595520 != nil:
    section.add "ExcludeHealthStatistics", valid_595520
  var valid_595521 = query.getOrDefault("EventsHealthStateFilter")
  valid_595521 = validateParameter(valid_595521, JInt, required = false,
                                 default = newJInt(0))
  if valid_595521 != nil:
    section.add "EventsHealthStateFilter", valid_595521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595523: Call_GetDeployedApplicationHealthUsingPolicy_595512;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  let valid = call_595523.validator(path, query, header, formData, body)
  let scheme = call_595523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595523.url(scheme.get, call_595523.host, call_595523.base,
                         call_595523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595523, url, valid)

proc call*(call_595524: Call_GetDeployedApplicationHealthUsingPolicy_595512;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationHealthPolicy: JsonNode = nil;
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealthUsingPolicy
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595525 = newJObject()
  var query_595526 = newJObject()
  var body_595527 = newJObject()
  add(query_595526, "timeout", newJInt(timeout))
  add(query_595526, "api-version", newJString(apiVersion))
  add(path_595525, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_595527 = ApplicationHealthPolicy
  add(query_595526, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_595526, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595526, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595525, "applicationId", newJString(applicationId))
  result = call_595524.call(path_595525, query_595526, nil, nil, body_595527)

var getDeployedApplicationHealthUsingPolicy* = Call_GetDeployedApplicationHealthUsingPolicy_595512(
    name: "getDeployedApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealthUsingPolicy_595513, base: "",
    url: url_GetDeployedApplicationHealthUsingPolicy_595514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealth_595498 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationHealth_595500(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealth_595499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595501 = path.getOrDefault("nodeName")
  valid_595501 = validateParameter(valid_595501, JString, required = true,
                                 default = nil)
  if valid_595501 != nil:
    section.add "nodeName", valid_595501
  var valid_595502 = path.getOrDefault("applicationId")
  valid_595502 = validateParameter(valid_595502, JString, required = true,
                                 default = nil)
  if valid_595502 != nil:
    section.add "applicationId", valid_595502
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595503 = query.getOrDefault("timeout")
  valid_595503 = validateParameter(valid_595503, JInt, required = false,
                                 default = newJInt(60))
  if valid_595503 != nil:
    section.add "timeout", valid_595503
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595504 = query.getOrDefault("api-version")
  valid_595504 = validateParameter(valid_595504, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595504 != nil:
    section.add "api-version", valid_595504
  var valid_595505 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_595505 = validateParameter(valid_595505, JInt, required = false,
                                 default = newJInt(0))
  if valid_595505 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_595505
  var valid_595506 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595506 = validateParameter(valid_595506, JBool, required = false,
                                 default = newJBool(false))
  if valid_595506 != nil:
    section.add "ExcludeHealthStatistics", valid_595506
  var valid_595507 = query.getOrDefault("EventsHealthStateFilter")
  valid_595507 = validateParameter(valid_595507, JInt, required = false,
                                 default = newJInt(0))
  if valid_595507 != nil:
    section.add "EventsHealthStateFilter", valid_595507
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595508: Call_GetDeployedApplicationHealth_595498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  let valid = call_595508.validator(path, query, header, formData, body)
  let scheme = call_595508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595508.url(scheme.get, call_595508.host, call_595508.base,
                         call_595508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595508, url, valid)

proc call*(call_595509: Call_GetDeployedApplicationHealth_595498; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealth
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595510 = newJObject()
  var query_595511 = newJObject()
  add(query_595511, "timeout", newJInt(timeout))
  add(query_595511, "api-version", newJString(apiVersion))
  add(path_595510, "nodeName", newJString(nodeName))
  add(query_595511, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_595511, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595511, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595510, "applicationId", newJString(applicationId))
  result = call_595509.call(path_595510, query_595511, nil, nil, nil)

var getDeployedApplicationHealth* = Call_GetDeployedApplicationHealth_595498(
    name: "getDeployedApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealth_595499, base: "",
    url: url_GetDeployedApplicationHealth_595500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaInfoList_595528 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceReplicaInfoList_595530(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaInfoList_595529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595531 = path.getOrDefault("nodeName")
  valid_595531 = validateParameter(valid_595531, JString, required = true,
                                 default = nil)
  if valid_595531 != nil:
    section.add "nodeName", valid_595531
  var valid_595532 = path.getOrDefault("applicationId")
  valid_595532 = validateParameter(valid_595532, JString, required = true,
                                 default = nil)
  if valid_595532 != nil:
    section.add "applicationId", valid_595532
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   PartitionId: JString
  ##              : The identity of the partition.
  section = newJObject()
  var valid_595533 = query.getOrDefault("timeout")
  valid_595533 = validateParameter(valid_595533, JInt, required = false,
                                 default = newJInt(60))
  if valid_595533 != nil:
    section.add "timeout", valid_595533
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595534 = query.getOrDefault("api-version")
  valid_595534 = validateParameter(valid_595534, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595534 != nil:
    section.add "api-version", valid_595534
  var valid_595535 = query.getOrDefault("ServiceManifestName")
  valid_595535 = validateParameter(valid_595535, JString, required = false,
                                 default = nil)
  if valid_595535 != nil:
    section.add "ServiceManifestName", valid_595535
  var valid_595536 = query.getOrDefault("PartitionId")
  valid_595536 = validateParameter(valid_595536, JString, required = false,
                                 default = nil)
  if valid_595536 != nil:
    section.add "PartitionId", valid_595536
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595537: Call_GetDeployedServiceReplicaInfoList_595528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  let valid = call_595537.validator(path, query, header, formData, body)
  let scheme = call_595537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595537.url(scheme.get, call_595537.host, call_595537.base,
                         call_595537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595537, url, valid)

proc call*(call_595538: Call_GetDeployedServiceReplicaInfoList_595528;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          PartitionId: string = ""): Recallable =
  ## getDeployedServiceReplicaInfoList
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   PartitionId: string
  ##              : The identity of the partition.
  var path_595539 = newJObject()
  var query_595540 = newJObject()
  add(query_595540, "timeout", newJInt(timeout))
  add(query_595540, "api-version", newJString(apiVersion))
  add(path_595539, "nodeName", newJString(nodeName))
  add(query_595540, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595539, "applicationId", newJString(applicationId))
  add(query_595540, "PartitionId", newJString(PartitionId))
  result = call_595538.call(path_595539, query_595540, nil, nil, nil)

var getDeployedServiceReplicaInfoList* = Call_GetDeployedServiceReplicaInfoList_595528(
    name: "getDeployedServiceReplicaInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaInfoList_595529, base: "",
    url: url_GetDeployedServiceReplicaInfoList_595530,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoList_595541 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageInfoList_595543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoList_595542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595544 = path.getOrDefault("nodeName")
  valid_595544 = validateParameter(valid_595544, JString, required = true,
                                 default = nil)
  if valid_595544 != nil:
    section.add "nodeName", valid_595544
  var valid_595545 = path.getOrDefault("applicationId")
  valid_595545 = validateParameter(valid_595545, JString, required = true,
                                 default = nil)
  if valid_595545 != nil:
    section.add "applicationId", valid_595545
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595546 = query.getOrDefault("timeout")
  valid_595546 = validateParameter(valid_595546, JInt, required = false,
                                 default = newJInt(60))
  if valid_595546 != nil:
    section.add "timeout", valid_595546
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595547 = query.getOrDefault("api-version")
  valid_595547 = validateParameter(valid_595547, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595547 != nil:
    section.add "api-version", valid_595547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595548: Call_GetDeployedServicePackageInfoList_595541;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_595548.validator(path, query, header, formData, body)
  let scheme = call_595548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595548.url(scheme.get, call_595548.host, call_595548.base,
                         call_595548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595548, url, valid)

proc call*(call_595549: Call_GetDeployedServicePackageInfoList_595541;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoList
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595550 = newJObject()
  var query_595551 = newJObject()
  add(query_595551, "timeout", newJInt(timeout))
  add(query_595551, "api-version", newJString(apiVersion))
  add(path_595550, "nodeName", newJString(nodeName))
  add(path_595550, "applicationId", newJString(applicationId))
  result = call_595549.call(path_595550, query_595551, nil, nil, nil)

var getDeployedServicePackageInfoList* = Call_GetDeployedServicePackageInfoList_595541(
    name: "getDeployedServicePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages",
    validator: validate_GetDeployedServicePackageInfoList_595542, base: "",
    url: url_GetDeployedServicePackageInfoList_595543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoListByName_595552 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageInfoListByName_595554(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoListByName_595553(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595555 = path.getOrDefault("nodeName")
  valid_595555 = validateParameter(valid_595555, JString, required = true,
                                 default = nil)
  if valid_595555 != nil:
    section.add "nodeName", valid_595555
  var valid_595556 = path.getOrDefault("applicationId")
  valid_595556 = validateParameter(valid_595556, JString, required = true,
                                 default = nil)
  if valid_595556 != nil:
    section.add "applicationId", valid_595556
  var valid_595557 = path.getOrDefault("servicePackageName")
  valid_595557 = validateParameter(valid_595557, JString, required = true,
                                 default = nil)
  if valid_595557 != nil:
    section.add "servicePackageName", valid_595557
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595558 = query.getOrDefault("timeout")
  valid_595558 = validateParameter(valid_595558, JInt, required = false,
                                 default = newJInt(60))
  if valid_595558 != nil:
    section.add "timeout", valid_595558
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595559 = query.getOrDefault("api-version")
  valid_595559 = validateParameter(valid_595559, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595559 != nil:
    section.add "api-version", valid_595559
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595560: Call_GetDeployedServicePackageInfoListByName_595552;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  let valid = call_595560.validator(path, query, header, formData, body)
  let scheme = call_595560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595560.url(scheme.get, call_595560.host, call_595560.base,
                         call_595560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595560, url, valid)

proc call*(call_595561: Call_GetDeployedServicePackageInfoListByName_595552;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoListByName
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595562 = newJObject()
  var query_595563 = newJObject()
  add(query_595563, "timeout", newJInt(timeout))
  add(query_595563, "api-version", newJString(apiVersion))
  add(path_595562, "nodeName", newJString(nodeName))
  add(path_595562, "applicationId", newJString(applicationId))
  add(path_595562, "servicePackageName", newJString(servicePackageName))
  result = call_595561.call(path_595562, query_595563, nil, nil, nil)

var getDeployedServicePackageInfoListByName* = Call_GetDeployedServicePackageInfoListByName_595552(
    name: "getDeployedServicePackageInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}",
    validator: validate_GetDeployedServicePackageInfoListByName_595553, base: "",
    url: url_GetDeployedServicePackageInfoListByName_595554,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealthUsingPolicy_595577 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageHealthUsingPolicy_595579(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealthUsingPolicy_595578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595580 = path.getOrDefault("nodeName")
  valid_595580 = validateParameter(valid_595580, JString, required = true,
                                 default = nil)
  if valid_595580 != nil:
    section.add "nodeName", valid_595580
  var valid_595581 = path.getOrDefault("applicationId")
  valid_595581 = validateParameter(valid_595581, JString, required = true,
                                 default = nil)
  if valid_595581 != nil:
    section.add "applicationId", valid_595581
  var valid_595582 = path.getOrDefault("servicePackageName")
  valid_595582 = validateParameter(valid_595582, JString, required = true,
                                 default = nil)
  if valid_595582 != nil:
    section.add "servicePackageName", valid_595582
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595583 = query.getOrDefault("timeout")
  valid_595583 = validateParameter(valid_595583, JInt, required = false,
                                 default = newJInt(60))
  if valid_595583 != nil:
    section.add "timeout", valid_595583
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595584 = query.getOrDefault("api-version")
  valid_595584 = validateParameter(valid_595584, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595584 != nil:
    section.add "api-version", valid_595584
  var valid_595585 = query.getOrDefault("EventsHealthStateFilter")
  valid_595585 = validateParameter(valid_595585, JInt, required = false,
                                 default = newJInt(0))
  if valid_595585 != nil:
    section.add "EventsHealthStateFilter", valid_595585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595587: Call_GetDeployedServicePackageHealthUsingPolicy_595577;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  let valid = call_595587.validator(path, query, header, formData, body)
  let scheme = call_595587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595587.url(scheme.get, call_595587.host, call_595587.base,
                         call_595587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595587, url, valid)

proc call*(call_595588: Call_GetDeployedServicePackageHealthUsingPolicy_595577;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealthUsingPolicy
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595589 = newJObject()
  var query_595590 = newJObject()
  var body_595591 = newJObject()
  add(query_595590, "timeout", newJInt(timeout))
  add(query_595590, "api-version", newJString(apiVersion))
  add(path_595589, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_595591 = ApplicationHealthPolicy
  add(query_595590, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595589, "applicationId", newJString(applicationId))
  add(path_595589, "servicePackageName", newJString(servicePackageName))
  result = call_595588.call(path_595589, query_595590, nil, nil, body_595591)

var getDeployedServicePackageHealthUsingPolicy* = Call_GetDeployedServicePackageHealthUsingPolicy_595577(
    name: "getDeployedServicePackageHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealthUsingPolicy_595578,
    base: "", url: url_GetDeployedServicePackageHealthUsingPolicy_595579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealth_595564 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageHealth_595566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealth_595565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595567 = path.getOrDefault("nodeName")
  valid_595567 = validateParameter(valid_595567, JString, required = true,
                                 default = nil)
  if valid_595567 != nil:
    section.add "nodeName", valid_595567
  var valid_595568 = path.getOrDefault("applicationId")
  valid_595568 = validateParameter(valid_595568, JString, required = true,
                                 default = nil)
  if valid_595568 != nil:
    section.add "applicationId", valid_595568
  var valid_595569 = path.getOrDefault("servicePackageName")
  valid_595569 = validateParameter(valid_595569, JString, required = true,
                                 default = nil)
  if valid_595569 != nil:
    section.add "servicePackageName", valid_595569
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595570 = query.getOrDefault("timeout")
  valid_595570 = validateParameter(valid_595570, JInt, required = false,
                                 default = newJInt(60))
  if valid_595570 != nil:
    section.add "timeout", valid_595570
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595571 = query.getOrDefault("api-version")
  valid_595571 = validateParameter(valid_595571, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595571 != nil:
    section.add "api-version", valid_595571
  var valid_595572 = query.getOrDefault("EventsHealthStateFilter")
  valid_595572 = validateParameter(valid_595572, JInt, required = false,
                                 default = newJInt(0))
  if valid_595572 != nil:
    section.add "EventsHealthStateFilter", valid_595572
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595573: Call_GetDeployedServicePackageHealth_595564;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  let valid = call_595573.validator(path, query, header, formData, body)
  let scheme = call_595573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595573.url(scheme.get, call_595573.host, call_595573.base,
                         call_595573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595573, url, valid)

proc call*(call_595574: Call_GetDeployedServicePackageHealth_595564;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealth
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595575 = newJObject()
  var query_595576 = newJObject()
  add(query_595576, "timeout", newJInt(timeout))
  add(query_595576, "api-version", newJString(apiVersion))
  add(path_595575, "nodeName", newJString(nodeName))
  add(query_595576, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595575, "applicationId", newJString(applicationId))
  add(path_595575, "servicePackageName", newJString(servicePackageName))
  result = call_595574.call(path_595575, query_595576, nil, nil, nil)

var getDeployedServicePackageHealth* = Call_GetDeployedServicePackageHealth_595564(
    name: "getDeployedServicePackageHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealth_595565, base: "",
    url: url_GetDeployedServicePackageHealth_595566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedServicePackageHealth_595592 = ref object of OpenApiRestCall_593439
proc url_ReportDeployedServicePackageHealth_595594(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedServicePackageHealth_595593(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595595 = path.getOrDefault("nodeName")
  valid_595595 = validateParameter(valid_595595, JString, required = true,
                                 default = nil)
  if valid_595595 != nil:
    section.add "nodeName", valid_595595
  var valid_595596 = path.getOrDefault("applicationId")
  valid_595596 = validateParameter(valid_595596, JString, required = true,
                                 default = nil)
  if valid_595596 != nil:
    section.add "applicationId", valid_595596
  var valid_595597 = path.getOrDefault("servicePackageName")
  valid_595597 = validateParameter(valid_595597, JString, required = true,
                                 default = nil)
  if valid_595597 != nil:
    section.add "servicePackageName", valid_595597
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595598 = query.getOrDefault("Immediate")
  valid_595598 = validateParameter(valid_595598, JBool, required = false,
                                 default = newJBool(false))
  if valid_595598 != nil:
    section.add "Immediate", valid_595598
  var valid_595599 = query.getOrDefault("timeout")
  valid_595599 = validateParameter(valid_595599, JInt, required = false,
                                 default = newJInt(60))
  if valid_595599 != nil:
    section.add "timeout", valid_595599
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595600 = query.getOrDefault("api-version")
  valid_595600 = validateParameter(valid_595600, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595600 != nil:
    section.add "api-version", valid_595600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595602: Call_ReportDeployedServicePackageHealth_595592;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595602.validator(path, query, header, formData, body)
  let scheme = call_595602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595602.url(scheme.get, call_595602.host, call_595602.base,
                         call_595602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595602, url, valid)

proc call*(call_595603: Call_ReportDeployedServicePackageHealth_595592;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          servicePackageName: string; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportDeployedServicePackageHealth
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595604 = newJObject()
  var query_595605 = newJObject()
  var body_595606 = newJObject()
  add(query_595605, "Immediate", newJBool(Immediate))
  add(query_595605, "timeout", newJInt(timeout))
  add(query_595605, "api-version", newJString(apiVersion))
  add(path_595604, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_595606 = HealthInformation
  add(path_595604, "applicationId", newJString(applicationId))
  add(path_595604, "servicePackageName", newJString(servicePackageName))
  result = call_595603.call(path_595604, query_595605, nil, nil, body_595606)

var reportDeployedServicePackageHealth* = Call_ReportDeployedServicePackageHealth_595592(
    name: "reportDeployedServicePackageHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth",
    validator: validate_ReportDeployedServicePackageHealth_595593, base: "",
    url: url_ReportDeployedServicePackageHealth_595594,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoList_595607 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceTypeInfoList_595609(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoList_595608(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595610 = path.getOrDefault("nodeName")
  valid_595610 = validateParameter(valid_595610, JString, required = true,
                                 default = nil)
  if valid_595610 != nil:
    section.add "nodeName", valid_595610
  var valid_595611 = path.getOrDefault("applicationId")
  valid_595611 = validateParameter(valid_595611, JString, required = true,
                                 default = nil)
  if valid_595611 != nil:
    section.add "applicationId", valid_595611
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_595612 = query.getOrDefault("timeout")
  valid_595612 = validateParameter(valid_595612, JInt, required = false,
                                 default = newJInt(60))
  if valid_595612 != nil:
    section.add "timeout", valid_595612
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595613 = query.getOrDefault("api-version")
  valid_595613 = validateParameter(valid_595613, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595613 != nil:
    section.add "api-version", valid_595613
  var valid_595614 = query.getOrDefault("ServiceManifestName")
  valid_595614 = validateParameter(valid_595614, JString, required = false,
                                 default = nil)
  if valid_595614 != nil:
    section.add "ServiceManifestName", valid_595614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595615: Call_GetDeployedServiceTypeInfoList_595607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  let valid = call_595615.validator(path, query, header, formData, body)
  let scheme = call_595615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595615.url(scheme.get, call_595615.host, call_595615.base,
                         call_595615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595615, url, valid)

proc call*(call_595616: Call_GetDeployedServiceTypeInfoList_595607;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoList
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595617 = newJObject()
  var query_595618 = newJObject()
  add(query_595618, "timeout", newJInt(timeout))
  add(query_595618, "api-version", newJString(apiVersion))
  add(path_595617, "nodeName", newJString(nodeName))
  add(query_595618, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595617, "applicationId", newJString(applicationId))
  result = call_595616.call(path_595617, query_595618, nil, nil, nil)

var getDeployedServiceTypeInfoList* = Call_GetDeployedServiceTypeInfoList_595607(
    name: "getDeployedServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes",
    validator: validate_GetDeployedServiceTypeInfoList_595608, base: "",
    url: url_GetDeployedServiceTypeInfoList_595609,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoByName_595619 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceTypeInfoByName_595621(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoByName_595620(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_595622 = path.getOrDefault("serviceTypeName")
  valid_595622 = validateParameter(valid_595622, JString, required = true,
                                 default = nil)
  if valid_595622 != nil:
    section.add "serviceTypeName", valid_595622
  var valid_595623 = path.getOrDefault("nodeName")
  valid_595623 = validateParameter(valid_595623, JString, required = true,
                                 default = nil)
  if valid_595623 != nil:
    section.add "nodeName", valid_595623
  var valid_595624 = path.getOrDefault("applicationId")
  valid_595624 = validateParameter(valid_595624, JString, required = true,
                                 default = nil)
  if valid_595624 != nil:
    section.add "applicationId", valid_595624
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_595625 = query.getOrDefault("timeout")
  valid_595625 = validateParameter(valid_595625, JInt, required = false,
                                 default = newJInt(60))
  if valid_595625 != nil:
    section.add "timeout", valid_595625
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595626 = query.getOrDefault("api-version")
  valid_595626 = validateParameter(valid_595626, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595626 != nil:
    section.add "api-version", valid_595626
  var valid_595627 = query.getOrDefault("ServiceManifestName")
  valid_595627 = validateParameter(valid_595627, JString, required = false,
                                 default = nil)
  if valid_595627 != nil:
    section.add "ServiceManifestName", valid_595627
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595628: Call_GetDeployedServiceTypeInfoByName_595619;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  let valid = call_595628.validator(path, query, header, formData, body)
  let scheme = call_595628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595628.url(scheme.get, call_595628.host, call_595628.base,
                         call_595628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595628, url, valid)

proc call*(call_595629: Call_GetDeployedServiceTypeInfoByName_595619;
          serviceTypeName: string; nodeName: string; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoByName
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595630 = newJObject()
  var query_595631 = newJObject()
  add(query_595631, "timeout", newJInt(timeout))
  add(path_595630, "serviceTypeName", newJString(serviceTypeName))
  add(query_595631, "api-version", newJString(apiVersion))
  add(path_595630, "nodeName", newJString(nodeName))
  add(query_595631, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595630, "applicationId", newJString(applicationId))
  result = call_595629.call(path_595630, query_595631, nil, nil, nil)

var getDeployedServiceTypeInfoByName* = Call_GetDeployedServiceTypeInfoByName_595619(
    name: "getDeployedServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetDeployedServiceTypeInfoByName_595620, base: "",
    url: url_GetDeployedServiceTypeInfoByName_595621,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedApplicationHealth_595632 = ref object of OpenApiRestCall_593439
proc url_ReportDeployedApplicationHealth_595634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedApplicationHealth_595633(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595635 = path.getOrDefault("nodeName")
  valid_595635 = validateParameter(valid_595635, JString, required = true,
                                 default = nil)
  if valid_595635 != nil:
    section.add "nodeName", valid_595635
  var valid_595636 = path.getOrDefault("applicationId")
  valid_595636 = validateParameter(valid_595636, JString, required = true,
                                 default = nil)
  if valid_595636 != nil:
    section.add "applicationId", valid_595636
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595637 = query.getOrDefault("Immediate")
  valid_595637 = validateParameter(valid_595637, JBool, required = false,
                                 default = newJBool(false))
  if valid_595637 != nil:
    section.add "Immediate", valid_595637
  var valid_595638 = query.getOrDefault("timeout")
  valid_595638 = validateParameter(valid_595638, JInt, required = false,
                                 default = newJInt(60))
  if valid_595638 != nil:
    section.add "timeout", valid_595638
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595639 = query.getOrDefault("api-version")
  valid_595639 = validateParameter(valid_595639, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595639 != nil:
    section.add "api-version", valid_595639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595641: Call_ReportDeployedApplicationHealth_595632;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595641.validator(path, query, header, formData, body)
  let scheme = call_595641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595641.url(scheme.get, call_595641.host, call_595641.base,
                         call_595641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595641, url, valid)

proc call*(call_595642: Call_ReportDeployedApplicationHealth_595632;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportDeployedApplicationHealth
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595643 = newJObject()
  var query_595644 = newJObject()
  var body_595645 = newJObject()
  add(query_595644, "Immediate", newJBool(Immediate))
  add(query_595644, "timeout", newJInt(timeout))
  add(query_595644, "api-version", newJString(apiVersion))
  add(path_595643, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_595645 = HealthInformation
  add(path_595643, "applicationId", newJString(applicationId))
  result = call_595642.call(path_595643, query_595644, nil, nil, body_595645)

var reportDeployedApplicationHealth* = Call_ReportDeployedApplicationHealth_595632(
    name: "reportDeployedApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth",
    validator: validate_ReportDeployedApplicationHealth_595633, base: "",
    url: url_ReportDeployedApplicationHealth_595634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealthUsingPolicy_595657 = ref object of OpenApiRestCall_593439
proc url_GetNodeHealthUsingPolicy_595659(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealthUsingPolicy_595658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595660 = path.getOrDefault("nodeName")
  valid_595660 = validateParameter(valid_595660, JString, required = true,
                                 default = nil)
  if valid_595660 != nil:
    section.add "nodeName", valid_595660
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595661 = query.getOrDefault("timeout")
  valid_595661 = validateParameter(valid_595661, JInt, required = false,
                                 default = newJInt(60))
  if valid_595661 != nil:
    section.add "timeout", valid_595661
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595662 = query.getOrDefault("api-version")
  valid_595662 = validateParameter(valid_595662, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595662 != nil:
    section.add "api-version", valid_595662
  var valid_595663 = query.getOrDefault("EventsHealthStateFilter")
  valid_595663 = validateParameter(valid_595663, JInt, required = false,
                                 default = newJInt(0))
  if valid_595663 != nil:
    section.add "EventsHealthStateFilter", valid_595663
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595665: Call_GetNodeHealthUsingPolicy_595657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_595665.validator(path, query, header, formData, body)
  let scheme = call_595665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595665.url(scheme.get, call_595665.host, call_595665.base,
                         call_595665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595665, url, valid)

proc call*(call_595666: Call_GetNodeHealthUsingPolicy_595657; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0; ClusterHealthPolicy: JsonNode = nil): Recallable =
  ## getNodeHealthUsingPolicy
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  var path_595667 = newJObject()
  var query_595668 = newJObject()
  var body_595669 = newJObject()
  add(query_595668, "timeout", newJInt(timeout))
  add(query_595668, "api-version", newJString(apiVersion))
  add(path_595667, "nodeName", newJString(nodeName))
  add(query_595668, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  if ClusterHealthPolicy != nil:
    body_595669 = ClusterHealthPolicy
  result = call_595666.call(path_595667, query_595668, nil, nil, body_595669)

var getNodeHealthUsingPolicy* = Call_GetNodeHealthUsingPolicy_595657(
    name: "getNodeHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetHealth",
    validator: validate_GetNodeHealthUsingPolicy_595658, base: "",
    url: url_GetNodeHealthUsingPolicy_595659, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealth_595646 = ref object of OpenApiRestCall_593439
proc url_GetNodeHealth_595648(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealth_595647(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595649 = path.getOrDefault("nodeName")
  valid_595649 = validateParameter(valid_595649, JString, required = true,
                                 default = nil)
  if valid_595649 != nil:
    section.add "nodeName", valid_595649
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595650 = query.getOrDefault("timeout")
  valid_595650 = validateParameter(valid_595650, JInt, required = false,
                                 default = newJInt(60))
  if valid_595650 != nil:
    section.add "timeout", valid_595650
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595651 = query.getOrDefault("api-version")
  valid_595651 = validateParameter(valid_595651, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595651 != nil:
    section.add "api-version", valid_595651
  var valid_595652 = query.getOrDefault("EventsHealthStateFilter")
  valid_595652 = validateParameter(valid_595652, JInt, required = false,
                                 default = newJInt(0))
  if valid_595652 != nil:
    section.add "EventsHealthStateFilter", valid_595652
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595653: Call_GetNodeHealth_595646; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_595653.validator(path, query, header, formData, body)
  let scheme = call_595653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595653.url(scheme.get, call_595653.host, call_595653.base,
                         call_595653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595653, url, valid)

proc call*(call_595654: Call_GetNodeHealth_595646; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getNodeHealth
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_595655 = newJObject()
  var query_595656 = newJObject()
  add(query_595656, "timeout", newJInt(timeout))
  add(query_595656, "api-version", newJString(apiVersion))
  add(path_595655, "nodeName", newJString(nodeName))
  add(query_595656, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_595654.call(path_595655, query_595656, nil, nil, nil)

var getNodeHealth* = Call_GetNodeHealth_595646(name: "getNodeHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetHealth", validator: validate_GetNodeHealth_595647,
    base: "", url: url_GetNodeHealth_595648, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeLoadInfo_595670 = ref object of OpenApiRestCall_593439
proc url_GetNodeLoadInfo_595672(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeLoadInfo_595671(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595673 = path.getOrDefault("nodeName")
  valid_595673 = validateParameter(valid_595673, JString, required = true,
                                 default = nil)
  if valid_595673 != nil:
    section.add "nodeName", valid_595673
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595674 = query.getOrDefault("timeout")
  valid_595674 = validateParameter(valid_595674, JInt, required = false,
                                 default = newJInt(60))
  if valid_595674 != nil:
    section.add "timeout", valid_595674
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595675 = query.getOrDefault("api-version")
  valid_595675 = validateParameter(valid_595675, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595675 != nil:
    section.add "api-version", valid_595675
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595676: Call_GetNodeLoadInfo_595670; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  let valid = call_595676.validator(path, query, header, formData, body)
  let scheme = call_595676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595676.url(scheme.get, call_595676.host, call_595676.base,
                         call_595676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595676, url, valid)

proc call*(call_595677: Call_GetNodeLoadInfo_595670; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeLoadInfo
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595678 = newJObject()
  var query_595679 = newJObject()
  add(query_595679, "timeout", newJInt(timeout))
  add(query_595679, "api-version", newJString(apiVersion))
  add(path_595678, "nodeName", newJString(nodeName))
  result = call_595677.call(path_595678, query_595679, nil, nil, nil)

var getNodeLoadInfo* = Call_GetNodeLoadInfo_595670(name: "getNodeLoadInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetLoadInformation",
    validator: validate_GetNodeLoadInfo_595671, base: "", url: url_GetNodeLoadInfo_595672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595680 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceReplicaDetailInfoByPartitionId_595682(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfoByPartitionId_595681(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595683 = path.getOrDefault("nodeName")
  valid_595683 = validateParameter(valid_595683, JString, required = true,
                                 default = nil)
  if valid_595683 != nil:
    section.add "nodeName", valid_595683
  var valid_595684 = path.getOrDefault("partitionId")
  valid_595684 = validateParameter(valid_595684, JString, required = true,
                                 default = nil)
  if valid_595684 != nil:
    section.add "partitionId", valid_595684
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595685 = query.getOrDefault("timeout")
  valid_595685 = validateParameter(valid_595685, JInt, required = false,
                                 default = newJInt(60))
  if valid_595685 != nil:
    section.add "timeout", valid_595685
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595686 = query.getOrDefault("api-version")
  valid_595686 = validateParameter(valid_595686, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595686 != nil:
    section.add "api-version", valid_595686
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595687: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595680;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_595687.validator(path, query, header, formData, body)
  let scheme = call_595687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595687.url(scheme.get, call_595687.host, call_595687.base,
                         call_595687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595687, url, valid)

proc call*(call_595688: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595680;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfoByPartitionId
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595689 = newJObject()
  var query_595690 = newJObject()
  add(query_595690, "timeout", newJInt(timeout))
  add(query_595690, "api-version", newJString(apiVersion))
  add(path_595689, "nodeName", newJString(nodeName))
  add(path_595689, "partitionId", newJString(partitionId))
  result = call_595688.call(path_595689, query_595690, nil, nil, nil)

var getDeployedServiceReplicaDetailInfoByPartitionId* = Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595680(
    name: "getDeployedServiceReplicaDetailInfoByPartitionId",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaDetailInfoByPartitionId_595681,
    base: "", url: url_GetDeployedServiceReplicaDetailInfoByPartitionId_595682,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveReplica_595691 = ref object of OpenApiRestCall_593439
proc url_RemoveReplica_595693(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveReplica_595692(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595694 = path.getOrDefault("replicaId")
  valid_595694 = validateParameter(valid_595694, JString, required = true,
                                 default = nil)
  if valid_595694 != nil:
    section.add "replicaId", valid_595694
  var valid_595695 = path.getOrDefault("nodeName")
  valid_595695 = validateParameter(valid_595695, JString, required = true,
                                 default = nil)
  if valid_595695 != nil:
    section.add "nodeName", valid_595695
  var valid_595696 = path.getOrDefault("partitionId")
  valid_595696 = validateParameter(valid_595696, JString, required = true,
                                 default = nil)
  if valid_595696 != nil:
    section.add "partitionId", valid_595696
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_595697 = query.getOrDefault("timeout")
  valid_595697 = validateParameter(valid_595697, JInt, required = false,
                                 default = newJInt(60))
  if valid_595697 != nil:
    section.add "timeout", valid_595697
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595698 = query.getOrDefault("api-version")
  valid_595698 = validateParameter(valid_595698, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595698 != nil:
    section.add "api-version", valid_595698
  var valid_595699 = query.getOrDefault("ForceRemove")
  valid_595699 = validateParameter(valid_595699, JBool, required = false, default = nil)
  if valid_595699 != nil:
    section.add "ForceRemove", valid_595699
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595700: Call_RemoveReplica_595691; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  let valid = call_595700.validator(path, query, header, formData, body)
  let scheme = call_595700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595700.url(scheme.get, call_595700.host, call_595700.base,
                         call_595700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595700, url, valid)

proc call*(call_595701: Call_RemoveReplica_595691; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## removeReplica
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595702 = newJObject()
  var query_595703 = newJObject()
  add(path_595702, "replicaId", newJString(replicaId))
  add(query_595703, "timeout", newJInt(timeout))
  add(query_595703, "api-version", newJString(apiVersion))
  add(query_595703, "ForceRemove", newJBool(ForceRemove))
  add(path_595702, "nodeName", newJString(nodeName))
  add(path_595702, "partitionId", newJString(partitionId))
  result = call_595701.call(path_595702, query_595703, nil, nil, nil)

var removeReplica* = Call_RemoveReplica_595691(name: "removeReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete",
    validator: validate_RemoveReplica_595692, base: "", url: url_RemoveReplica_595693,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfo_595704 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceReplicaDetailInfo_595706(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetDetail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfo_595705(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595707 = path.getOrDefault("replicaId")
  valid_595707 = validateParameter(valid_595707, JString, required = true,
                                 default = nil)
  if valid_595707 != nil:
    section.add "replicaId", valid_595707
  var valid_595708 = path.getOrDefault("nodeName")
  valid_595708 = validateParameter(valid_595708, JString, required = true,
                                 default = nil)
  if valid_595708 != nil:
    section.add "nodeName", valid_595708
  var valid_595709 = path.getOrDefault("partitionId")
  valid_595709 = validateParameter(valid_595709, JString, required = true,
                                 default = nil)
  if valid_595709 != nil:
    section.add "partitionId", valid_595709
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595710 = query.getOrDefault("timeout")
  valid_595710 = validateParameter(valid_595710, JInt, required = false,
                                 default = newJInt(60))
  if valid_595710 != nil:
    section.add "timeout", valid_595710
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595711 = query.getOrDefault("api-version")
  valid_595711 = validateParameter(valid_595711, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595711 != nil:
    section.add "api-version", valid_595711
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595712: Call_GetDeployedServiceReplicaDetailInfo_595704;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_595712.validator(path, query, header, formData, body)
  let scheme = call_595712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595712.url(scheme.get, call_595712.host, call_595712.base,
                         call_595712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595712, url, valid)

proc call*(call_595713: Call_GetDeployedServiceReplicaDetailInfo_595704;
          replicaId: string; nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfo
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595714 = newJObject()
  var query_595715 = newJObject()
  add(path_595714, "replicaId", newJString(replicaId))
  add(query_595715, "timeout", newJInt(timeout))
  add(query_595715, "api-version", newJString(apiVersion))
  add(path_595714, "nodeName", newJString(nodeName))
  add(path_595714, "partitionId", newJString(partitionId))
  result = call_595713.call(path_595714, query_595715, nil, nil, nil)

var getDeployedServiceReplicaDetailInfo* = Call_GetDeployedServiceReplicaDetailInfo_595704(
    name: "getDeployedServiceReplicaDetailInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail",
    validator: validate_GetDeployedServiceReplicaDetailInfo_595705, base: "",
    url: url_GetDeployedServiceReplicaDetailInfo_595706,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartReplica_595716 = ref object of OpenApiRestCall_593439
proc url_RestartReplica_595718(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartReplica_595717(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595719 = path.getOrDefault("replicaId")
  valid_595719 = validateParameter(valid_595719, JString, required = true,
                                 default = nil)
  if valid_595719 != nil:
    section.add "replicaId", valid_595719
  var valid_595720 = path.getOrDefault("nodeName")
  valid_595720 = validateParameter(valid_595720, JString, required = true,
                                 default = nil)
  if valid_595720 != nil:
    section.add "nodeName", valid_595720
  var valid_595721 = path.getOrDefault("partitionId")
  valid_595721 = validateParameter(valid_595721, JString, required = true,
                                 default = nil)
  if valid_595721 != nil:
    section.add "partitionId", valid_595721
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595722 = query.getOrDefault("timeout")
  valid_595722 = validateParameter(valid_595722, JInt, required = false,
                                 default = newJInt(60))
  if valid_595722 != nil:
    section.add "timeout", valid_595722
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595723 = query.getOrDefault("api-version")
  valid_595723 = validateParameter(valid_595723, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595723 != nil:
    section.add "api-version", valid_595723
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595724: Call_RestartReplica_595716; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  let valid = call_595724.validator(path, query, header, formData, body)
  let scheme = call_595724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595724.url(scheme.get, call_595724.host, call_595724.base,
                         call_595724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595724, url, valid)

proc call*(call_595725: Call_RestartReplica_595716; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartReplica
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595726 = newJObject()
  var query_595727 = newJObject()
  add(path_595726, "replicaId", newJString(replicaId))
  add(query_595727, "timeout", newJInt(timeout))
  add(query_595727, "api-version", newJString(apiVersion))
  add(path_595726, "nodeName", newJString(nodeName))
  add(path_595726, "partitionId", newJString(partitionId))
  result = call_595725.call(path_595726, query_595727, nil, nil, nil)

var restartReplica* = Call_RestartReplica_595716(name: "restartReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart",
    validator: validate_RestartReplica_595717, base: "", url: url_RestartReplica_595718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveNodeState_595728 = ref object of OpenApiRestCall_593439
proc url_RemoveNodeState_595730(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/RemoveNodeState")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveNodeState_595729(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, see https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595731 = path.getOrDefault("nodeName")
  valid_595731 = validateParameter(valid_595731, JString, required = true,
                                 default = nil)
  if valid_595731 != nil:
    section.add "nodeName", valid_595731
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595732 = query.getOrDefault("timeout")
  valid_595732 = validateParameter(valid_595732, JInt, required = false,
                                 default = newJInt(60))
  if valid_595732 != nil:
    section.add "timeout", valid_595732
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595733 = query.getOrDefault("api-version")
  valid_595733 = validateParameter(valid_595733, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595733 != nil:
    section.add "api-version", valid_595733
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595734: Call_RemoveNodeState_595728; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, see https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
  ## 
  let valid = call_595734.validator(path, query, header, formData, body)
  let scheme = call_595734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595734.url(scheme.get, call_595734.host, call_595734.base,
                         call_595734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595734, url, valid)

proc call*(call_595735: Call_RemoveNodeState_595728; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## removeNodeState
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, see https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595736 = newJObject()
  var query_595737 = newJObject()
  add(query_595737, "timeout", newJInt(timeout))
  add(query_595737, "api-version", newJString(apiVersion))
  add(path_595736, "nodeName", newJString(nodeName))
  result = call_595735.call(path_595736, query_595737, nil, nil, nil)

var removeNodeState* = Call_RemoveNodeState_595728(name: "removeNodeState",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/RemoveNodeState",
    validator: validate_RemoveNodeState_595729, base: "", url: url_RemoveNodeState_595730,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportNodeHealth_595738 = ref object of OpenApiRestCall_593439
proc url_ReportNodeHealth_595740(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportNodeHealth_595739(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595741 = path.getOrDefault("nodeName")
  valid_595741 = validateParameter(valid_595741, JString, required = true,
                                 default = nil)
  if valid_595741 != nil:
    section.add "nodeName", valid_595741
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595742 = query.getOrDefault("Immediate")
  valid_595742 = validateParameter(valid_595742, JBool, required = false,
                                 default = newJBool(false))
  if valid_595742 != nil:
    section.add "Immediate", valid_595742
  var valid_595743 = query.getOrDefault("timeout")
  valid_595743 = validateParameter(valid_595743, JInt, required = false,
                                 default = newJInt(60))
  if valid_595743 != nil:
    section.add "timeout", valid_595743
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595744 = query.getOrDefault("api-version")
  valid_595744 = validateParameter(valid_595744, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595744 != nil:
    section.add "api-version", valid_595744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595746: Call_ReportNodeHealth_595738; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595746.validator(path, query, header, formData, body)
  let scheme = call_595746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595746.url(scheme.get, call_595746.host, call_595746.base,
                         call_595746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595746, url, valid)

proc call*(call_595747: Call_ReportNodeHealth_595738; nodeName: string;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportNodeHealth
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var path_595748 = newJObject()
  var query_595749 = newJObject()
  var body_595750 = newJObject()
  add(query_595749, "Immediate", newJBool(Immediate))
  add(query_595749, "timeout", newJInt(timeout))
  add(query_595749, "api-version", newJString(apiVersion))
  add(path_595748, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_595750 = HealthInformation
  result = call_595747.call(path_595748, query_595749, nil, nil, body_595750)

var reportNodeHealth* = Call_ReportNodeHealth_595738(name: "reportNodeHealth",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/ReportHealth",
    validator: validate_ReportNodeHealth_595739, base: "",
    url: url_ReportNodeHealth_595740, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartNode_595751 = ref object of OpenApiRestCall_593439
proc url_RestartNode_595753(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartNode_595752(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595754 = path.getOrDefault("nodeName")
  valid_595754 = validateParameter(valid_595754, JString, required = true,
                                 default = nil)
  if valid_595754 != nil:
    section.add "nodeName", valid_595754
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595755 = query.getOrDefault("timeout")
  valid_595755 = validateParameter(valid_595755, JInt, required = false,
                                 default = newJInt(60))
  if valid_595755 != nil:
    section.add "timeout", valid_595755
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595756 = query.getOrDefault("api-version")
  valid_595756 = validateParameter(valid_595756, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595756 != nil:
    section.add "api-version", valid_595756
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595758: Call_RestartNode_595751; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  let valid = call_595758.validator(path, query, header, formData, body)
  let scheme = call_595758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595758.url(scheme.get, call_595758.host, call_595758.base,
                         call_595758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595758, url, valid)

proc call*(call_595759: Call_RestartNode_595751; nodeName: string;
          RestartNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartNode
  ## Restarts a Service Fabric cluster node that is already started.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  var path_595760 = newJObject()
  var query_595761 = newJObject()
  var body_595762 = newJObject()
  add(query_595761, "timeout", newJInt(timeout))
  add(query_595761, "api-version", newJString(apiVersion))
  add(path_595760, "nodeName", newJString(nodeName))
  if RestartNodeDescription != nil:
    body_595762 = RestartNodeDescription
  result = call_595759.call(path_595760, query_595761, nil, nil, body_595762)

var restartNode* = Call_RestartNode_595751(name: "restartNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}/$/Restart",
                                        validator: validate_RestartNode_595752,
                                        base: "", url: url_RestartNode_595753,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfo_595763 = ref object of OpenApiRestCall_593439
proc url_GetPartitionInfo_595765(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfo_595764(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595766 = path.getOrDefault("partitionId")
  valid_595766 = validateParameter(valid_595766, JString, required = true,
                                 default = nil)
  if valid_595766 != nil:
    section.add "partitionId", valid_595766
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595767 = query.getOrDefault("timeout")
  valid_595767 = validateParameter(valid_595767, JInt, required = false,
                                 default = newJInt(60))
  if valid_595767 != nil:
    section.add "timeout", valid_595767
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595768 = query.getOrDefault("api-version")
  valid_595768 = validateParameter(valid_595768, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595768 != nil:
    section.add "api-version", valid_595768
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595769: Call_GetPartitionInfo_595763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_595769.validator(path, query, header, formData, body)
  let scheme = call_595769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595769.url(scheme.get, call_595769.host, call_595769.base,
                         call_595769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595769, url, valid)

proc call*(call_595770: Call_GetPartitionInfo_595763; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionInfo
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595771 = newJObject()
  var query_595772 = newJObject()
  add(query_595772, "timeout", newJInt(timeout))
  add(query_595772, "api-version", newJString(apiVersion))
  add(path_595771, "partitionId", newJString(partitionId))
  result = call_595770.call(path_595771, query_595772, nil, nil, nil)

var getPartitionInfo* = Call_GetPartitionInfo_595763(name: "getPartitionInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}", validator: validate_GetPartitionInfo_595764,
    base: "", url: url_GetPartitionInfo_595765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_BackupPartition_595773 = ref object of OpenApiRestCall_593439
proc url_BackupPartition_595775(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_BackupPartition_595774(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595776 = path.getOrDefault("partitionId")
  valid_595776 = validateParameter(valid_595776, JString, required = true,
                                 default = nil)
  if valid_595776 != nil:
    section.add "partitionId", valid_595776
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: JInt
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  section = newJObject()
  var valid_595777 = query.getOrDefault("timeout")
  valid_595777 = validateParameter(valid_595777, JInt, required = false,
                                 default = newJInt(60))
  if valid_595777 != nil:
    section.add "timeout", valid_595777
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595778 = query.getOrDefault("api-version")
  valid_595778 = validateParameter(valid_595778, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595778 != nil:
    section.add "api-version", valid_595778
  var valid_595779 = query.getOrDefault("BackupTimeout")
  valid_595779 = validateParameter(valid_595779, JInt, required = false,
                                 default = newJInt(10))
  if valid_595779 != nil:
    section.add "BackupTimeout", valid_595779
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595781: Call_BackupPartition_595773; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  let valid = call_595781.validator(path, query, header, formData, body)
  let scheme = call_595781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595781.url(scheme.get, call_595781.host, call_595781.base,
                         call_595781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595781, url, valid)

proc call*(call_595782: Call_BackupPartition_595773; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; BackupTimeout: int = 10;
          BackupPartitionDescription: JsonNode = nil): Recallable =
  ## backupPartition
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: int
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  var path_595783 = newJObject()
  var query_595784 = newJObject()
  var body_595785 = newJObject()
  add(query_595784, "timeout", newJInt(timeout))
  add(query_595784, "api-version", newJString(apiVersion))
  add(query_595784, "BackupTimeout", newJInt(BackupTimeout))
  add(path_595783, "partitionId", newJString(partitionId))
  if BackupPartitionDescription != nil:
    body_595785 = BackupPartitionDescription
  result = call_595782.call(path_595783, query_595784, nil, nil, body_595785)

var backupPartition* = Call_BackupPartition_595773(name: "backupPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Backup",
    validator: validate_BackupPartition_595774, base: "", url: url_BackupPartition_595775,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisablePartitionBackup_595786 = ref object of OpenApiRestCall_593439
proc url_DisablePartitionBackup_595788(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisablePartitionBackup_595787(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595789 = path.getOrDefault("partitionId")
  valid_595789 = validateParameter(valid_595789, JString, required = true,
                                 default = nil)
  if valid_595789 != nil:
    section.add "partitionId", valid_595789
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595790 = query.getOrDefault("timeout")
  valid_595790 = validateParameter(valid_595790, JInt, required = false,
                                 default = newJInt(60))
  if valid_595790 != nil:
    section.add "timeout", valid_595790
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595791 = query.getOrDefault("api-version")
  valid_595791 = validateParameter(valid_595791, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595791 != nil:
    section.add "api-version", valid_595791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595793: Call_DisablePartitionBackup_595786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  let valid = call_595793.validator(path, query, header, formData, body)
  let scheme = call_595793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595793.url(scheme.get, call_595793.host, call_595793.base,
                         call_595793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595793, url, valid)

proc call*(call_595794: Call_DisablePartitionBackup_595786; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disablePartitionBackup
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595795 = newJObject()
  var query_595796 = newJObject()
  var body_595797 = newJObject()
  add(query_595796, "timeout", newJInt(timeout))
  add(query_595796, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_595797 = DisableBackupDescription
  add(path_595795, "partitionId", newJString(partitionId))
  result = call_595794.call(path_595795, query_595796, nil, nil, body_595797)

var disablePartitionBackup* = Call_DisablePartitionBackup_595786(
    name: "disablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/DisableBackup",
    validator: validate_DisablePartitionBackup_595787, base: "",
    url: url_DisablePartitionBackup_595788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnablePartitionBackup_595798 = ref object of OpenApiRestCall_593439
proc url_EnablePartitionBackup_595800(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnablePartitionBackup_595799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595801 = path.getOrDefault("partitionId")
  valid_595801 = validateParameter(valid_595801, JString, required = true,
                                 default = nil)
  if valid_595801 != nil:
    section.add "partitionId", valid_595801
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595802 = query.getOrDefault("timeout")
  valid_595802 = validateParameter(valid_595802, JInt, required = false,
                                 default = newJInt(60))
  if valid_595802 != nil:
    section.add "timeout", valid_595802
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595803 = query.getOrDefault("api-version")
  valid_595803 = validateParameter(valid_595803, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595803 != nil:
    section.add "api-version", valid_595803
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595805: Call_EnablePartitionBackup_595798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_595805.validator(path, query, header, formData, body)
  let scheme = call_595805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595805.url(scheme.get, call_595805.host, call_595805.base,
                         call_595805.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595805, url, valid)

proc call*(call_595806: Call_EnablePartitionBackup_595798;
          EnableBackupDescription: JsonNode; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enablePartitionBackup
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595807 = newJObject()
  var query_595808 = newJObject()
  var body_595809 = newJObject()
  add(query_595808, "timeout", newJInt(timeout))
  add(query_595808, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_595809 = EnableBackupDescription
  add(path_595807, "partitionId", newJString(partitionId))
  result = call_595806.call(path_595807, query_595808, nil, nil, body_595809)

var enablePartitionBackup* = Call_EnablePartitionBackup_595798(
    name: "enablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/EnableBackup",
    validator: validate_EnablePartitionBackup_595799, base: "",
    url: url_EnablePartitionBackup_595800, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupConfigurationInfo_595810 = ref object of OpenApiRestCall_593439
proc url_GetPartitionBackupConfigurationInfo_595812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupConfigurationInfo_595811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595813 = path.getOrDefault("partitionId")
  valid_595813 = validateParameter(valid_595813, JString, required = true,
                                 default = nil)
  if valid_595813 != nil:
    section.add "partitionId", valid_595813
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595814 = query.getOrDefault("timeout")
  valid_595814 = validateParameter(valid_595814, JInt, required = false,
                                 default = newJInt(60))
  if valid_595814 != nil:
    section.add "timeout", valid_595814
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595815 = query.getOrDefault("api-version")
  valid_595815 = validateParameter(valid_595815, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595815 != nil:
    section.add "api-version", valid_595815
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595816: Call_GetPartitionBackupConfigurationInfo_595810;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  let valid = call_595816.validator(path, query, header, formData, body)
  let scheme = call_595816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595816.url(scheme.get, call_595816.host, call_595816.base,
                         call_595816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595816, url, valid)

proc call*(call_595817: Call_GetPartitionBackupConfigurationInfo_595810;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupConfigurationInfo
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595818 = newJObject()
  var query_595819 = newJObject()
  add(query_595819, "timeout", newJInt(timeout))
  add(query_595819, "api-version", newJString(apiVersion))
  add(path_595818, "partitionId", newJString(partitionId))
  result = call_595817.call(path_595818, query_595819, nil, nil, nil)

var getPartitionBackupConfigurationInfo* = Call_GetPartitionBackupConfigurationInfo_595810(
    name: "getPartitionBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupConfigurationInfo",
    validator: validate_GetPartitionBackupConfigurationInfo_595811, base: "",
    url: url_GetPartitionBackupConfigurationInfo_595812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupProgress_595820 = ref object of OpenApiRestCall_593439
proc url_GetPartitionBackupProgress_595822(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupProgress_595821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595823 = path.getOrDefault("partitionId")
  valid_595823 = validateParameter(valid_595823, JString, required = true,
                                 default = nil)
  if valid_595823 != nil:
    section.add "partitionId", valid_595823
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595824 = query.getOrDefault("timeout")
  valid_595824 = validateParameter(valid_595824, JInt, required = false,
                                 default = newJInt(60))
  if valid_595824 != nil:
    section.add "timeout", valid_595824
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595825 = query.getOrDefault("api-version")
  valid_595825 = validateParameter(valid_595825, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595825 != nil:
    section.add "api-version", valid_595825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595826: Call_GetPartitionBackupProgress_595820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  let valid = call_595826.validator(path, query, header, formData, body)
  let scheme = call_595826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595826.url(scheme.get, call_595826.host, call_595826.base,
                         call_595826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595826, url, valid)

proc call*(call_595827: Call_GetPartitionBackupProgress_595820;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupProgress
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595828 = newJObject()
  var query_595829 = newJObject()
  add(query_595829, "timeout", newJInt(timeout))
  add(query_595829, "api-version", newJString(apiVersion))
  add(path_595828, "partitionId", newJString(partitionId))
  result = call_595827.call(path_595828, query_595829, nil, nil, nil)

var getPartitionBackupProgress* = Call_GetPartitionBackupProgress_595820(
    name: "getPartitionBackupProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupProgress",
    validator: validate_GetPartitionBackupProgress_595821, base: "",
    url: url_GetPartitionBackupProgress_595822,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupList_595830 = ref object of OpenApiRestCall_593439
proc url_GetPartitionBackupList_595832(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupList_595831(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595833 = path.getOrDefault("partitionId")
  valid_595833 = validateParameter(valid_595833, JString, required = true,
                                 default = nil)
  if valid_595833 != nil:
    section.add "partitionId", valid_595833
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_595834 = query.getOrDefault("timeout")
  valid_595834 = validateParameter(valid_595834, JInt, required = false,
                                 default = newJInt(60))
  if valid_595834 != nil:
    section.add "timeout", valid_595834
  var valid_595835 = query.getOrDefault("Latest")
  valid_595835 = validateParameter(valid_595835, JBool, required = false,
                                 default = newJBool(false))
  if valid_595835 != nil:
    section.add "Latest", valid_595835
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595836 = query.getOrDefault("api-version")
  valid_595836 = validateParameter(valid_595836, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595836 != nil:
    section.add "api-version", valid_595836
  var valid_595837 = query.getOrDefault("StartDateTimeFilter")
  valid_595837 = validateParameter(valid_595837, JString, required = false,
                                 default = nil)
  if valid_595837 != nil:
    section.add "StartDateTimeFilter", valid_595837
  var valid_595838 = query.getOrDefault("EndDateTimeFilter")
  valid_595838 = validateParameter(valid_595838, JString, required = false,
                                 default = nil)
  if valid_595838 != nil:
    section.add "EndDateTimeFilter", valid_595838
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595839: Call_GetPartitionBackupList_595830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  let valid = call_595839.validator(path, query, header, formData, body)
  let scheme = call_595839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595839.url(scheme.get, call_595839.host, call_595839.base,
                         call_595839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595839, url, valid)

proc call*(call_595840: Call_GetPartitionBackupList_595830; partitionId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = ""): Recallable =
  ## getPartitionBackupList
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595841 = newJObject()
  var query_595842 = newJObject()
  add(query_595842, "timeout", newJInt(timeout))
  add(query_595842, "Latest", newJBool(Latest))
  add(query_595842, "api-version", newJString(apiVersion))
  add(query_595842, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_595842, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_595841, "partitionId", newJString(partitionId))
  result = call_595840.call(path_595841, query_595842, nil, nil, nil)

var getPartitionBackupList* = Call_GetPartitionBackupList_595830(
    name: "getPartitionBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetBackups",
    validator: validate_GetPartitionBackupList_595831, base: "",
    url: url_GetPartitionBackupList_595832, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealthUsingPolicy_595856 = ref object of OpenApiRestCall_593439
proc url_GetPartitionHealthUsingPolicy_595858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealthUsingPolicy_595857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595859 = path.getOrDefault("partitionId")
  valid_595859 = validateParameter(valid_595859, JString, required = true,
                                 default = nil)
  if valid_595859 != nil:
    section.add "partitionId", valid_595859
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595860 = query.getOrDefault("timeout")
  valid_595860 = validateParameter(valid_595860, JInt, required = false,
                                 default = newJInt(60))
  if valid_595860 != nil:
    section.add "timeout", valid_595860
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595861 = query.getOrDefault("api-version")
  valid_595861 = validateParameter(valid_595861, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595861 != nil:
    section.add "api-version", valid_595861
  var valid_595862 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_595862 = validateParameter(valid_595862, JInt, required = false,
                                 default = newJInt(0))
  if valid_595862 != nil:
    section.add "ReplicasHealthStateFilter", valid_595862
  var valid_595863 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595863 = validateParameter(valid_595863, JBool, required = false,
                                 default = newJBool(false))
  if valid_595863 != nil:
    section.add "ExcludeHealthStatistics", valid_595863
  var valid_595864 = query.getOrDefault("EventsHealthStateFilter")
  valid_595864 = validateParameter(valid_595864, JInt, required = false,
                                 default = newJInt(0))
  if valid_595864 != nil:
    section.add "EventsHealthStateFilter", valid_595864
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595866: Call_GetPartitionHealthUsingPolicy_595856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_595866.validator(path, query, header, formData, body)
  let scheme = call_595866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595866.url(scheme.get, call_595866.host, call_595866.base,
                         call_595866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595866, url, valid)

proc call*(call_595867: Call_GetPartitionHealthUsingPolicy_595856;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0;
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealthUsingPolicy
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595868 = newJObject()
  var query_595869 = newJObject()
  var body_595870 = newJObject()
  add(query_595869, "timeout", newJInt(timeout))
  add(query_595869, "api-version", newJString(apiVersion))
  add(query_595869, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  if ApplicationHealthPolicy != nil:
    body_595870 = ApplicationHealthPolicy
  add(query_595869, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595869, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595868, "partitionId", newJString(partitionId))
  result = call_595867.call(path_595868, query_595869, nil, nil, body_595870)

var getPartitionHealthUsingPolicy* = Call_GetPartitionHealthUsingPolicy_595856(
    name: "getPartitionHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealthUsingPolicy_595857, base: "",
    url: url_GetPartitionHealthUsingPolicy_595858,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealth_595843 = ref object of OpenApiRestCall_593439
proc url_GetPartitionHealth_595845(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealth_595844(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595846 = path.getOrDefault("partitionId")
  valid_595846 = validateParameter(valid_595846, JString, required = true,
                                 default = nil)
  if valid_595846 != nil:
    section.add "partitionId", valid_595846
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595847 = query.getOrDefault("timeout")
  valid_595847 = validateParameter(valid_595847, JInt, required = false,
                                 default = newJInt(60))
  if valid_595847 != nil:
    section.add "timeout", valid_595847
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595848 = query.getOrDefault("api-version")
  valid_595848 = validateParameter(valid_595848, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595848 != nil:
    section.add "api-version", valid_595848
  var valid_595849 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_595849 = validateParameter(valid_595849, JInt, required = false,
                                 default = newJInt(0))
  if valid_595849 != nil:
    section.add "ReplicasHealthStateFilter", valid_595849
  var valid_595850 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595850 = validateParameter(valid_595850, JBool, required = false,
                                 default = newJBool(false))
  if valid_595850 != nil:
    section.add "ExcludeHealthStatistics", valid_595850
  var valid_595851 = query.getOrDefault("EventsHealthStateFilter")
  valid_595851 = validateParameter(valid_595851, JInt, required = false,
                                 default = newJInt(0))
  if valid_595851 != nil:
    section.add "EventsHealthStateFilter", valid_595851
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595852: Call_GetPartitionHealth_595843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_595852.validator(path, query, header, formData, body)
  let scheme = call_595852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595852.url(scheme.get, call_595852.host, call_595852.base,
                         call_595852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595852, url, valid)

proc call*(call_595853: Call_GetPartitionHealth_595843; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0; ExcludeHealthStatistics: bool = false;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595854 = newJObject()
  var query_595855 = newJObject()
  add(query_595855, "timeout", newJInt(timeout))
  add(query_595855, "api-version", newJString(apiVersion))
  add(query_595855, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  add(query_595855, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595855, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595854, "partitionId", newJString(partitionId))
  result = call_595853.call(path_595854, query_595855, nil, nil, nil)

var getPartitionHealth* = Call_GetPartitionHealth_595843(
    name: "getPartitionHealth", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealth_595844, base: "",
    url: url_GetPartitionHealth_595845, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionLoadInformation_595871 = ref object of OpenApiRestCall_593439
proc url_GetPartitionLoadInformation_595873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionLoadInformation_595872(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595874 = path.getOrDefault("partitionId")
  valid_595874 = validateParameter(valid_595874, JString, required = true,
                                 default = nil)
  if valid_595874 != nil:
    section.add "partitionId", valid_595874
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595875 = query.getOrDefault("timeout")
  valid_595875 = validateParameter(valid_595875, JInt, required = false,
                                 default = newJInt(60))
  if valid_595875 != nil:
    section.add "timeout", valid_595875
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595876 = query.getOrDefault("api-version")
  valid_595876 = validateParameter(valid_595876, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595876 != nil:
    section.add "api-version", valid_595876
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595877: Call_GetPartitionLoadInformation_595871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  let valid = call_595877.validator(path, query, header, formData, body)
  let scheme = call_595877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595877.url(scheme.get, call_595877.host, call_595877.base,
                         call_595877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595877, url, valid)

proc call*(call_595878: Call_GetPartitionLoadInformation_595871;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionLoadInformation
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595879 = newJObject()
  var query_595880 = newJObject()
  add(query_595880, "timeout", newJInt(timeout))
  add(query_595880, "api-version", newJString(apiVersion))
  add(path_595879, "partitionId", newJString(partitionId))
  result = call_595878.call(path_595879, query_595880, nil, nil, nil)

var getPartitionLoadInformation* = Call_GetPartitionLoadInformation_595871(
    name: "getPartitionLoadInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetLoadInformation",
    validator: validate_GetPartitionLoadInformation_595872, base: "",
    url: url_GetPartitionLoadInformation_595873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfoList_595881 = ref object of OpenApiRestCall_593439
proc url_GetReplicaInfoList_595883(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfoList_595882(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595884 = path.getOrDefault("partitionId")
  valid_595884 = validateParameter(valid_595884, JString, required = true,
                                 default = nil)
  if valid_595884 != nil:
    section.add "partitionId", valid_595884
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_595885 = query.getOrDefault("timeout")
  valid_595885 = validateParameter(valid_595885, JInt, required = false,
                                 default = newJInt(60))
  if valid_595885 != nil:
    section.add "timeout", valid_595885
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595886 = query.getOrDefault("api-version")
  valid_595886 = validateParameter(valid_595886, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595886 != nil:
    section.add "api-version", valid_595886
  var valid_595887 = query.getOrDefault("ContinuationToken")
  valid_595887 = validateParameter(valid_595887, JString, required = false,
                                 default = nil)
  if valid_595887 != nil:
    section.add "ContinuationToken", valid_595887
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595888: Call_GetReplicaInfoList_595881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_595888.validator(path, query, header, formData, body)
  let scheme = call_595888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595888.url(scheme.get, call_595888.host, call_595888.base,
                         call_595888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595888, url, valid)

proc call*(call_595889: Call_GetReplicaInfoList_595881; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = ""): Recallable =
  ## getReplicaInfoList
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_595890 = newJObject()
  var query_595891 = newJObject()
  add(query_595891, "timeout", newJInt(timeout))
  add(query_595891, "api-version", newJString(apiVersion))
  add(path_595890, "partitionId", newJString(partitionId))
  add(query_595891, "ContinuationToken", newJString(ContinuationToken))
  result = call_595889.call(path_595890, query_595891, nil, nil, nil)

var getReplicaInfoList* = Call_GetReplicaInfoList_595881(
    name: "getReplicaInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas",
    validator: validate_GetReplicaInfoList_595882, base: "",
    url: url_GetReplicaInfoList_595883, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfo_595892 = ref object of OpenApiRestCall_593439
proc url_GetReplicaInfo_595894(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfo_595893(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595895 = path.getOrDefault("replicaId")
  valid_595895 = validateParameter(valid_595895, JString, required = true,
                                 default = nil)
  if valid_595895 != nil:
    section.add "replicaId", valid_595895
  var valid_595896 = path.getOrDefault("partitionId")
  valid_595896 = validateParameter(valid_595896, JString, required = true,
                                 default = nil)
  if valid_595896 != nil:
    section.add "partitionId", valid_595896
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595897 = query.getOrDefault("timeout")
  valid_595897 = validateParameter(valid_595897, JInt, required = false,
                                 default = newJInt(60))
  if valid_595897 != nil:
    section.add "timeout", valid_595897
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595898 = query.getOrDefault("api-version")
  valid_595898 = validateParameter(valid_595898, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595898 != nil:
    section.add "api-version", valid_595898
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595899: Call_GetReplicaInfo_595892; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_595899.validator(path, query, header, formData, body)
  let scheme = call_595899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595899.url(scheme.get, call_595899.host, call_595899.base,
                         call_595899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595899, url, valid)

proc call*(call_595900: Call_GetReplicaInfo_595892; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getReplicaInfo
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595901 = newJObject()
  var query_595902 = newJObject()
  add(path_595901, "replicaId", newJString(replicaId))
  add(query_595902, "timeout", newJInt(timeout))
  add(query_595902, "api-version", newJString(apiVersion))
  add(path_595901, "partitionId", newJString(partitionId))
  result = call_595900.call(path_595901, query_595902, nil, nil, nil)

var getReplicaInfo* = Call_GetReplicaInfo_595892(name: "getReplicaInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}",
    validator: validate_GetReplicaInfo_595893, base: "", url: url_GetReplicaInfo_595894,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealthUsingPolicy_595915 = ref object of OpenApiRestCall_593439
proc url_GetReplicaHealthUsingPolicy_595917(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealthUsingPolicy_595916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595918 = path.getOrDefault("replicaId")
  valid_595918 = validateParameter(valid_595918, JString, required = true,
                                 default = nil)
  if valid_595918 != nil:
    section.add "replicaId", valid_595918
  var valid_595919 = path.getOrDefault("partitionId")
  valid_595919 = validateParameter(valid_595919, JString, required = true,
                                 default = nil)
  if valid_595919 != nil:
    section.add "partitionId", valid_595919
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595920 = query.getOrDefault("timeout")
  valid_595920 = validateParameter(valid_595920, JInt, required = false,
                                 default = newJInt(60))
  if valid_595920 != nil:
    section.add "timeout", valid_595920
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595921 = query.getOrDefault("api-version")
  valid_595921 = validateParameter(valid_595921, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595921 != nil:
    section.add "api-version", valid_595921
  var valid_595922 = query.getOrDefault("EventsHealthStateFilter")
  valid_595922 = validateParameter(valid_595922, JInt, required = false,
                                 default = newJInt(0))
  if valid_595922 != nil:
    section.add "EventsHealthStateFilter", valid_595922
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595924: Call_GetReplicaHealthUsingPolicy_595915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  let valid = call_595924.validator(path, query, header, formData, body)
  let scheme = call_595924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595924.url(scheme.get, call_595924.host, call_595924.base,
                         call_595924.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595924, url, valid)

proc call*(call_595925: Call_GetReplicaHealthUsingPolicy_595915; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealthUsingPolicy
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595926 = newJObject()
  var query_595927 = newJObject()
  var body_595928 = newJObject()
  add(path_595926, "replicaId", newJString(replicaId))
  add(query_595927, "timeout", newJInt(timeout))
  add(query_595927, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_595928 = ApplicationHealthPolicy
  add(query_595927, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595926, "partitionId", newJString(partitionId))
  result = call_595925.call(path_595926, query_595927, nil, nil, body_595928)

var getReplicaHealthUsingPolicy* = Call_GetReplicaHealthUsingPolicy_595915(
    name: "getReplicaHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealthUsingPolicy_595916, base: "",
    url: url_GetReplicaHealthUsingPolicy_595917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealth_595903 = ref object of OpenApiRestCall_593439
proc url_GetReplicaHealth_595905(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealth_595904(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595906 = path.getOrDefault("replicaId")
  valid_595906 = validateParameter(valid_595906, JString, required = true,
                                 default = nil)
  if valid_595906 != nil:
    section.add "replicaId", valid_595906
  var valid_595907 = path.getOrDefault("partitionId")
  valid_595907 = validateParameter(valid_595907, JString, required = true,
                                 default = nil)
  if valid_595907 != nil:
    section.add "partitionId", valid_595907
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595908 = query.getOrDefault("timeout")
  valid_595908 = validateParameter(valid_595908, JInt, required = false,
                                 default = newJInt(60))
  if valid_595908 != nil:
    section.add "timeout", valid_595908
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595909 = query.getOrDefault("api-version")
  valid_595909 = validateParameter(valid_595909, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595909 != nil:
    section.add "api-version", valid_595909
  var valid_595910 = query.getOrDefault("EventsHealthStateFilter")
  valid_595910 = validateParameter(valid_595910, JInt, required = false,
                                 default = newJInt(0))
  if valid_595910 != nil:
    section.add "EventsHealthStateFilter", valid_595910
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595911: Call_GetReplicaHealth_595903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  let valid = call_595911.validator(path, query, header, formData, body)
  let scheme = call_595911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595911.url(scheme.get, call_595911.host, call_595911.base,
                         call_595911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595911, url, valid)

proc call*(call_595912: Call_GetReplicaHealth_595903; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealth
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595913 = newJObject()
  var query_595914 = newJObject()
  add(path_595913, "replicaId", newJString(replicaId))
  add(query_595914, "timeout", newJInt(timeout))
  add(query_595914, "api-version", newJString(apiVersion))
  add(query_595914, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595913, "partitionId", newJString(partitionId))
  result = call_595912.call(path_595913, query_595914, nil, nil, nil)

var getReplicaHealth* = Call_GetReplicaHealth_595903(name: "getReplicaHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealth_595904, base: "",
    url: url_GetReplicaHealth_595905, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportReplicaHealth_595929 = ref object of OpenApiRestCall_593439
proc url_ReportReplicaHealth_595931(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportReplicaHealth_595930(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595932 = path.getOrDefault("replicaId")
  valid_595932 = validateParameter(valid_595932, JString, required = true,
                                 default = nil)
  if valid_595932 != nil:
    section.add "replicaId", valid_595932
  var valid_595933 = path.getOrDefault("partitionId")
  valid_595933 = validateParameter(valid_595933, JString, required = true,
                                 default = nil)
  if valid_595933 != nil:
    section.add "partitionId", valid_595933
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceKind: JString (required)
  ##              : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  section = newJObject()
  var valid_595934 = query.getOrDefault("Immediate")
  valid_595934 = validateParameter(valid_595934, JBool, required = false,
                                 default = newJBool(false))
  if valid_595934 != nil:
    section.add "Immediate", valid_595934
  var valid_595935 = query.getOrDefault("timeout")
  valid_595935 = validateParameter(valid_595935, JInt, required = false,
                                 default = newJInt(60))
  if valid_595935 != nil:
    section.add "timeout", valid_595935
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595936 = query.getOrDefault("api-version")
  valid_595936 = validateParameter(valid_595936, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595936 != nil:
    section.add "api-version", valid_595936
  var valid_595937 = query.getOrDefault("ServiceKind")
  valid_595937 = validateParameter(valid_595937, JString, required = true,
                                 default = newJString("Stateful"))
  if valid_595937 != nil:
    section.add "ServiceKind", valid_595937
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595939: Call_ReportReplicaHealth_595929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595939.validator(path, query, header, formData, body)
  let scheme = call_595939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595939.url(scheme.get, call_595939.host, call_595939.base,
                         call_595939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595939, url, valid)

proc call*(call_595940: Call_ReportReplicaHealth_595929; replicaId: string;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0";
          ServiceKind: string = "Stateful"): Recallable =
  ## reportReplicaHealth
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ServiceKind: string (required)
  ##              : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  var path_595941 = newJObject()
  var query_595942 = newJObject()
  var body_595943 = newJObject()
  add(path_595941, "replicaId", newJString(replicaId))
  add(query_595942, "Immediate", newJBool(Immediate))
  add(query_595942, "timeout", newJInt(timeout))
  add(query_595942, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_595943 = HealthInformation
  add(path_595941, "partitionId", newJString(partitionId))
  add(query_595942, "ServiceKind", newJString(ServiceKind))
  result = call_595940.call(path_595941, query_595942, nil, nil, body_595943)

var reportReplicaHealth* = Call_ReportReplicaHealth_595929(
    name: "reportReplicaHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth",
    validator: validate_ReportReplicaHealth_595930, base: "",
    url: url_ReportReplicaHealth_595931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestoreProgress_595944 = ref object of OpenApiRestCall_593439
proc url_GetPartitionRestoreProgress_595946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestoreProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestoreProgress_595945(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595947 = path.getOrDefault("partitionId")
  valid_595947 = validateParameter(valid_595947, JString, required = true,
                                 default = nil)
  if valid_595947 != nil:
    section.add "partitionId", valid_595947
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595948 = query.getOrDefault("timeout")
  valid_595948 = validateParameter(valid_595948, JInt, required = false,
                                 default = newJInt(60))
  if valid_595948 != nil:
    section.add "timeout", valid_595948
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595949 = query.getOrDefault("api-version")
  valid_595949 = validateParameter(valid_595949, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595949 != nil:
    section.add "api-version", valid_595949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595950: Call_GetPartitionRestoreProgress_595944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  let valid = call_595950.validator(path, query, header, formData, body)
  let scheme = call_595950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595950.url(scheme.get, call_595950.host, call_595950.base,
                         call_595950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595950, url, valid)

proc call*(call_595951: Call_GetPartitionRestoreProgress_595944;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionRestoreProgress
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595952 = newJObject()
  var query_595953 = newJObject()
  add(query_595953, "timeout", newJInt(timeout))
  add(query_595953, "api-version", newJString(apiVersion))
  add(path_595952, "partitionId", newJString(partitionId))
  result = call_595951.call(path_595952, query_595953, nil, nil, nil)

var getPartitionRestoreProgress* = Call_GetPartitionRestoreProgress_595944(
    name: "getPartitionRestoreProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetRestoreProgress",
    validator: validate_GetPartitionRestoreProgress_595945, base: "",
    url: url_GetPartitionRestoreProgress_595946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceNameInfo_595954 = ref object of OpenApiRestCall_593439
proc url_GetServiceNameInfo_595956(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetServiceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceNameInfo_595955(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595957 = path.getOrDefault("partitionId")
  valid_595957 = validateParameter(valid_595957, JString, required = true,
                                 default = nil)
  if valid_595957 != nil:
    section.add "partitionId", valid_595957
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595958 = query.getOrDefault("timeout")
  valid_595958 = validateParameter(valid_595958, JInt, required = false,
                                 default = newJInt(60))
  if valid_595958 != nil:
    section.add "timeout", valid_595958
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595959 = query.getOrDefault("api-version")
  valid_595959 = validateParameter(valid_595959, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595959 != nil:
    section.add "api-version", valid_595959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595960: Call_GetServiceNameInfo_595954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  let valid = call_595960.validator(path, query, header, formData, body)
  let scheme = call_595960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595960.url(scheme.get, call_595960.host, call_595960.base,
                         call_595960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595960, url, valid)

proc call*(call_595961: Call_GetServiceNameInfo_595954; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceNameInfo
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595962 = newJObject()
  var query_595963 = newJObject()
  add(query_595963, "timeout", newJInt(timeout))
  add(query_595963, "api-version", newJString(apiVersion))
  add(path_595962, "partitionId", newJString(partitionId))
  result = call_595961.call(path_595962, query_595963, nil, nil, nil)

var getServiceNameInfo* = Call_GetServiceNameInfo_595954(
    name: "getServiceNameInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetServiceName",
    validator: validate_GetServiceNameInfo_595955, base: "",
    url: url_GetServiceNameInfo_595956, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MovePrimaryReplica_595964 = ref object of OpenApiRestCall_593439
proc url_MovePrimaryReplica_595966(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/MovePrimaryReplica")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MovePrimaryReplica_595965(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## This command moves the primary replica of a partition of a stateful service, respecting all constraints.
  ## If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
  ## If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
  ## If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595967 = path.getOrDefault("partitionId")
  valid_595967 = validateParameter(valid_595967, JString, required = true,
                                 default = nil)
  if valid_595967 != nil:
    section.add "partitionId", valid_595967
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeName: JString
  ##           : The name of the node.
  ##   IgnoreConstraints: JBool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  section = newJObject()
  var valid_595968 = query.getOrDefault("timeout")
  valid_595968 = validateParameter(valid_595968, JInt, required = false,
                                 default = newJInt(60))
  if valid_595968 != nil:
    section.add "timeout", valid_595968
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595969 = query.getOrDefault("api-version")
  valid_595969 = validateParameter(valid_595969, JString, required = true,
                                 default = newJString("6.5"))
  if valid_595969 != nil:
    section.add "api-version", valid_595969
  var valid_595970 = query.getOrDefault("NodeName")
  valid_595970 = validateParameter(valid_595970, JString, required = false,
                                 default = nil)
  if valid_595970 != nil:
    section.add "NodeName", valid_595970
  var valid_595971 = query.getOrDefault("IgnoreConstraints")
  valid_595971 = validateParameter(valid_595971, JBool, required = false,
                                 default = newJBool(false))
  if valid_595971 != nil:
    section.add "IgnoreConstraints", valid_595971
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595972: Call_MovePrimaryReplica_595964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This command moves the primary replica of a partition of a stateful service, respecting all constraints.
  ## If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
  ## If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
  ## If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
  ## 
  let valid = call_595972.validator(path, query, header, formData, body)
  let scheme = call_595972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595972.url(scheme.get, call_595972.host, call_595972.base,
                         call_595972.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595972, url, valid)

proc call*(call_595973: Call_MovePrimaryReplica_595964; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.5"; NodeName: string = "";
          IgnoreConstraints: bool = false): Recallable =
  ## movePrimaryReplica
  ## This command moves the primary replica of a partition of a stateful service, respecting all constraints.
  ## If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
  ## If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
  ## If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeName: string
  ##           : The name of the node.
  ##   IgnoreConstraints: bool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595974 = newJObject()
  var query_595975 = newJObject()
  add(query_595975, "timeout", newJInt(timeout))
  add(query_595975, "api-version", newJString(apiVersion))
  add(query_595975, "NodeName", newJString(NodeName))
  add(query_595975, "IgnoreConstraints", newJBool(IgnoreConstraints))
  add(path_595974, "partitionId", newJString(partitionId))
  result = call_595973.call(path_595974, query_595975, nil, nil, nil)

var movePrimaryReplica* = Call_MovePrimaryReplica_595964(
    name: "movePrimaryReplica", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/MovePrimaryReplica",
    validator: validate_MovePrimaryReplica_595965, base: "",
    url: url_MovePrimaryReplica_595966, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MoveSecondaryReplica_595976 = ref object of OpenApiRestCall_593439
proc url_MoveSecondaryReplica_595978(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/MoveSecondaryReplica")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MoveSecondaryReplica_595977(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
  ## CurrentNodeName parameter must be specified to identify the replica that is moved.
  ## Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.
  ## If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595979 = path.getOrDefault("partitionId")
  valid_595979 = validateParameter(valid_595979, JString, required = true,
                                 default = nil)
  if valid_595979 != nil:
    section.add "partitionId", valid_595979
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   CurrentNodeName: JString (required)
  ##                  : The name of the source node for secondary replica move.
  ##   NewNodeName: JString
  ##              : The name of the target node for secondary replica move. If not specified, replica is moved to a random node.
  ##   IgnoreConstraints: JBool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  section = newJObject()
  var valid_595980 = query.getOrDefault("timeout")
  valid_595980 = validateParameter(valid_595980, JInt, required = false,
                                 default = newJInt(60))
  if valid_595980 != nil:
    section.add "timeout", valid_595980
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595981 = query.getOrDefault("api-version")
  valid_595981 = validateParameter(valid_595981, JString, required = true,
                                 default = newJString("6.5"))
  if valid_595981 != nil:
    section.add "api-version", valid_595981
  var valid_595982 = query.getOrDefault("CurrentNodeName")
  valid_595982 = validateParameter(valid_595982, JString, required = true,
                                 default = nil)
  if valid_595982 != nil:
    section.add "CurrentNodeName", valid_595982
  var valid_595983 = query.getOrDefault("NewNodeName")
  valid_595983 = validateParameter(valid_595983, JString, required = false,
                                 default = nil)
  if valid_595983 != nil:
    section.add "NewNodeName", valid_595983
  var valid_595984 = query.getOrDefault("IgnoreConstraints")
  valid_595984 = validateParameter(valid_595984, JBool, required = false,
                                 default = newJBool(false))
  if valid_595984 != nil:
    section.add "IgnoreConstraints", valid_595984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595985: Call_MoveSecondaryReplica_595976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
  ## CurrentNodeName parameter must be specified to identify the replica that is moved.
  ## Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.
  ## If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
  ## 
  let valid = call_595985.validator(path, query, header, formData, body)
  let scheme = call_595985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595985.url(scheme.get, call_595985.host, call_595985.base,
                         call_595985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595985, url, valid)

proc call*(call_595986: Call_MoveSecondaryReplica_595976; CurrentNodeName: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.5";
          NewNodeName: string = ""; IgnoreConstraints: bool = false): Recallable =
  ## moveSecondaryReplica
  ## This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
  ## CurrentNodeName parameter must be specified to identify the replica that is moved.
  ## Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.
  ## If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   CurrentNodeName: string (required)
  ##                  : The name of the source node for secondary replica move.
  ##   NewNodeName: string
  ##              : The name of the target node for secondary replica move. If not specified, replica is moved to a random node.
  ##   IgnoreConstraints: bool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595987 = newJObject()
  var query_595988 = newJObject()
  add(query_595988, "timeout", newJInt(timeout))
  add(query_595988, "api-version", newJString(apiVersion))
  add(query_595988, "CurrentNodeName", newJString(CurrentNodeName))
  add(query_595988, "NewNodeName", newJString(NewNodeName))
  add(query_595988, "IgnoreConstraints", newJBool(IgnoreConstraints))
  add(path_595987, "partitionId", newJString(partitionId))
  result = call_595986.call(path_595987, query_595988, nil, nil, nil)

var moveSecondaryReplica* = Call_MoveSecondaryReplica_595976(
    name: "moveSecondaryReplica", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/MoveSecondaryReplica",
    validator: validate_MoveSecondaryReplica_595977, base: "",
    url: url_MoveSecondaryReplica_595978, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverPartition_595989 = ref object of OpenApiRestCall_593439
proc url_RecoverPartition_595991(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverPartition_595990(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595992 = path.getOrDefault("partitionId")
  valid_595992 = validateParameter(valid_595992, JString, required = true,
                                 default = nil)
  if valid_595992 != nil:
    section.add "partitionId", valid_595992
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595993 = query.getOrDefault("timeout")
  valid_595993 = validateParameter(valid_595993, JInt, required = false,
                                 default = newJInt(60))
  if valid_595993 != nil:
    section.add "timeout", valid_595993
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595994 = query.getOrDefault("api-version")
  valid_595994 = validateParameter(valid_595994, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595994 != nil:
    section.add "api-version", valid_595994
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595995: Call_RecoverPartition_595989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_595995.validator(path, query, header, formData, body)
  let scheme = call_595995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595995.url(scheme.get, call_595995.host, call_595995.base,
                         call_595995.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595995, url, valid)

proc call*(call_595996: Call_RecoverPartition_595989; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverPartition
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595997 = newJObject()
  var query_595998 = newJObject()
  add(query_595998, "timeout", newJInt(timeout))
  add(query_595998, "api-version", newJString(apiVersion))
  add(path_595997, "partitionId", newJString(partitionId))
  result = call_595996.call(path_595997, query_595998, nil, nil, nil)

var recoverPartition* = Call_RecoverPartition_595989(name: "recoverPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Recover",
    validator: validate_RecoverPartition_595990, base: "",
    url: url_RecoverPartition_595991, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportPartitionHealth_595999 = ref object of OpenApiRestCall_593439
proc url_ReportPartitionHealth_596001(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportPartitionHealth_596000(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_596002 = path.getOrDefault("partitionId")
  valid_596002 = validateParameter(valid_596002, JString, required = true,
                                 default = nil)
  if valid_596002 != nil:
    section.add "partitionId", valid_596002
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596003 = query.getOrDefault("Immediate")
  valid_596003 = validateParameter(valid_596003, JBool, required = false,
                                 default = newJBool(false))
  if valid_596003 != nil:
    section.add "Immediate", valid_596003
  var valid_596004 = query.getOrDefault("timeout")
  valid_596004 = validateParameter(valid_596004, JInt, required = false,
                                 default = newJInt(60))
  if valid_596004 != nil:
    section.add "timeout", valid_596004
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596005 = query.getOrDefault("api-version")
  valid_596005 = validateParameter(valid_596005, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596005 != nil:
    section.add "api-version", valid_596005
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596007: Call_ReportPartitionHealth_595999; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_596007.validator(path, query, header, formData, body)
  let scheme = call_596007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596007.url(scheme.get, call_596007.host, call_596007.base,
                         call_596007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596007, url, valid)

proc call*(call_596008: Call_ReportPartitionHealth_595999;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportPartitionHealth
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_596009 = newJObject()
  var query_596010 = newJObject()
  var body_596011 = newJObject()
  add(query_596010, "Immediate", newJBool(Immediate))
  add(query_596010, "timeout", newJInt(timeout))
  add(query_596010, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_596011 = HealthInformation
  add(path_596009, "partitionId", newJString(partitionId))
  result = call_596008.call(path_596009, query_596010, nil, nil, body_596011)

var reportPartitionHealth* = Call_ReportPartitionHealth_595999(
    name: "reportPartitionHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ReportHealth",
    validator: validate_ReportPartitionHealth_596000, base: "",
    url: url_ReportPartitionHealth_596001, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResetPartitionLoad_596012 = ref object of OpenApiRestCall_593439
proc url_ResetPartitionLoad_596014(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResetLoad")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResetPartitionLoad_596013(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_596015 = path.getOrDefault("partitionId")
  valid_596015 = validateParameter(valid_596015, JString, required = true,
                                 default = nil)
  if valid_596015 != nil:
    section.add "partitionId", valid_596015
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596016 = query.getOrDefault("timeout")
  valid_596016 = validateParameter(valid_596016, JInt, required = false,
                                 default = newJInt(60))
  if valid_596016 != nil:
    section.add "timeout", valid_596016
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596017 = query.getOrDefault("api-version")
  valid_596017 = validateParameter(valid_596017, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596017 != nil:
    section.add "api-version", valid_596017
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596018: Call_ResetPartitionLoad_596012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  let valid = call_596018.validator(path, query, header, formData, body)
  let scheme = call_596018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596018.url(scheme.get, call_596018.host, call_596018.base,
                         call_596018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596018, url, valid)

proc call*(call_596019: Call_ResetPartitionLoad_596012; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resetPartitionLoad
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_596020 = newJObject()
  var query_596021 = newJObject()
  add(query_596021, "timeout", newJInt(timeout))
  add(query_596021, "api-version", newJString(apiVersion))
  add(path_596020, "partitionId", newJString(partitionId))
  result = call_596019.call(path_596020, query_596021, nil, nil, nil)

var resetPartitionLoad* = Call_ResetPartitionLoad_596012(
    name: "resetPartitionLoad", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResetLoad",
    validator: validate_ResetPartitionLoad_596013, base: "",
    url: url_ResetPartitionLoad_596014, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestorePartition_596022 = ref object of OpenApiRestCall_593439
proc url_RestorePartition_596024(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestorePartition_596023(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_596025 = path.getOrDefault("partitionId")
  valid_596025 = validateParameter(valid_596025, JString, required = true,
                                 default = nil)
  if valid_596025 != nil:
    section.add "partitionId", valid_596025
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestoreTimeout: JInt
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  section = newJObject()
  var valid_596026 = query.getOrDefault("timeout")
  valid_596026 = validateParameter(valid_596026, JInt, required = false,
                                 default = newJInt(60))
  if valid_596026 != nil:
    section.add "timeout", valid_596026
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596027 = query.getOrDefault("api-version")
  valid_596027 = validateParameter(valid_596027, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596027 != nil:
    section.add "api-version", valid_596027
  var valid_596028 = query.getOrDefault("RestoreTimeout")
  valid_596028 = validateParameter(valid_596028, JInt, required = false,
                                 default = newJInt(10))
  if valid_596028 != nil:
    section.add "RestoreTimeout", valid_596028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596030: Call_RestorePartition_596022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  let valid = call_596030.validator(path, query, header, formData, body)
  let scheme = call_596030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596030.url(scheme.get, call_596030.host, call_596030.base,
                         call_596030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596030, url, valid)

proc call*(call_596031: Call_RestorePartition_596022;
          RestorePartitionDescription: JsonNode; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; RestoreTimeout: int = 10): Recallable =
  ## restorePartition
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   RestoreTimeout: int
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  var path_596032 = newJObject()
  var query_596033 = newJObject()
  var body_596034 = newJObject()
  add(query_596033, "timeout", newJInt(timeout))
  if RestorePartitionDescription != nil:
    body_596034 = RestorePartitionDescription
  add(query_596033, "api-version", newJString(apiVersion))
  add(path_596032, "partitionId", newJString(partitionId))
  add(query_596033, "RestoreTimeout", newJInt(RestoreTimeout))
  result = call_596031.call(path_596032, query_596033, nil, nil, body_596034)

var restorePartition* = Call_RestorePartition_596022(name: "restorePartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Restore",
    validator: validate_RestorePartition_596023, base: "",
    url: url_RestorePartition_596024, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumePartitionBackup_596035 = ref object of OpenApiRestCall_593439
proc url_ResumePartitionBackup_596037(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumePartitionBackup_596036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_596038 = path.getOrDefault("partitionId")
  valid_596038 = validateParameter(valid_596038, JString, required = true,
                                 default = nil)
  if valid_596038 != nil:
    section.add "partitionId", valid_596038
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596039 = query.getOrDefault("timeout")
  valid_596039 = validateParameter(valid_596039, JInt, required = false,
                                 default = newJInt(60))
  if valid_596039 != nil:
    section.add "timeout", valid_596039
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596040 = query.getOrDefault("api-version")
  valid_596040 = validateParameter(valid_596040, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596040 != nil:
    section.add "api-version", valid_596040
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596041: Call_ResumePartitionBackup_596035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_596041.validator(path, query, header, formData, body)
  let scheme = call_596041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596041.url(scheme.get, call_596041.host, call_596041.base,
                         call_596041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596041, url, valid)

proc call*(call_596042: Call_ResumePartitionBackup_596035; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumePartitionBackup
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_596043 = newJObject()
  var query_596044 = newJObject()
  add(query_596044, "timeout", newJInt(timeout))
  add(query_596044, "api-version", newJString(apiVersion))
  add(path_596043, "partitionId", newJString(partitionId))
  result = call_596042.call(path_596043, query_596044, nil, nil, nil)

var resumePartitionBackup* = Call_ResumePartitionBackup_596035(
    name: "resumePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResumeBackup",
    validator: validate_ResumePartitionBackup_596036, base: "",
    url: url_ResumePartitionBackup_596037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendPartitionBackup_596045 = ref object of OpenApiRestCall_593439
proc url_SuspendPartitionBackup_596047(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendPartitionBackup_596046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_596048 = path.getOrDefault("partitionId")
  valid_596048 = validateParameter(valid_596048, JString, required = true,
                                 default = nil)
  if valid_596048 != nil:
    section.add "partitionId", valid_596048
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596049 = query.getOrDefault("timeout")
  valid_596049 = validateParameter(valid_596049, JInt, required = false,
                                 default = newJInt(60))
  if valid_596049 != nil:
    section.add "timeout", valid_596049
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596050 = query.getOrDefault("api-version")
  valid_596050 = validateParameter(valid_596050, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596050 != nil:
    section.add "api-version", valid_596050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596051: Call_SuspendPartitionBackup_596045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  let valid = call_596051.validator(path, query, header, formData, body)
  let scheme = call_596051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596051.url(scheme.get, call_596051.host, call_596051.base,
                         call_596051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596051, url, valid)

proc call*(call_596052: Call_SuspendPartitionBackup_596045; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendPartitionBackup
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_596053 = newJObject()
  var query_596054 = newJObject()
  add(query_596054, "timeout", newJInt(timeout))
  add(query_596054, "api-version", newJString(apiVersion))
  add(path_596053, "partitionId", newJString(partitionId))
  result = call_596052.call(path_596053, query_596054, nil, nil, nil)

var suspendPartitionBackup* = Call_SuspendPartitionBackup_596045(
    name: "suspendPartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/SuspendBackup",
    validator: validate_SuspendPartitionBackup_596046, base: "",
    url: url_SuspendPartitionBackup_596047, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationList_596055 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationList_596057(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshApplicationList_596056(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596058 = query.getOrDefault("api-version")
  valid_596058 = validateParameter(valid_596058, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596058 != nil:
    section.add "api-version", valid_596058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596059: Call_MeshApplicationList_596055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  let valid = call_596059.validator(path, query, header, formData, body)
  let scheme = call_596059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596059.url(scheme.get, call_596059.host, call_596059.base,
                         call_596059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596059, url, valid)

proc call*(call_596060: Call_MeshApplicationList_596055;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationList
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596061 = newJObject()
  add(query_596061, "api-version", newJString(apiVersion))
  result = call_596060.call(nil, query_596061, nil, nil, nil)

var meshApplicationList* = Call_MeshApplicationList_596055(
    name: "meshApplicationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications",
    validator: validate_MeshApplicationList_596056, base: "",
    url: url_MeshApplicationList_596057, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationCreateOrUpdate_596071 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationCreateOrUpdate_596073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationCreateOrUpdate_596072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596074 = path.getOrDefault("applicationResourceName")
  valid_596074 = validateParameter(valid_596074, JString, required = true,
                                 default = nil)
  if valid_596074 != nil:
    section.add "applicationResourceName", valid_596074
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596075 = query.getOrDefault("api-version")
  valid_596075 = validateParameter(valid_596075, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596075 != nil:
    section.add "api-version", valid_596075
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596077: Call_MeshApplicationCreateOrUpdate_596071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_596077.validator(path, query, header, formData, body)
  let scheme = call_596077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596077.url(scheme.get, call_596077.host, call_596077.base,
                         call_596077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596077, url, valid)

proc call*(call_596078: Call_MeshApplicationCreateOrUpdate_596071;
          applicationResourceDescription: JsonNode;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationCreateOrUpdate
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596079 = newJObject()
  var query_596080 = newJObject()
  var body_596081 = newJObject()
  if applicationResourceDescription != nil:
    body_596081 = applicationResourceDescription
  add(query_596080, "api-version", newJString(apiVersion))
  add(path_596079, "applicationResourceName", newJString(applicationResourceName))
  result = call_596078.call(path_596079, query_596080, nil, nil, body_596081)

var meshApplicationCreateOrUpdate* = Call_MeshApplicationCreateOrUpdate_596071(
    name: "meshApplicationCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationCreateOrUpdate_596072, base: "",
    url: url_MeshApplicationCreateOrUpdate_596073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationGet_596062 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationGet_596064(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationGet_596063(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596065 = path.getOrDefault("applicationResourceName")
  valid_596065 = validateParameter(valid_596065, JString, required = true,
                                 default = nil)
  if valid_596065 != nil:
    section.add "applicationResourceName", valid_596065
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596066 = query.getOrDefault("api-version")
  valid_596066 = validateParameter(valid_596066, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596066 != nil:
    section.add "api-version", valid_596066
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596067: Call_MeshApplicationGet_596062; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  let valid = call_596067.validator(path, query, header, formData, body)
  let scheme = call_596067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596067.url(scheme.get, call_596067.host, call_596067.base,
                         call_596067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596067, url, valid)

proc call*(call_596068: Call_MeshApplicationGet_596062;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationGet
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596069 = newJObject()
  var query_596070 = newJObject()
  add(query_596070, "api-version", newJString(apiVersion))
  add(path_596069, "applicationResourceName", newJString(applicationResourceName))
  result = call_596068.call(path_596069, query_596070, nil, nil, nil)

var meshApplicationGet* = Call_MeshApplicationGet_596062(
    name: "meshApplicationGet", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationGet_596063, base: "",
    url: url_MeshApplicationGet_596064, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationDelete_596082 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationDelete_596084(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationDelete_596083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the Application resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596085 = path.getOrDefault("applicationResourceName")
  valid_596085 = validateParameter(valid_596085, JString, required = true,
                                 default = nil)
  if valid_596085 != nil:
    section.add "applicationResourceName", valid_596085
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596086 = query.getOrDefault("api-version")
  valid_596086 = validateParameter(valid_596086, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596086 != nil:
    section.add "api-version", valid_596086
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596087: Call_MeshApplicationDelete_596082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Application resource identified by the name.
  ## 
  let valid = call_596087.validator(path, query, header, formData, body)
  let scheme = call_596087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596087.url(scheme.get, call_596087.host, call_596087.base,
                         call_596087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596087, url, valid)

proc call*(call_596088: Call_MeshApplicationDelete_596082;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationDelete
  ## Deletes the Application resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596089 = newJObject()
  var query_596090 = newJObject()
  add(query_596090, "api-version", newJString(apiVersion))
  add(path_596089, "applicationResourceName", newJString(applicationResourceName))
  result = call_596088.call(path_596089, query_596090, nil, nil, nil)

var meshApplicationDelete* = Call_MeshApplicationDelete_596082(
    name: "meshApplicationDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationDelete_596083, base: "",
    url: url_MeshApplicationDelete_596084, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceList_596091 = ref object of OpenApiRestCall_593439
proc url_MeshServiceList_596093(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceList_596092(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596094 = path.getOrDefault("applicationResourceName")
  valid_596094 = validateParameter(valid_596094, JString, required = true,
                                 default = nil)
  if valid_596094 != nil:
    section.add "applicationResourceName", valid_596094
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596095 = query.getOrDefault("api-version")
  valid_596095 = validateParameter(valid_596095, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596095 != nil:
    section.add "api-version", valid_596095
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596096: Call_MeshServiceList_596091; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  let valid = call_596096.validator(path, query, header, formData, body)
  let scheme = call_596096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596096.url(scheme.get, call_596096.host, call_596096.base,
                         call_596096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596096, url, valid)

proc call*(call_596097: Call_MeshServiceList_596091;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceList
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596098 = newJObject()
  var query_596099 = newJObject()
  add(query_596099, "api-version", newJString(apiVersion))
  add(path_596098, "applicationResourceName", newJString(applicationResourceName))
  result = call_596097.call(path_596098, query_596099, nil, nil, nil)

var meshServiceList* = Call_MeshServiceList_596091(name: "meshServiceList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}/Services",
    validator: validate_MeshServiceList_596092, base: "", url: url_MeshServiceList_596093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceGet_596100 = ref object of OpenApiRestCall_593439
proc url_MeshServiceGet_596102(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceGet_596101(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596103 = path.getOrDefault("applicationResourceName")
  valid_596103 = validateParameter(valid_596103, JString, required = true,
                                 default = nil)
  if valid_596103 != nil:
    section.add "applicationResourceName", valid_596103
  var valid_596104 = path.getOrDefault("serviceResourceName")
  valid_596104 = validateParameter(valid_596104, JString, required = true,
                                 default = nil)
  if valid_596104 != nil:
    section.add "serviceResourceName", valid_596104
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596105 = query.getOrDefault("api-version")
  valid_596105 = validateParameter(valid_596105, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596105 != nil:
    section.add "api-version", valid_596105
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596106: Call_MeshServiceGet_596100; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  let valid = call_596106.validator(path, query, header, formData, body)
  let scheme = call_596106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596106.url(scheme.get, call_596106.host, call_596106.base,
                         call_596106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596106, url, valid)

proc call*(call_596107: Call_MeshServiceGet_596100;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceGet
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_596108 = newJObject()
  var query_596109 = newJObject()
  add(query_596109, "api-version", newJString(apiVersion))
  add(path_596108, "applicationResourceName", newJString(applicationResourceName))
  add(path_596108, "serviceResourceName", newJString(serviceResourceName))
  result = call_596107.call(path_596108, query_596109, nil, nil, nil)

var meshServiceGet* = Call_MeshServiceGet_596100(name: "meshServiceGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}",
    validator: validate_MeshServiceGet_596101, base: "", url: url_MeshServiceGet_596102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaList_596110 = ref object of OpenApiRestCall_593439
proc url_MeshServiceReplicaList_596112(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaList_596111(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596113 = path.getOrDefault("applicationResourceName")
  valid_596113 = validateParameter(valid_596113, JString, required = true,
                                 default = nil)
  if valid_596113 != nil:
    section.add "applicationResourceName", valid_596113
  var valid_596114 = path.getOrDefault("serviceResourceName")
  valid_596114 = validateParameter(valid_596114, JString, required = true,
                                 default = nil)
  if valid_596114 != nil:
    section.add "serviceResourceName", valid_596114
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596115 = query.getOrDefault("api-version")
  valid_596115 = validateParameter(valid_596115, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596115 != nil:
    section.add "api-version", valid_596115
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596116: Call_MeshServiceReplicaList_596110; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  let valid = call_596116.validator(path, query, header, formData, body)
  let scheme = call_596116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596116.url(scheme.get, call_596116.host, call_596116.base,
                         call_596116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596116, url, valid)

proc call*(call_596117: Call_MeshServiceReplicaList_596110;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaList
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_596118 = newJObject()
  var query_596119 = newJObject()
  add(query_596119, "api-version", newJString(apiVersion))
  add(path_596118, "applicationResourceName", newJString(applicationResourceName))
  add(path_596118, "serviceResourceName", newJString(serviceResourceName))
  result = call_596117.call(path_596118, query_596119, nil, nil, nil)

var meshServiceReplicaList* = Call_MeshServiceReplicaList_596110(
    name: "meshServiceReplicaList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas",
    validator: validate_MeshServiceReplicaList_596111, base: "",
    url: url_MeshServiceReplicaList_596112, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaGet_596120 = ref object of OpenApiRestCall_593439
proc url_MeshServiceReplicaGet_596122(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaGet_596121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596123 = path.getOrDefault("applicationResourceName")
  valid_596123 = validateParameter(valid_596123, JString, required = true,
                                 default = nil)
  if valid_596123 != nil:
    section.add "applicationResourceName", valid_596123
  var valid_596124 = path.getOrDefault("serviceResourceName")
  valid_596124 = validateParameter(valid_596124, JString, required = true,
                                 default = nil)
  if valid_596124 != nil:
    section.add "serviceResourceName", valid_596124
  var valid_596125 = path.getOrDefault("replicaName")
  valid_596125 = validateParameter(valid_596125, JString, required = true,
                                 default = nil)
  if valid_596125 != nil:
    section.add "replicaName", valid_596125
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596126 = query.getOrDefault("api-version")
  valid_596126 = validateParameter(valid_596126, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596126 != nil:
    section.add "api-version", valid_596126
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596127: Call_MeshServiceReplicaGet_596120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  let valid = call_596127.validator(path, query, header, formData, body)
  let scheme = call_596127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596127.url(scheme.get, call_596127.host, call_596127.base,
                         call_596127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596127, url, valid)

proc call*(call_596128: Call_MeshServiceReplicaGet_596120;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaGet
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  var path_596129 = newJObject()
  var query_596130 = newJObject()
  add(query_596130, "api-version", newJString(apiVersion))
  add(path_596129, "applicationResourceName", newJString(applicationResourceName))
  add(path_596129, "serviceResourceName", newJString(serviceResourceName))
  add(path_596129, "replicaName", newJString(replicaName))
  result = call_596128.call(path_596129, query_596130, nil, nil, nil)

var meshServiceReplicaGet* = Call_MeshServiceReplicaGet_596120(
    name: "meshServiceReplicaGet", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}",
    validator: validate_MeshServiceReplicaGet_596121, base: "",
    url: url_MeshServiceReplicaGet_596122, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshCodePackageGetContainerLogs_596131 = ref object of OpenApiRestCall_593439
proc url_MeshCodePackageGetContainerLogs_596133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  assert "codePackageName" in path, "`codePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName"),
               (kind: ConstantSegment, value: "/CodePackages/"),
               (kind: VariableSegment, value: "codePackageName"),
               (kind: ConstantSegment, value: "/Logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshCodePackageGetContainerLogs_596132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: JString (required)
  ##                  : The name of code package of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596134 = path.getOrDefault("applicationResourceName")
  valid_596134 = validateParameter(valid_596134, JString, required = true,
                                 default = nil)
  if valid_596134 != nil:
    section.add "applicationResourceName", valid_596134
  var valid_596135 = path.getOrDefault("serviceResourceName")
  valid_596135 = validateParameter(valid_596135, JString, required = true,
                                 default = nil)
  if valid_596135 != nil:
    section.add "serviceResourceName", valid_596135
  var valid_596136 = path.getOrDefault("replicaName")
  valid_596136 = validateParameter(valid_596136, JString, required = true,
                                 default = nil)
  if valid_596136 != nil:
    section.add "replicaName", valid_596136
  var valid_596137 = path.getOrDefault("codePackageName")
  valid_596137 = validateParameter(valid_596137, JString, required = true,
                                 default = nil)
  if valid_596137 != nil:
    section.add "codePackageName", valid_596137
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596138 = query.getOrDefault("api-version")
  valid_596138 = validateParameter(valid_596138, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596138 != nil:
    section.add "api-version", valid_596138
  var valid_596139 = query.getOrDefault("Tail")
  valid_596139 = validateParameter(valid_596139, JString, required = false,
                                 default = nil)
  if valid_596139 != nil:
    section.add "Tail", valid_596139
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596140: Call_MeshCodePackageGetContainerLogs_596131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  let valid = call_596140.validator(path, query, header, formData, body)
  let scheme = call_596140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596140.url(scheme.get, call_596140.host, call_596140.base,
                         call_596140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596140, url, valid)

proc call*(call_596141: Call_MeshCodePackageGetContainerLogs_596131;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; codePackageName: string;
          apiVersion: string = "6.4-preview"; Tail: string = ""): Recallable =
  ## meshCodePackageGetContainerLogs
  ## Gets the logs for the container of the specified code package of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: string (required)
  ##                  : The name of code package of the service.
  var path_596142 = newJObject()
  var query_596143 = newJObject()
  add(query_596143, "api-version", newJString(apiVersion))
  add(path_596142, "applicationResourceName", newJString(applicationResourceName))
  add(path_596142, "serviceResourceName", newJString(serviceResourceName))
  add(query_596143, "Tail", newJString(Tail))
  add(path_596142, "replicaName", newJString(replicaName))
  add(path_596142, "codePackageName", newJString(codePackageName))
  result = call_596141.call(path_596142, query_596143, nil, nil, nil)

var meshCodePackageGetContainerLogs* = Call_MeshCodePackageGetContainerLogs_596131(
    name: "meshCodePackageGetContainerLogs", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs",
    validator: validate_MeshCodePackageGetContainerLogs_596132, base: "",
    url: url_MeshCodePackageGetContainerLogs_596133,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayList_596144 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayList_596146(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshGatewayList_596145(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596147 = query.getOrDefault("api-version")
  valid_596147 = validateParameter(valid_596147, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596147 != nil:
    section.add "api-version", valid_596147
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596148: Call_MeshGatewayList_596144; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_596148.validator(path, query, header, formData, body)
  let scheme = call_596148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596148.url(scheme.get, call_596148.host, call_596148.base,
                         call_596148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596148, url, valid)

proc call*(call_596149: Call_MeshGatewayList_596144;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayList
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596150 = newJObject()
  add(query_596150, "api-version", newJString(apiVersion))
  result = call_596149.call(nil, query_596150, nil, nil, nil)

var meshGatewayList* = Call_MeshGatewayList_596144(name: "meshGatewayList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways", validator: validate_MeshGatewayList_596145,
    base: "", url: url_MeshGatewayList_596146, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayCreateOrUpdate_596160 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayCreateOrUpdate_596162(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayCreateOrUpdate_596161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_596163 = path.getOrDefault("gatewayResourceName")
  valid_596163 = validateParameter(valid_596163, JString, required = true,
                                 default = nil)
  if valid_596163 != nil:
    section.add "gatewayResourceName", valid_596163
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596164 = query.getOrDefault("api-version")
  valid_596164 = validateParameter(valid_596164, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596164 != nil:
    section.add "api-version", valid_596164
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596166: Call_MeshGatewayCreateOrUpdate_596160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  let valid = call_596166.validator(path, query, header, formData, body)
  let scheme = call_596166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596166.url(scheme.get, call_596166.host, call_596166.base,
                         call_596166.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596166, url, valid)

proc call*(call_596167: Call_MeshGatewayCreateOrUpdate_596160;
          gatewayResourceDescription: JsonNode; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayCreateOrUpdate
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_596168 = newJObject()
  var query_596169 = newJObject()
  var body_596170 = newJObject()
  add(query_596169, "api-version", newJString(apiVersion))
  if gatewayResourceDescription != nil:
    body_596170 = gatewayResourceDescription
  add(path_596168, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_596167.call(path_596168, query_596169, nil, nil, body_596170)

var meshGatewayCreateOrUpdate* = Call_MeshGatewayCreateOrUpdate_596160(
    name: "meshGatewayCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayCreateOrUpdate_596161, base: "",
    url: url_MeshGatewayCreateOrUpdate_596162,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayGet_596151 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayGet_596153(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayGet_596152(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_596154 = path.getOrDefault("gatewayResourceName")
  valid_596154 = validateParameter(valid_596154, JString, required = true,
                                 default = nil)
  if valid_596154 != nil:
    section.add "gatewayResourceName", valid_596154
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596155 = query.getOrDefault("api-version")
  valid_596155 = validateParameter(valid_596155, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596155 != nil:
    section.add "api-version", valid_596155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596156: Call_MeshGatewayGet_596151; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_596156.validator(path, query, header, formData, body)
  let scheme = call_596156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596156.url(scheme.get, call_596156.host, call_596156.base,
                         call_596156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596156, url, valid)

proc call*(call_596157: Call_MeshGatewayGet_596151; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayGet
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_596158 = newJObject()
  var query_596159 = newJObject()
  add(query_596159, "api-version", newJString(apiVersion))
  add(path_596158, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_596157.call(path_596158, query_596159, nil, nil, nil)

var meshGatewayGet* = Call_MeshGatewayGet_596151(name: "meshGatewayGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayGet_596152, base: "", url: url_MeshGatewayGet_596153,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayDelete_596171 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayDelete_596173(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayDelete_596172(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Gateway resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_596174 = path.getOrDefault("gatewayResourceName")
  valid_596174 = validateParameter(valid_596174, JString, required = true,
                                 default = nil)
  if valid_596174 != nil:
    section.add "gatewayResourceName", valid_596174
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596175 = query.getOrDefault("api-version")
  valid_596175 = validateParameter(valid_596175, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596175 != nil:
    section.add "api-version", valid_596175
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596176: Call_MeshGatewayDelete_596171; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Gateway resource identified by the name.
  ## 
  let valid = call_596176.validator(path, query, header, formData, body)
  let scheme = call_596176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596176.url(scheme.get, call_596176.host, call_596176.base,
                         call_596176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596176, url, valid)

proc call*(call_596177: Call_MeshGatewayDelete_596171; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayDelete
  ## Deletes the Gateway resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_596178 = newJObject()
  var query_596179 = newJObject()
  add(query_596179, "api-version", newJString(apiVersion))
  add(path_596178, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_596177.call(path_596178, query_596179, nil, nil, nil)

var meshGatewayDelete* = Call_MeshGatewayDelete_596171(name: "meshGatewayDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayDelete_596172, base: "",
    url: url_MeshGatewayDelete_596173, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkList_596180 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkList_596182(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshNetworkList_596181(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596183 = query.getOrDefault("api-version")
  valid_596183 = validateParameter(valid_596183, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596183 != nil:
    section.add "api-version", valid_596183
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596184: Call_MeshNetworkList_596180; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  let valid = call_596184.validator(path, query, header, formData, body)
  let scheme = call_596184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596184.url(scheme.get, call_596184.host, call_596184.base,
                         call_596184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596184, url, valid)

proc call*(call_596185: Call_MeshNetworkList_596180;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkList
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596186 = newJObject()
  add(query_596186, "api-version", newJString(apiVersion))
  result = call_596185.call(nil, query_596186, nil, nil, nil)

var meshNetworkList* = Call_MeshNetworkList_596180(name: "meshNetworkList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks", validator: validate_MeshNetworkList_596181,
    base: "", url: url_MeshNetworkList_596182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkCreateOrUpdate_596196 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkCreateOrUpdate_596198(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkCreateOrUpdate_596197(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_596199 = path.getOrDefault("networkResourceName")
  valid_596199 = validateParameter(valid_596199, JString, required = true,
                                 default = nil)
  if valid_596199 != nil:
    section.add "networkResourceName", valid_596199
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596200 = query.getOrDefault("api-version")
  valid_596200 = validateParameter(valid_596200, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596200 != nil:
    section.add "api-version", valid_596200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596202: Call_MeshNetworkCreateOrUpdate_596196; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  let valid = call_596202.validator(path, query, header, formData, body)
  let scheme = call_596202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596202.url(scheme.get, call_596202.host, call_596202.base,
                         call_596202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596202, url, valid)

proc call*(call_596203: Call_MeshNetworkCreateOrUpdate_596196;
          networkResourceDescription: JsonNode; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkCreateOrUpdate
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_596204 = newJObject()
  var query_596205 = newJObject()
  var body_596206 = newJObject()
  add(query_596205, "api-version", newJString(apiVersion))
  if networkResourceDescription != nil:
    body_596206 = networkResourceDescription
  add(path_596204, "networkResourceName", newJString(networkResourceName))
  result = call_596203.call(path_596204, query_596205, nil, nil, body_596206)

var meshNetworkCreateOrUpdate* = Call_MeshNetworkCreateOrUpdate_596196(
    name: "meshNetworkCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkCreateOrUpdate_596197, base: "",
    url: url_MeshNetworkCreateOrUpdate_596198,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkGet_596187 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkGet_596189(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkGet_596188(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_596190 = path.getOrDefault("networkResourceName")
  valid_596190 = validateParameter(valid_596190, JString, required = true,
                                 default = nil)
  if valid_596190 != nil:
    section.add "networkResourceName", valid_596190
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596191 = query.getOrDefault("api-version")
  valid_596191 = validateParameter(valid_596191, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596191 != nil:
    section.add "api-version", valid_596191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596192: Call_MeshNetworkGet_596187; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  let valid = call_596192.validator(path, query, header, formData, body)
  let scheme = call_596192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596192.url(scheme.get, call_596192.host, call_596192.base,
                         call_596192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596192, url, valid)

proc call*(call_596193: Call_MeshNetworkGet_596187; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkGet
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_596194 = newJObject()
  var query_596195 = newJObject()
  add(query_596195, "api-version", newJString(apiVersion))
  add(path_596194, "networkResourceName", newJString(networkResourceName))
  result = call_596193.call(path_596194, query_596195, nil, nil, nil)

var meshNetworkGet* = Call_MeshNetworkGet_596187(name: "meshNetworkGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkGet_596188, base: "", url: url_MeshNetworkGet_596189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkDelete_596207 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkDelete_596209(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkDelete_596208(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Network resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_596210 = path.getOrDefault("networkResourceName")
  valid_596210 = validateParameter(valid_596210, JString, required = true,
                                 default = nil)
  if valid_596210 != nil:
    section.add "networkResourceName", valid_596210
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596211 = query.getOrDefault("api-version")
  valid_596211 = validateParameter(valid_596211, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596211 != nil:
    section.add "api-version", valid_596211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596212: Call_MeshNetworkDelete_596207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Network resource identified by the name.
  ## 
  let valid = call_596212.validator(path, query, header, formData, body)
  let scheme = call_596212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596212.url(scheme.get, call_596212.host, call_596212.base,
                         call_596212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596212, url, valid)

proc call*(call_596213: Call_MeshNetworkDelete_596207; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkDelete
  ## Deletes the Network resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_596214 = newJObject()
  var query_596215 = newJObject()
  add(query_596215, "api-version", newJString(apiVersion))
  add(path_596214, "networkResourceName", newJString(networkResourceName))
  result = call_596213.call(path_596214, query_596215, nil, nil, nil)

var meshNetworkDelete* = Call_MeshNetworkDelete_596207(name: "meshNetworkDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkDelete_596208, base: "",
    url: url_MeshNetworkDelete_596209, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretList_596216 = ref object of OpenApiRestCall_593439
proc url_MeshSecretList_596218(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshSecretList_596217(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596219 = query.getOrDefault("api-version")
  valid_596219 = validateParameter(valid_596219, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596219 != nil:
    section.add "api-version", valid_596219
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596220: Call_MeshSecretList_596216; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  let valid = call_596220.validator(path, query, header, formData, body)
  let scheme = call_596220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596220.url(scheme.get, call_596220.host, call_596220.base,
                         call_596220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596220, url, valid)

proc call*(call_596221: Call_MeshSecretList_596216;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretList
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596222 = newJObject()
  add(query_596222, "api-version", newJString(apiVersion))
  result = call_596221.call(nil, query_596222, nil, nil, nil)

var meshSecretList* = Call_MeshSecretList_596216(name: "meshSecretList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets", validator: validate_MeshSecretList_596217,
    base: "", url: url_MeshSecretList_596218, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretCreateOrUpdate_596232 = ref object of OpenApiRestCall_593439
proc url_MeshSecretCreateOrUpdate_596234(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretCreateOrUpdate_596233(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596235 = path.getOrDefault("secretResourceName")
  valid_596235 = validateParameter(valid_596235, JString, required = true,
                                 default = nil)
  if valid_596235 != nil:
    section.add "secretResourceName", valid_596235
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596236 = query.getOrDefault("api-version")
  valid_596236 = validateParameter(valid_596236, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596236 != nil:
    section.add "api-version", valid_596236
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596238: Call_MeshSecretCreateOrUpdate_596232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  let valid = call_596238.validator(path, query, header, formData, body)
  let scheme = call_596238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596238.url(scheme.get, call_596238.host, call_596238.base,
                         call_596238.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596238, url, valid)

proc call*(call_596239: Call_MeshSecretCreateOrUpdate_596232;
          secretResourceDescription: JsonNode; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretCreateOrUpdate
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596240 = newJObject()
  var query_596241 = newJObject()
  var body_596242 = newJObject()
  add(query_596241, "api-version", newJString(apiVersion))
  if secretResourceDescription != nil:
    body_596242 = secretResourceDescription
  add(path_596240, "secretResourceName", newJString(secretResourceName))
  result = call_596239.call(path_596240, query_596241, nil, nil, body_596242)

var meshSecretCreateOrUpdate* = Call_MeshSecretCreateOrUpdate_596232(
    name: "meshSecretCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretCreateOrUpdate_596233, base: "",
    url: url_MeshSecretCreateOrUpdate_596234, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretGet_596223 = ref object of OpenApiRestCall_593439
proc url_MeshSecretGet_596225(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretGet_596224(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596226 = path.getOrDefault("secretResourceName")
  valid_596226 = validateParameter(valid_596226, JString, required = true,
                                 default = nil)
  if valid_596226 != nil:
    section.add "secretResourceName", valid_596226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596227 = query.getOrDefault("api-version")
  valid_596227 = validateParameter(valid_596227, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596227 != nil:
    section.add "api-version", valid_596227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596228: Call_MeshSecretGet_596223; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  let valid = call_596228.validator(path, query, header, formData, body)
  let scheme = call_596228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596228.url(scheme.get, call_596228.host, call_596228.base,
                         call_596228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596228, url, valid)

proc call*(call_596229: Call_MeshSecretGet_596223; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretGet
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596230 = newJObject()
  var query_596231 = newJObject()
  add(query_596231, "api-version", newJString(apiVersion))
  add(path_596230, "secretResourceName", newJString(secretResourceName))
  result = call_596229.call(path_596230, query_596231, nil, nil, nil)

var meshSecretGet* = Call_MeshSecretGet_596223(name: "meshSecretGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretGet_596224, base: "", url: url_MeshSecretGet_596225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretDelete_596243 = ref object of OpenApiRestCall_593439
proc url_MeshSecretDelete_596245(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretDelete_596244(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596246 = path.getOrDefault("secretResourceName")
  valid_596246 = validateParameter(valid_596246, JString, required = true,
                                 default = nil)
  if valid_596246 != nil:
    section.add "secretResourceName", valid_596246
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596247 = query.getOrDefault("api-version")
  valid_596247 = validateParameter(valid_596247, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596247 != nil:
    section.add "api-version", valid_596247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596248: Call_MeshSecretDelete_596243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  let valid = call_596248.validator(path, query, header, formData, body)
  let scheme = call_596248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596248.url(scheme.get, call_596248.host, call_596248.base,
                         call_596248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596248, url, valid)

proc call*(call_596249: Call_MeshSecretDelete_596243; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretDelete
  ## Deletes the specified Secret resource and all of its named values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596250 = newJObject()
  var query_596251 = newJObject()
  add(query_596251, "api-version", newJString(apiVersion))
  add(path_596250, "secretResourceName", newJString(secretResourceName))
  result = call_596249.call(path_596250, query_596251, nil, nil, nil)

var meshSecretDelete* = Call_MeshSecretDelete_596243(name: "meshSecretDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretDelete_596244, base: "",
    url: url_MeshSecretDelete_596245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueList_596252 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueList_596254(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueList_596253(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596255 = path.getOrDefault("secretResourceName")
  valid_596255 = validateParameter(valid_596255, JString, required = true,
                                 default = nil)
  if valid_596255 != nil:
    section.add "secretResourceName", valid_596255
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596256 = query.getOrDefault("api-version")
  valid_596256 = validateParameter(valid_596256, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596256 != nil:
    section.add "api-version", valid_596256
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596257: Call_MeshSecretValueList_596252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  let valid = call_596257.validator(path, query, header, formData, body)
  let scheme = call_596257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596257.url(scheme.get, call_596257.host, call_596257.base,
                         call_596257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596257, url, valid)

proc call*(call_596258: Call_MeshSecretValueList_596252;
          secretResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueList
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596259 = newJObject()
  var query_596260 = newJObject()
  add(query_596260, "api-version", newJString(apiVersion))
  add(path_596259, "secretResourceName", newJString(secretResourceName))
  result = call_596258.call(path_596259, query_596260, nil, nil, nil)

var meshSecretValueList* = Call_MeshSecretValueList_596252(
    name: "meshSecretValueList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}/values",
    validator: validate_MeshSecretValueList_596253, base: "",
    url: url_MeshSecretValueList_596254, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueAddValue_596271 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueAddValue_596273(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueAddValue_596272(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596274 = path.getOrDefault("secretValueResourceName")
  valid_596274 = validateParameter(valid_596274, JString, required = true,
                                 default = nil)
  if valid_596274 != nil:
    section.add "secretValueResourceName", valid_596274
  var valid_596275 = path.getOrDefault("secretResourceName")
  valid_596275 = validateParameter(valid_596275, JString, required = true,
                                 default = nil)
  if valid_596275 != nil:
    section.add "secretResourceName", valid_596275
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596276 = query.getOrDefault("api-version")
  valid_596276 = validateParameter(valid_596276, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596276 != nil:
    section.add "api-version", valid_596276
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596278: Call_MeshSecretValueAddValue_596271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  let valid = call_596278.validator(path, query, header, formData, body)
  let scheme = call_596278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596278.url(scheme.get, call_596278.host, call_596278.base,
                         call_596278.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596278, url, valid)

proc call*(call_596279: Call_MeshSecretValueAddValue_596271;
          secretValueResourceName: string; secretResourceName: string;
          secretValueResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueAddValue
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  var path_596280 = newJObject()
  var query_596281 = newJObject()
  var body_596282 = newJObject()
  add(query_596281, "api-version", newJString(apiVersion))
  add(path_596280, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596280, "secretResourceName", newJString(secretResourceName))
  if secretValueResourceDescription != nil:
    body_596282 = secretValueResourceDescription
  result = call_596279.call(path_596280, query_596281, nil, nil, body_596282)

var meshSecretValueAddValue* = Call_MeshSecretValueAddValue_596271(
    name: "meshSecretValueAddValue", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueAddValue_596272, base: "",
    url: url_MeshSecretValueAddValue_596273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueGet_596261 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueGet_596263(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueGet_596262(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596264 = path.getOrDefault("secretValueResourceName")
  valid_596264 = validateParameter(valid_596264, JString, required = true,
                                 default = nil)
  if valid_596264 != nil:
    section.add "secretValueResourceName", valid_596264
  var valid_596265 = path.getOrDefault("secretResourceName")
  valid_596265 = validateParameter(valid_596265, JString, required = true,
                                 default = nil)
  if valid_596265 != nil:
    section.add "secretResourceName", valid_596265
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596266 = query.getOrDefault("api-version")
  valid_596266 = validateParameter(valid_596266, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596266 != nil:
    section.add "api-version", valid_596266
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596267: Call_MeshSecretValueGet_596261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  let valid = call_596267.validator(path, query, header, formData, body)
  let scheme = call_596267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596267.url(scheme.get, call_596267.host, call_596267.base,
                         call_596267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596267, url, valid)

proc call*(call_596268: Call_MeshSecretValueGet_596261;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueGet
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596269 = newJObject()
  var query_596270 = newJObject()
  add(query_596270, "api-version", newJString(apiVersion))
  add(path_596269, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596269, "secretResourceName", newJString(secretResourceName))
  result = call_596268.call(path_596269, query_596270, nil, nil, nil)

var meshSecretValueGet* = Call_MeshSecretValueGet_596261(
    name: "meshSecretValueGet", meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueGet_596262, base: "",
    url: url_MeshSecretValueGet_596263, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueDelete_596283 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueDelete_596285(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueDelete_596284(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596286 = path.getOrDefault("secretValueResourceName")
  valid_596286 = validateParameter(valid_596286, JString, required = true,
                                 default = nil)
  if valid_596286 != nil:
    section.add "secretValueResourceName", valid_596286
  var valid_596287 = path.getOrDefault("secretResourceName")
  valid_596287 = validateParameter(valid_596287, JString, required = true,
                                 default = nil)
  if valid_596287 != nil:
    section.add "secretResourceName", valid_596287
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596288 = query.getOrDefault("api-version")
  valid_596288 = validateParameter(valid_596288, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596288 != nil:
    section.add "api-version", valid_596288
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596289: Call_MeshSecretValueDelete_596283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  let valid = call_596289.validator(path, query, header, formData, body)
  let scheme = call_596289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596289.url(scheme.get, call_596289.host, call_596289.base,
                         call_596289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596289, url, valid)

proc call*(call_596290: Call_MeshSecretValueDelete_596283;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueDelete
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596291 = newJObject()
  var query_596292 = newJObject()
  add(query_596292, "api-version", newJString(apiVersion))
  add(path_596291, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596291, "secretResourceName", newJString(secretResourceName))
  result = call_596290.call(path_596291, query_596292, nil, nil, nil)

var meshSecretValueDelete* = Call_MeshSecretValueDelete_596283(
    name: "meshSecretValueDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueDelete_596284, base: "",
    url: url_MeshSecretValueDelete_596285, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueShow_596293 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueShow_596295(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName"),
               (kind: ConstantSegment, value: "/list_value")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueShow_596294(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596296 = path.getOrDefault("secretValueResourceName")
  valid_596296 = validateParameter(valid_596296, JString, required = true,
                                 default = nil)
  if valid_596296 != nil:
    section.add "secretValueResourceName", valid_596296
  var valid_596297 = path.getOrDefault("secretResourceName")
  valid_596297 = validateParameter(valid_596297, JString, required = true,
                                 default = nil)
  if valid_596297 != nil:
    section.add "secretResourceName", valid_596297
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596298 = query.getOrDefault("api-version")
  valid_596298 = validateParameter(valid_596298, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596298 != nil:
    section.add "api-version", valid_596298
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596299: Call_MeshSecretValueShow_596293; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  let valid = call_596299.validator(path, query, header, formData, body)
  let scheme = call_596299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596299.url(scheme.get, call_596299.host, call_596299.base,
                         call_596299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596299, url, valid)

proc call*(call_596300: Call_MeshSecretValueShow_596293;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueShow
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596301 = newJObject()
  var query_596302 = newJObject()
  add(query_596302, "api-version", newJString(apiVersion))
  add(path_596301, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596301, "secretResourceName", newJString(secretResourceName))
  result = call_596300.call(path_596301, query_596302, nil, nil, nil)

var meshSecretValueShow* = Call_MeshSecretValueShow_596293(
    name: "meshSecretValueShow", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value",
    validator: validate_MeshSecretValueShow_596294, base: "",
    url: url_MeshSecretValueShow_596295, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeList_596303 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeList_596305(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshVolumeList_596304(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596306 = query.getOrDefault("api-version")
  valid_596306 = validateParameter(valid_596306, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596306 != nil:
    section.add "api-version", valid_596306
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596307: Call_MeshVolumeList_596303; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  let valid = call_596307.validator(path, query, header, formData, body)
  let scheme = call_596307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596307.url(scheme.get, call_596307.host, call_596307.base,
                         call_596307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596307, url, valid)

proc call*(call_596308: Call_MeshVolumeList_596303;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeList
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596309 = newJObject()
  add(query_596309, "api-version", newJString(apiVersion))
  result = call_596308.call(nil, query_596309, nil, nil, nil)

var meshVolumeList* = Call_MeshVolumeList_596303(name: "meshVolumeList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes", validator: validate_MeshVolumeList_596304,
    base: "", url: url_MeshVolumeList_596305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeCreateOrUpdate_596319 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeCreateOrUpdate_596321(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeCreateOrUpdate_596320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_596322 = path.getOrDefault("volumeResourceName")
  valid_596322 = validateParameter(valid_596322, JString, required = true,
                                 default = nil)
  if valid_596322 != nil:
    section.add "volumeResourceName", valid_596322
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596323 = query.getOrDefault("api-version")
  valid_596323 = validateParameter(valid_596323, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596323 != nil:
    section.add "api-version", valid_596323
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596325: Call_MeshVolumeCreateOrUpdate_596319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_596325.validator(path, query, header, formData, body)
  let scheme = call_596325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596325.url(scheme.get, call_596325.host, call_596325.base,
                         call_596325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596325, url, valid)

proc call*(call_596326: Call_MeshVolumeCreateOrUpdate_596319;
          volumeResourceName: string; volumeResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeCreateOrUpdate
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  var path_596327 = newJObject()
  var query_596328 = newJObject()
  var body_596329 = newJObject()
  add(query_596328, "api-version", newJString(apiVersion))
  add(path_596327, "volumeResourceName", newJString(volumeResourceName))
  if volumeResourceDescription != nil:
    body_596329 = volumeResourceDescription
  result = call_596326.call(path_596327, query_596328, nil, nil, body_596329)

var meshVolumeCreateOrUpdate* = Call_MeshVolumeCreateOrUpdate_596319(
    name: "meshVolumeCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeCreateOrUpdate_596320, base: "",
    url: url_MeshVolumeCreateOrUpdate_596321, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeGet_596310 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeGet_596312(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeGet_596311(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_596313 = path.getOrDefault("volumeResourceName")
  valid_596313 = validateParameter(valid_596313, JString, required = true,
                                 default = nil)
  if valid_596313 != nil:
    section.add "volumeResourceName", valid_596313
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596314 = query.getOrDefault("api-version")
  valid_596314 = validateParameter(valid_596314, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596314 != nil:
    section.add "api-version", valid_596314
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596315: Call_MeshVolumeGet_596310; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  let valid = call_596315.validator(path, query, header, formData, body)
  let scheme = call_596315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596315.url(scheme.get, call_596315.host, call_596315.base,
                         call_596315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596315, url, valid)

proc call*(call_596316: Call_MeshVolumeGet_596310; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeGet
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_596317 = newJObject()
  var query_596318 = newJObject()
  add(query_596318, "api-version", newJString(apiVersion))
  add(path_596317, "volumeResourceName", newJString(volumeResourceName))
  result = call_596316.call(path_596317, query_596318, nil, nil, nil)

var meshVolumeGet* = Call_MeshVolumeGet_596310(name: "meshVolumeGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeGet_596311, base: "", url: url_MeshVolumeGet_596312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeDelete_596330 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeDelete_596332(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeDelete_596331(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the Volume resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_596333 = path.getOrDefault("volumeResourceName")
  valid_596333 = validateParameter(valid_596333, JString, required = true,
                                 default = nil)
  if valid_596333 != nil:
    section.add "volumeResourceName", valid_596333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596334 = query.getOrDefault("api-version")
  valid_596334 = validateParameter(valid_596334, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596334 != nil:
    section.add "api-version", valid_596334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596335: Call_MeshVolumeDelete_596330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Volume resource identified by the name.
  ## 
  let valid = call_596335.validator(path, query, header, formData, body)
  let scheme = call_596335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596335.url(scheme.get, call_596335.host, call_596335.base,
                         call_596335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596335, url, valid)

proc call*(call_596336: Call_MeshVolumeDelete_596330; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeDelete
  ## Deletes the Volume resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_596337 = newJObject()
  var query_596338 = newJObject()
  add(query_596338, "api-version", newJString(apiVersion))
  add(path_596337, "volumeResourceName", newJString(volumeResourceName))
  result = call_596336.call(path_596337, query_596338, nil, nil, nil)

var meshVolumeDelete* = Call_MeshVolumeDelete_596330(name: "meshVolumeDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeDelete_596331, base: "",
    url: url_MeshVolumeDelete_596332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverServicePartitions_596339 = ref object of OpenApiRestCall_593439
proc url_RecoverServicePartitions_596341(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/$/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverServicePartitions_596340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596342 = path.getOrDefault("serviceId")
  valid_596342 = validateParameter(valid_596342, JString, required = true,
                                 default = nil)
  if valid_596342 != nil:
    section.add "serviceId", valid_596342
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596343 = query.getOrDefault("timeout")
  valid_596343 = validateParameter(valid_596343, JInt, required = false,
                                 default = newJInt(60))
  if valid_596343 != nil:
    section.add "timeout", valid_596343
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596344 = query.getOrDefault("api-version")
  valid_596344 = validateParameter(valid_596344, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596344 != nil:
    section.add "api-version", valid_596344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596345: Call_RecoverServicePartitions_596339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_596345.validator(path, query, header, formData, body)
  let scheme = call_596345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596345.url(scheme.get, call_596345.host, call_596345.base,
                         call_596345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596345, url, valid)

proc call*(call_596346: Call_RecoverServicePartitions_596339; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverServicePartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596347 = newJObject()
  var query_596348 = newJObject()
  add(query_596348, "timeout", newJInt(timeout))
  add(query_596348, "api-version", newJString(apiVersion))
  add(path_596347, "serviceId", newJString(serviceId))
  result = call_596346.call(path_596347, query_596348, nil, nil, nil)

var recoverServicePartitions* = Call_RecoverServicePartitions_596339(
    name: "recoverServicePartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Services/$/{serviceId}/$/GetPartitions/$/Recover",
    validator: validate_RecoverServicePartitions_596340, base: "",
    url: url_RecoverServicePartitions_596341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteService_596349 = ref object of OpenApiRestCall_593439
proc url_DeleteService_596351(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteService_596350(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596352 = path.getOrDefault("serviceId")
  valid_596352 = validateParameter(valid_596352, JString, required = true,
                                 default = nil)
  if valid_596352 != nil:
    section.add "serviceId", valid_596352
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_596353 = query.getOrDefault("timeout")
  valid_596353 = validateParameter(valid_596353, JInt, required = false,
                                 default = newJInt(60))
  if valid_596353 != nil:
    section.add "timeout", valid_596353
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596354 = query.getOrDefault("api-version")
  valid_596354 = validateParameter(valid_596354, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596354 != nil:
    section.add "api-version", valid_596354
  var valid_596355 = query.getOrDefault("ForceRemove")
  valid_596355 = validateParameter(valid_596355, JBool, required = false, default = nil)
  if valid_596355 != nil:
    section.add "ForceRemove", valid_596355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596356: Call_DeleteService_596349; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  let valid = call_596356.validator(path, query, header, formData, body)
  let scheme = call_596356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596356.url(scheme.get, call_596356.host, call_596356.base,
                         call_596356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596356, url, valid)

proc call*(call_596357: Call_DeleteService_596349; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteService
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596358 = newJObject()
  var query_596359 = newJObject()
  add(query_596359, "timeout", newJInt(timeout))
  add(query_596359, "api-version", newJString(apiVersion))
  add(query_596359, "ForceRemove", newJBool(ForceRemove))
  add(path_596358, "serviceId", newJString(serviceId))
  result = call_596357.call(path_596358, query_596359, nil, nil, nil)

var deleteService* = Call_DeleteService_596349(name: "deleteService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Delete", validator: validate_DeleteService_596350,
    base: "", url: url_DeleteService_596351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableServiceBackup_596360 = ref object of OpenApiRestCall_593439
proc url_DisableServiceBackup_596362(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableServiceBackup_596361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596363 = path.getOrDefault("serviceId")
  valid_596363 = validateParameter(valid_596363, JString, required = true,
                                 default = nil)
  if valid_596363 != nil:
    section.add "serviceId", valid_596363
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596364 = query.getOrDefault("timeout")
  valid_596364 = validateParameter(valid_596364, JInt, required = false,
                                 default = newJInt(60))
  if valid_596364 != nil:
    section.add "timeout", valid_596364
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596365 = query.getOrDefault("api-version")
  valid_596365 = validateParameter(valid_596365, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596365 != nil:
    section.add "api-version", valid_596365
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596367: Call_DisableServiceBackup_596360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  let valid = call_596367.validator(path, query, header, formData, body)
  let scheme = call_596367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596367.url(scheme.get, call_596367.host, call_596367.base,
                         call_596367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596367, url, valid)

proc call*(call_596368: Call_DisableServiceBackup_596360; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableServiceBackup
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596369 = newJObject()
  var query_596370 = newJObject()
  var body_596371 = newJObject()
  add(query_596370, "timeout", newJInt(timeout))
  add(query_596370, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_596371 = DisableBackupDescription
  add(path_596369, "serviceId", newJString(serviceId))
  result = call_596368.call(path_596369, query_596370, nil, nil, body_596371)

var disableServiceBackup* = Call_DisableServiceBackup_596360(
    name: "disableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/DisableBackup",
    validator: validate_DisableServiceBackup_596361, base: "",
    url: url_DisableServiceBackup_596362, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableServiceBackup_596372 = ref object of OpenApiRestCall_593439
proc url_EnableServiceBackup_596374(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableServiceBackup_596373(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596375 = path.getOrDefault("serviceId")
  valid_596375 = validateParameter(valid_596375, JString, required = true,
                                 default = nil)
  if valid_596375 != nil:
    section.add "serviceId", valid_596375
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596376 = query.getOrDefault("timeout")
  valid_596376 = validateParameter(valid_596376, JInt, required = false,
                                 default = newJInt(60))
  if valid_596376 != nil:
    section.add "timeout", valid_596376
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596377 = query.getOrDefault("api-version")
  valid_596377 = validateParameter(valid_596377, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596377 != nil:
    section.add "api-version", valid_596377
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596379: Call_EnableServiceBackup_596372; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_596379.validator(path, query, header, formData, body)
  let scheme = call_596379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596379.url(scheme.get, call_596379.host, call_596379.base,
                         call_596379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596379, url, valid)

proc call*(call_596380: Call_EnableServiceBackup_596372;
          EnableBackupDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enableServiceBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596381 = newJObject()
  var query_596382 = newJObject()
  var body_596383 = newJObject()
  add(query_596382, "timeout", newJInt(timeout))
  add(query_596382, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_596383 = EnableBackupDescription
  add(path_596381, "serviceId", newJString(serviceId))
  result = call_596380.call(path_596381, query_596382, nil, nil, body_596383)

var enableServiceBackup* = Call_EnableServiceBackup_596372(
    name: "enableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/EnableBackup",
    validator: validate_EnableServiceBackup_596373, base: "",
    url: url_EnableServiceBackup_596374, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationNameInfo_596384 = ref object of OpenApiRestCall_593439
proc url_GetApplicationNameInfo_596386(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetApplicationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationNameInfo_596385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596387 = path.getOrDefault("serviceId")
  valid_596387 = validateParameter(valid_596387, JString, required = true,
                                 default = nil)
  if valid_596387 != nil:
    section.add "serviceId", valid_596387
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596388 = query.getOrDefault("timeout")
  valid_596388 = validateParameter(valid_596388, JInt, required = false,
                                 default = newJInt(60))
  if valid_596388 != nil:
    section.add "timeout", valid_596388
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596389 = query.getOrDefault("api-version")
  valid_596389 = validateParameter(valid_596389, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596389 != nil:
    section.add "api-version", valid_596389
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596390: Call_GetApplicationNameInfo_596384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  let valid = call_596390.validator(path, query, header, formData, body)
  let scheme = call_596390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596390.url(scheme.get, call_596390.host, call_596390.base,
                         call_596390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596390, url, valid)

proc call*(call_596391: Call_GetApplicationNameInfo_596384; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationNameInfo
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596392 = newJObject()
  var query_596393 = newJObject()
  add(query_596393, "timeout", newJInt(timeout))
  add(query_596393, "api-version", newJString(apiVersion))
  add(path_596392, "serviceId", newJString(serviceId))
  result = call_596391.call(path_596392, query_596393, nil, nil, nil)

var getApplicationNameInfo* = Call_GetApplicationNameInfo_596384(
    name: "getApplicationNameInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetApplicationName",
    validator: validate_GetApplicationNameInfo_596385, base: "",
    url: url_GetApplicationNameInfo_596386, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupConfigurationInfo_596394 = ref object of OpenApiRestCall_593439
proc url_GetServiceBackupConfigurationInfo_596396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupConfigurationInfo_596395(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596397 = path.getOrDefault("serviceId")
  valid_596397 = validateParameter(valid_596397, JString, required = true,
                                 default = nil)
  if valid_596397 != nil:
    section.add "serviceId", valid_596397
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_596398 = query.getOrDefault("timeout")
  valid_596398 = validateParameter(valid_596398, JInt, required = false,
                                 default = newJInt(60))
  if valid_596398 != nil:
    section.add "timeout", valid_596398
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596399 = query.getOrDefault("api-version")
  valid_596399 = validateParameter(valid_596399, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596399 != nil:
    section.add "api-version", valid_596399
  var valid_596400 = query.getOrDefault("ContinuationToken")
  valid_596400 = validateParameter(valid_596400, JString, required = false,
                                 default = nil)
  if valid_596400 != nil:
    section.add "ContinuationToken", valid_596400
  var valid_596401 = query.getOrDefault("MaxResults")
  valid_596401 = validateParameter(valid_596401, JInt, required = false,
                                 default = newJInt(0))
  if valid_596401 != nil:
    section.add "MaxResults", valid_596401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596402: Call_GetServiceBackupConfigurationInfo_596394;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  let valid = call_596402.validator(path, query, header, formData, body)
  let scheme = call_596402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596402.url(scheme.get, call_596402.host, call_596402.base,
                         call_596402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596402, url, valid)

proc call*(call_596403: Call_GetServiceBackupConfigurationInfo_596394;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_596404 = newJObject()
  var query_596405 = newJObject()
  add(query_596405, "timeout", newJInt(timeout))
  add(query_596405, "api-version", newJString(apiVersion))
  add(path_596404, "serviceId", newJString(serviceId))
  add(query_596405, "ContinuationToken", newJString(ContinuationToken))
  add(query_596405, "MaxResults", newJInt(MaxResults))
  result = call_596403.call(path_596404, query_596405, nil, nil, nil)

var getServiceBackupConfigurationInfo* = Call_GetServiceBackupConfigurationInfo_596394(
    name: "getServiceBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetBackupConfigurationInfo",
    validator: validate_GetServiceBackupConfigurationInfo_596395, base: "",
    url: url_GetServiceBackupConfigurationInfo_596396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupList_596406 = ref object of OpenApiRestCall_593439
proc url_GetServiceBackupList_596408(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupList_596407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596409 = path.getOrDefault("serviceId")
  valid_596409 = validateParameter(valid_596409, JString, required = true,
                                 default = nil)
  if valid_596409 != nil:
    section.add "serviceId", valid_596409
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_596410 = query.getOrDefault("timeout")
  valid_596410 = validateParameter(valid_596410, JInt, required = false,
                                 default = newJInt(60))
  if valid_596410 != nil:
    section.add "timeout", valid_596410
  var valid_596411 = query.getOrDefault("Latest")
  valid_596411 = validateParameter(valid_596411, JBool, required = false,
                                 default = newJBool(false))
  if valid_596411 != nil:
    section.add "Latest", valid_596411
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596412 = query.getOrDefault("api-version")
  valid_596412 = validateParameter(valid_596412, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596412 != nil:
    section.add "api-version", valid_596412
  var valid_596413 = query.getOrDefault("StartDateTimeFilter")
  valid_596413 = validateParameter(valid_596413, JString, required = false,
                                 default = nil)
  if valid_596413 != nil:
    section.add "StartDateTimeFilter", valid_596413
  var valid_596414 = query.getOrDefault("EndDateTimeFilter")
  valid_596414 = validateParameter(valid_596414, JString, required = false,
                                 default = nil)
  if valid_596414 != nil:
    section.add "EndDateTimeFilter", valid_596414
  var valid_596415 = query.getOrDefault("ContinuationToken")
  valid_596415 = validateParameter(valid_596415, JString, required = false,
                                 default = nil)
  if valid_596415 != nil:
    section.add "ContinuationToken", valid_596415
  var valid_596416 = query.getOrDefault("MaxResults")
  valid_596416 = validateParameter(valid_596416, JInt, required = false,
                                 default = newJInt(0))
  if valid_596416 != nil:
    section.add "MaxResults", valid_596416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596417: Call_GetServiceBackupList_596406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_596417.validator(path, query, header, formData, body)
  let scheme = call_596417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596417.url(scheme.get, call_596417.host, call_596417.base,
                         call_596417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596417, url, valid)

proc call*(call_596418: Call_GetServiceBackupList_596406; serviceId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupList
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_596419 = newJObject()
  var query_596420 = newJObject()
  add(query_596420, "timeout", newJInt(timeout))
  add(query_596420, "Latest", newJBool(Latest))
  add(query_596420, "api-version", newJString(apiVersion))
  add(query_596420, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_596420, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_596419, "serviceId", newJString(serviceId))
  add(query_596420, "ContinuationToken", newJString(ContinuationToken))
  add(query_596420, "MaxResults", newJInt(MaxResults))
  result = call_596418.call(path_596419, query_596420, nil, nil, nil)

var getServiceBackupList* = Call_GetServiceBackupList_596406(
    name: "getServiceBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetBackups",
    validator: validate_GetServiceBackupList_596407, base: "",
    url: url_GetServiceBackupList_596408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceDescription_596421 = ref object of OpenApiRestCall_593439
proc url_GetServiceDescription_596423(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetDescription")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceDescription_596422(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596424 = path.getOrDefault("serviceId")
  valid_596424 = validateParameter(valid_596424, JString, required = true,
                                 default = nil)
  if valid_596424 != nil:
    section.add "serviceId", valid_596424
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596425 = query.getOrDefault("timeout")
  valid_596425 = validateParameter(valid_596425, JInt, required = false,
                                 default = newJInt(60))
  if valid_596425 != nil:
    section.add "timeout", valid_596425
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596426 = query.getOrDefault("api-version")
  valid_596426 = validateParameter(valid_596426, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596426 != nil:
    section.add "api-version", valid_596426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596427: Call_GetServiceDescription_596421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  let valid = call_596427.validator(path, query, header, formData, body)
  let scheme = call_596427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596427.url(scheme.get, call_596427.host, call_596427.base,
                         call_596427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596427, url, valid)

proc call*(call_596428: Call_GetServiceDescription_596421; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceDescription
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596429 = newJObject()
  var query_596430 = newJObject()
  add(query_596430, "timeout", newJInt(timeout))
  add(query_596430, "api-version", newJString(apiVersion))
  add(path_596429, "serviceId", newJString(serviceId))
  result = call_596428.call(path_596429, query_596430, nil, nil, nil)

var getServiceDescription* = Call_GetServiceDescription_596421(
    name: "getServiceDescription", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetDescription",
    validator: validate_GetServiceDescription_596422, base: "",
    url: url_GetServiceDescription_596423, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealthUsingPolicy_596444 = ref object of OpenApiRestCall_593439
proc url_GetServiceHealthUsingPolicy_596446(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealthUsingPolicy_596445(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596447 = path.getOrDefault("serviceId")
  valid_596447 = validateParameter(valid_596447, JString, required = true,
                                 default = nil)
  if valid_596447 != nil:
    section.add "serviceId", valid_596447
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_596448 = query.getOrDefault("timeout")
  valid_596448 = validateParameter(valid_596448, JInt, required = false,
                                 default = newJInt(60))
  if valid_596448 != nil:
    section.add "timeout", valid_596448
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596449 = query.getOrDefault("api-version")
  valid_596449 = validateParameter(valid_596449, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596449 != nil:
    section.add "api-version", valid_596449
  var valid_596450 = query.getOrDefault("ExcludeHealthStatistics")
  valid_596450 = validateParameter(valid_596450, JBool, required = false,
                                 default = newJBool(false))
  if valid_596450 != nil:
    section.add "ExcludeHealthStatistics", valid_596450
  var valid_596451 = query.getOrDefault("EventsHealthStateFilter")
  valid_596451 = validateParameter(valid_596451, JInt, required = false,
                                 default = newJInt(0))
  if valid_596451 != nil:
    section.add "EventsHealthStateFilter", valid_596451
  var valid_596452 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_596452 = validateParameter(valid_596452, JInt, required = false,
                                 default = newJInt(0))
  if valid_596452 != nil:
    section.add "PartitionsHealthStateFilter", valid_596452
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596454: Call_GetServiceHealthUsingPolicy_596444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_596454.validator(path, query, header, formData, body)
  let scheme = call_596454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596454.url(scheme.get, call_596454.host, call_596454.base,
                         call_596454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596454, url, valid)

proc call*(call_596455: Call_GetServiceHealthUsingPolicy_596444; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealthUsingPolicy
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_596456 = newJObject()
  var query_596457 = newJObject()
  var body_596458 = newJObject()
  add(query_596457, "timeout", newJInt(timeout))
  add(query_596457, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_596458 = ApplicationHealthPolicy
  add(query_596457, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_596457, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_596456, "serviceId", newJString(serviceId))
  add(query_596457, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_596455.call(path_596456, query_596457, nil, nil, body_596458)

var getServiceHealthUsingPolicy* = Call_GetServiceHealthUsingPolicy_596444(
    name: "getServiceHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealthUsingPolicy_596445, base: "",
    url: url_GetServiceHealthUsingPolicy_596446,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealth_596431 = ref object of OpenApiRestCall_593439
proc url_GetServiceHealth_596433(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealth_596432(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596434 = path.getOrDefault("serviceId")
  valid_596434 = validateParameter(valid_596434, JString, required = true,
                                 default = nil)
  if valid_596434 != nil:
    section.add "serviceId", valid_596434
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_596435 = query.getOrDefault("timeout")
  valid_596435 = validateParameter(valid_596435, JInt, required = false,
                                 default = newJInt(60))
  if valid_596435 != nil:
    section.add "timeout", valid_596435
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596436 = query.getOrDefault("api-version")
  valid_596436 = validateParameter(valid_596436, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596436 != nil:
    section.add "api-version", valid_596436
  var valid_596437 = query.getOrDefault("ExcludeHealthStatistics")
  valid_596437 = validateParameter(valid_596437, JBool, required = false,
                                 default = newJBool(false))
  if valid_596437 != nil:
    section.add "ExcludeHealthStatistics", valid_596437
  var valid_596438 = query.getOrDefault("EventsHealthStateFilter")
  valid_596438 = validateParameter(valid_596438, JInt, required = false,
                                 default = newJInt(0))
  if valid_596438 != nil:
    section.add "EventsHealthStateFilter", valid_596438
  var valid_596439 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_596439 = validateParameter(valid_596439, JInt, required = false,
                                 default = newJInt(0))
  if valid_596439 != nil:
    section.add "PartitionsHealthStateFilter", valid_596439
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596440: Call_GetServiceHealth_596431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_596440.validator(path, query, header, formData, body)
  let scheme = call_596440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596440.url(scheme.get, call_596440.host, call_596440.base,
                         call_596440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596440, url, valid)

proc call*(call_596441: Call_GetServiceHealth_596431; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealth
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_596442 = newJObject()
  var query_596443 = newJObject()
  add(query_596443, "timeout", newJInt(timeout))
  add(query_596443, "api-version", newJString(apiVersion))
  add(query_596443, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_596443, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_596442, "serviceId", newJString(serviceId))
  add(query_596443, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_596441.call(path_596442, query_596443, nil, nil, nil)

var getServiceHealth* = Call_GetServiceHealth_596431(name: "getServiceHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealth_596432, base: "",
    url: url_GetServiceHealth_596433, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfoList_596459 = ref object of OpenApiRestCall_593439
proc url_GetPartitionInfoList_596461(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfoList_596460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596462 = path.getOrDefault("serviceId")
  valid_596462 = validateParameter(valid_596462, JString, required = true,
                                 default = nil)
  if valid_596462 != nil:
    section.add "serviceId", valid_596462
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_596463 = query.getOrDefault("timeout")
  valid_596463 = validateParameter(valid_596463, JInt, required = false,
                                 default = newJInt(60))
  if valid_596463 != nil:
    section.add "timeout", valid_596463
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596464 = query.getOrDefault("api-version")
  valid_596464 = validateParameter(valid_596464, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596464 != nil:
    section.add "api-version", valid_596464
  var valid_596465 = query.getOrDefault("ContinuationToken")
  valid_596465 = validateParameter(valid_596465, JString, required = false,
                                 default = nil)
  if valid_596465 != nil:
    section.add "ContinuationToken", valid_596465
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596466: Call_GetPartitionInfoList_596459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_596466.validator(path, query, header, formData, body)
  let scheme = call_596466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596466.url(scheme.get, call_596466.host, call_596466.base,
                         call_596466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596466, url, valid)

proc call*(call_596467: Call_GetPartitionInfoList_596459; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"; ContinuationToken: string = ""): Recallable =
  ## getPartitionInfoList
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_596468 = newJObject()
  var query_596469 = newJObject()
  add(query_596469, "timeout", newJInt(timeout))
  add(query_596469, "api-version", newJString(apiVersion))
  add(path_596468, "serviceId", newJString(serviceId))
  add(query_596469, "ContinuationToken", newJString(ContinuationToken))
  result = call_596467.call(path_596468, query_596469, nil, nil, nil)

var getPartitionInfoList* = Call_GetPartitionInfoList_596459(
    name: "getPartitionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetPartitions",
    validator: validate_GetPartitionInfoList_596460, base: "",
    url: url_GetPartitionInfoList_596461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUnplacedReplicaInformation_596470 = ref object of OpenApiRestCall_593439
proc url_GetUnplacedReplicaInformation_596472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"), (kind: ConstantSegment,
        value: "/$/GetUnplacedReplicaInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetUnplacedReplicaInformation_596471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the unplaced replicas of the service.
  ## If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
  ## If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.
  ## If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596473 = path.getOrDefault("serviceId")
  valid_596473 = validateParameter(valid_596473, JString, required = true,
                                 default = nil)
  if valid_596473 != nil:
    section.add "serviceId", valid_596473
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OnlyQueryPrimaries: JBool
  ##                     : Indicates that unplaced replica information will be queries only for primary replicas.
  ##   PartitionId: JString
  ##              : The identity of the partition.
  section = newJObject()
  var valid_596474 = query.getOrDefault("timeout")
  valid_596474 = validateParameter(valid_596474, JInt, required = false,
                                 default = newJInt(60))
  if valid_596474 != nil:
    section.add "timeout", valid_596474
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596475 = query.getOrDefault("api-version")
  valid_596475 = validateParameter(valid_596475, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596475 != nil:
    section.add "api-version", valid_596475
  var valid_596476 = query.getOrDefault("OnlyQueryPrimaries")
  valid_596476 = validateParameter(valid_596476, JBool, required = false,
                                 default = newJBool(false))
  if valid_596476 != nil:
    section.add "OnlyQueryPrimaries", valid_596476
  var valid_596477 = query.getOrDefault("PartitionId")
  valid_596477 = validateParameter(valid_596477, JString, required = false,
                                 default = nil)
  if valid_596477 != nil:
    section.add "PartitionId", valid_596477
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596478: Call_GetUnplacedReplicaInformation_596470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the unplaced replicas of the service.
  ## If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
  ## If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.
  ## If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
  ## 
  let valid = call_596478.validator(path, query, header, formData, body)
  let scheme = call_596478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596478.url(scheme.get, call_596478.host, call_596478.base,
                         call_596478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596478, url, valid)

proc call*(call_596479: Call_GetUnplacedReplicaInformation_596470;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.4";
          OnlyQueryPrimaries: bool = false; PartitionId: string = ""): Recallable =
  ## getUnplacedReplicaInformation
  ## Returns the information about the unplaced replicas of the service.
  ## If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
  ## If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.
  ## If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OnlyQueryPrimaries: bool
  ##                     : Indicates that unplaced replica information will be queries only for primary replicas.
  ##   PartitionId: string
  ##              : The identity of the partition.
  var path_596480 = newJObject()
  var query_596481 = newJObject()
  add(query_596481, "timeout", newJInt(timeout))
  add(query_596481, "api-version", newJString(apiVersion))
  add(path_596480, "serviceId", newJString(serviceId))
  add(query_596481, "OnlyQueryPrimaries", newJBool(OnlyQueryPrimaries))
  add(query_596481, "PartitionId", newJString(PartitionId))
  result = call_596479.call(path_596480, query_596481, nil, nil, nil)

var getUnplacedReplicaInformation* = Call_GetUnplacedReplicaInformation_596470(
    name: "getUnplacedReplicaInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetUnplacedReplicaInformation",
    validator: validate_GetUnplacedReplicaInformation_596471, base: "",
    url: url_GetUnplacedReplicaInformation_596472,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportServiceHealth_596482 = ref object of OpenApiRestCall_593439
proc url_ReportServiceHealth_596484(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportServiceHealth_596483(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596485 = path.getOrDefault("serviceId")
  valid_596485 = validateParameter(valid_596485, JString, required = true,
                                 default = nil)
  if valid_596485 != nil:
    section.add "serviceId", valid_596485
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596486 = query.getOrDefault("Immediate")
  valid_596486 = validateParameter(valid_596486, JBool, required = false,
                                 default = newJBool(false))
  if valid_596486 != nil:
    section.add "Immediate", valid_596486
  var valid_596487 = query.getOrDefault("timeout")
  valid_596487 = validateParameter(valid_596487, JInt, required = false,
                                 default = newJInt(60))
  if valid_596487 != nil:
    section.add "timeout", valid_596487
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596488 = query.getOrDefault("api-version")
  valid_596488 = validateParameter(valid_596488, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596488 != nil:
    section.add "api-version", valid_596488
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596490: Call_ReportServiceHealth_596482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_596490.validator(path, query, header, formData, body)
  let scheme = call_596490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596490.url(scheme.get, call_596490.host, call_596490.base,
                         call_596490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596490, url, valid)

proc call*(call_596491: Call_ReportServiceHealth_596482;
          HealthInformation: JsonNode; serviceId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportServiceHealth
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596492 = newJObject()
  var query_596493 = newJObject()
  var body_596494 = newJObject()
  add(query_596493, "Immediate", newJBool(Immediate))
  add(query_596493, "timeout", newJInt(timeout))
  add(query_596493, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_596494 = HealthInformation
  add(path_596492, "serviceId", newJString(serviceId))
  result = call_596491.call(path_596492, query_596493, nil, nil, body_596494)

var reportServiceHealth* = Call_ReportServiceHealth_596482(
    name: "reportServiceHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ReportHealth",
    validator: validate_ReportServiceHealth_596483, base: "",
    url: url_ReportServiceHealth_596484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResolveService_596495 = ref object of OpenApiRestCall_593439
proc url_ResolveService_596497(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResolvePartition")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResolveService_596496(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596498 = path.getOrDefault("serviceId")
  valid_596498 = validateParameter(valid_596498, JString, required = true,
                                 default = nil)
  if valid_596498 != nil:
    section.add "serviceId", valid_596498
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: JString
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: JInt
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   PreviousRspVersion: JString
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  section = newJObject()
  var valid_596499 = query.getOrDefault("timeout")
  valid_596499 = validateParameter(valid_596499, JInt, required = false,
                                 default = newJInt(60))
  if valid_596499 != nil:
    section.add "timeout", valid_596499
  var valid_596500 = query.getOrDefault("PartitionKeyValue")
  valid_596500 = validateParameter(valid_596500, JString, required = false,
                                 default = nil)
  if valid_596500 != nil:
    section.add "PartitionKeyValue", valid_596500
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596501 = query.getOrDefault("api-version")
  valid_596501 = validateParameter(valid_596501, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596501 != nil:
    section.add "api-version", valid_596501
  var valid_596502 = query.getOrDefault("PartitionKeyType")
  valid_596502 = validateParameter(valid_596502, JInt, required = false, default = nil)
  if valid_596502 != nil:
    section.add "PartitionKeyType", valid_596502
  var valid_596503 = query.getOrDefault("PreviousRspVersion")
  valid_596503 = validateParameter(valid_596503, JString, required = false,
                                 default = nil)
  if valid_596503 != nil:
    section.add "PreviousRspVersion", valid_596503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596504: Call_ResolveService_596495; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  let valid = call_596504.validator(path, query, header, formData, body)
  let scheme = call_596504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596504.url(scheme.get, call_596504.host, call_596504.base,
                         call_596504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596504, url, valid)

proc call*(call_596505: Call_ResolveService_596495; serviceId: string;
          timeout: int = 60; PartitionKeyValue: string = ""; apiVersion: string = "6.0";
          PartitionKeyType: int = 0; PreviousRspVersion: string = ""): Recallable =
  ## resolveService
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: string
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: int
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PreviousRspVersion: string
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  var path_596506 = newJObject()
  var query_596507 = newJObject()
  add(query_596507, "timeout", newJInt(timeout))
  add(query_596507, "PartitionKeyValue", newJString(PartitionKeyValue))
  add(query_596507, "api-version", newJString(apiVersion))
  add(query_596507, "PartitionKeyType", newJInt(PartitionKeyType))
  add(path_596506, "serviceId", newJString(serviceId))
  add(query_596507, "PreviousRspVersion", newJString(PreviousRspVersion))
  result = call_596505.call(path_596506, query_596507, nil, nil, nil)

var resolveService* = Call_ResolveService_596495(name: "resolveService",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/ResolvePartition",
    validator: validate_ResolveService_596496, base: "", url: url_ResolveService_596497,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeServiceBackup_596508 = ref object of OpenApiRestCall_593439
proc url_ResumeServiceBackup_596510(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeServiceBackup_596509(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596511 = path.getOrDefault("serviceId")
  valid_596511 = validateParameter(valid_596511, JString, required = true,
                                 default = nil)
  if valid_596511 != nil:
    section.add "serviceId", valid_596511
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596512 = query.getOrDefault("timeout")
  valid_596512 = validateParameter(valid_596512, JInt, required = false,
                                 default = newJInt(60))
  if valid_596512 != nil:
    section.add "timeout", valid_596512
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596513 = query.getOrDefault("api-version")
  valid_596513 = validateParameter(valid_596513, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596513 != nil:
    section.add "api-version", valid_596513
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596514: Call_ResumeServiceBackup_596508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_596514.validator(path, query, header, formData, body)
  let scheme = call_596514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596514.url(scheme.get, call_596514.host, call_596514.base,
                         call_596514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596514, url, valid)

proc call*(call_596515: Call_ResumeServiceBackup_596508; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeServiceBackup
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596516 = newJObject()
  var query_596517 = newJObject()
  add(query_596517, "timeout", newJInt(timeout))
  add(query_596517, "api-version", newJString(apiVersion))
  add(path_596516, "serviceId", newJString(serviceId))
  result = call_596515.call(path_596516, query_596517, nil, nil, nil)

var resumeServiceBackup* = Call_ResumeServiceBackup_596508(
    name: "resumeServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ResumeBackup",
    validator: validate_ResumeServiceBackup_596509, base: "",
    url: url_ResumeServiceBackup_596510, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendServiceBackup_596518 = ref object of OpenApiRestCall_593439
proc url_SuspendServiceBackup_596520(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendServiceBackup_596519(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596521 = path.getOrDefault("serviceId")
  valid_596521 = validateParameter(valid_596521, JString, required = true,
                                 default = nil)
  if valid_596521 != nil:
    section.add "serviceId", valid_596521
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596522 = query.getOrDefault("timeout")
  valid_596522 = validateParameter(valid_596522, JInt, required = false,
                                 default = newJInt(60))
  if valid_596522 != nil:
    section.add "timeout", valid_596522
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596523 = query.getOrDefault("api-version")
  valid_596523 = validateParameter(valid_596523, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596523 != nil:
    section.add "api-version", valid_596523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596524: Call_SuspendServiceBackup_596518; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  let valid = call_596524.validator(path, query, header, formData, body)
  let scheme = call_596524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596524.url(scheme.get, call_596524.host, call_596524.base,
                         call_596524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596524, url, valid)

proc call*(call_596525: Call_SuspendServiceBackup_596518; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendServiceBackup
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596526 = newJObject()
  var query_596527 = newJObject()
  add(query_596527, "timeout", newJInt(timeout))
  add(query_596527, "api-version", newJString(apiVersion))
  add(path_596526, "serviceId", newJString(serviceId))
  result = call_596525.call(path_596526, query_596527, nil, nil, nil)

var suspendServiceBackup* = Call_SuspendServiceBackup_596518(
    name: "suspendServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/SuspendBackup",
    validator: validate_SuspendServiceBackup_596519, base: "",
    url: url_SuspendServiceBackup_596520, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateService_596528 = ref object of OpenApiRestCall_593439
proc url_UpdateService_596530(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateService_596529(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596531 = path.getOrDefault("serviceId")
  valid_596531 = validateParameter(valid_596531, JString, required = true,
                                 default = nil)
  if valid_596531 != nil:
    section.add "serviceId", valid_596531
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596532 = query.getOrDefault("timeout")
  valid_596532 = validateParameter(valid_596532, JInt, required = false,
                                 default = newJInt(60))
  if valid_596532 != nil:
    section.add "timeout", valid_596532
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596533 = query.getOrDefault("api-version")
  valid_596533 = validateParameter(valid_596533, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596533 != nil:
    section.add "api-version", valid_596533
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596535: Call_UpdateService_596528; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  let valid = call_596535.validator(path, query, header, formData, body)
  let scheme = call_596535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596535.url(scheme.get, call_596535.host, call_596535.base,
                         call_596535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596535, url, valid)

proc call*(call_596536: Call_UpdateService_596528;
          ServiceUpdateDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateService
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596537 = newJObject()
  var query_596538 = newJObject()
  var body_596539 = newJObject()
  add(query_596538, "timeout", newJInt(timeout))
  add(query_596538, "api-version", newJString(apiVersion))
  if ServiceUpdateDescription != nil:
    body_596539 = ServiceUpdateDescription
  add(path_596537, "serviceId", newJString(serviceId))
  result = call_596536.call(path_596537, query_596538, nil, nil, body_596539)

var updateService* = Call_UpdateService_596528(name: "updateService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Update", validator: validate_UpdateService_596529,
    base: "", url: url_UpdateService_596530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaos_596540 = ref object of OpenApiRestCall_593439
proc url_GetChaos_596542(protocol: Scheme; host: string; base: string; route: string;
                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaos_596541(path: JsonNode; query: JsonNode; header: JsonNode;
                             formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596543 = query.getOrDefault("timeout")
  valid_596543 = validateParameter(valid_596543, JInt, required = false,
                                 default = newJInt(60))
  if valid_596543 != nil:
    section.add "timeout", valid_596543
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596544 = query.getOrDefault("api-version")
  valid_596544 = validateParameter(valid_596544, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596544 != nil:
    section.add "api-version", valid_596544
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596545: Call_GetChaos_596540; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  let valid = call_596545.validator(path, query, header, formData, body)
  let scheme = call_596545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596545.url(scheme.get, call_596545.host, call_596545.base,
                         call_596545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596545, url, valid)

proc call*(call_596546: Call_GetChaos_596540; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaos
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_596547 = newJObject()
  add(query_596547, "timeout", newJInt(timeout))
  add(query_596547, "api-version", newJString(apiVersion))
  result = call_596546.call(nil, query_596547, nil, nil, nil)

var getChaos* = Call_GetChaos_596540(name: "getChaos", meth: HttpMethod.HttpGet,
                                  host: "azure.local:19080",
                                  route: "/Tools/Chaos",
                                  validator: validate_GetChaos_596541, base: "",
                                  url: url_GetChaos_596542,
                                  schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartChaos_596548 = ref object of OpenApiRestCall_593439
proc url_StartChaos_596550(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartChaos_596549(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596551 = query.getOrDefault("timeout")
  valid_596551 = validateParameter(valid_596551, JInt, required = false,
                                 default = newJInt(60))
  if valid_596551 != nil:
    section.add "timeout", valid_596551
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596552 = query.getOrDefault("api-version")
  valid_596552 = validateParameter(valid_596552, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596552 != nil:
    section.add "api-version", valid_596552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596554: Call_StartChaos_596548; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  let valid = call_596554.validator(path, query, header, formData, body)
  let scheme = call_596554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596554.url(scheme.get, call_596554.host, call_596554.base,
                         call_596554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596554, url, valid)

proc call*(call_596555: Call_StartChaos_596548; ChaosParameters: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## startChaos
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  var query_596556 = newJObject()
  var body_596557 = newJObject()
  add(query_596556, "timeout", newJInt(timeout))
  add(query_596556, "api-version", newJString(apiVersion))
  if ChaosParameters != nil:
    body_596557 = ChaosParameters
  result = call_596555.call(nil, query_596556, nil, nil, body_596557)

var startChaos* = Call_StartChaos_596548(name: "startChaos",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Tools/Chaos/$/Start",
                                      validator: validate_StartChaos_596549,
                                      base: "", url: url_StartChaos_596550,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopChaos_596558 = ref object of OpenApiRestCall_593439
proc url_StopChaos_596560(protocol: Scheme; host: string; base: string; route: string;
                         path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StopChaos_596559(path: JsonNode; query: JsonNode; header: JsonNode;
                              formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596561 = query.getOrDefault("timeout")
  valid_596561 = validateParameter(valid_596561, JInt, required = false,
                                 default = newJInt(60))
  if valid_596561 != nil:
    section.add "timeout", valid_596561
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596562 = query.getOrDefault("api-version")
  valid_596562 = validateParameter(valid_596562, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596562 != nil:
    section.add "api-version", valid_596562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596563: Call_StopChaos_596558; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  let valid = call_596563.validator(path, query, header, formData, body)
  let scheme = call_596563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596563.url(scheme.get, call_596563.host, call_596563.base,
                         call_596563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596563, url, valid)

proc call*(call_596564: Call_StopChaos_596558; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## stopChaos
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_596565 = newJObject()
  add(query_596565, "timeout", newJInt(timeout))
  add(query_596565, "api-version", newJString(apiVersion))
  result = call_596564.call(nil, query_596565, nil, nil, nil)

var stopChaos* = Call_StopChaos_596558(name: "stopChaos", meth: HttpMethod.HttpPost,
                                    host: "azure.local:19080",
                                    route: "/Tools/Chaos/$/Stop",
                                    validator: validate_StopChaos_596559,
                                    base: "", url: url_StopChaos_596560,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosEvents_596566 = ref object of OpenApiRestCall_593439
proc url_GetChaosEvents_596568(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosEvents_596567(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: JString
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: JString
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  section = newJObject()
  var valid_596569 = query.getOrDefault("timeout")
  valid_596569 = validateParameter(valid_596569, JInt, required = false,
                                 default = newJInt(60))
  if valid_596569 != nil:
    section.add "timeout", valid_596569
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596570 = query.getOrDefault("api-version")
  valid_596570 = validateParameter(valid_596570, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596570 != nil:
    section.add "api-version", valid_596570
  var valid_596571 = query.getOrDefault("EndTimeUtc")
  valid_596571 = validateParameter(valid_596571, JString, required = false,
                                 default = nil)
  if valid_596571 != nil:
    section.add "EndTimeUtc", valid_596571
  var valid_596572 = query.getOrDefault("ContinuationToken")
  valid_596572 = validateParameter(valid_596572, JString, required = false,
                                 default = nil)
  if valid_596572 != nil:
    section.add "ContinuationToken", valid_596572
  var valid_596573 = query.getOrDefault("MaxResults")
  valid_596573 = validateParameter(valid_596573, JInt, required = false,
                                 default = newJInt(0))
  if valid_596573 != nil:
    section.add "MaxResults", valid_596573
  var valid_596574 = query.getOrDefault("StartTimeUtc")
  valid_596574 = validateParameter(valid_596574, JString, required = false,
                                 default = nil)
  if valid_596574 != nil:
    section.add "StartTimeUtc", valid_596574
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596575: Call_GetChaosEvents_596566; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  let valid = call_596575.validator(path, query, header, formData, body)
  let scheme = call_596575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596575.url(scheme.get, call_596575.host, call_596575.base,
                         call_596575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596575, url, valid)

proc call*(call_596576: Call_GetChaosEvents_596566; timeout: int = 60;
          apiVersion: string = "6.2"; EndTimeUtc: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0; StartTimeUtc: string = ""): Recallable =
  ## getChaosEvents
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: string
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: string
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  var query_596577 = newJObject()
  add(query_596577, "timeout", newJInt(timeout))
  add(query_596577, "api-version", newJString(apiVersion))
  add(query_596577, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_596577, "ContinuationToken", newJString(ContinuationToken))
  add(query_596577, "MaxResults", newJInt(MaxResults))
  add(query_596577, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_596576.call(nil, query_596577, nil, nil, nil)

var getChaosEvents* = Call_GetChaosEvents_596566(name: "getChaosEvents",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Events", validator: validate_GetChaosEvents_596567,
    base: "", url: url_GetChaosEvents_596568, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChaosSchedule_596586 = ref object of OpenApiRestCall_593439
proc url_PostChaosSchedule_596588(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostChaosSchedule_596587(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596589 = query.getOrDefault("timeout")
  valid_596589 = validateParameter(valid_596589, JInt, required = false,
                                 default = newJInt(60))
  if valid_596589 != nil:
    section.add "timeout", valid_596589
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596590 = query.getOrDefault("api-version")
  valid_596590 = validateParameter(valid_596590, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596590 != nil:
    section.add "api-version", valid_596590
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596592: Call_PostChaosSchedule_596586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  let valid = call_596592.validator(path, query, header, formData, body)
  let scheme = call_596592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596592.url(scheme.get, call_596592.host, call_596592.base,
                         call_596592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596592, url, valid)

proc call*(call_596593: Call_PostChaosSchedule_596586; ChaosSchedule: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## postChaosSchedule
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  var query_596594 = newJObject()
  var body_596595 = newJObject()
  add(query_596594, "timeout", newJInt(timeout))
  add(query_596594, "api-version", newJString(apiVersion))
  if ChaosSchedule != nil:
    body_596595 = ChaosSchedule
  result = call_596593.call(nil, query_596594, nil, nil, body_596595)

var postChaosSchedule* = Call_PostChaosSchedule_596586(name: "postChaosSchedule",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_PostChaosSchedule_596587,
    base: "", url: url_PostChaosSchedule_596588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosSchedule_596578 = ref object of OpenApiRestCall_593439
proc url_GetChaosSchedule_596580(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosSchedule_596579(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596581 = query.getOrDefault("timeout")
  valid_596581 = validateParameter(valid_596581, JInt, required = false,
                                 default = newJInt(60))
  if valid_596581 != nil:
    section.add "timeout", valid_596581
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596582 = query.getOrDefault("api-version")
  valid_596582 = validateParameter(valid_596582, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596582 != nil:
    section.add "api-version", valid_596582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596583: Call_GetChaosSchedule_596578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  let valid = call_596583.validator(path, query, header, formData, body)
  let scheme = call_596583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596583.url(scheme.get, call_596583.host, call_596583.base,
                         call_596583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596583, url, valid)

proc call*(call_596584: Call_GetChaosSchedule_596578; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaosSchedule
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_596585 = newJObject()
  add(query_596585, "timeout", newJInt(timeout))
  add(query_596585, "api-version", newJString(apiVersion))
  result = call_596584.call(nil, query_596585, nil, nil, nil)

var getChaosSchedule* = Call_GetChaosSchedule_596578(name: "getChaosSchedule",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_GetChaosSchedule_596579,
    base: "", url: url_GetChaosSchedule_596580, schemes: {Scheme.Https, Scheme.Http})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
