
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: Service Fabric Client APIs
## version: 6.5.0.36
## termsOfService: (not provided)
## license: (not provided)
## 
## Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567668 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567668](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567668): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "servicefabric"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_CancelRepairTask_567890 = ref object of OpenApiRestCall_567668
proc url_CancelRepairTask_567892(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelRepairTask_567891(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568081 = query.getOrDefault("api-version")
  valid_568081 = validateParameter(valid_568081, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568081 != nil:
    section.add "api-version", valid_568081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568105: Call_CancelRepairTask_567890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568105.validator(path, query, header, formData, body)
  let scheme = call_568105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568105.url(scheme.get, call_568105.host, call_568105.base,
                         call_568105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568105, url, valid)

proc call*(call_568176: Call_CancelRepairTask_567890;
          RepairTaskCancelDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## cancelRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  var query_568177 = newJObject()
  var body_568179 = newJObject()
  add(query_568177, "api-version", newJString(apiVersion))
  if RepairTaskCancelDescription != nil:
    body_568179 = RepairTaskCancelDescription
  result = call_568176.call(nil, query_568177, nil, nil, body_568179)

var cancelRepairTask* = Call_CancelRepairTask_567890(name: "cancelRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CancelRepairTask", validator: validate_CancelRepairTask_567891,
    base: "", url: url_CancelRepairTask_567892, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRepairTask_568218 = ref object of OpenApiRestCall_567668
proc url_CreateRepairTask_568220(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateRepairTask_568219(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568221 = query.getOrDefault("api-version")
  valid_568221 = validateParameter(valid_568221, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568221 != nil:
    section.add "api-version", valid_568221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568223: Call_CreateRepairTask_568218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568223.validator(path, query, header, formData, body)
  let scheme = call_568223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568223.url(scheme.get, call_568223.host, call_568223.base,
                         call_568223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568223, url, valid)

proc call*(call_568224: Call_CreateRepairTask_568218; RepairTask: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## createRepairTask
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568225 = newJObject()
  var body_568226 = newJObject()
  if RepairTask != nil:
    body_568226 = RepairTask
  add(query_568225, "api-version", newJString(apiVersion))
  result = call_568224.call(nil, query_568225, nil, nil, body_568226)

var createRepairTask* = Call_CreateRepairTask_568218(name: "createRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CreateRepairTask", validator: validate_CreateRepairTask_568219,
    base: "", url: url_CreateRepairTask_568220, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRepairTask_568227 = ref object of OpenApiRestCall_567668
proc url_DeleteRepairTask_568229(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteRepairTask_568228(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568230 = query.getOrDefault("api-version")
  valid_568230 = validateParameter(valid_568230, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568230 != nil:
    section.add "api-version", valid_568230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568232: Call_DeleteRepairTask_568227; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568232.validator(path, query, header, formData, body)
  let scheme = call_568232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568232.url(scheme.get, call_568232.host, call_568232.base,
                         call_568232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568232, url, valid)

proc call*(call_568233: Call_DeleteRepairTask_568227;
          RepairTaskDeleteDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## deleteRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  var query_568234 = newJObject()
  var body_568235 = newJObject()
  add(query_568234, "api-version", newJString(apiVersion))
  if RepairTaskDeleteDescription != nil:
    body_568235 = RepairTaskDeleteDescription
  result = call_568233.call(nil, query_568234, nil, nil, body_568235)

var deleteRepairTask* = Call_DeleteRepairTask_568227(name: "deleteRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/DeleteRepairTask", validator: validate_DeleteRepairTask_568228,
    base: "", url: url_DeleteRepairTask_568229, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ForceApproveRepairTask_568236 = ref object of OpenApiRestCall_567668
proc url_ForceApproveRepairTask_568238(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ForceApproveRepairTask_568237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568239 = query.getOrDefault("api-version")
  valid_568239 = validateParameter(valid_568239, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568239 != nil:
    section.add "api-version", valid_568239
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568241: Call_ForceApproveRepairTask_568236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568241.validator(path, query, header, formData, body)
  let scheme = call_568241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568241.url(scheme.get, call_568241.host, call_568241.base,
                         call_568241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568241, url, valid)

proc call*(call_568242: Call_ForceApproveRepairTask_568236;
          RepairTaskApproveDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## forceApproveRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  var query_568243 = newJObject()
  var body_568244 = newJObject()
  add(query_568243, "api-version", newJString(apiVersion))
  if RepairTaskApproveDescription != nil:
    body_568244 = RepairTaskApproveDescription
  result = call_568242.call(nil, query_568243, nil, nil, body_568244)

var forceApproveRepairTask* = Call_ForceApproveRepairTask_568236(
    name: "forceApproveRepairTask", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ForceApproveRepairTask",
    validator: validate_ForceApproveRepairTask_568237, base: "",
    url: url_ForceApproveRepairTask_568238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAadMetadata_568245 = ref object of OpenApiRestCall_567668
proc url_GetAadMetadata_568247(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAadMetadata_568246(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568249 = query.getOrDefault("timeout")
  valid_568249 = validateParameter(valid_568249, JInt, required = false,
                                 default = newJInt(60))
  if valid_568249 != nil:
    section.add "timeout", valid_568249
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568250 = query.getOrDefault("api-version")
  valid_568250 = validateParameter(valid_568250, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568250 != nil:
    section.add "api-version", valid_568250
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568251: Call_GetAadMetadata_568245; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  let valid = call_568251.validator(path, query, header, formData, body)
  let scheme = call_568251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568251.url(scheme.get, call_568251.host, call_568251.base,
                         call_568251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568251, url, valid)

proc call*(call_568252: Call_GetAadMetadata_568245; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getAadMetadata
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568253 = newJObject()
  add(query_568253, "timeout", newJInt(timeout))
  add(query_568253, "api-version", newJString(apiVersion))
  result = call_568252.call(nil, query_568253, nil, nil, nil)

var getAadMetadata* = Call_GetAadMetadata_568245(name: "getAadMetadata",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/$/GetAadMetadata",
    validator: validate_GetAadMetadata_568246, base: "", url: url_GetAadMetadata_568247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfiguration_568254 = ref object of OpenApiRestCall_567668
proc url_GetClusterConfiguration_568256(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfiguration_568255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: JString (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568257 = query.getOrDefault("timeout")
  valid_568257 = validateParameter(valid_568257, JInt, required = false,
                                 default = newJInt(60))
  if valid_568257 != nil:
    section.add "timeout", valid_568257
  assert query != nil, "query argument is necessary due to required `ConfigurationApiVersion` field"
  var valid_568258 = query.getOrDefault("ConfigurationApiVersion")
  valid_568258 = validateParameter(valid_568258, JString, required = true,
                                 default = nil)
  if valid_568258 != nil:
    section.add "ConfigurationApiVersion", valid_568258
  var valid_568259 = query.getOrDefault("api-version")
  valid_568259 = validateParameter(valid_568259, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568259 != nil:
    section.add "api-version", valid_568259
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568260: Call_GetClusterConfiguration_568254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  let valid = call_568260.validator(path, query, header, formData, body)
  let scheme = call_568260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568260.url(scheme.get, call_568260.host, call_568260.base,
                         call_568260.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568260, url, valid)

proc call*(call_568261: Call_GetClusterConfiguration_568254;
          ConfigurationApiVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterConfiguration
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: string (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568262 = newJObject()
  add(query_568262, "timeout", newJInt(timeout))
  add(query_568262, "ConfigurationApiVersion", newJString(ConfigurationApiVersion))
  add(query_568262, "api-version", newJString(apiVersion))
  result = call_568261.call(nil, query_568262, nil, nil, nil)

var getClusterConfiguration* = Call_GetClusterConfiguration_568254(
    name: "getClusterConfiguration", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfiguration",
    validator: validate_GetClusterConfiguration_568255, base: "",
    url: url_GetClusterConfiguration_568256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfigurationUpgradeStatus_568263 = ref object of OpenApiRestCall_567668
proc url_GetClusterConfigurationUpgradeStatus_568265(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfigurationUpgradeStatus_568264(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568266 = query.getOrDefault("timeout")
  valid_568266 = validateParameter(valid_568266, JInt, required = false,
                                 default = newJInt(60))
  if valid_568266 != nil:
    section.add "timeout", valid_568266
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568267 = query.getOrDefault("api-version")
  valid_568267 = validateParameter(valid_568267, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568267 != nil:
    section.add "api-version", valid_568267
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568268: Call_GetClusterConfigurationUpgradeStatus_568263;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  let valid = call_568268.validator(path, query, header, formData, body)
  let scheme = call_568268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568268.url(scheme.get, call_568268.host, call_568268.base,
                         call_568268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568268, url, valid)

proc call*(call_568269: Call_GetClusterConfigurationUpgradeStatus_568263;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getClusterConfigurationUpgradeStatus
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568270 = newJObject()
  add(query_568270, "timeout", newJInt(timeout))
  add(query_568270, "api-version", newJString(apiVersion))
  result = call_568269.call(nil, query_568270, nil, nil, nil)

var getClusterConfigurationUpgradeStatus* = Call_GetClusterConfigurationUpgradeStatus_568263(
    name: "getClusterConfigurationUpgradeStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfigurationUpgradeStatus",
    validator: validate_GetClusterConfigurationUpgradeStatus_568264, base: "",
    url: url_GetClusterConfigurationUpgradeStatus_568265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthUsingPolicy_568284 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealthUsingPolicy_568286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthUsingPolicy_568285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568287 = query.getOrDefault("timeout")
  valid_568287 = validateParameter(valid_568287, JInt, required = false,
                                 default = newJInt(60))
  if valid_568287 != nil:
    section.add "timeout", valid_568287
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568288 = query.getOrDefault("api-version")
  valid_568288 = validateParameter(valid_568288, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568288 != nil:
    section.add "api-version", valid_568288
  var valid_568289 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_568289 = validateParameter(valid_568289, JInt, required = false,
                                 default = newJInt(0))
  if valid_568289 != nil:
    section.add "ApplicationsHealthStateFilter", valid_568289
  var valid_568290 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_568290 = validateParameter(valid_568290, JBool, required = false,
                                 default = newJBool(false))
  if valid_568290 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_568290
  var valid_568291 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568291 = validateParameter(valid_568291, JBool, required = false,
                                 default = newJBool(false))
  if valid_568291 != nil:
    section.add "ExcludeHealthStatistics", valid_568291
  var valid_568292 = query.getOrDefault("EventsHealthStateFilter")
  valid_568292 = validateParameter(valid_568292, JInt, required = false,
                                 default = newJInt(0))
  if valid_568292 != nil:
    section.add "EventsHealthStateFilter", valid_568292
  var valid_568293 = query.getOrDefault("NodesHealthStateFilter")
  valid_568293 = validateParameter(valid_568293, JInt, required = false,
                                 default = newJInt(0))
  if valid_568293 != nil:
    section.add "NodesHealthStateFilter", valid_568293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568295: Call_GetClusterHealthUsingPolicy_568284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_568295.validator(path, query, header, formData, body)
  let scheme = call_568295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568295.url(scheme.get, call_568295.host, call_568295.base,
                         call_568295.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568295, url, valid)

proc call*(call_568296: Call_GetClusterHealthUsingPolicy_568284; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ClusterHealthPolicies: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealthUsingPolicy
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_568297 = newJObject()
  var body_568298 = newJObject()
  add(query_568297, "timeout", newJInt(timeout))
  add(query_568297, "api-version", newJString(apiVersion))
  add(query_568297, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_568297, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  if ClusterHealthPolicies != nil:
    body_568298 = ClusterHealthPolicies
  add(query_568297, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568297, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_568297, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_568296.call(nil, query_568297, nil, nil, body_568298)

var getClusterHealthUsingPolicy* = Call_GetClusterHealthUsingPolicy_568284(
    name: "getClusterHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/GetClusterHealth",
    validator: validate_GetClusterHealthUsingPolicy_568285, base: "",
    url: url_GetClusterHealthUsingPolicy_568286,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealth_568271 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealth_568273(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealth_568272(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568274 = query.getOrDefault("timeout")
  valid_568274 = validateParameter(valid_568274, JInt, required = false,
                                 default = newJInt(60))
  if valid_568274 != nil:
    section.add "timeout", valid_568274
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568275 = query.getOrDefault("api-version")
  valid_568275 = validateParameter(valid_568275, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568275 != nil:
    section.add "api-version", valid_568275
  var valid_568276 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_568276 = validateParameter(valid_568276, JInt, required = false,
                                 default = newJInt(0))
  if valid_568276 != nil:
    section.add "ApplicationsHealthStateFilter", valid_568276
  var valid_568277 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_568277 = validateParameter(valid_568277, JBool, required = false,
                                 default = newJBool(false))
  if valid_568277 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_568277
  var valid_568278 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568278 = validateParameter(valid_568278, JBool, required = false,
                                 default = newJBool(false))
  if valid_568278 != nil:
    section.add "ExcludeHealthStatistics", valid_568278
  var valid_568279 = query.getOrDefault("EventsHealthStateFilter")
  valid_568279 = validateParameter(valid_568279, JInt, required = false,
                                 default = newJInt(0))
  if valid_568279 != nil:
    section.add "EventsHealthStateFilter", valid_568279
  var valid_568280 = query.getOrDefault("NodesHealthStateFilter")
  valid_568280 = validateParameter(valid_568280, JInt, required = false,
                                 default = newJInt(0))
  if valid_568280 != nil:
    section.add "NodesHealthStateFilter", valid_568280
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568281: Call_GetClusterHealth_568271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  let valid = call_568281.validator(path, query, header, formData, body)
  let scheme = call_568281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568281.url(scheme.get, call_568281.host, call_568281.base,
                         call_568281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568281, url, valid)

proc call*(call_568282: Call_GetClusterHealth_568271; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_568283 = newJObject()
  add(query_568283, "timeout", newJInt(timeout))
  add(query_568283, "api-version", newJString(apiVersion))
  add(query_568283, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_568283, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  add(query_568283, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568283, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_568283, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_568282.call(nil, query_568283, nil, nil, nil)

var getClusterHealth* = Call_GetClusterHealth_568271(name: "getClusterHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterHealth", validator: validate_GetClusterHealth_568272,
    base: "", url: url_GetClusterHealth_568273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568309(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568308(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568310 = query.getOrDefault("timeout")
  valid_568310 = validateParameter(valid_568310, JInt, required = false,
                                 default = newJInt(60))
  if valid_568310 != nil:
    section.add "timeout", valid_568310
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568311 = query.getOrDefault("api-version")
  valid_568311 = validateParameter(valid_568311, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568311 != nil:
    section.add "api-version", valid_568311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568313: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  let valid = call_568313.validator(path, query, header, formData, body)
  let scheme = call_568313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568313.url(scheme.get, call_568313.host, call_568313.base,
                         call_568313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568313, url, valid)

proc call*(call_568314: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307;
          timeout: int = 60; apiVersion: string = "6.0";
          ClusterHealthChunkQueryDescription: JsonNode = nil): Recallable =
  ## getClusterHealthChunkUsingPolicyAndAdvancedFilters
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  var query_568315 = newJObject()
  var body_568316 = newJObject()
  add(query_568315, "timeout", newJInt(timeout))
  add(query_568315, "api-version", newJString(apiVersion))
  if ClusterHealthChunkQueryDescription != nil:
    body_568316 = ClusterHealthChunkQueryDescription
  result = call_568314.call(nil, query_568315, nil, nil, body_568316)

var getClusterHealthChunkUsingPolicyAndAdvancedFilters* = Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307(
    name: "getClusterHealthChunkUsingPolicyAndAdvancedFilters",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568308,
    base: "", url: url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunk_568299 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealthChunk_568301(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunk_568300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568302 = query.getOrDefault("timeout")
  valid_568302 = validateParameter(valid_568302, JInt, required = false,
                                 default = newJInt(60))
  if valid_568302 != nil:
    section.add "timeout", valid_568302
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568303 = query.getOrDefault("api-version")
  valid_568303 = validateParameter(valid_568303, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568303 != nil:
    section.add "api-version", valid_568303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568304: Call_GetClusterHealthChunk_568299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  let valid = call_568304.validator(path, query, header, formData, body)
  let scheme = call_568304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568304.url(scheme.get, call_568304.host, call_568304.base,
                         call_568304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568304, url, valid)

proc call*(call_568305: Call_GetClusterHealthChunk_568299; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterHealthChunk
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568306 = newJObject()
  add(query_568306, "timeout", newJInt(timeout))
  add(query_568306, "api-version", newJString(apiVersion))
  result = call_568305.call(nil, query_568306, nil, nil, nil)

var getClusterHealthChunk* = Call_GetClusterHealthChunk_568299(
    name: "getClusterHealthChunk", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunk_568300, base: "",
    url: url_GetClusterHealthChunk_568301, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterManifest_568317 = ref object of OpenApiRestCall_567668
proc url_GetClusterManifest_568319(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterManifest_568318(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568320 = query.getOrDefault("timeout")
  valid_568320 = validateParameter(valid_568320, JInt, required = false,
                                 default = newJInt(60))
  if valid_568320 != nil:
    section.add "timeout", valid_568320
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568321 = query.getOrDefault("api-version")
  valid_568321 = validateParameter(valid_568321, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568321 != nil:
    section.add "api-version", valid_568321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568322: Call_GetClusterManifest_568317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  let valid = call_568322.validator(path, query, header, formData, body)
  let scheme = call_568322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568322.url(scheme.get, call_568322.host, call_568322.base,
                         call_568322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568322, url, valid)

proc call*(call_568323: Call_GetClusterManifest_568317; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterManifest
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568324 = newJObject()
  add(query_568324, "timeout", newJInt(timeout))
  add(query_568324, "api-version", newJString(apiVersion))
  result = call_568323.call(nil, query_568324, nil, nil, nil)

var getClusterManifest* = Call_GetClusterManifest_568317(
    name: "getClusterManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterManifest", validator: validate_GetClusterManifest_568318,
    base: "", url: url_GetClusterManifest_568319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterVersion_568325 = ref object of OpenApiRestCall_567668
proc url_GetClusterVersion_568327(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterVersion_568326(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568328 = query.getOrDefault("timeout")
  valid_568328 = validateParameter(valid_568328, JInt, required = false,
                                 default = newJInt(60))
  if valid_568328 != nil:
    section.add "timeout", valid_568328
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568329 = query.getOrDefault("api-version")
  valid_568329 = validateParameter(valid_568329, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568329 != nil:
    section.add "api-version", valid_568329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568330: Call_GetClusterVersion_568325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  let valid = call_568330.validator(path, query, header, formData, body)
  let scheme = call_568330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568330.url(scheme.get, call_568330.host, call_568330.base,
                         call_568330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568330, url, valid)

proc call*(call_568331: Call_GetClusterVersion_568325; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## getClusterVersion
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568332 = newJObject()
  add(query_568332, "timeout", newJInt(timeout))
  add(query_568332, "api-version", newJString(apiVersion))
  result = call_568331.call(nil, query_568332, nil, nil, nil)

var getClusterVersion* = Call_GetClusterVersion_568325(name: "getClusterVersion",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterVersion", validator: validate_GetClusterVersion_568326,
    base: "", url: url_GetClusterVersion_568327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterLoad_568333 = ref object of OpenApiRestCall_567668
proc url_GetClusterLoad_568335(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterLoad_568334(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568336 = query.getOrDefault("timeout")
  valid_568336 = validateParameter(valid_568336, JInt, required = false,
                                 default = newJInt(60))
  if valid_568336 != nil:
    section.add "timeout", valid_568336
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568337 = query.getOrDefault("api-version")
  valid_568337 = validateParameter(valid_568337, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568337 != nil:
    section.add "api-version", valid_568337
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568338: Call_GetClusterLoad_568333; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
  ## 
  let valid = call_568338.validator(path, query, header, formData, body)
  let scheme = call_568338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568338.url(scheme.get, call_568338.host, call_568338.base,
                         call_568338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568338, url, valid)

proc call*(call_568339: Call_GetClusterLoad_568333; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterLoad
  ## Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity defined.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568340 = newJObject()
  add(query_568340, "timeout", newJInt(timeout))
  add(query_568340, "api-version", newJString(apiVersion))
  result = call_568339.call(nil, query_568340, nil, nil, nil)

var getClusterLoad* = Call_GetClusterLoad_568333(name: "getClusterLoad",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetLoadInformation", validator: validate_GetClusterLoad_568334,
    base: "", url: url_GetClusterLoad_568335, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricCodeVersionInfoList_568341 = ref object of OpenApiRestCall_567668
proc url_GetProvisionedFabricCodeVersionInfoList_568343(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricCodeVersionInfoList_568342(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: JString
  ##              : The product version of Service Fabric.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568344 = query.getOrDefault("timeout")
  valid_568344 = validateParameter(valid_568344, JInt, required = false,
                                 default = newJInt(60))
  if valid_568344 != nil:
    section.add "timeout", valid_568344
  var valid_568345 = query.getOrDefault("CodeVersion")
  valid_568345 = validateParameter(valid_568345, JString, required = false,
                                 default = nil)
  if valid_568345 != nil:
    section.add "CodeVersion", valid_568345
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568346 = query.getOrDefault("api-version")
  valid_568346 = validateParameter(valid_568346, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568346 != nil:
    section.add "api-version", valid_568346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568347: Call_GetProvisionedFabricCodeVersionInfoList_568341;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_568347.validator(path, query, header, formData, body)
  let scheme = call_568347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568347.url(scheme.get, call_568347.host, call_568347.base,
                         call_568347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568347, url, valid)

proc call*(call_568348: Call_GetProvisionedFabricCodeVersionInfoList_568341;
          timeout: int = 60; CodeVersion: string = ""; apiVersion: string = "6.0"): Recallable =
  ## getProvisionedFabricCodeVersionInfoList
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: string
  ##              : The product version of Service Fabric.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568349 = newJObject()
  add(query_568349, "timeout", newJInt(timeout))
  add(query_568349, "CodeVersion", newJString(CodeVersion))
  add(query_568349, "api-version", newJString(apiVersion))
  result = call_568348.call(nil, query_568349, nil, nil, nil)

var getProvisionedFabricCodeVersionInfoList* = Call_GetProvisionedFabricCodeVersionInfoList_568341(
    name: "getProvisionedFabricCodeVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedCodeVersions",
    validator: validate_GetProvisionedFabricCodeVersionInfoList_568342, base: "",
    url: url_GetProvisionedFabricCodeVersionInfoList_568343,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricConfigVersionInfoList_568350 = ref object of OpenApiRestCall_567668
proc url_GetProvisionedFabricConfigVersionInfoList_568352(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricConfigVersionInfoList_568351(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: JString
  ##                : The config version of Service Fabric.
  section = newJObject()
  var valid_568353 = query.getOrDefault("timeout")
  valid_568353 = validateParameter(valid_568353, JInt, required = false,
                                 default = newJInt(60))
  if valid_568353 != nil:
    section.add "timeout", valid_568353
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568354 = query.getOrDefault("api-version")
  valid_568354 = validateParameter(valid_568354, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568354 != nil:
    section.add "api-version", valid_568354
  var valid_568355 = query.getOrDefault("ConfigVersion")
  valid_568355 = validateParameter(valid_568355, JString, required = false,
                                 default = nil)
  if valid_568355 != nil:
    section.add "ConfigVersion", valid_568355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568356: Call_GetProvisionedFabricConfigVersionInfoList_568350;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_568356.validator(path, query, header, formData, body)
  let scheme = call_568356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568356.url(scheme.get, call_568356.host, call_568356.base,
                         call_568356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568356, url, valid)

proc call*(call_568357: Call_GetProvisionedFabricConfigVersionInfoList_568350;
          timeout: int = 60; apiVersion: string = "6.0"; ConfigVersion: string = ""): Recallable =
  ## getProvisionedFabricConfigVersionInfoList
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: string
  ##                : The config version of Service Fabric.
  var query_568358 = newJObject()
  add(query_568358, "timeout", newJInt(timeout))
  add(query_568358, "api-version", newJString(apiVersion))
  add(query_568358, "ConfigVersion", newJString(ConfigVersion))
  result = call_568357.call(nil, query_568358, nil, nil, nil)

var getProvisionedFabricConfigVersionInfoList* = Call_GetProvisionedFabricConfigVersionInfoList_568350(
    name: "getProvisionedFabricConfigVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedConfigVersions",
    validator: validate_GetProvisionedFabricConfigVersionInfoList_568351,
    base: "", url: url_GetProvisionedFabricConfigVersionInfoList_568352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRepairTaskList_568359 = ref object of OpenApiRestCall_567668
proc url_GetRepairTaskList_568361(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRepairTaskList_568360(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: JString
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: JString
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: JInt
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568362 = query.getOrDefault("api-version")
  valid_568362 = validateParameter(valid_568362, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568362 != nil:
    section.add "api-version", valid_568362
  var valid_568363 = query.getOrDefault("TaskIdFilter")
  valid_568363 = validateParameter(valid_568363, JString, required = false,
                                 default = nil)
  if valid_568363 != nil:
    section.add "TaskIdFilter", valid_568363
  var valid_568364 = query.getOrDefault("ExecutorFilter")
  valid_568364 = validateParameter(valid_568364, JString, required = false,
                                 default = nil)
  if valid_568364 != nil:
    section.add "ExecutorFilter", valid_568364
  var valid_568365 = query.getOrDefault("StateFilter")
  valid_568365 = validateParameter(valid_568365, JInt, required = false, default = nil)
  if valid_568365 != nil:
    section.add "StateFilter", valid_568365
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568366: Call_GetRepairTaskList_568359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568366.validator(path, query, header, formData, body)
  let scheme = call_568366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568366.url(scheme.get, call_568366.host, call_568366.base,
                         call_568366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568366, url, valid)

proc call*(call_568367: Call_GetRepairTaskList_568359; apiVersion: string = "6.0";
          TaskIdFilter: string = ""; ExecutorFilter: string = ""; StateFilter: int = 0): Recallable =
  ## getRepairTaskList
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: string
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: string
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: int
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  var query_568368 = newJObject()
  add(query_568368, "api-version", newJString(apiVersion))
  add(query_568368, "TaskIdFilter", newJString(TaskIdFilter))
  add(query_568368, "ExecutorFilter", newJString(ExecutorFilter))
  add(query_568368, "StateFilter", newJInt(StateFilter))
  result = call_568367.call(nil, query_568368, nil, nil, nil)

var getRepairTaskList* = Call_GetRepairTaskList_568359(name: "getRepairTaskList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetRepairTaskList", validator: validate_GetRepairTaskList_568360,
    base: "", url: url_GetRepairTaskList_568361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpgradeOrchestrationServiceState_568369 = ref object of OpenApiRestCall_567668
proc url_GetUpgradeOrchestrationServiceState_568371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpgradeOrchestrationServiceState_568370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568372 = query.getOrDefault("timeout")
  valid_568372 = validateParameter(valid_568372, JInt, required = false,
                                 default = newJInt(60))
  if valid_568372 != nil:
    section.add "timeout", valid_568372
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568373 = query.getOrDefault("api-version")
  valid_568373 = validateParameter(valid_568373, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568373 != nil:
    section.add "api-version", valid_568373
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568374: Call_GetUpgradeOrchestrationServiceState_568369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_568374.validator(path, query, header, formData, body)
  let scheme = call_568374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568374.url(scheme.get, call_568374.host, call_568374.base,
                         call_568374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568374, url, valid)

proc call*(call_568375: Call_GetUpgradeOrchestrationServiceState_568369;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getUpgradeOrchestrationServiceState
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568376 = newJObject()
  add(query_568376, "timeout", newJInt(timeout))
  add(query_568376, "api-version", newJString(apiVersion))
  result = call_568375.call(nil, query_568376, nil, nil, nil)

var getUpgradeOrchestrationServiceState* = Call_GetUpgradeOrchestrationServiceState_568369(
    name: "getUpgradeOrchestrationServiceState", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeOrchestrationServiceState",
    validator: validate_GetUpgradeOrchestrationServiceState_568370, base: "",
    url: url_GetUpgradeOrchestrationServiceState_568371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterUpgradeProgress_568377 = ref object of OpenApiRestCall_567668
proc url_GetClusterUpgradeProgress_568379(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterUpgradeProgress_568378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568380 = query.getOrDefault("timeout")
  valid_568380 = validateParameter(valid_568380, JInt, required = false,
                                 default = newJInt(60))
  if valid_568380 != nil:
    section.add "timeout", valid_568380
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568381 = query.getOrDefault("api-version")
  valid_568381 = validateParameter(valid_568381, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568381 != nil:
    section.add "api-version", valid_568381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568382: Call_GetClusterUpgradeProgress_568377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  let valid = call_568382.validator(path, query, header, formData, body)
  let scheme = call_568382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568382.url(scheme.get, call_568382.host, call_568382.base,
                         call_568382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568382, url, valid)

proc call*(call_568383: Call_GetClusterUpgradeProgress_568377; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterUpgradeProgress
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568384 = newJObject()
  add(query_568384, "timeout", newJInt(timeout))
  add(query_568384, "api-version", newJString(apiVersion))
  result = call_568383.call(nil, query_568384, nil, nil, nil)

var getClusterUpgradeProgress* = Call_GetClusterUpgradeProgress_568377(
    name: "getClusterUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeProgress",
    validator: validate_GetClusterUpgradeProgress_568378, base: "",
    url: url_GetClusterUpgradeProgress_568379,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureCommand_568385 = ref object of OpenApiRestCall_567668
proc url_InvokeInfrastructureCommand_568387(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureCommand_568386(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_568388 = query.getOrDefault("timeout")
  valid_568388 = validateParameter(valid_568388, JInt, required = false,
                                 default = newJInt(60))
  if valid_568388 != nil:
    section.add "timeout", valid_568388
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568389 = query.getOrDefault("api-version")
  valid_568389 = validateParameter(valid_568389, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568389 != nil:
    section.add "api-version", valid_568389
  var valid_568390 = query.getOrDefault("ServiceId")
  valid_568390 = validateParameter(valid_568390, JString, required = false,
                                 default = nil)
  if valid_568390 != nil:
    section.add "ServiceId", valid_568390
  var valid_568391 = query.getOrDefault("Command")
  valid_568391 = validateParameter(valid_568391, JString, required = true,
                                 default = nil)
  if valid_568391 != nil:
    section.add "Command", valid_568391
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568392: Call_InvokeInfrastructureCommand_568385; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568392.validator(path, query, header, formData, body)
  let scheme = call_568392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568392.url(scheme.get, call_568392.host, call_568392.base,
                         call_568392.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568392, url, valid)

proc call*(call_568393: Call_InvokeInfrastructureCommand_568385; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureCommand
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_568394 = newJObject()
  add(query_568394, "timeout", newJInt(timeout))
  add(query_568394, "api-version", newJString(apiVersion))
  add(query_568394, "ServiceId", newJString(ServiceId))
  add(query_568394, "Command", newJString(Command))
  result = call_568393.call(nil, query_568394, nil, nil, nil)

var invokeInfrastructureCommand* = Call_InvokeInfrastructureCommand_568385(
    name: "invokeInfrastructureCommand", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureCommand",
    validator: validate_InvokeInfrastructureCommand_568386, base: "",
    url: url_InvokeInfrastructureCommand_568387,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureQuery_568395 = ref object of OpenApiRestCall_567668
proc url_InvokeInfrastructureQuery_568397(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureQuery_568396(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_568398 = query.getOrDefault("timeout")
  valid_568398 = validateParameter(valid_568398, JInt, required = false,
                                 default = newJInt(60))
  if valid_568398 != nil:
    section.add "timeout", valid_568398
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568399 = query.getOrDefault("api-version")
  valid_568399 = validateParameter(valid_568399, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568399 != nil:
    section.add "api-version", valid_568399
  var valid_568400 = query.getOrDefault("ServiceId")
  valid_568400 = validateParameter(valid_568400, JString, required = false,
                                 default = nil)
  if valid_568400 != nil:
    section.add "ServiceId", valid_568400
  var valid_568401 = query.getOrDefault("Command")
  valid_568401 = validateParameter(valid_568401, JString, required = true,
                                 default = nil)
  if valid_568401 != nil:
    section.add "Command", valid_568401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568402: Call_InvokeInfrastructureQuery_568395; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568402.validator(path, query, header, formData, body)
  let scheme = call_568402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568402.url(scheme.get, call_568402.host, call_568402.base,
                         call_568402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568402, url, valid)

proc call*(call_568403: Call_InvokeInfrastructureQuery_568395; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureQuery
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_568404 = newJObject()
  add(query_568404, "timeout", newJInt(timeout))
  add(query_568404, "api-version", newJString(apiVersion))
  add(query_568404, "ServiceId", newJString(ServiceId))
  add(query_568404, "Command", newJString(Command))
  result = call_568403.call(nil, query_568404, nil, nil, nil)

var invokeInfrastructureQuery* = Call_InvokeInfrastructureQuery_568395(
    name: "invokeInfrastructureQuery", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureQuery",
    validator: validate_InvokeInfrastructureQuery_568396, base: "",
    url: url_InvokeInfrastructureQuery_568397,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeClusterUpgrade_568405 = ref object of OpenApiRestCall_567668
proc url_ResumeClusterUpgrade_568407(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ResumeClusterUpgrade_568406(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568408 = query.getOrDefault("timeout")
  valid_568408 = validateParameter(valid_568408, JInt, required = false,
                                 default = newJInt(60))
  if valid_568408 != nil:
    section.add "timeout", valid_568408
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568409 = query.getOrDefault("api-version")
  valid_568409 = validateParameter(valid_568409, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568409 != nil:
    section.add "api-version", valid_568409
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568411: Call_ResumeClusterUpgrade_568405; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  let valid = call_568411.validator(path, query, header, formData, body)
  let scheme = call_568411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568411.url(scheme.get, call_568411.host, call_568411.base,
                         call_568411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568411, url, valid)

proc call*(call_568412: Call_ResumeClusterUpgrade_568405;
          ResumeClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## resumeClusterUpgrade
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  var query_568413 = newJObject()
  var body_568414 = newJObject()
  add(query_568413, "timeout", newJInt(timeout))
  add(query_568413, "api-version", newJString(apiVersion))
  if ResumeClusterUpgradeDescription != nil:
    body_568414 = ResumeClusterUpgradeDescription
  result = call_568412.call(nil, query_568413, nil, nil, body_568414)

var resumeClusterUpgrade* = Call_ResumeClusterUpgrade_568405(
    name: "resumeClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeClusterUpgrade_568406, base: "",
    url: url_ResumeClusterUpgrade_568407, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionCluster_568415 = ref object of OpenApiRestCall_567668
proc url_ProvisionCluster_568417(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionCluster_568416(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568418 = query.getOrDefault("timeout")
  valid_568418 = validateParameter(valid_568418, JInt, required = false,
                                 default = newJInt(60))
  if valid_568418 != nil:
    section.add "timeout", valid_568418
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568419 = query.getOrDefault("api-version")
  valid_568419 = validateParameter(valid_568419, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568419 != nil:
    section.add "api-version", valid_568419
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568421: Call_ProvisionCluster_568415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  let valid = call_568421.validator(path, query, header, formData, body)
  let scheme = call_568421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568421.url(scheme.get, call_568421.host, call_568421.base,
                         call_568421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568421, url, valid)

proc call*(call_568422: Call_ProvisionCluster_568415;
          ProvisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## provisionCluster
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  var query_568423 = newJObject()
  var body_568424 = newJObject()
  add(query_568423, "timeout", newJInt(timeout))
  add(query_568423, "api-version", newJString(apiVersion))
  if ProvisionFabricDescription != nil:
    body_568424 = ProvisionFabricDescription
  result = call_568422.call(nil, query_568423, nil, nil, body_568424)

var provisionCluster* = Call_ProvisionCluster_568415(name: "provisionCluster",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/$/Provision",
    validator: validate_ProvisionCluster_568416, base: "",
    url: url_ProvisionCluster_568417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverAllPartitions_568425 = ref object of OpenApiRestCall_567668
proc url_RecoverAllPartitions_568427(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverAllPartitions_568426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568428 = query.getOrDefault("timeout")
  valid_568428 = validateParameter(valid_568428, JInt, required = false,
                                 default = newJInt(60))
  if valid_568428 != nil:
    section.add "timeout", valid_568428
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568429 = query.getOrDefault("api-version")
  valid_568429 = validateParameter(valid_568429, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568429 != nil:
    section.add "api-version", valid_568429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568430: Call_RecoverAllPartitions_568425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_568430.validator(path, query, header, formData, body)
  let scheme = call_568430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568430.url(scheme.get, call_568430.host, call_568430.base,
                         call_568430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568430, url, valid)

proc call*(call_568431: Call_RecoverAllPartitions_568425; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverAllPartitions
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568432 = newJObject()
  add(query_568432, "timeout", newJInt(timeout))
  add(query_568432, "api-version", newJString(apiVersion))
  result = call_568431.call(nil, query_568432, nil, nil, nil)

var recoverAllPartitions* = Call_RecoverAllPartitions_568425(
    name: "recoverAllPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverAllPartitions",
    validator: validate_RecoverAllPartitions_568426, base: "",
    url: url_RecoverAllPartitions_568427, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverSystemPartitions_568433 = ref object of OpenApiRestCall_567668
proc url_RecoverSystemPartitions_568435(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverSystemPartitions_568434(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568436 = query.getOrDefault("timeout")
  valid_568436 = validateParameter(valid_568436, JInt, required = false,
                                 default = newJInt(60))
  if valid_568436 != nil:
    section.add "timeout", valid_568436
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568437 = query.getOrDefault("api-version")
  valid_568437 = validateParameter(valid_568437, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568437 != nil:
    section.add "api-version", valid_568437
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568438: Call_RecoverSystemPartitions_568433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_568438.validator(path, query, header, formData, body)
  let scheme = call_568438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568438.url(scheme.get, call_568438.host, call_568438.base,
                         call_568438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568438, url, valid)

proc call*(call_568439: Call_RecoverSystemPartitions_568433; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverSystemPartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568440 = newJObject()
  add(query_568440, "timeout", newJInt(timeout))
  add(query_568440, "api-version", newJString(apiVersion))
  result = call_568439.call(nil, query_568440, nil, nil, nil)

var recoverSystemPartitions* = Call_RecoverSystemPartitions_568433(
    name: "recoverSystemPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverSystemPartitions",
    validator: validate_RecoverSystemPartitions_568434, base: "",
    url: url_RecoverSystemPartitions_568435, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportClusterHealth_568441 = ref object of OpenApiRestCall_567668
proc url_ReportClusterHealth_568443(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ReportClusterHealth_568442(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568444 = query.getOrDefault("Immediate")
  valid_568444 = validateParameter(valid_568444, JBool, required = false,
                                 default = newJBool(false))
  if valid_568444 != nil:
    section.add "Immediate", valid_568444
  var valid_568445 = query.getOrDefault("timeout")
  valid_568445 = validateParameter(valid_568445, JInt, required = false,
                                 default = newJInt(60))
  if valid_568445 != nil:
    section.add "timeout", valid_568445
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568446 = query.getOrDefault("api-version")
  valid_568446 = validateParameter(valid_568446, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568446 != nil:
    section.add "api-version", valid_568446
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568448: Call_ReportClusterHealth_568441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_568448.validator(path, query, header, formData, body)
  let scheme = call_568448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568448.url(scheme.get, call_568448.host, call_568448.base,
                         call_568448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568448, url, valid)

proc call*(call_568449: Call_ReportClusterHealth_568441;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportClusterHealth
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var query_568450 = newJObject()
  var body_568451 = newJObject()
  add(query_568450, "Immediate", newJBool(Immediate))
  add(query_568450, "timeout", newJInt(timeout))
  add(query_568450, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_568451 = HealthInformation
  result = call_568449.call(nil, query_568450, nil, nil, body_568451)

var reportClusterHealth* = Call_ReportClusterHealth_568441(
    name: "reportClusterHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ReportClusterHealth",
    validator: validate_ReportClusterHealth_568442, base: "",
    url: url_ReportClusterHealth_568443, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackClusterUpgrade_568452 = ref object of OpenApiRestCall_567668
proc url_RollbackClusterUpgrade_568454(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RollbackClusterUpgrade_568453(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568455 = query.getOrDefault("timeout")
  valid_568455 = validateParameter(valid_568455, JInt, required = false,
                                 default = newJInt(60))
  if valid_568455 != nil:
    section.add "timeout", valid_568455
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568456 = query.getOrDefault("api-version")
  valid_568456 = validateParameter(valid_568456, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568456 != nil:
    section.add "api-version", valid_568456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568457: Call_RollbackClusterUpgrade_568452; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  let valid = call_568457.validator(path, query, header, formData, body)
  let scheme = call_568457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568457.url(scheme.get, call_568457.host, call_568457.base,
                         call_568457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568457, url, valid)

proc call*(call_568458: Call_RollbackClusterUpgrade_568452; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## rollbackClusterUpgrade
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568459 = newJObject()
  add(query_568459, "timeout", newJInt(timeout))
  add(query_568459, "api-version", newJString(apiVersion))
  result = call_568458.call(nil, query_568459, nil, nil, nil)

var rollbackClusterUpgrade* = Call_RollbackClusterUpgrade_568452(
    name: "rollbackClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RollbackUpgrade",
    validator: validate_RollbackClusterUpgrade_568453, base: "",
    url: url_RollbackClusterUpgrade_568454, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetUpgradeOrchestrationServiceState_568460 = ref object of OpenApiRestCall_567668
proc url_SetUpgradeOrchestrationServiceState_568462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_SetUpgradeOrchestrationServiceState_568461(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568463 = query.getOrDefault("timeout")
  valid_568463 = validateParameter(valid_568463, JInt, required = false,
                                 default = newJInt(60))
  if valid_568463 != nil:
    section.add "timeout", valid_568463
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568464 = query.getOrDefault("api-version")
  valid_568464 = validateParameter(valid_568464, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568464 != nil:
    section.add "api-version", valid_568464
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568466: Call_SetUpgradeOrchestrationServiceState_568460;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_568466.validator(path, query, header, formData, body)
  let scheme = call_568466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568466.url(scheme.get, call_568466.host, call_568466.base,
                         call_568466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568466, url, valid)

proc call*(call_568467: Call_SetUpgradeOrchestrationServiceState_568460;
          UpgradeOrchestrationServiceState: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## setUpgradeOrchestrationServiceState
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  var query_568468 = newJObject()
  var body_568469 = newJObject()
  add(query_568468, "timeout", newJInt(timeout))
  add(query_568468, "api-version", newJString(apiVersion))
  if UpgradeOrchestrationServiceState != nil:
    body_568469 = UpgradeOrchestrationServiceState
  result = call_568467.call(nil, query_568468, nil, nil, body_568469)

var setUpgradeOrchestrationServiceState* = Call_SetUpgradeOrchestrationServiceState_568460(
    name: "setUpgradeOrchestrationServiceState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/SetUpgradeOrchestrationServiceState",
    validator: validate_SetUpgradeOrchestrationServiceState_568461, base: "",
    url: url_SetUpgradeOrchestrationServiceState_568462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterConfigurationUpgrade_568470 = ref object of OpenApiRestCall_567668
proc url_StartClusterConfigurationUpgrade_568472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterConfigurationUpgrade_568471(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568483 = query.getOrDefault("timeout")
  valid_568483 = validateParameter(valid_568483, JInt, required = false,
                                 default = newJInt(60))
  if valid_568483 != nil:
    section.add "timeout", valid_568483
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568484 = query.getOrDefault("api-version")
  valid_568484 = validateParameter(valid_568484, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568484 != nil:
    section.add "api-version", valid_568484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568486: Call_StartClusterConfigurationUpgrade_568470;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  let valid = call_568486.validator(path, query, header, formData, body)
  let scheme = call_568486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568486.url(scheme.get, call_568486.host, call_568486.base,
                         call_568486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568486, url, valid)

proc call*(call_568487: Call_StartClusterConfigurationUpgrade_568470;
          ClusterConfigurationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterConfigurationUpgrade
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  var query_568488 = newJObject()
  var body_568489 = newJObject()
  add(query_568488, "timeout", newJInt(timeout))
  add(query_568488, "api-version", newJString(apiVersion))
  if ClusterConfigurationUpgradeDescription != nil:
    body_568489 = ClusterConfigurationUpgradeDescription
  result = call_568487.call(nil, query_568488, nil, nil, body_568489)

var startClusterConfigurationUpgrade* = Call_StartClusterConfigurationUpgrade_568470(
    name: "startClusterConfigurationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/StartClusterConfigurationUpgrade",
    validator: validate_StartClusterConfigurationUpgrade_568471, base: "",
    url: url_StartClusterConfigurationUpgrade_568472,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ToggleVerboseServicePlacementHealthReporting_568490 = ref object of OpenApiRestCall_567668
proc url_ToggleVerboseServicePlacementHealthReporting_568492(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ToggleVerboseServicePlacementHealthReporting_568491(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or dropped.
  ## If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Enabled: JBool (required)
  ##          : The verbosity of service placement health reporting.
  section = newJObject()
  var valid_568493 = query.getOrDefault("timeout")
  valid_568493 = validateParameter(valid_568493, JInt, required = false,
                                 default = newJInt(60))
  if valid_568493 != nil:
    section.add "timeout", valid_568493
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568494 = query.getOrDefault("api-version")
  valid_568494 = validateParameter(valid_568494, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568494 != nil:
    section.add "api-version", valid_568494
  var valid_568495 = query.getOrDefault("Enabled")
  valid_568495 = validateParameter(valid_568495, JBool, required = true, default = nil)
  if valid_568495 != nil:
    section.add "Enabled", valid_568495
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568496: Call_ToggleVerboseServicePlacementHealthReporting_568490;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or dropped.
  ## If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
  ## 
  let valid = call_568496.validator(path, query, header, formData, body)
  let scheme = call_568496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568496.url(scheme.get, call_568496.host, call_568496.base,
                         call_568496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568496, url, valid)

proc call*(call_568497: Call_ToggleVerboseServicePlacementHealthReporting_568490;
          Enabled: bool; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## toggleVerboseServicePlacementHealthReporting
  ## If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or dropped.
  ## If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Enabled: bool (required)
  ##          : The verbosity of service placement health reporting.
  var query_568498 = newJObject()
  add(query_568498, "timeout", newJInt(timeout))
  add(query_568498, "api-version", newJString(apiVersion))
  add(query_568498, "Enabled", newJBool(Enabled))
  result = call_568497.call(nil, query_568498, nil, nil, nil)

var toggleVerboseServicePlacementHealthReporting* = Call_ToggleVerboseServicePlacementHealthReporting_568490(
    name: "toggleVerboseServicePlacementHealthReporting",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/ToggleVerboseServicePlacementHealthReporting",
    validator: validate_ToggleVerboseServicePlacementHealthReporting_568491,
    base: "", url: url_ToggleVerboseServicePlacementHealthReporting_568492,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionCluster_568499 = ref object of OpenApiRestCall_567668
proc url_UnprovisionCluster_568501(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UnprovisionCluster_568500(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## It is supported to unprovision code and configuration separately.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568502 = query.getOrDefault("timeout")
  valid_568502 = validateParameter(valid_568502, JInt, required = false,
                                 default = newJInt(60))
  if valid_568502 != nil:
    section.add "timeout", valid_568502
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568503 = query.getOrDefault("api-version")
  valid_568503 = validateParameter(valid_568503, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568503 != nil:
    section.add "api-version", valid_568503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568505: Call_UnprovisionCluster_568499; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## It is supported to unprovision code and configuration separately.
  ## 
  let valid = call_568505.validator(path, query, header, formData, body)
  let scheme = call_568505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568505.url(scheme.get, call_568505.host, call_568505.base,
                         call_568505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568505, url, valid)

proc call*(call_568506: Call_UnprovisionCluster_568499;
          UnprovisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionCluster
  ## It is supported to unprovision code and configuration separately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  var query_568507 = newJObject()
  var body_568508 = newJObject()
  add(query_568507, "timeout", newJInt(timeout))
  add(query_568507, "api-version", newJString(apiVersion))
  if UnprovisionFabricDescription != nil:
    body_568508 = UnprovisionFabricDescription
  result = call_568506.call(nil, query_568507, nil, nil, body_568508)

var unprovisionCluster* = Call_UnprovisionCluster_568499(
    name: "unprovisionCluster", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Unprovision",
    validator: validate_UnprovisionCluster_568500, base: "",
    url: url_UnprovisionCluster_568501, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairExecutionState_568509 = ref object of OpenApiRestCall_567668
proc url_UpdateRepairExecutionState_568511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairExecutionState_568510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568512 = query.getOrDefault("api-version")
  valid_568512 = validateParameter(valid_568512, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568512 != nil:
    section.add "api-version", valid_568512
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568514: Call_UpdateRepairExecutionState_568509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568514.validator(path, query, header, formData, body)
  let scheme = call_568514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568514.url(scheme.get, call_568514.host, call_568514.base,
                         call_568514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568514, url, valid)

proc call*(call_568515: Call_UpdateRepairExecutionState_568509;
          RepairTask: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## updateRepairExecutionState
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568516 = newJObject()
  var body_568517 = newJObject()
  if RepairTask != nil:
    body_568517 = RepairTask
  add(query_568516, "api-version", newJString(apiVersion))
  result = call_568515.call(nil, query_568516, nil, nil, body_568517)

var updateRepairExecutionState* = Call_UpdateRepairExecutionState_568509(
    name: "updateRepairExecutionState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairExecutionState",
    validator: validate_UpdateRepairExecutionState_568510, base: "",
    url: url_UpdateRepairExecutionState_568511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairTaskHealthPolicy_568518 = ref object of OpenApiRestCall_567668
proc url_UpdateRepairTaskHealthPolicy_568520(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairTaskHealthPolicy_568519(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568521 = query.getOrDefault("api-version")
  valid_568521 = validateParameter(valid_568521, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568521 != nil:
    section.add "api-version", valid_568521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568523: Call_UpdateRepairTaskHealthPolicy_568518; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568523.validator(path, query, header, formData, body)
  let scheme = call_568523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568523.url(scheme.get, call_568523.host, call_568523.base,
                         call_568523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568523, url, valid)

proc call*(call_568524: Call_UpdateRepairTaskHealthPolicy_568518;
          RepairTaskUpdateHealthPolicyDescription: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## updateRepairTaskHealthPolicy
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  var query_568525 = newJObject()
  var body_568526 = newJObject()
  add(query_568525, "api-version", newJString(apiVersion))
  if RepairTaskUpdateHealthPolicyDescription != nil:
    body_568526 = RepairTaskUpdateHealthPolicyDescription
  result = call_568524.call(nil, query_568525, nil, nil, body_568526)

var updateRepairTaskHealthPolicy* = Call_UpdateRepairTaskHealthPolicy_568518(
    name: "updateRepairTaskHealthPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairTaskHealthPolicy",
    validator: validate_UpdateRepairTaskHealthPolicy_568519, base: "",
    url: url_UpdateRepairTaskHealthPolicy_568520,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateClusterUpgrade_568527 = ref object of OpenApiRestCall_567668
proc url_UpdateClusterUpgrade_568529(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateClusterUpgrade_568528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568530 = query.getOrDefault("timeout")
  valid_568530 = validateParameter(valid_568530, JInt, required = false,
                                 default = newJInt(60))
  if valid_568530 != nil:
    section.add "timeout", valid_568530
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568531 = query.getOrDefault("api-version")
  valid_568531 = validateParameter(valid_568531, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568531 != nil:
    section.add "api-version", valid_568531
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568533: Call_UpdateClusterUpgrade_568527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  let valid = call_568533.validator(path, query, header, formData, body)
  let scheme = call_568533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568533.url(scheme.get, call_568533.host, call_568533.base,
                         call_568533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568533, url, valid)

proc call*(call_568534: Call_UpdateClusterUpgrade_568527;
          UpdateClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateClusterUpgrade
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  var query_568535 = newJObject()
  var body_568536 = newJObject()
  add(query_568535, "timeout", newJInt(timeout))
  add(query_568535, "api-version", newJString(apiVersion))
  if UpdateClusterUpgradeDescription != nil:
    body_568536 = UpdateClusterUpgradeDescription
  result = call_568534.call(nil, query_568535, nil, nil, body_568536)

var updateClusterUpgrade* = Call_UpdateClusterUpgrade_568527(
    name: "updateClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateUpgrade",
    validator: validate_UpdateClusterUpgrade_568528, base: "",
    url: url_UpdateClusterUpgrade_568529, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterUpgrade_568537 = ref object of OpenApiRestCall_567668
proc url_StartClusterUpgrade_568539(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterUpgrade_568538(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568540 = query.getOrDefault("timeout")
  valid_568540 = validateParameter(valid_568540, JInt, required = false,
                                 default = newJInt(60))
  if valid_568540 != nil:
    section.add "timeout", valid_568540
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568541 = query.getOrDefault("api-version")
  valid_568541 = validateParameter(valid_568541, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568541 != nil:
    section.add "api-version", valid_568541
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568543: Call_StartClusterUpgrade_568537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  let valid = call_568543.validator(path, query, header, formData, body)
  let scheme = call_568543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568543.url(scheme.get, call_568543.host, call_568543.base,
                         call_568543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568543, url, valid)

proc call*(call_568544: Call_StartClusterUpgrade_568537;
          StartClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterUpgrade
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  var query_568545 = newJObject()
  var body_568546 = newJObject()
  add(query_568545, "timeout", newJInt(timeout))
  add(query_568545, "api-version", newJString(apiVersion))
  if StartClusterUpgradeDescription != nil:
    body_568546 = StartClusterUpgradeDescription
  result = call_568544.call(nil, query_568545, nil, nil, body_568546)

var startClusterUpgrade* = Call_StartClusterUpgrade_568537(
    name: "startClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Upgrade",
    validator: validate_StartClusterUpgrade_568538, base: "",
    url: url_StartClusterUpgrade_568539, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoList_568547 = ref object of OpenApiRestCall_567668
proc url_GetApplicationTypeInfoList_568549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationTypeInfoList_568548(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: JInt
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568550 = query.getOrDefault("timeout")
  valid_568550 = validateParameter(valid_568550, JInt, required = false,
                                 default = newJInt(60))
  if valid_568550 != nil:
    section.add "timeout", valid_568550
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568551 = query.getOrDefault("api-version")
  valid_568551 = validateParameter(valid_568551, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568551 != nil:
    section.add "api-version", valid_568551
  var valid_568552 = query.getOrDefault("ApplicationTypeDefinitionKindFilter")
  valid_568552 = validateParameter(valid_568552, JInt, required = false,
                                 default = newJInt(0))
  if valid_568552 != nil:
    section.add "ApplicationTypeDefinitionKindFilter", valid_568552
  var valid_568553 = query.getOrDefault("ContinuationToken")
  valid_568553 = validateParameter(valid_568553, JString, required = false,
                                 default = nil)
  if valid_568553 != nil:
    section.add "ContinuationToken", valid_568553
  var valid_568554 = query.getOrDefault("MaxResults")
  valid_568554 = validateParameter(valid_568554, JInt, required = false,
                                 default = newJInt(0))
  if valid_568554 != nil:
    section.add "MaxResults", valid_568554
  var valid_568555 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568555 = validateParameter(valid_568555, JBool, required = false,
                                 default = newJBool(false))
  if valid_568555 != nil:
    section.add "ExcludeApplicationParameters", valid_568555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568556: Call_GetApplicationTypeInfoList_568547; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_568556.validator(path, query, header, formData, body)
  let scheme = call_568556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568556.url(scheme.get, call_568556.host, call_568556.base,
                         call_568556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568556, url, valid)

proc call*(call_568557: Call_GetApplicationTypeInfoList_568547; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationTypeDefinitionKindFilter: int = 0;
          ContinuationToken: string = ""; MaxResults: int = 0;
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoList
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: int
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_568558 = newJObject()
  add(query_568558, "timeout", newJInt(timeout))
  add(query_568558, "api-version", newJString(apiVersion))
  add(query_568558, "ApplicationTypeDefinitionKindFilter",
      newJInt(ApplicationTypeDefinitionKindFilter))
  add(query_568558, "ContinuationToken", newJString(ContinuationToken))
  add(query_568558, "MaxResults", newJInt(MaxResults))
  add(query_568558, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568557.call(nil, query_568558, nil, nil, nil)

var getApplicationTypeInfoList* = Call_GetApplicationTypeInfoList_568547(
    name: "getApplicationTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes",
    validator: validate_GetApplicationTypeInfoList_568548, base: "",
    url: url_GetApplicationTypeInfoList_568549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionApplicationType_568559 = ref object of OpenApiRestCall_567668
proc url_ProvisionApplicationType_568561(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionApplicationType_568560(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568562 = query.getOrDefault("timeout")
  valid_568562 = validateParameter(valid_568562, JInt, required = false,
                                 default = newJInt(60))
  if valid_568562 != nil:
    section.add "timeout", valid_568562
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568563 = query.getOrDefault("api-version")
  valid_568563 = validateParameter(valid_568563, JString, required = true,
                                 default = newJString("6.2"))
  if valid_568563 != nil:
    section.add "api-version", valid_568563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568565: Call_ProvisionApplicationType_568559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  let valid = call_568565.validator(path, query, header, formData, body)
  let scheme = call_568565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568565.url(scheme.get, call_568565.host, call_568565.base,
                         call_568565.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568565, url, valid)

proc call*(call_568566: Call_ProvisionApplicationType_568559;
          ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## provisionApplicationType
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  var query_568567 = newJObject()
  var body_568568 = newJObject()
  add(query_568567, "timeout", newJInt(timeout))
  add(query_568567, "api-version", newJString(apiVersion))
  if ProvisionApplicationTypeDescriptionBaseRequiredBodyParam != nil:
    body_568568 = ProvisionApplicationTypeDescriptionBaseRequiredBodyParam
  result = call_568566.call(nil, query_568567, nil, nil, body_568568)

var provisionApplicationType* = Call_ProvisionApplicationType_568559(
    name: "provisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ApplicationTypes/$/Provision",
    validator: validate_ProvisionApplicationType_568560, base: "",
    url: url_ProvisionApplicationType_568561, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoListByName_568569 = ref object of OpenApiRestCall_567668
proc url_GetApplicationTypeInfoListByName_568571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationTypeInfoListByName_568570(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568586 = path.getOrDefault("applicationTypeName")
  valid_568586 = validateParameter(valid_568586, JString, required = true,
                                 default = nil)
  if valid_568586 != nil:
    section.add "applicationTypeName", valid_568586
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString
  ##                         : The version of the application type.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568587 = query.getOrDefault("timeout")
  valid_568587 = validateParameter(valid_568587, JInt, required = false,
                                 default = newJInt(60))
  if valid_568587 != nil:
    section.add "timeout", valid_568587
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568588 = query.getOrDefault("api-version")
  valid_568588 = validateParameter(valid_568588, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568588 != nil:
    section.add "api-version", valid_568588
  var valid_568589 = query.getOrDefault("ApplicationTypeVersion")
  valid_568589 = validateParameter(valid_568589, JString, required = false,
                                 default = nil)
  if valid_568589 != nil:
    section.add "ApplicationTypeVersion", valid_568589
  var valid_568590 = query.getOrDefault("ContinuationToken")
  valid_568590 = validateParameter(valid_568590, JString, required = false,
                                 default = nil)
  if valid_568590 != nil:
    section.add "ContinuationToken", valid_568590
  var valid_568591 = query.getOrDefault("MaxResults")
  valid_568591 = validateParameter(valid_568591, JInt, required = false,
                                 default = newJInt(0))
  if valid_568591 != nil:
    section.add "MaxResults", valid_568591
  var valid_568592 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568592 = validateParameter(valid_568592, JBool, required = false,
                                 default = newJBool(false))
  if valid_568592 != nil:
    section.add "ExcludeApplicationParameters", valid_568592
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568593: Call_GetApplicationTypeInfoListByName_568569;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_568593.validator(path, query, header, formData, body)
  let scheme = call_568593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568593.url(scheme.get, call_568593.host, call_568593.base,
                         call_568593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568593, url, valid)

proc call*(call_568594: Call_GetApplicationTypeInfoListByName_568569;
          applicationTypeName: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationTypeVersion: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoListByName
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string
  ##                         : The version of the application type.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_568595 = newJObject()
  var query_568596 = newJObject()
  add(query_568596, "timeout", newJInt(timeout))
  add(query_568596, "api-version", newJString(apiVersion))
  add(path_568595, "applicationTypeName", newJString(applicationTypeName))
  add(query_568596, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_568596, "ContinuationToken", newJString(ContinuationToken))
  add(query_568596, "MaxResults", newJInt(MaxResults))
  add(query_568596, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568594.call(path_568595, query_568596, nil, nil, nil)

var getApplicationTypeInfoListByName* = Call_GetApplicationTypeInfoListByName_568569(
    name: "getApplicationTypeInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}",
    validator: validate_GetApplicationTypeInfoListByName_568570, base: "",
    url: url_GetApplicationTypeInfoListByName_568571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationManifest_568597 = ref object of OpenApiRestCall_567668
proc url_GetApplicationManifest_568599(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetApplicationManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationManifest_568598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response contains the application manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568600 = path.getOrDefault("applicationTypeName")
  valid_568600 = validateParameter(valid_568600, JString, required = true,
                                 default = nil)
  if valid_568600 != nil:
    section.add "applicationTypeName", valid_568600
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_568601 = query.getOrDefault("timeout")
  valid_568601 = validateParameter(valid_568601, JInt, required = false,
                                 default = newJInt(60))
  if valid_568601 != nil:
    section.add "timeout", valid_568601
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568602 = query.getOrDefault("api-version")
  valid_568602 = validateParameter(valid_568602, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568602 != nil:
    section.add "api-version", valid_568602
  var valid_568603 = query.getOrDefault("ApplicationTypeVersion")
  valid_568603 = validateParameter(valid_568603, JString, required = true,
                                 default = nil)
  if valid_568603 != nil:
    section.add "ApplicationTypeVersion", valid_568603
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568604: Call_GetApplicationManifest_568597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response contains the application manifest XML as a string.
  ## 
  let valid = call_568604.validator(path, query, header, formData, body)
  let scheme = call_568604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568604.url(scheme.get, call_568604.host, call_568604.base,
                         call_568604.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568604, url, valid)

proc call*(call_568605: Call_GetApplicationManifest_568597;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationManifest
  ## The response contains the application manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_568606 = newJObject()
  var query_568607 = newJObject()
  add(query_568607, "timeout", newJInt(timeout))
  add(query_568607, "api-version", newJString(apiVersion))
  add(path_568606, "applicationTypeName", newJString(applicationTypeName))
  add(query_568607, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_568605.call(path_568606, query_568607, nil, nil, nil)

var getApplicationManifest* = Call_GetApplicationManifest_568597(
    name: "getApplicationManifest", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest",
    validator: validate_GetApplicationManifest_568598, base: "",
    url: url_GetApplicationManifest_568599, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceManifest_568608 = ref object of OpenApiRestCall_567668
proc url_GetServiceManifest_568610(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceManifest_568609(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568611 = path.getOrDefault("applicationTypeName")
  valid_568611 = validateParameter(valid_568611, JString, required = true,
                                 default = nil)
  if valid_568611 != nil:
    section.add "applicationTypeName", valid_568611
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_568612 = query.getOrDefault("timeout")
  valid_568612 = validateParameter(valid_568612, JInt, required = false,
                                 default = newJInt(60))
  if valid_568612 != nil:
    section.add "timeout", valid_568612
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568613 = query.getOrDefault("api-version")
  valid_568613 = validateParameter(valid_568613, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568613 != nil:
    section.add "api-version", valid_568613
  var valid_568614 = query.getOrDefault("ApplicationTypeVersion")
  valid_568614 = validateParameter(valid_568614, JString, required = true,
                                 default = nil)
  if valid_568614 != nil:
    section.add "ApplicationTypeVersion", valid_568614
  var valid_568615 = query.getOrDefault("ServiceManifestName")
  valid_568615 = validateParameter(valid_568615, JString, required = true,
                                 default = nil)
  if valid_568615 != nil:
    section.add "ServiceManifestName", valid_568615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568616: Call_GetServiceManifest_568608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  let valid = call_568616.validator(path, query, header, formData, body)
  let scheme = call_568616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568616.url(scheme.get, call_568616.host, call_568616.base,
                         call_568616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568616, url, valid)

proc call*(call_568617: Call_GetServiceManifest_568608;
          applicationTypeName: string; ApplicationTypeVersion: string;
          ServiceManifestName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceManifest
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  var path_568618 = newJObject()
  var query_568619 = newJObject()
  add(query_568619, "timeout", newJInt(timeout))
  add(query_568619, "api-version", newJString(apiVersion))
  add(path_568618, "applicationTypeName", newJString(applicationTypeName))
  add(query_568619, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_568619, "ServiceManifestName", newJString(ServiceManifestName))
  result = call_568617.call(path_568618, query_568619, nil, nil, nil)

var getServiceManifest* = Call_GetServiceManifest_568608(
    name: "getServiceManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest",
    validator: validate_GetServiceManifest_568609, base: "",
    url: url_GetServiceManifest_568610, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoList_568620 = ref object of OpenApiRestCall_567668
proc url_GetServiceTypeInfoList_568622(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoList_568621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568623 = path.getOrDefault("applicationTypeName")
  valid_568623 = validateParameter(valid_568623, JString, required = true,
                                 default = nil)
  if valid_568623 != nil:
    section.add "applicationTypeName", valid_568623
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_568624 = query.getOrDefault("timeout")
  valid_568624 = validateParameter(valid_568624, JInt, required = false,
                                 default = newJInt(60))
  if valid_568624 != nil:
    section.add "timeout", valid_568624
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568625 = query.getOrDefault("api-version")
  valid_568625 = validateParameter(valid_568625, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568625 != nil:
    section.add "api-version", valid_568625
  var valid_568626 = query.getOrDefault("ApplicationTypeVersion")
  valid_568626 = validateParameter(valid_568626, JString, required = true,
                                 default = nil)
  if valid_568626 != nil:
    section.add "ApplicationTypeVersion", valid_568626
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568627: Call_GetServiceTypeInfoList_568620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  let valid = call_568627.validator(path, query, header, formData, body)
  let scheme = call_568627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568627.url(scheme.get, call_568627.host, call_568627.base,
                         call_568627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568627, url, valid)

proc call*(call_568628: Call_GetServiceTypeInfoList_568620;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoList
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_568629 = newJObject()
  var query_568630 = newJObject()
  add(query_568630, "timeout", newJInt(timeout))
  add(query_568630, "api-version", newJString(apiVersion))
  add(path_568629, "applicationTypeName", newJString(applicationTypeName))
  add(query_568630, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_568628.call(path_568629, query_568630, nil, nil, nil)

var getServiceTypeInfoList* = Call_GetServiceTypeInfoList_568620(
    name: "getServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes",
    validator: validate_GetServiceTypeInfoList_568621, base: "",
    url: url_GetServiceTypeInfoList_568622, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoByName_568631 = ref object of OpenApiRestCall_567668
proc url_GetServiceTypeInfoByName_568633(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoByName_568632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_568634 = path.getOrDefault("serviceTypeName")
  valid_568634 = validateParameter(valid_568634, JString, required = true,
                                 default = nil)
  if valid_568634 != nil:
    section.add "serviceTypeName", valid_568634
  var valid_568635 = path.getOrDefault("applicationTypeName")
  valid_568635 = validateParameter(valid_568635, JString, required = true,
                                 default = nil)
  if valid_568635 != nil:
    section.add "applicationTypeName", valid_568635
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_568636 = query.getOrDefault("timeout")
  valid_568636 = validateParameter(valid_568636, JInt, required = false,
                                 default = newJInt(60))
  if valid_568636 != nil:
    section.add "timeout", valid_568636
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568637 = query.getOrDefault("api-version")
  valid_568637 = validateParameter(valid_568637, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568637 != nil:
    section.add "api-version", valid_568637
  var valid_568638 = query.getOrDefault("ApplicationTypeVersion")
  valid_568638 = validateParameter(valid_568638, JString, required = true,
                                 default = nil)
  if valid_568638 != nil:
    section.add "ApplicationTypeVersion", valid_568638
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568639: Call_GetServiceTypeInfoByName_568631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  let valid = call_568639.validator(path, query, header, formData, body)
  let scheme = call_568639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568639.url(scheme.get, call_568639.host, call_568639.base,
                         call_568639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568639, url, valid)

proc call*(call_568640: Call_GetServiceTypeInfoByName_568631;
          serviceTypeName: string; applicationTypeName: string;
          ApplicationTypeVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoByName
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_568641 = newJObject()
  var query_568642 = newJObject()
  add(query_568642, "timeout", newJInt(timeout))
  add(path_568641, "serviceTypeName", newJString(serviceTypeName))
  add(query_568642, "api-version", newJString(apiVersion))
  add(path_568641, "applicationTypeName", newJString(applicationTypeName))
  add(query_568642, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_568640.call(path_568641, query_568642, nil, nil, nil)

var getServiceTypeInfoByName* = Call_GetServiceTypeInfoByName_568631(
    name: "getServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetServiceTypeInfoByName_568632, base: "",
    url: url_GetServiceTypeInfoByName_568633, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionApplicationType_568643 = ref object of OpenApiRestCall_567668
proc url_UnprovisionApplicationType_568645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/Unprovision")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UnprovisionApplicationType_568644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568646 = path.getOrDefault("applicationTypeName")
  valid_568646 = validateParameter(valid_568646, JString, required = true,
                                 default = nil)
  if valid_568646 != nil:
    section.add "applicationTypeName", valid_568646
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568647 = query.getOrDefault("timeout")
  valid_568647 = validateParameter(valid_568647, JInt, required = false,
                                 default = newJInt(60))
  if valid_568647 != nil:
    section.add "timeout", valid_568647
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568648 = query.getOrDefault("api-version")
  valid_568648 = validateParameter(valid_568648, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568648 != nil:
    section.add "api-version", valid_568648
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568650: Call_UnprovisionApplicationType_568643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  let valid = call_568650.validator(path, query, header, formData, body)
  let scheme = call_568650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568650.url(scheme.get, call_568650.host, call_568650.base,
                         call_568650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568650, url, valid)

proc call*(call_568651: Call_UnprovisionApplicationType_568643;
          applicationTypeName: string;
          UnprovisionApplicationTypeDescriptionInfo: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionApplicationType
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  var path_568652 = newJObject()
  var query_568653 = newJObject()
  var body_568654 = newJObject()
  add(query_568653, "timeout", newJInt(timeout))
  add(query_568653, "api-version", newJString(apiVersion))
  add(path_568652, "applicationTypeName", newJString(applicationTypeName))
  if UnprovisionApplicationTypeDescriptionInfo != nil:
    body_568654 = UnprovisionApplicationTypeDescriptionInfo
  result = call_568651.call(path_568652, query_568653, nil, nil, body_568654)

var unprovisionApplicationType* = Call_UnprovisionApplicationType_568643(
    name: "unprovisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/Unprovision",
    validator: validate_UnprovisionApplicationType_568644, base: "",
    url: url_UnprovisionApplicationType_568645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfoList_568655 = ref object of OpenApiRestCall_567668
proc url_GetApplicationInfoList_568657(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationInfoList_568656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: JInt
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: JString
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568658 = query.getOrDefault("timeout")
  valid_568658 = validateParameter(valid_568658, JInt, required = false,
                                 default = newJInt(60))
  if valid_568658 != nil:
    section.add "timeout", valid_568658
  var valid_568659 = query.getOrDefault("ApplicationDefinitionKindFilter")
  valid_568659 = validateParameter(valid_568659, JInt, required = false,
                                 default = newJInt(0))
  if valid_568659 != nil:
    section.add "ApplicationDefinitionKindFilter", valid_568659
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568660 = query.getOrDefault("api-version")
  valid_568660 = validateParameter(valid_568660, JString, required = true,
                                 default = newJString("6.1"))
  if valid_568660 != nil:
    section.add "api-version", valid_568660
  var valid_568661 = query.getOrDefault("ApplicationTypeName")
  valid_568661 = validateParameter(valid_568661, JString, required = false,
                                 default = nil)
  if valid_568661 != nil:
    section.add "ApplicationTypeName", valid_568661
  var valid_568662 = query.getOrDefault("ContinuationToken")
  valid_568662 = validateParameter(valid_568662, JString, required = false,
                                 default = nil)
  if valid_568662 != nil:
    section.add "ContinuationToken", valid_568662
  var valid_568663 = query.getOrDefault("MaxResults")
  valid_568663 = validateParameter(valid_568663, JInt, required = false,
                                 default = newJInt(0))
  if valid_568663 != nil:
    section.add "MaxResults", valid_568663
  var valid_568664 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568664 = validateParameter(valid_568664, JBool, required = false,
                                 default = newJBool(false))
  if valid_568664 != nil:
    section.add "ExcludeApplicationParameters", valid_568664
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568665: Call_GetApplicationInfoList_568655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  let valid = call_568665.validator(path, query, header, formData, body)
  let scheme = call_568665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568665.url(scheme.get, call_568665.host, call_568665.base,
                         call_568665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568665, url, valid)

proc call*(call_568666: Call_GetApplicationInfoList_568655; timeout: int = 60;
          ApplicationDefinitionKindFilter: int = 0; apiVersion: string = "6.1";
          ApplicationTypeName: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfoList
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: int
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: string
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_568667 = newJObject()
  add(query_568667, "timeout", newJInt(timeout))
  add(query_568667, "ApplicationDefinitionKindFilter",
      newJInt(ApplicationDefinitionKindFilter))
  add(query_568667, "api-version", newJString(apiVersion))
  add(query_568667, "ApplicationTypeName", newJString(ApplicationTypeName))
  add(query_568667, "ContinuationToken", newJString(ContinuationToken))
  add(query_568667, "MaxResults", newJInt(MaxResults))
  add(query_568667, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568666.call(nil, query_568667, nil, nil, nil)

var getApplicationInfoList* = Call_GetApplicationInfoList_568655(
    name: "getApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications",
    validator: validate_GetApplicationInfoList_568656, base: "",
    url: url_GetApplicationInfoList_568657, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateApplication_568668 = ref object of OpenApiRestCall_567668
proc url_CreateApplication_568670(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateApplication_568669(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a Service Fabric application using the specified description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568671 = query.getOrDefault("timeout")
  valid_568671 = validateParameter(valid_568671, JInt, required = false,
                                 default = newJInt(60))
  if valid_568671 != nil:
    section.add "timeout", valid_568671
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568672 = query.getOrDefault("api-version")
  valid_568672 = validateParameter(valid_568672, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568672 != nil:
    section.add "api-version", valid_568672
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568674: Call_CreateApplication_568668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric application using the specified description.
  ## 
  let valid = call_568674.validator(path, query, header, formData, body)
  let scheme = call_568674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568674.url(scheme.get, call_568674.host, call_568674.base,
                         call_568674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568674, url, valid)

proc call*(call_568675: Call_CreateApplication_568668;
          ApplicationDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## createApplication
  ## Creates a Service Fabric application using the specified description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  var query_568676 = newJObject()
  var body_568677 = newJObject()
  add(query_568676, "timeout", newJInt(timeout))
  add(query_568676, "api-version", newJString(apiVersion))
  if ApplicationDescription != nil:
    body_568677 = ApplicationDescription
  result = call_568675.call(nil, query_568676, nil, nil, body_568677)

var createApplication* = Call_CreateApplication_568668(name: "createApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/$/Create", validator: validate_CreateApplication_568669,
    base: "", url: url_CreateApplication_568670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfo_568678 = ref object of OpenApiRestCall_567668
proc url_GetApplicationInfo_568680(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationInfo_568679(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568681 = path.getOrDefault("applicationId")
  valid_568681 = validateParameter(valid_568681, JString, required = true,
                                 default = nil)
  if valid_568681 != nil:
    section.add "applicationId", valid_568681
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568682 = query.getOrDefault("timeout")
  valid_568682 = validateParameter(valid_568682, JInt, required = false,
                                 default = newJInt(60))
  if valid_568682 != nil:
    section.add "timeout", valid_568682
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568683 = query.getOrDefault("api-version")
  valid_568683 = validateParameter(valid_568683, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568683 != nil:
    section.add "api-version", valid_568683
  var valid_568684 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568684 = validateParameter(valid_568684, JBool, required = false,
                                 default = newJBool(false))
  if valid_568684 != nil:
    section.add "ExcludeApplicationParameters", valid_568684
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568685: Call_GetApplicationInfo_568678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  let valid = call_568685.validator(path, query, header, formData, body)
  let scheme = call_568685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568685.url(scheme.get, call_568685.host, call_568685.base,
                         call_568685.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568685, url, valid)

proc call*(call_568686: Call_GetApplicationInfo_568678; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfo
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_568687 = newJObject()
  var query_568688 = newJObject()
  add(query_568688, "timeout", newJInt(timeout))
  add(query_568688, "api-version", newJString(apiVersion))
  add(path_568687, "applicationId", newJString(applicationId))
  add(query_568688, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568686.call(path_568687, query_568688, nil, nil, nil)

var getApplicationInfo* = Call_GetApplicationInfo_568678(
    name: "getApplicationInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}",
    validator: validate_GetApplicationInfo_568679, base: "",
    url: url_GetApplicationInfo_568680, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteApplication_568689 = ref object of OpenApiRestCall_567668
proc url_DeleteApplication_568691(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteApplication_568690(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568692 = path.getOrDefault("applicationId")
  valid_568692 = validateParameter(valid_568692, JString, required = true,
                                 default = nil)
  if valid_568692 != nil:
    section.add "applicationId", valid_568692
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_568693 = query.getOrDefault("timeout")
  valid_568693 = validateParameter(valid_568693, JInt, required = false,
                                 default = newJInt(60))
  if valid_568693 != nil:
    section.add "timeout", valid_568693
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568694 = query.getOrDefault("api-version")
  valid_568694 = validateParameter(valid_568694, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568694 != nil:
    section.add "api-version", valid_568694
  var valid_568695 = query.getOrDefault("ForceRemove")
  valid_568695 = validateParameter(valid_568695, JBool, required = false, default = nil)
  if valid_568695 != nil:
    section.add "ForceRemove", valid_568695
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568696: Call_DeleteApplication_568689; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  let valid = call_568696.validator(path, query, header, formData, body)
  let scheme = call_568696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568696.url(scheme.get, call_568696.host, call_568696.base,
                         call_568696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568696, url, valid)

proc call*(call_568697: Call_DeleteApplication_568689; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteApplication
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568698 = newJObject()
  var query_568699 = newJObject()
  add(query_568699, "timeout", newJInt(timeout))
  add(query_568699, "api-version", newJString(apiVersion))
  add(query_568699, "ForceRemove", newJBool(ForceRemove))
  add(path_568698, "applicationId", newJString(applicationId))
  result = call_568697.call(path_568698, query_568699, nil, nil, nil)

var deleteApplication* = Call_DeleteApplication_568689(name: "deleteApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/Delete",
    validator: validate_DeleteApplication_568690, base: "",
    url: url_DeleteApplication_568691, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableApplicationBackup_568700 = ref object of OpenApiRestCall_567668
proc url_DisableApplicationBackup_568702(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableApplicationBackup_568701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568703 = path.getOrDefault("applicationId")
  valid_568703 = validateParameter(valid_568703, JString, required = true,
                                 default = nil)
  if valid_568703 != nil:
    section.add "applicationId", valid_568703
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568704 = query.getOrDefault("timeout")
  valid_568704 = validateParameter(valid_568704, JInt, required = false,
                                 default = newJInt(60))
  if valid_568704 != nil:
    section.add "timeout", valid_568704
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568705 = query.getOrDefault("api-version")
  valid_568705 = validateParameter(valid_568705, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568705 != nil:
    section.add "api-version", valid_568705
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568707: Call_DisableApplicationBackup_568700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  let valid = call_568707.validator(path, query, header, formData, body)
  let scheme = call_568707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568707.url(scheme.get, call_568707.host, call_568707.base,
                         call_568707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568707, url, valid)

proc call*(call_568708: Call_DisableApplicationBackup_568700;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableApplicationBackup
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568709 = newJObject()
  var query_568710 = newJObject()
  var body_568711 = newJObject()
  add(query_568710, "timeout", newJInt(timeout))
  add(query_568710, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_568711 = DisableBackupDescription
  add(path_568709, "applicationId", newJString(applicationId))
  result = call_568708.call(path_568709, query_568710, nil, nil, body_568711)

var disableApplicationBackup* = Call_DisableApplicationBackup_568700(
    name: "disableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/DisableBackup",
    validator: validate_DisableApplicationBackup_568701, base: "",
    url: url_DisableApplicationBackup_568702, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableApplicationBackup_568712 = ref object of OpenApiRestCall_567668
proc url_EnableApplicationBackup_568714(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableApplicationBackup_568713(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568715 = path.getOrDefault("applicationId")
  valid_568715 = validateParameter(valid_568715, JString, required = true,
                                 default = nil)
  if valid_568715 != nil:
    section.add "applicationId", valid_568715
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568716 = query.getOrDefault("timeout")
  valid_568716 = validateParameter(valid_568716, JInt, required = false,
                                 default = newJInt(60))
  if valid_568716 != nil:
    section.add "timeout", valid_568716
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568717 = query.getOrDefault("api-version")
  valid_568717 = validateParameter(valid_568717, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568717 != nil:
    section.add "api-version", valid_568717
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568719: Call_EnableApplicationBackup_568712; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_568719.validator(path, query, header, formData, body)
  let scheme = call_568719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568719.url(scheme.get, call_568719.host, call_568719.base,
                         call_568719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568719, url, valid)

proc call*(call_568720: Call_EnableApplicationBackup_568712;
          EnableBackupDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## enableApplicationBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568721 = newJObject()
  var query_568722 = newJObject()
  var body_568723 = newJObject()
  add(query_568722, "timeout", newJInt(timeout))
  add(query_568722, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_568723 = EnableBackupDescription
  add(path_568721, "applicationId", newJString(applicationId))
  result = call_568720.call(path_568721, query_568722, nil, nil, body_568723)

var enableApplicationBackup* = Call_EnableApplicationBackup_568712(
    name: "enableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/EnableBackup",
    validator: validate_EnableApplicationBackup_568713, base: "",
    url: url_EnableApplicationBackup_568714, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupConfigurationInfo_568724 = ref object of OpenApiRestCall_567668
proc url_GetApplicationBackupConfigurationInfo_568726(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupConfigurationInfo_568725(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568727 = path.getOrDefault("applicationId")
  valid_568727 = validateParameter(valid_568727, JString, required = true,
                                 default = nil)
  if valid_568727 != nil:
    section.add "applicationId", valid_568727
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568728 = query.getOrDefault("timeout")
  valid_568728 = validateParameter(valid_568728, JInt, required = false,
                                 default = newJInt(60))
  if valid_568728 != nil:
    section.add "timeout", valid_568728
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568729 = query.getOrDefault("api-version")
  valid_568729 = validateParameter(valid_568729, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568729 != nil:
    section.add "api-version", valid_568729
  var valid_568730 = query.getOrDefault("ContinuationToken")
  valid_568730 = validateParameter(valid_568730, JString, required = false,
                                 default = nil)
  if valid_568730 != nil:
    section.add "ContinuationToken", valid_568730
  var valid_568731 = query.getOrDefault("MaxResults")
  valid_568731 = validateParameter(valid_568731, JInt, required = false,
                                 default = newJInt(0))
  if valid_568731 != nil:
    section.add "MaxResults", valid_568731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568732: Call_GetApplicationBackupConfigurationInfo_568724;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  let valid = call_568732.validator(path, query, header, formData, body)
  let scheme = call_568732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568732.url(scheme.get, call_568732.host, call_568732.base,
                         call_568732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568732, url, valid)

proc call*(call_568733: Call_GetApplicationBackupConfigurationInfo_568724;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getApplicationBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_568734 = newJObject()
  var query_568735 = newJObject()
  add(query_568735, "timeout", newJInt(timeout))
  add(query_568735, "api-version", newJString(apiVersion))
  add(path_568734, "applicationId", newJString(applicationId))
  add(query_568735, "ContinuationToken", newJString(ContinuationToken))
  add(query_568735, "MaxResults", newJInt(MaxResults))
  result = call_568733.call(path_568734, query_568735, nil, nil, nil)

var getApplicationBackupConfigurationInfo* = Call_GetApplicationBackupConfigurationInfo_568724(
    name: "getApplicationBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackupConfigurationInfo",
    validator: validate_GetApplicationBackupConfigurationInfo_568725, base: "",
    url: url_GetApplicationBackupConfigurationInfo_568726,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupList_568736 = ref object of OpenApiRestCall_567668
proc url_GetApplicationBackupList_568738(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupList_568737(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568739 = path.getOrDefault("applicationId")
  valid_568739 = validateParameter(valid_568739, JString, required = true,
                                 default = nil)
  if valid_568739 != nil:
    section.add "applicationId", valid_568739
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568740 = query.getOrDefault("timeout")
  valid_568740 = validateParameter(valid_568740, JInt, required = false,
                                 default = newJInt(60))
  if valid_568740 != nil:
    section.add "timeout", valid_568740
  var valid_568741 = query.getOrDefault("Latest")
  valid_568741 = validateParameter(valid_568741, JBool, required = false,
                                 default = newJBool(false))
  if valid_568741 != nil:
    section.add "Latest", valid_568741
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568742 = query.getOrDefault("api-version")
  valid_568742 = validateParameter(valid_568742, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568742 != nil:
    section.add "api-version", valid_568742
  var valid_568743 = query.getOrDefault("StartDateTimeFilter")
  valid_568743 = validateParameter(valid_568743, JString, required = false,
                                 default = nil)
  if valid_568743 != nil:
    section.add "StartDateTimeFilter", valid_568743
  var valid_568744 = query.getOrDefault("EndDateTimeFilter")
  valid_568744 = validateParameter(valid_568744, JString, required = false,
                                 default = nil)
  if valid_568744 != nil:
    section.add "EndDateTimeFilter", valid_568744
  var valid_568745 = query.getOrDefault("ContinuationToken")
  valid_568745 = validateParameter(valid_568745, JString, required = false,
                                 default = nil)
  if valid_568745 != nil:
    section.add "ContinuationToken", valid_568745
  var valid_568746 = query.getOrDefault("MaxResults")
  valid_568746 = validateParameter(valid_568746, JInt, required = false,
                                 default = newJInt(0))
  if valid_568746 != nil:
    section.add "MaxResults", valid_568746
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568747: Call_GetApplicationBackupList_568736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_568747.validator(path, query, header, formData, body)
  let scheme = call_568747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568747.url(scheme.get, call_568747.host, call_568747.base,
                         call_568747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568747, url, valid)

proc call*(call_568748: Call_GetApplicationBackupList_568736;
          applicationId: string; timeout: int = 60; Latest: bool = false;
          apiVersion: string = "6.4"; StartDateTimeFilter: string = "";
          EndDateTimeFilter: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getApplicationBackupList
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_568749 = newJObject()
  var query_568750 = newJObject()
  add(query_568750, "timeout", newJInt(timeout))
  add(query_568750, "Latest", newJBool(Latest))
  add(query_568750, "api-version", newJString(apiVersion))
  add(query_568750, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_568750, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_568749, "applicationId", newJString(applicationId))
  add(query_568750, "ContinuationToken", newJString(ContinuationToken))
  add(query_568750, "MaxResults", newJInt(MaxResults))
  result = call_568748.call(path_568749, query_568750, nil, nil, nil)

var getApplicationBackupList* = Call_GetApplicationBackupList_568736(
    name: "getApplicationBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackups",
    validator: validate_GetApplicationBackupList_568737, base: "",
    url: url_GetApplicationBackupList_568738, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealthUsingPolicy_568765 = ref object of OpenApiRestCall_567668
proc url_GetApplicationHealthUsingPolicy_568767(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealthUsingPolicy_568766(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568768 = path.getOrDefault("applicationId")
  valid_568768 = validateParameter(valid_568768, JString, required = true,
                                 default = nil)
  if valid_568768 != nil:
    section.add "applicationId", valid_568768
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568769 = query.getOrDefault("timeout")
  valid_568769 = validateParameter(valid_568769, JInt, required = false,
                                 default = newJInt(60))
  if valid_568769 != nil:
    section.add "timeout", valid_568769
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568770 = query.getOrDefault("api-version")
  valid_568770 = validateParameter(valid_568770, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568770 != nil:
    section.add "api-version", valid_568770
  var valid_568771 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568771 = validateParameter(valid_568771, JBool, required = false,
                                 default = newJBool(false))
  if valid_568771 != nil:
    section.add "ExcludeHealthStatistics", valid_568771
  var valid_568772 = query.getOrDefault("EventsHealthStateFilter")
  valid_568772 = validateParameter(valid_568772, JInt, required = false,
                                 default = newJInt(0))
  if valid_568772 != nil:
    section.add "EventsHealthStateFilter", valid_568772
  var valid_568773 = query.getOrDefault("ServicesHealthStateFilter")
  valid_568773 = validateParameter(valid_568773, JInt, required = false,
                                 default = newJInt(0))
  if valid_568773 != nil:
    section.add "ServicesHealthStateFilter", valid_568773
  var valid_568774 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_568774 = validateParameter(valid_568774, JInt, required = false,
                                 default = newJInt(0))
  if valid_568774 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_568774
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568776: Call_GetApplicationHealthUsingPolicy_568765;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_568776.validator(path, query, header, formData, body)
  let scheme = call_568776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568776.url(scheme.get, call_568776.host, call_568776.base,
                         call_568776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568776, url, valid)

proc call*(call_568777: Call_GetApplicationHealthUsingPolicy_568765;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealthUsingPolicy
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_568778 = newJObject()
  var query_568779 = newJObject()
  var body_568780 = newJObject()
  add(query_568779, "timeout", newJInt(timeout))
  add(query_568779, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_568780 = ApplicationHealthPolicy
  add(query_568779, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568779, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_568778, "applicationId", newJString(applicationId))
  add(query_568779, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_568779, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_568777.call(path_568778, query_568779, nil, nil, body_568780)

var getApplicationHealthUsingPolicy* = Call_GetApplicationHealthUsingPolicy_568765(
    name: "getApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealthUsingPolicy_568766, base: "",
    url: url_GetApplicationHealthUsingPolicy_568767,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealth_568751 = ref object of OpenApiRestCall_567668
proc url_GetApplicationHealth_568753(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealth_568752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568754 = path.getOrDefault("applicationId")
  valid_568754 = validateParameter(valid_568754, JString, required = true,
                                 default = nil)
  if valid_568754 != nil:
    section.add "applicationId", valid_568754
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568755 = query.getOrDefault("timeout")
  valid_568755 = validateParameter(valid_568755, JInt, required = false,
                                 default = newJInt(60))
  if valid_568755 != nil:
    section.add "timeout", valid_568755
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568756 = query.getOrDefault("api-version")
  valid_568756 = validateParameter(valid_568756, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568756 != nil:
    section.add "api-version", valid_568756
  var valid_568757 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568757 = validateParameter(valid_568757, JBool, required = false,
                                 default = newJBool(false))
  if valid_568757 != nil:
    section.add "ExcludeHealthStatistics", valid_568757
  var valid_568758 = query.getOrDefault("EventsHealthStateFilter")
  valid_568758 = validateParameter(valid_568758, JInt, required = false,
                                 default = newJInt(0))
  if valid_568758 != nil:
    section.add "EventsHealthStateFilter", valid_568758
  var valid_568759 = query.getOrDefault("ServicesHealthStateFilter")
  valid_568759 = validateParameter(valid_568759, JInt, required = false,
                                 default = newJInt(0))
  if valid_568759 != nil:
    section.add "ServicesHealthStateFilter", valid_568759
  var valid_568760 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_568760 = validateParameter(valid_568760, JInt, required = false,
                                 default = newJInt(0))
  if valid_568760 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_568760
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568761: Call_GetApplicationHealth_568751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  let valid = call_568761.validator(path, query, header, formData, body)
  let scheme = call_568761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568761.url(scheme.get, call_568761.host, call_568761.base,
                         call_568761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568761, url, valid)

proc call*(call_568762: Call_GetApplicationHealth_568751; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealth
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_568763 = newJObject()
  var query_568764 = newJObject()
  add(query_568764, "timeout", newJInt(timeout))
  add(query_568764, "api-version", newJString(apiVersion))
  add(query_568764, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568764, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_568763, "applicationId", newJString(applicationId))
  add(query_568764, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_568764, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_568762.call(path_568763, query_568764, nil, nil, nil)

var getApplicationHealth* = Call_GetApplicationHealth_568751(
    name: "getApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealth_568752, base: "",
    url: url_GetApplicationHealth_568753, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationLoadInfo_568781 = ref object of OpenApiRestCall_567668
proc url_GetApplicationLoadInfo_568783(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationLoadInfo_568782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568784 = path.getOrDefault("applicationId")
  valid_568784 = validateParameter(valid_568784, JString, required = true,
                                 default = nil)
  if valid_568784 != nil:
    section.add "applicationId", valid_568784
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568785 = query.getOrDefault("timeout")
  valid_568785 = validateParameter(valid_568785, JInt, required = false,
                                 default = newJInt(60))
  if valid_568785 != nil:
    section.add "timeout", valid_568785
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568786 = query.getOrDefault("api-version")
  valid_568786 = validateParameter(valid_568786, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568786 != nil:
    section.add "api-version", valid_568786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568787: Call_GetApplicationLoadInfo_568781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  let valid = call_568787.validator(path, query, header, formData, body)
  let scheme = call_568787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568787.url(scheme.get, call_568787.host, call_568787.base,
                         call_568787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568787, url, valid)

proc call*(call_568788: Call_GetApplicationLoadInfo_568781; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationLoadInfo
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568789 = newJObject()
  var query_568790 = newJObject()
  add(query_568790, "timeout", newJInt(timeout))
  add(query_568790, "api-version", newJString(apiVersion))
  add(path_568789, "applicationId", newJString(applicationId))
  result = call_568788.call(path_568789, query_568790, nil, nil, nil)

var getApplicationLoadInfo* = Call_GetApplicationLoadInfo_568781(
    name: "getApplicationLoadInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetLoadInformation",
    validator: validate_GetApplicationLoadInfo_568782, base: "",
    url: url_GetApplicationLoadInfo_568783, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfoList_568791 = ref object of OpenApiRestCall_567668
proc url_GetServiceInfoList_568793(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfoList_568792(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568794 = path.getOrDefault("applicationId")
  valid_568794 = validateParameter(valid_568794, JString, required = true,
                                 default = nil)
  if valid_568794 != nil:
    section.add "applicationId", valid_568794
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: JString
  ##                  : The service type name used to filter the services to query for.
  section = newJObject()
  var valid_568795 = query.getOrDefault("timeout")
  valid_568795 = validateParameter(valid_568795, JInt, required = false,
                                 default = newJInt(60))
  if valid_568795 != nil:
    section.add "timeout", valid_568795
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568796 = query.getOrDefault("api-version")
  valid_568796 = validateParameter(valid_568796, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568796 != nil:
    section.add "api-version", valid_568796
  var valid_568797 = query.getOrDefault("ContinuationToken")
  valid_568797 = validateParameter(valid_568797, JString, required = false,
                                 default = nil)
  if valid_568797 != nil:
    section.add "ContinuationToken", valid_568797
  var valid_568798 = query.getOrDefault("ServiceTypeName")
  valid_568798 = validateParameter(valid_568798, JString, required = false,
                                 default = nil)
  if valid_568798 != nil:
    section.add "ServiceTypeName", valid_568798
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568799: Call_GetServiceInfoList_568791; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  let valid = call_568799.validator(path, query, header, formData, body)
  let scheme = call_568799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568799.url(scheme.get, call_568799.host, call_568799.base,
                         call_568799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568799, url, valid)

proc call*(call_568800: Call_GetServiceInfoList_568791; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          ServiceTypeName: string = ""): Recallable =
  ## getServiceInfoList
  ## Returns the information about all services belonging to the application specified by the application ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: string
  ##                  : The service type name used to filter the services to query for.
  var path_568801 = newJObject()
  var query_568802 = newJObject()
  add(query_568802, "timeout", newJInt(timeout))
  add(query_568802, "api-version", newJString(apiVersion))
  add(path_568801, "applicationId", newJString(applicationId))
  add(query_568802, "ContinuationToken", newJString(ContinuationToken))
  add(query_568802, "ServiceTypeName", newJString(ServiceTypeName))
  result = call_568800.call(path_568801, query_568802, nil, nil, nil)

var getServiceInfoList* = Call_GetServiceInfoList_568791(
    name: "getServiceInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices",
    validator: validate_GetServiceInfoList_568792, base: "",
    url: url_GetServiceInfoList_568793, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateService_568803 = ref object of OpenApiRestCall_567668
proc url_CreateService_568805(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/$/Create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateService_568804(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568806 = path.getOrDefault("applicationId")
  valid_568806 = validateParameter(valid_568806, JString, required = true,
                                 default = nil)
  if valid_568806 != nil:
    section.add "applicationId", valid_568806
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568807 = query.getOrDefault("timeout")
  valid_568807 = validateParameter(valid_568807, JInt, required = false,
                                 default = newJInt(60))
  if valid_568807 != nil:
    section.add "timeout", valid_568807
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568808 = query.getOrDefault("api-version")
  valid_568808 = validateParameter(valid_568808, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568808 != nil:
    section.add "api-version", valid_568808
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568810: Call_CreateService_568803; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  let valid = call_568810.validator(path, query, header, formData, body)
  let scheme = call_568810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568810.url(scheme.get, call_568810.host, call_568810.base,
                         call_568810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568810, url, valid)

proc call*(call_568811: Call_CreateService_568803; applicationId: string;
          ServiceDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createService
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  var path_568812 = newJObject()
  var query_568813 = newJObject()
  var body_568814 = newJObject()
  add(query_568813, "timeout", newJInt(timeout))
  add(query_568813, "api-version", newJString(apiVersion))
  add(path_568812, "applicationId", newJString(applicationId))
  if ServiceDescription != nil:
    body_568814 = ServiceDescription
  result = call_568811.call(path_568812, query_568813, nil, nil, body_568814)

var createService* = Call_CreateService_568803(name: "createService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/Create",
    validator: validate_CreateService_568804, base: "", url: url_CreateService_568805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateServiceFromTemplate_568815 = ref object of OpenApiRestCall_567668
proc url_CreateServiceFromTemplate_568817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetServices/$/CreateFromTemplate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateServiceFromTemplate_568816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568818 = path.getOrDefault("applicationId")
  valid_568818 = validateParameter(valid_568818, JString, required = true,
                                 default = nil)
  if valid_568818 != nil:
    section.add "applicationId", valid_568818
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568819 = query.getOrDefault("timeout")
  valid_568819 = validateParameter(valid_568819, JInt, required = false,
                                 default = newJInt(60))
  if valid_568819 != nil:
    section.add "timeout", valid_568819
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568820 = query.getOrDefault("api-version")
  valid_568820 = validateParameter(valid_568820, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568820 != nil:
    section.add "api-version", valid_568820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568822: Call_CreateServiceFromTemplate_568815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  let valid = call_568822.validator(path, query, header, formData, body)
  let scheme = call_568822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568822.url(scheme.get, call_568822.host, call_568822.base,
                         call_568822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568822, url, valid)

proc call*(call_568823: Call_CreateServiceFromTemplate_568815;
          ServiceFromTemplateDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createServiceFromTemplate
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568824 = newJObject()
  var query_568825 = newJObject()
  var body_568826 = newJObject()
  add(query_568825, "timeout", newJInt(timeout))
  add(query_568825, "api-version", newJString(apiVersion))
  if ServiceFromTemplateDescription != nil:
    body_568826 = ServiceFromTemplateDescription
  add(path_568824, "applicationId", newJString(applicationId))
  result = call_568823.call(path_568824, query_568825, nil, nil, body_568826)

var createServiceFromTemplate* = Call_CreateServiceFromTemplate_568815(
    name: "createServiceFromTemplate", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate",
    validator: validate_CreateServiceFromTemplate_568816, base: "",
    url: url_CreateServiceFromTemplate_568817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfo_568827 = ref object of OpenApiRestCall_567668
proc url_GetServiceInfo_568829(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/"),
               (kind: VariableSegment, value: "serviceId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfo_568828(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568830 = path.getOrDefault("applicationId")
  valid_568830 = validateParameter(valid_568830, JString, required = true,
                                 default = nil)
  if valid_568830 != nil:
    section.add "applicationId", valid_568830
  var valid_568831 = path.getOrDefault("serviceId")
  valid_568831 = validateParameter(valid_568831, JString, required = true,
                                 default = nil)
  if valid_568831 != nil:
    section.add "serviceId", valid_568831
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568832 = query.getOrDefault("timeout")
  valid_568832 = validateParameter(valid_568832, JInt, required = false,
                                 default = newJInt(60))
  if valid_568832 != nil:
    section.add "timeout", valid_568832
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568833 = query.getOrDefault("api-version")
  valid_568833 = validateParameter(valid_568833, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568833 != nil:
    section.add "api-version", valid_568833
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568834: Call_GetServiceInfo_568827; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  let valid = call_568834.validator(path, query, header, formData, body)
  let scheme = call_568834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568834.url(scheme.get, call_568834.host, call_568834.base,
                         call_568834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568834, url, valid)

proc call*(call_568835: Call_GetServiceInfo_568827; applicationId: string;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceInfo
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_568836 = newJObject()
  var query_568837 = newJObject()
  add(query_568837, "timeout", newJInt(timeout))
  add(query_568837, "api-version", newJString(apiVersion))
  add(path_568836, "applicationId", newJString(applicationId))
  add(path_568836, "serviceId", newJString(serviceId))
  result = call_568835.call(path_568836, query_568837, nil, nil, nil)

var getServiceInfo* = Call_GetServiceInfo_568827(name: "getServiceInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/{serviceId}",
    validator: validate_GetServiceInfo_568828, base: "", url: url_GetServiceInfo_568829,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationUpgrade_568838 = ref object of OpenApiRestCall_567668
proc url_GetApplicationUpgrade_568840(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationUpgrade_568839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568841 = path.getOrDefault("applicationId")
  valid_568841 = validateParameter(valid_568841, JString, required = true,
                                 default = nil)
  if valid_568841 != nil:
    section.add "applicationId", valid_568841
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568842 = query.getOrDefault("timeout")
  valid_568842 = validateParameter(valid_568842, JInt, required = false,
                                 default = newJInt(60))
  if valid_568842 != nil:
    section.add "timeout", valid_568842
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568843 = query.getOrDefault("api-version")
  valid_568843 = validateParameter(valid_568843, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568843 != nil:
    section.add "api-version", valid_568843
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568844: Call_GetApplicationUpgrade_568838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_568844.validator(path, query, header, formData, body)
  let scheme = call_568844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568844.url(scheme.get, call_568844.host, call_568844.base,
                         call_568844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568844, url, valid)

proc call*(call_568845: Call_GetApplicationUpgrade_568838; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationUpgrade
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568846 = newJObject()
  var query_568847 = newJObject()
  add(query_568847, "timeout", newJInt(timeout))
  add(query_568847, "api-version", newJString(apiVersion))
  add(path_568846, "applicationId", newJString(applicationId))
  result = call_568845.call(path_568846, query_568847, nil, nil, nil)

var getApplicationUpgrade* = Call_GetApplicationUpgrade_568838(
    name: "getApplicationUpgrade", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetUpgradeProgress",
    validator: validate_GetApplicationUpgrade_568839, base: "",
    url: url_GetApplicationUpgrade_568840, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationUpgrade_568848 = ref object of OpenApiRestCall_567668
proc url_ResumeApplicationUpgrade_568850(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/MoveToNextUpgradeDomain")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationUpgrade_568849(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568851 = path.getOrDefault("applicationId")
  valid_568851 = validateParameter(valid_568851, JString, required = true,
                                 default = nil)
  if valid_568851 != nil:
    section.add "applicationId", valid_568851
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568852 = query.getOrDefault("timeout")
  valid_568852 = validateParameter(valid_568852, JInt, required = false,
                                 default = newJInt(60))
  if valid_568852 != nil:
    section.add "timeout", valid_568852
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568853 = query.getOrDefault("api-version")
  valid_568853 = validateParameter(valid_568853, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568853 != nil:
    section.add "api-version", valid_568853
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568855: Call_ResumeApplicationUpgrade_568848; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  let valid = call_568855.validator(path, query, header, formData, body)
  let scheme = call_568855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568855.url(scheme.get, call_568855.host, call_568855.base,
                         call_568855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568855, url, valid)

proc call*(call_568856: Call_ResumeApplicationUpgrade_568848;
          ResumeApplicationUpgradeDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resumeApplicationUpgrade
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568857 = newJObject()
  var query_568858 = newJObject()
  var body_568859 = newJObject()
  add(query_568858, "timeout", newJInt(timeout))
  if ResumeApplicationUpgradeDescription != nil:
    body_568859 = ResumeApplicationUpgradeDescription
  add(query_568858, "api-version", newJString(apiVersion))
  add(path_568857, "applicationId", newJString(applicationId))
  result = call_568856.call(path_568857, query_568858, nil, nil, body_568859)

var resumeApplicationUpgrade* = Call_ResumeApplicationUpgrade_568848(
    name: "resumeApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeApplicationUpgrade_568849, base: "",
    url: url_ResumeApplicationUpgrade_568850, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportApplicationHealth_568860 = ref object of OpenApiRestCall_567668
proc url_ReportApplicationHealth_568862(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportApplicationHealth_568861(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568863 = path.getOrDefault("applicationId")
  valid_568863 = validateParameter(valid_568863, JString, required = true,
                                 default = nil)
  if valid_568863 != nil:
    section.add "applicationId", valid_568863
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568864 = query.getOrDefault("Immediate")
  valid_568864 = validateParameter(valid_568864, JBool, required = false,
                                 default = newJBool(false))
  if valid_568864 != nil:
    section.add "Immediate", valid_568864
  var valid_568865 = query.getOrDefault("timeout")
  valid_568865 = validateParameter(valid_568865, JInt, required = false,
                                 default = newJInt(60))
  if valid_568865 != nil:
    section.add "timeout", valid_568865
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568866 = query.getOrDefault("api-version")
  valid_568866 = validateParameter(valid_568866, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568866 != nil:
    section.add "api-version", valid_568866
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568868: Call_ReportApplicationHealth_568860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_568868.validator(path, query, header, formData, body)
  let scheme = call_568868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568868.url(scheme.get, call_568868.host, call_568868.base,
                         call_568868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568868, url, valid)

proc call*(call_568869: Call_ReportApplicationHealth_568860;
          HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportApplicationHealth
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568870 = newJObject()
  var query_568871 = newJObject()
  var body_568872 = newJObject()
  add(query_568871, "Immediate", newJBool(Immediate))
  add(query_568871, "timeout", newJInt(timeout))
  add(query_568871, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_568872 = HealthInformation
  add(path_568870, "applicationId", newJString(applicationId))
  result = call_568869.call(path_568870, query_568871, nil, nil, body_568872)

var reportApplicationHealth* = Call_ReportApplicationHealth_568860(
    name: "reportApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ReportHealth",
    validator: validate_ReportApplicationHealth_568861, base: "",
    url: url_ReportApplicationHealth_568862, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationBackup_568873 = ref object of OpenApiRestCall_567668
proc url_ResumeApplicationBackup_568875(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationBackup_568874(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568876 = path.getOrDefault("applicationId")
  valid_568876 = validateParameter(valid_568876, JString, required = true,
                                 default = nil)
  if valid_568876 != nil:
    section.add "applicationId", valid_568876
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568877 = query.getOrDefault("timeout")
  valid_568877 = validateParameter(valid_568877, JInt, required = false,
                                 default = newJInt(60))
  if valid_568877 != nil:
    section.add "timeout", valid_568877
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568878 = query.getOrDefault("api-version")
  valid_568878 = validateParameter(valid_568878, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568878 != nil:
    section.add "api-version", valid_568878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568879: Call_ResumeApplicationBackup_568873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_568879.validator(path, query, header, formData, body)
  let scheme = call_568879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568879.url(scheme.get, call_568879.host, call_568879.base,
                         call_568879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568879, url, valid)

proc call*(call_568880: Call_ResumeApplicationBackup_568873; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeApplicationBackup
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568881 = newJObject()
  var query_568882 = newJObject()
  add(query_568882, "timeout", newJInt(timeout))
  add(query_568882, "api-version", newJString(apiVersion))
  add(path_568881, "applicationId", newJString(applicationId))
  result = call_568880.call(path_568881, query_568882, nil, nil, nil)

var resumeApplicationBackup* = Call_ResumeApplicationBackup_568873(
    name: "resumeApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ResumeBackup",
    validator: validate_ResumeApplicationBackup_568874, base: "",
    url: url_ResumeApplicationBackup_568875, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackApplicationUpgrade_568883 = ref object of OpenApiRestCall_567668
proc url_RollbackApplicationUpgrade_568885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RollbackApplicationUpgrade_568884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568886 = path.getOrDefault("applicationId")
  valid_568886 = validateParameter(valid_568886, JString, required = true,
                                 default = nil)
  if valid_568886 != nil:
    section.add "applicationId", valid_568886
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568887 = query.getOrDefault("timeout")
  valid_568887 = validateParameter(valid_568887, JInt, required = false,
                                 default = newJInt(60))
  if valid_568887 != nil:
    section.add "timeout", valid_568887
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568888 = query.getOrDefault("api-version")
  valid_568888 = validateParameter(valid_568888, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568888 != nil:
    section.add "api-version", valid_568888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568889: Call_RollbackApplicationUpgrade_568883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  let valid = call_568889.validator(path, query, header, formData, body)
  let scheme = call_568889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568889.url(scheme.get, call_568889.host, call_568889.base,
                         call_568889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568889, url, valid)

proc call*(call_568890: Call_RollbackApplicationUpgrade_568883;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## rollbackApplicationUpgrade
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568891 = newJObject()
  var query_568892 = newJObject()
  add(query_568892, "timeout", newJInt(timeout))
  add(query_568892, "api-version", newJString(apiVersion))
  add(path_568891, "applicationId", newJString(applicationId))
  result = call_568890.call(path_568891, query_568892, nil, nil, nil)

var rollbackApplicationUpgrade* = Call_RollbackApplicationUpgrade_568883(
    name: "rollbackApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/RollbackUpgrade",
    validator: validate_RollbackApplicationUpgrade_568884, base: "",
    url: url_RollbackApplicationUpgrade_568885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendApplicationBackup_568893 = ref object of OpenApiRestCall_567668
proc url_SuspendApplicationBackup_568895(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendApplicationBackup_568894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568896 = path.getOrDefault("applicationId")
  valid_568896 = validateParameter(valid_568896, JString, required = true,
                                 default = nil)
  if valid_568896 != nil:
    section.add "applicationId", valid_568896
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568897 = query.getOrDefault("timeout")
  valid_568897 = validateParameter(valid_568897, JInt, required = false,
                                 default = newJInt(60))
  if valid_568897 != nil:
    section.add "timeout", valid_568897
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568898 = query.getOrDefault("api-version")
  valid_568898 = validateParameter(valid_568898, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568898 != nil:
    section.add "api-version", valid_568898
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568899: Call_SuspendApplicationBackup_568893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  let valid = call_568899.validator(path, query, header, formData, body)
  let scheme = call_568899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568899.url(scheme.get, call_568899.host, call_568899.base,
                         call_568899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568899, url, valid)

proc call*(call_568900: Call_SuspendApplicationBackup_568893;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendApplicationBackup
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568901 = newJObject()
  var query_568902 = newJObject()
  add(query_568902, "timeout", newJInt(timeout))
  add(query_568902, "api-version", newJString(apiVersion))
  add(path_568901, "applicationId", newJString(applicationId))
  result = call_568900.call(path_568901, query_568902, nil, nil, nil)

var suspendApplicationBackup* = Call_SuspendApplicationBackup_568893(
    name: "suspendApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/SuspendBackup",
    validator: validate_SuspendApplicationBackup_568894, base: "",
    url: url_SuspendApplicationBackup_568895, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateApplicationUpgrade_568903 = ref object of OpenApiRestCall_567668
proc url_UpdateApplicationUpgrade_568905(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/UpdateUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateApplicationUpgrade_568904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568906 = path.getOrDefault("applicationId")
  valid_568906 = validateParameter(valid_568906, JString, required = true,
                                 default = nil)
  if valid_568906 != nil:
    section.add "applicationId", valid_568906
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568907 = query.getOrDefault("timeout")
  valid_568907 = validateParameter(valid_568907, JInt, required = false,
                                 default = newJInt(60))
  if valid_568907 != nil:
    section.add "timeout", valid_568907
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568908 = query.getOrDefault("api-version")
  valid_568908 = validateParameter(valid_568908, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568908 != nil:
    section.add "api-version", valid_568908
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568910: Call_UpdateApplicationUpgrade_568903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  let valid = call_568910.validator(path, query, header, formData, body)
  let scheme = call_568910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568910.url(scheme.get, call_568910.host, call_568910.base,
                         call_568910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568910, url, valid)

proc call*(call_568911: Call_UpdateApplicationUpgrade_568903;
          applicationId: string; ApplicationUpgradeUpdateDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## updateApplicationUpgrade
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  var path_568912 = newJObject()
  var query_568913 = newJObject()
  var body_568914 = newJObject()
  add(query_568913, "timeout", newJInt(timeout))
  add(query_568913, "api-version", newJString(apiVersion))
  add(path_568912, "applicationId", newJString(applicationId))
  if ApplicationUpgradeUpdateDescription != nil:
    body_568914 = ApplicationUpgradeUpdateDescription
  result = call_568911.call(path_568912, query_568913, nil, nil, body_568914)

var updateApplicationUpgrade* = Call_UpdateApplicationUpgrade_568903(
    name: "updateApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/UpdateUpgrade",
    validator: validate_UpdateApplicationUpgrade_568904, base: "",
    url: url_UpdateApplicationUpgrade_568905, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartApplicationUpgrade_568915 = ref object of OpenApiRestCall_567668
proc url_StartApplicationUpgrade_568917(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartApplicationUpgrade_568916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568918 = path.getOrDefault("applicationId")
  valid_568918 = validateParameter(valid_568918, JString, required = true,
                                 default = nil)
  if valid_568918 != nil:
    section.add "applicationId", valid_568918
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568919 = query.getOrDefault("timeout")
  valid_568919 = validateParameter(valid_568919, JInt, required = false,
                                 default = newJInt(60))
  if valid_568919 != nil:
    section.add "timeout", valid_568919
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568920 = query.getOrDefault("api-version")
  valid_568920 = validateParameter(valid_568920, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568920 != nil:
    section.add "api-version", valid_568920
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568922: Call_StartApplicationUpgrade_568915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  let valid = call_568922.validator(path, query, header, formData, body)
  let scheme = call_568922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568922.url(scheme.get, call_568922.host, call_568922.base,
                         call_568922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568922, url, valid)

proc call*(call_568923: Call_StartApplicationUpgrade_568915; applicationId: string;
          ApplicationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startApplicationUpgrade
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  var path_568924 = newJObject()
  var query_568925 = newJObject()
  var body_568926 = newJObject()
  add(query_568925, "timeout", newJInt(timeout))
  add(query_568925, "api-version", newJString(apiVersion))
  add(path_568924, "applicationId", newJString(applicationId))
  if ApplicationUpgradeDescription != nil:
    body_568926 = ApplicationUpgradeDescription
  result = call_568923.call(path_568924, query_568925, nil, nil, body_568926)

var startApplicationUpgrade* = Call_StartApplicationUpgrade_568915(
    name: "startApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/Upgrade",
    validator: validate_StartApplicationUpgrade_568916, base: "",
    url: url_StartApplicationUpgrade_568917, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupsFromBackupLocation_568927 = ref object of OpenApiRestCall_567668
proc url_GetBackupsFromBackupLocation_568929(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupsFromBackupLocation_568928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568930 = query.getOrDefault("timeout")
  valid_568930 = validateParameter(valid_568930, JInt, required = false,
                                 default = newJInt(60))
  if valid_568930 != nil:
    section.add "timeout", valid_568930
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568931 = query.getOrDefault("api-version")
  valid_568931 = validateParameter(valid_568931, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568931 != nil:
    section.add "api-version", valid_568931
  var valid_568932 = query.getOrDefault("ContinuationToken")
  valid_568932 = validateParameter(valid_568932, JString, required = false,
                                 default = nil)
  if valid_568932 != nil:
    section.add "ContinuationToken", valid_568932
  var valid_568933 = query.getOrDefault("MaxResults")
  valid_568933 = validateParameter(valid_568933, JInt, required = false,
                                 default = newJInt(0))
  if valid_568933 != nil:
    section.add "MaxResults", valid_568933
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568935: Call_GetBackupsFromBackupLocation_568927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  let valid = call_568935.validator(path, query, header, formData, body)
  let scheme = call_568935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568935.url(scheme.get, call_568935.host, call_568935.base,
                         call_568935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568935, url, valid)

proc call*(call_568936: Call_GetBackupsFromBackupLocation_568927;
          GetBackupByStorageQueryDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupsFromBackupLocation
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_568937 = newJObject()
  var body_568938 = newJObject()
  add(query_568937, "timeout", newJInt(timeout))
  add(query_568937, "api-version", newJString(apiVersion))
  if GetBackupByStorageQueryDescription != nil:
    body_568938 = GetBackupByStorageQueryDescription
  add(query_568937, "ContinuationToken", newJString(ContinuationToken))
  add(query_568937, "MaxResults", newJInt(MaxResults))
  result = call_568936.call(nil, query_568937, nil, nil, body_568938)

var getBackupsFromBackupLocation* = Call_GetBackupsFromBackupLocation_568927(
    name: "getBackupsFromBackupLocation", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/$/GetBackups",
    validator: validate_GetBackupsFromBackupLocation_568928, base: "",
    url: url_GetBackupsFromBackupLocation_568929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyList_568939 = ref object of OpenApiRestCall_567668
proc url_GetBackupPolicyList_568941(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupPolicyList_568940(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Get a list of all the backup policies configured.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568942 = query.getOrDefault("timeout")
  valid_568942 = validateParameter(valid_568942, JInt, required = false,
                                 default = newJInt(60))
  if valid_568942 != nil:
    section.add "timeout", valid_568942
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568943 = query.getOrDefault("api-version")
  valid_568943 = validateParameter(valid_568943, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568943 != nil:
    section.add "api-version", valid_568943
  var valid_568944 = query.getOrDefault("ContinuationToken")
  valid_568944 = validateParameter(valid_568944, JString, required = false,
                                 default = nil)
  if valid_568944 != nil:
    section.add "ContinuationToken", valid_568944
  var valid_568945 = query.getOrDefault("MaxResults")
  valid_568945 = validateParameter(valid_568945, JInt, required = false,
                                 default = newJInt(0))
  if valid_568945 != nil:
    section.add "MaxResults", valid_568945
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568946: Call_GetBackupPolicyList_568939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a list of all the backup policies configured.
  ## 
  let valid = call_568946.validator(path, query, header, formData, body)
  let scheme = call_568946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568946.url(scheme.get, call_568946.host, call_568946.base,
                         call_568946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568946, url, valid)

proc call*(call_568947: Call_GetBackupPolicyList_568939; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupPolicyList
  ## Get a list of all the backup policies configured.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_568948 = newJObject()
  add(query_568948, "timeout", newJInt(timeout))
  add(query_568948, "api-version", newJString(apiVersion))
  add(query_568948, "ContinuationToken", newJString(ContinuationToken))
  add(query_568948, "MaxResults", newJInt(MaxResults))
  result = call_568947.call(nil, query_568948, nil, nil, nil)

var getBackupPolicyList* = Call_GetBackupPolicyList_568939(
    name: "getBackupPolicyList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies",
    validator: validate_GetBackupPolicyList_568940, base: "",
    url: url_GetBackupPolicyList_568941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBackupPolicy_568949 = ref object of OpenApiRestCall_567668
proc url_CreateBackupPolicy_568951(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateBackupPolicy_568950(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568952 = query.getOrDefault("timeout")
  valid_568952 = validateParameter(valid_568952, JInt, required = false,
                                 default = newJInt(60))
  if valid_568952 != nil:
    section.add "timeout", valid_568952
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568953 = query.getOrDefault("api-version")
  valid_568953 = validateParameter(valid_568953, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568953 != nil:
    section.add "api-version", valid_568953
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568955: Call_CreateBackupPolicy_568949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  let valid = call_568955.validator(path, query, header, formData, body)
  let scheme = call_568955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568955.url(scheme.get, call_568955.host, call_568955.base,
                         call_568955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568955, url, valid)

proc call*(call_568956: Call_CreateBackupPolicy_568949;
          BackupPolicyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## createBackupPolicy
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  var query_568957 = newJObject()
  var body_568958 = newJObject()
  add(query_568957, "timeout", newJInt(timeout))
  add(query_568957, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_568958 = BackupPolicyDescription
  result = call_568956.call(nil, query_568957, nil, nil, body_568958)

var createBackupPolicy* = Call_CreateBackupPolicy_568949(
    name: "createBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/$/Create",
    validator: validate_CreateBackupPolicy_568950, base: "",
    url: url_CreateBackupPolicy_568951, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyByName_568959 = ref object of OpenApiRestCall_567668
proc url_GetBackupPolicyByName_568961(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetBackupPolicyByName_568960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568962 = path.getOrDefault("backupPolicyName")
  valid_568962 = validateParameter(valid_568962, JString, required = true,
                                 default = nil)
  if valid_568962 != nil:
    section.add "backupPolicyName", valid_568962
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568963 = query.getOrDefault("timeout")
  valid_568963 = validateParameter(valid_568963, JInt, required = false,
                                 default = newJInt(60))
  if valid_568963 != nil:
    section.add "timeout", valid_568963
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568964 = query.getOrDefault("api-version")
  valid_568964 = validateParameter(valid_568964, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568964 != nil:
    section.add "api-version", valid_568964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568965: Call_GetBackupPolicyByName_568959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  let valid = call_568965.validator(path, query, header, formData, body)
  let scheme = call_568965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568965.url(scheme.get, call_568965.host, call_568965.base,
                         call_568965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568965, url, valid)

proc call*(call_568966: Call_GetBackupPolicyByName_568959;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getBackupPolicyByName
  ## Gets a particular backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_568967 = newJObject()
  var query_568968 = newJObject()
  add(query_568968, "timeout", newJInt(timeout))
  add(query_568968, "api-version", newJString(apiVersion))
  add(path_568967, "backupPolicyName", newJString(backupPolicyName))
  result = call_568966.call(path_568967, query_568968, nil, nil, nil)

var getBackupPolicyByName* = Call_GetBackupPolicyByName_568959(
    name: "getBackupPolicyByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}",
    validator: validate_GetBackupPolicyByName_568960, base: "",
    url: url_GetBackupPolicyByName_568961, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBackupPolicy_568969 = ref object of OpenApiRestCall_567668
proc url_DeleteBackupPolicy_568971(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteBackupPolicy_568970(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568972 = path.getOrDefault("backupPolicyName")
  valid_568972 = validateParameter(valid_568972, JString, required = true,
                                 default = nil)
  if valid_568972 != nil:
    section.add "backupPolicyName", valid_568972
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568973 = query.getOrDefault("timeout")
  valid_568973 = validateParameter(valid_568973, JInt, required = false,
                                 default = newJInt(60))
  if valid_568973 != nil:
    section.add "timeout", valid_568973
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568974 = query.getOrDefault("api-version")
  valid_568974 = validateParameter(valid_568974, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568974 != nil:
    section.add "api-version", valid_568974
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568975: Call_DeleteBackupPolicy_568969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  let valid = call_568975.validator(path, query, header, formData, body)
  let scheme = call_568975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568975.url(scheme.get, call_568975.host, call_568975.base,
                         call_568975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568975, url, valid)

proc call*(call_568976: Call_DeleteBackupPolicy_568969; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## deleteBackupPolicy
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_568977 = newJObject()
  var query_568978 = newJObject()
  add(query_568978, "timeout", newJInt(timeout))
  add(query_568978, "api-version", newJString(apiVersion))
  add(path_568977, "backupPolicyName", newJString(backupPolicyName))
  result = call_568976.call(path_568977, query_568978, nil, nil, nil)

var deleteBackupPolicy* = Call_DeleteBackupPolicy_568969(
    name: "deleteBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete",
    validator: validate_DeleteBackupPolicy_568970, base: "",
    url: url_DeleteBackupPolicy_568971, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAllEntitiesBackedUpByPolicy_568979 = ref object of OpenApiRestCall_567668
proc url_GetAllEntitiesBackedUpByPolicy_568981(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/GetBackupEnabledEntities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetAllEntitiesBackedUpByPolicy_568980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568982 = path.getOrDefault("backupPolicyName")
  valid_568982 = validateParameter(valid_568982, JString, required = true,
                                 default = nil)
  if valid_568982 != nil:
    section.add "backupPolicyName", valid_568982
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568983 = query.getOrDefault("timeout")
  valid_568983 = validateParameter(valid_568983, JInt, required = false,
                                 default = newJInt(60))
  if valid_568983 != nil:
    section.add "timeout", valid_568983
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568984 = query.getOrDefault("api-version")
  valid_568984 = validateParameter(valid_568984, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568984 != nil:
    section.add "api-version", valid_568984
  var valid_568985 = query.getOrDefault("ContinuationToken")
  valid_568985 = validateParameter(valid_568985, JString, required = false,
                                 default = nil)
  if valid_568985 != nil:
    section.add "ContinuationToken", valid_568985
  var valid_568986 = query.getOrDefault("MaxResults")
  valid_568986 = validateParameter(valid_568986, JInt, required = false,
                                 default = newJInt(0))
  if valid_568986 != nil:
    section.add "MaxResults", valid_568986
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568987: Call_GetAllEntitiesBackedUpByPolicy_568979; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  let valid = call_568987.validator(path, query, header, formData, body)
  let scheme = call_568987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568987.url(scheme.get, call_568987.host, call_568987.base,
                         call_568987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568987, url, valid)

proc call*(call_568988: Call_GetAllEntitiesBackedUpByPolicy_568979;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getAllEntitiesBackedUpByPolicy
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_568989 = newJObject()
  var query_568990 = newJObject()
  add(query_568990, "timeout", newJInt(timeout))
  add(query_568990, "api-version", newJString(apiVersion))
  add(path_568989, "backupPolicyName", newJString(backupPolicyName))
  add(query_568990, "ContinuationToken", newJString(ContinuationToken))
  add(query_568990, "MaxResults", newJInt(MaxResults))
  result = call_568988.call(path_568989, query_568990, nil, nil, nil)

var getAllEntitiesBackedUpByPolicy* = Call_GetAllEntitiesBackedUpByPolicy_568979(
    name: "getAllEntitiesBackedUpByPolicy", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities",
    validator: validate_GetAllEntitiesBackedUpByPolicy_568980, base: "",
    url: url_GetAllEntitiesBackedUpByPolicy_568981,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBackupPolicy_568991 = ref object of OpenApiRestCall_567668
proc url_UpdateBackupPolicy_568993(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateBackupPolicy_568992(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568994 = path.getOrDefault("backupPolicyName")
  valid_568994 = validateParameter(valid_568994, JString, required = true,
                                 default = nil)
  if valid_568994 != nil:
    section.add "backupPolicyName", valid_568994
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568995 = query.getOrDefault("timeout")
  valid_568995 = validateParameter(valid_568995, JInt, required = false,
                                 default = newJInt(60))
  if valid_568995 != nil:
    section.add "timeout", valid_568995
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568996 = query.getOrDefault("api-version")
  valid_568996 = validateParameter(valid_568996, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568996 != nil:
    section.add "api-version", valid_568996
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568998: Call_UpdateBackupPolicy_568991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  let valid = call_568998.validator(path, query, header, formData, body)
  let scheme = call_568998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568998.url(scheme.get, call_568998.host, call_568998.base,
                         call_568998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568998, url, valid)

proc call*(call_568999: Call_UpdateBackupPolicy_568991;
          BackupPolicyDescription: JsonNode; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## updateBackupPolicy
  ## Updates the backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_569000 = newJObject()
  var query_569001 = newJObject()
  var body_569002 = newJObject()
  add(query_569001, "timeout", newJInt(timeout))
  add(query_569001, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_569002 = BackupPolicyDescription
  add(path_569000, "backupPolicyName", newJString(backupPolicyName))
  result = call_568999.call(path_569000, query_569001, nil, nil, body_569002)

var updateBackupPolicy* = Call_UpdateBackupPolicy_568991(
    name: "updateBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update",
    validator: validate_UpdateBackupPolicy_568992, base: "",
    url: url_UpdateBackupPolicy_568993, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatusList_569003 = ref object of OpenApiRestCall_567668
proc url_GetComposeDeploymentStatusList_569005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetComposeDeploymentStatusList_569004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_569006 = query.getOrDefault("timeout")
  valid_569006 = validateParameter(valid_569006, JInt, required = false,
                                 default = newJInt(60))
  if valid_569006 != nil:
    section.add "timeout", valid_569006
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569007 = query.getOrDefault("api-version")
  valid_569007 = validateParameter(valid_569007, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569007 != nil:
    section.add "api-version", valid_569007
  var valid_569008 = query.getOrDefault("ContinuationToken")
  valid_569008 = validateParameter(valid_569008, JString, required = false,
                                 default = nil)
  if valid_569008 != nil:
    section.add "ContinuationToken", valid_569008
  var valid_569009 = query.getOrDefault("MaxResults")
  valid_569009 = validateParameter(valid_569009, JInt, required = false,
                                 default = newJInt(0))
  if valid_569009 != nil:
    section.add "MaxResults", valid_569009
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569010: Call_GetComposeDeploymentStatusList_569003; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  let valid = call_569010.validator(path, query, header, formData, body)
  let scheme = call_569010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569010.url(scheme.get, call_569010.host, call_569010.base,
                         call_569010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569010, url, valid)

proc call*(call_569011: Call_GetComposeDeploymentStatusList_569003;
          timeout: int = 60; apiVersion: string = "6.0-preview";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getComposeDeploymentStatusList
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_569012 = newJObject()
  add(query_569012, "timeout", newJInt(timeout))
  add(query_569012, "api-version", newJString(apiVersion))
  add(query_569012, "ContinuationToken", newJString(ContinuationToken))
  add(query_569012, "MaxResults", newJInt(MaxResults))
  result = call_569011.call(nil, query_569012, nil, nil, nil)

var getComposeDeploymentStatusList* = Call_GetComposeDeploymentStatusList_569003(
    name: "getComposeDeploymentStatusList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments",
    validator: validate_GetComposeDeploymentStatusList_569004, base: "",
    url: url_GetComposeDeploymentStatusList_569005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateComposeDeployment_569013 = ref object of OpenApiRestCall_567668
proc url_CreateComposeDeployment_569015(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateComposeDeployment_569014(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569016 = query.getOrDefault("timeout")
  valid_569016 = validateParameter(valid_569016, JInt, required = false,
                                 default = newJInt(60))
  if valid_569016 != nil:
    section.add "timeout", valid_569016
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569017 = query.getOrDefault("api-version")
  valid_569017 = validateParameter(valid_569017, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569017 != nil:
    section.add "api-version", valid_569017
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569019: Call_CreateComposeDeployment_569013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  let valid = call_569019.validator(path, query, header, formData, body)
  let scheme = call_569019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569019.url(scheme.get, call_569019.host, call_569019.base,
                         call_569019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569019, url, valid)

proc call*(call_569020: Call_CreateComposeDeployment_569013;
          CreateComposeDeploymentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## createComposeDeployment
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  var query_569021 = newJObject()
  var body_569022 = newJObject()
  add(query_569021, "timeout", newJInt(timeout))
  add(query_569021, "api-version", newJString(apiVersion))
  if CreateComposeDeploymentDescription != nil:
    body_569022 = CreateComposeDeploymentDescription
  result = call_569020.call(nil, query_569021, nil, nil, body_569022)

var createComposeDeployment* = Call_CreateComposeDeployment_569013(
    name: "createComposeDeployment", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/ComposeDeployments/$/Create",
    validator: validate_CreateComposeDeployment_569014, base: "",
    url: url_CreateComposeDeployment_569015, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatus_569023 = ref object of OpenApiRestCall_567668
proc url_GetComposeDeploymentStatus_569025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentStatus_569024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569026 = path.getOrDefault("deploymentName")
  valid_569026 = validateParameter(valid_569026, JString, required = true,
                                 default = nil)
  if valid_569026 != nil:
    section.add "deploymentName", valid_569026
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569027 = query.getOrDefault("timeout")
  valid_569027 = validateParameter(valid_569027, JInt, required = false,
                                 default = newJInt(60))
  if valid_569027 != nil:
    section.add "timeout", valid_569027
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569028 = query.getOrDefault("api-version")
  valid_569028 = validateParameter(valid_569028, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569028 != nil:
    section.add "api-version", valid_569028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569029: Call_GetComposeDeploymentStatus_569023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  let valid = call_569029.validator(path, query, header, formData, body)
  let scheme = call_569029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569029.url(scheme.get, call_569029.host, call_569029.base,
                         call_569029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569029, url, valid)

proc call*(call_569030: Call_GetComposeDeploymentStatus_569023;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentStatus
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569031 = newJObject()
  var query_569032 = newJObject()
  add(query_569032, "timeout", newJInt(timeout))
  add(query_569032, "api-version", newJString(apiVersion))
  add(path_569031, "deploymentName", newJString(deploymentName))
  result = call_569030.call(path_569031, query_569032, nil, nil, nil)

var getComposeDeploymentStatus* = Call_GetComposeDeploymentStatus_569023(
    name: "getComposeDeploymentStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments/{deploymentName}",
    validator: validate_GetComposeDeploymentStatus_569024, base: "",
    url: url_GetComposeDeploymentStatus_569025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveComposeDeployment_569033 = ref object of OpenApiRestCall_567668
proc url_RemoveComposeDeployment_569035(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveComposeDeployment_569034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569036 = path.getOrDefault("deploymentName")
  valid_569036 = validateParameter(valid_569036, JString, required = true,
                                 default = nil)
  if valid_569036 != nil:
    section.add "deploymentName", valid_569036
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569037 = query.getOrDefault("timeout")
  valid_569037 = validateParameter(valid_569037, JInt, required = false,
                                 default = newJInt(60))
  if valid_569037 != nil:
    section.add "timeout", valid_569037
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569038 = query.getOrDefault("api-version")
  valid_569038 = validateParameter(valid_569038, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569038 != nil:
    section.add "api-version", valid_569038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569039: Call_RemoveComposeDeployment_569033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  let valid = call_569039.validator(path, query, header, formData, body)
  let scheme = call_569039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569039.url(scheme.get, call_569039.host, call_569039.base,
                         call_569039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569039, url, valid)

proc call*(call_569040: Call_RemoveComposeDeployment_569033;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## removeComposeDeployment
  ## Deletes an existing Service Fabric compose deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569041 = newJObject()
  var query_569042 = newJObject()
  add(query_569042, "timeout", newJInt(timeout))
  add(query_569042, "api-version", newJString(apiVersion))
  add(path_569041, "deploymentName", newJString(deploymentName))
  result = call_569040.call(path_569041, query_569042, nil, nil, nil)

var removeComposeDeployment* = Call_RemoveComposeDeployment_569033(
    name: "removeComposeDeployment", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Delete",
    validator: validate_RemoveComposeDeployment_569034, base: "",
    url: url_RemoveComposeDeployment_569035, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentUpgradeProgress_569043 = ref object of OpenApiRestCall_567668
proc url_GetComposeDeploymentUpgradeProgress_569045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentUpgradeProgress_569044(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569046 = path.getOrDefault("deploymentName")
  valid_569046 = validateParameter(valid_569046, JString, required = true,
                                 default = nil)
  if valid_569046 != nil:
    section.add "deploymentName", valid_569046
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569047 = query.getOrDefault("timeout")
  valid_569047 = validateParameter(valid_569047, JInt, required = false,
                                 default = newJInt(60))
  if valid_569047 != nil:
    section.add "timeout", valid_569047
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569048 = query.getOrDefault("api-version")
  valid_569048 = validateParameter(valid_569048, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569048 != nil:
    section.add "api-version", valid_569048
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569049: Call_GetComposeDeploymentUpgradeProgress_569043;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_569049.validator(path, query, header, formData, body)
  let scheme = call_569049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569049.url(scheme.get, call_569049.host, call_569049.base,
                         call_569049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569049, url, valid)

proc call*(call_569050: Call_GetComposeDeploymentUpgradeProgress_569043;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentUpgradeProgress
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569051 = newJObject()
  var query_569052 = newJObject()
  add(query_569052, "timeout", newJInt(timeout))
  add(query_569052, "api-version", newJString(apiVersion))
  add(path_569051, "deploymentName", newJString(deploymentName))
  result = call_569050.call(path_569051, query_569052, nil, nil, nil)

var getComposeDeploymentUpgradeProgress* = Call_GetComposeDeploymentUpgradeProgress_569043(
    name: "getComposeDeploymentUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress",
    validator: validate_GetComposeDeploymentUpgradeProgress_569044, base: "",
    url: url_GetComposeDeploymentUpgradeProgress_569045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartRollbackComposeDeploymentUpgrade_569053 = ref object of OpenApiRestCall_567668
proc url_StartRollbackComposeDeploymentUpgrade_569055(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartRollbackComposeDeploymentUpgrade_569054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569056 = path.getOrDefault("deploymentName")
  valid_569056 = validateParameter(valid_569056, JString, required = true,
                                 default = nil)
  if valid_569056 != nil:
    section.add "deploymentName", valid_569056
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  var valid_569057 = query.getOrDefault("timeout")
  valid_569057 = validateParameter(valid_569057, JInt, required = false,
                                 default = newJInt(60))
  if valid_569057 != nil:
    section.add "timeout", valid_569057
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569058 = query.getOrDefault("api-version")
  valid_569058 = validateParameter(valid_569058, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_569058 != nil:
    section.add "api-version", valid_569058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569059: Call_StartRollbackComposeDeploymentUpgrade_569053;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  let valid = call_569059.validator(path, query, header, formData, body)
  let scheme = call_569059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569059.url(scheme.get, call_569059.host, call_569059.base,
                         call_569059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569059, url, valid)

proc call*(call_569060: Call_StartRollbackComposeDeploymentUpgrade_569053;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.4-preview"): Recallable =
  ## startRollbackComposeDeploymentUpgrade
  ## Rollback a service fabric compose deployment upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569061 = newJObject()
  var query_569062 = newJObject()
  add(query_569062, "timeout", newJInt(timeout))
  add(query_569062, "api-version", newJString(apiVersion))
  add(path_569061, "deploymentName", newJString(deploymentName))
  result = call_569060.call(path_569061, query_569062, nil, nil, nil)

var startRollbackComposeDeploymentUpgrade* = Call_StartRollbackComposeDeploymentUpgrade_569053(
    name: "startRollbackComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade",
    validator: validate_StartRollbackComposeDeploymentUpgrade_569054, base: "",
    url: url_StartRollbackComposeDeploymentUpgrade_569055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartComposeDeploymentUpgrade_569063 = ref object of OpenApiRestCall_567668
proc url_StartComposeDeploymentUpgrade_569065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartComposeDeploymentUpgrade_569064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569066 = path.getOrDefault("deploymentName")
  valid_569066 = validateParameter(valid_569066, JString, required = true,
                                 default = nil)
  if valid_569066 != nil:
    section.add "deploymentName", valid_569066
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569067 = query.getOrDefault("timeout")
  valid_569067 = validateParameter(valid_569067, JInt, required = false,
                                 default = newJInt(60))
  if valid_569067 != nil:
    section.add "timeout", valid_569067
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569068 = query.getOrDefault("api-version")
  valid_569068 = validateParameter(valid_569068, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569068 != nil:
    section.add "api-version", valid_569068
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569070: Call_StartComposeDeploymentUpgrade_569063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  let valid = call_569070.validator(path, query, header, formData, body)
  let scheme = call_569070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569070.url(scheme.get, call_569070.host, call_569070.base,
                         call_569070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569070, url, valid)

proc call*(call_569071: Call_StartComposeDeploymentUpgrade_569063;
          deploymentName: string; ComposeDeploymentUpgradeDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0-preview"): Recallable =
  ## startComposeDeploymentUpgrade
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  var path_569072 = newJObject()
  var query_569073 = newJObject()
  var body_569074 = newJObject()
  add(query_569073, "timeout", newJInt(timeout))
  add(query_569073, "api-version", newJString(apiVersion))
  add(path_569072, "deploymentName", newJString(deploymentName))
  if ComposeDeploymentUpgradeDescription != nil:
    body_569074 = ComposeDeploymentUpgradeDescription
  result = call_569071.call(path_569072, query_569073, nil, nil, body_569074)

var startComposeDeploymentUpgrade* = Call_StartComposeDeploymentUpgrade_569063(
    name: "startComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Upgrade",
    validator: validate_StartComposeDeploymentUpgrade_569064, base: "",
    url: url_StartComposeDeploymentUpgrade_569065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationsEventList_569075 = ref object of OpenApiRestCall_567668
proc url_GetApplicationsEventList_569077(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationsEventList_569076(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569078 = query.getOrDefault("timeout")
  valid_569078 = validateParameter(valid_569078, JInt, required = false,
                                 default = newJInt(60))
  if valid_569078 != nil:
    section.add "timeout", valid_569078
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569079 = query.getOrDefault("api-version")
  valid_569079 = validateParameter(valid_569079, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569079 != nil:
    section.add "api-version", valid_569079
  var valid_569080 = query.getOrDefault("SkipCorrelationLookup")
  valid_569080 = validateParameter(valid_569080, JBool, required = false, default = nil)
  if valid_569080 != nil:
    section.add "SkipCorrelationLookup", valid_569080
  var valid_569081 = query.getOrDefault("EventsTypesFilter")
  valid_569081 = validateParameter(valid_569081, JString, required = false,
                                 default = nil)
  if valid_569081 != nil:
    section.add "EventsTypesFilter", valid_569081
  var valid_569082 = query.getOrDefault("EndTimeUtc")
  valid_569082 = validateParameter(valid_569082, JString, required = true,
                                 default = nil)
  if valid_569082 != nil:
    section.add "EndTimeUtc", valid_569082
  var valid_569083 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569083 = validateParameter(valid_569083, JBool, required = false, default = nil)
  if valid_569083 != nil:
    section.add "ExcludeAnalysisEvents", valid_569083
  var valid_569084 = query.getOrDefault("StartTimeUtc")
  valid_569084 = validateParameter(valid_569084, JString, required = true,
                                 default = nil)
  if valid_569084 != nil:
    section.add "StartTimeUtc", valid_569084
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569085: Call_GetApplicationsEventList_569075; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_569085.validator(path, query, header, formData, body)
  let scheme = call_569085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569085.url(scheme.get, call_569085.host, call_569085.base,
                         call_569085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569085, url, valid)

proc call*(call_569086: Call_GetApplicationsEventList_569075; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationsEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569087 = newJObject()
  add(query_569087, "timeout", newJInt(timeout))
  add(query_569087, "api-version", newJString(apiVersion))
  add(query_569087, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569087, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569087, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569087, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569087, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569086.call(nil, query_569087, nil, nil, nil)

var getApplicationsEventList* = Call_GetApplicationsEventList_569075(
    name: "getApplicationsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Applications/Events",
    validator: validate_GetApplicationsEventList_569076, base: "",
    url: url_GetApplicationsEventList_569077, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationEventList_569088 = ref object of OpenApiRestCall_567668
proc url_GetApplicationEventList_569090(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationEventList_569089(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_569091 = path.getOrDefault("applicationId")
  valid_569091 = validateParameter(valid_569091, JString, required = true,
                                 default = nil)
  if valid_569091 != nil:
    section.add "applicationId", valid_569091
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569092 = query.getOrDefault("timeout")
  valid_569092 = validateParameter(valid_569092, JInt, required = false,
                                 default = newJInt(60))
  if valid_569092 != nil:
    section.add "timeout", valid_569092
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569093 = query.getOrDefault("api-version")
  valid_569093 = validateParameter(valid_569093, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569093 != nil:
    section.add "api-version", valid_569093
  var valid_569094 = query.getOrDefault("SkipCorrelationLookup")
  valid_569094 = validateParameter(valid_569094, JBool, required = false, default = nil)
  if valid_569094 != nil:
    section.add "SkipCorrelationLookup", valid_569094
  var valid_569095 = query.getOrDefault("EventsTypesFilter")
  valid_569095 = validateParameter(valid_569095, JString, required = false,
                                 default = nil)
  if valid_569095 != nil:
    section.add "EventsTypesFilter", valid_569095
  var valid_569096 = query.getOrDefault("EndTimeUtc")
  valid_569096 = validateParameter(valid_569096, JString, required = true,
                                 default = nil)
  if valid_569096 != nil:
    section.add "EndTimeUtc", valid_569096
  var valid_569097 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569097 = validateParameter(valid_569097, JBool, required = false, default = nil)
  if valid_569097 != nil:
    section.add "ExcludeAnalysisEvents", valid_569097
  var valid_569098 = query.getOrDefault("StartTimeUtc")
  valid_569098 = validateParameter(valid_569098, JString, required = true,
                                 default = nil)
  if valid_569098 != nil:
    section.add "StartTimeUtc", valid_569098
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569099: Call_GetApplicationEventList_569088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_569099.validator(path, query, header, formData, body)
  let scheme = call_569099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569099.url(scheme.get, call_569099.host, call_569099.base,
                         call_569099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569099, url, valid)

proc call*(call_569100: Call_GetApplicationEventList_569088; EndTimeUtc: string;
          applicationId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569101 = newJObject()
  var query_569102 = newJObject()
  add(query_569102, "timeout", newJInt(timeout))
  add(query_569102, "api-version", newJString(apiVersion))
  add(query_569102, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569102, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569102, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569101, "applicationId", newJString(applicationId))
  add(query_569102, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569102, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569100.call(path_569101, query_569102, nil, nil, nil)

var getApplicationEventList* = Call_GetApplicationEventList_569088(
    name: "getApplicationEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Applications/{applicationId}/$/Events",
    validator: validate_GetApplicationEventList_569089, base: "",
    url: url_GetApplicationEventList_569090, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterEventList_569103 = ref object of OpenApiRestCall_567668
proc url_GetClusterEventList_569105(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterEventList_569104(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ClusterEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569106 = query.getOrDefault("timeout")
  valid_569106 = validateParameter(valid_569106, JInt, required = false,
                                 default = newJInt(60))
  if valid_569106 != nil:
    section.add "timeout", valid_569106
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569107 = query.getOrDefault("api-version")
  valid_569107 = validateParameter(valid_569107, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569107 != nil:
    section.add "api-version", valid_569107
  var valid_569108 = query.getOrDefault("SkipCorrelationLookup")
  valid_569108 = validateParameter(valid_569108, JBool, required = false, default = nil)
  if valid_569108 != nil:
    section.add "SkipCorrelationLookup", valid_569108
  var valid_569109 = query.getOrDefault("EventsTypesFilter")
  valid_569109 = validateParameter(valid_569109, JString, required = false,
                                 default = nil)
  if valid_569109 != nil:
    section.add "EventsTypesFilter", valid_569109
  var valid_569110 = query.getOrDefault("EndTimeUtc")
  valid_569110 = validateParameter(valid_569110, JString, required = true,
                                 default = nil)
  if valid_569110 != nil:
    section.add "EndTimeUtc", valid_569110
  var valid_569111 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569111 = validateParameter(valid_569111, JBool, required = false, default = nil)
  if valid_569111 != nil:
    section.add "ExcludeAnalysisEvents", valid_569111
  var valid_569112 = query.getOrDefault("StartTimeUtc")
  valid_569112 = validateParameter(valid_569112, JString, required = true,
                                 default = nil)
  if valid_569112 != nil:
    section.add "StartTimeUtc", valid_569112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569113: Call_GetClusterEventList_569103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ClusterEvent objects.
  ## 
  let valid = call_569113.validator(path, query, header, formData, body)
  let scheme = call_569113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569113.url(scheme.get, call_569113.host, call_569113.base,
                         call_569113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569113, url, valid)

proc call*(call_569114: Call_GetClusterEventList_569103; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getClusterEventList
  ## The response is list of ClusterEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569115 = newJObject()
  add(query_569115, "timeout", newJInt(timeout))
  add(query_569115, "api-version", newJString(apiVersion))
  add(query_569115, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569115, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569115, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569115, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569115, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569114.call(nil, query_569115, nil, nil, nil)

var getClusterEventList* = Call_GetClusterEventList_569103(
    name: "getClusterEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Cluster/Events",
    validator: validate_GetClusterEventList_569104, base: "",
    url: url_GetClusterEventList_569105, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainersEventList_569116 = ref object of OpenApiRestCall_567668
proc url_GetContainersEventList_569118(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetContainersEventList_569117(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569119 = query.getOrDefault("timeout")
  valid_569119 = validateParameter(valid_569119, JInt, required = false,
                                 default = newJInt(60))
  if valid_569119 != nil:
    section.add "timeout", valid_569119
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569120 = query.getOrDefault("api-version")
  valid_569120 = validateParameter(valid_569120, JString, required = true,
                                 default = newJString("6.2-preview"))
  if valid_569120 != nil:
    section.add "api-version", valid_569120
  var valid_569121 = query.getOrDefault("SkipCorrelationLookup")
  valid_569121 = validateParameter(valid_569121, JBool, required = false, default = nil)
  if valid_569121 != nil:
    section.add "SkipCorrelationLookup", valid_569121
  var valid_569122 = query.getOrDefault("EventsTypesFilter")
  valid_569122 = validateParameter(valid_569122, JString, required = false,
                                 default = nil)
  if valid_569122 != nil:
    section.add "EventsTypesFilter", valid_569122
  var valid_569123 = query.getOrDefault("EndTimeUtc")
  valid_569123 = validateParameter(valid_569123, JString, required = true,
                                 default = nil)
  if valid_569123 != nil:
    section.add "EndTimeUtc", valid_569123
  var valid_569124 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569124 = validateParameter(valid_569124, JBool, required = false, default = nil)
  if valid_569124 != nil:
    section.add "ExcludeAnalysisEvents", valid_569124
  var valid_569125 = query.getOrDefault("StartTimeUtc")
  valid_569125 = validateParameter(valid_569125, JString, required = true,
                                 default = nil)
  if valid_569125 != nil:
    section.add "StartTimeUtc", valid_569125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569126: Call_GetContainersEventList_569116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  let valid = call_569126.validator(path, query, header, formData, body)
  let scheme = call_569126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569126.url(scheme.get, call_569126.host, call_569126.base,
                         call_569126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569126, url, valid)

proc call*(call_569127: Call_GetContainersEventList_569116; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.2-preview";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getContainersEventList
  ## The response is list of ContainerInstanceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569128 = newJObject()
  add(query_569128, "timeout", newJInt(timeout))
  add(query_569128, "api-version", newJString(apiVersion))
  add(query_569128, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569128, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569128, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569128, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569128, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569127.call(nil, query_569128, nil, nil, nil)

var getContainersEventList* = Call_GetContainersEventList_569116(
    name: "getContainersEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Containers/Events",
    validator: validate_GetContainersEventList_569117, base: "",
    url: url_GetContainersEventList_569118, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCorrelatedEventList_569129 = ref object of OpenApiRestCall_567668
proc url_GetCorrelatedEventList_569131(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "eventInstanceId" in path, "`eventInstanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/CorrelatedEvents/"),
               (kind: VariableSegment, value: "eventInstanceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetCorrelatedEventList_569130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of FabricEvents.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   eventInstanceId: JString (required)
  ##                  : The EventInstanceId.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `eventInstanceId` field"
  var valid_569132 = path.getOrDefault("eventInstanceId")
  valid_569132 = validateParameter(valid_569132, JString, required = true,
                                 default = nil)
  if valid_569132 != nil:
    section.add "eventInstanceId", valid_569132
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569133 = query.getOrDefault("timeout")
  valid_569133 = validateParameter(valid_569133, JInt, required = false,
                                 default = newJInt(60))
  if valid_569133 != nil:
    section.add "timeout", valid_569133
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569134 = query.getOrDefault("api-version")
  valid_569134 = validateParameter(valid_569134, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569134 != nil:
    section.add "api-version", valid_569134
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569135: Call_GetCorrelatedEventList_569129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of FabricEvents.
  ## 
  let valid = call_569135.validator(path, query, header, formData, body)
  let scheme = call_569135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569135.url(scheme.get, call_569135.host, call_569135.base,
                         call_569135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569135, url, valid)

proc call*(call_569136: Call_GetCorrelatedEventList_569129;
          eventInstanceId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getCorrelatedEventList
  ## The response is list of FabricEvents.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   eventInstanceId: string (required)
  ##                  : The EventInstanceId.
  var path_569137 = newJObject()
  var query_569138 = newJObject()
  add(query_569138, "timeout", newJInt(timeout))
  add(query_569138, "api-version", newJString(apiVersion))
  add(path_569137, "eventInstanceId", newJString(eventInstanceId))
  result = call_569136.call(path_569137, query_569138, nil, nil, nil)

var getCorrelatedEventList* = Call_GetCorrelatedEventList_569129(
    name: "getCorrelatedEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events",
    validator: validate_GetCorrelatedEventList_569130, base: "",
    url: url_GetCorrelatedEventList_569131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodesEventList_569139 = ref object of OpenApiRestCall_567668
proc url_GetNodesEventList_569141(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodesEventList_569140(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569142 = query.getOrDefault("timeout")
  valid_569142 = validateParameter(valid_569142, JInt, required = false,
                                 default = newJInt(60))
  if valid_569142 != nil:
    section.add "timeout", valid_569142
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569143 = query.getOrDefault("api-version")
  valid_569143 = validateParameter(valid_569143, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569143 != nil:
    section.add "api-version", valid_569143
  var valid_569144 = query.getOrDefault("SkipCorrelationLookup")
  valid_569144 = validateParameter(valid_569144, JBool, required = false, default = nil)
  if valid_569144 != nil:
    section.add "SkipCorrelationLookup", valid_569144
  var valid_569145 = query.getOrDefault("EventsTypesFilter")
  valid_569145 = validateParameter(valid_569145, JString, required = false,
                                 default = nil)
  if valid_569145 != nil:
    section.add "EventsTypesFilter", valid_569145
  var valid_569146 = query.getOrDefault("EndTimeUtc")
  valid_569146 = validateParameter(valid_569146, JString, required = true,
                                 default = nil)
  if valid_569146 != nil:
    section.add "EndTimeUtc", valid_569146
  var valid_569147 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569147 = validateParameter(valid_569147, JBool, required = false, default = nil)
  if valid_569147 != nil:
    section.add "ExcludeAnalysisEvents", valid_569147
  var valid_569148 = query.getOrDefault("StartTimeUtc")
  valid_569148 = validateParameter(valid_569148, JString, required = true,
                                 default = nil)
  if valid_569148 != nil:
    section.add "StartTimeUtc", valid_569148
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569149: Call_GetNodesEventList_569139; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_569149.validator(path, query, header, formData, body)
  let scheme = call_569149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569149.url(scheme.get, call_569149.host, call_569149.base,
                         call_569149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569149, url, valid)

proc call*(call_569150: Call_GetNodesEventList_569139; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodesEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569151 = newJObject()
  add(query_569151, "timeout", newJInt(timeout))
  add(query_569151, "api-version", newJString(apiVersion))
  add(query_569151, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569151, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569151, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569151, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569151, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569150.call(nil, query_569151, nil, nil, nil)

var getNodesEventList* = Call_GetNodesEventList_569139(name: "getNodesEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/Events", validator: validate_GetNodesEventList_569140,
    base: "", url: url_GetNodesEventList_569141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeEventList_569152 = ref object of OpenApiRestCall_567668
proc url_GetNodeEventList_569154(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeEventList_569153(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569155 = path.getOrDefault("nodeName")
  valid_569155 = validateParameter(valid_569155, JString, required = true,
                                 default = nil)
  if valid_569155 != nil:
    section.add "nodeName", valid_569155
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569156 = query.getOrDefault("timeout")
  valid_569156 = validateParameter(valid_569156, JInt, required = false,
                                 default = newJInt(60))
  if valid_569156 != nil:
    section.add "timeout", valid_569156
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569157 = query.getOrDefault("api-version")
  valid_569157 = validateParameter(valid_569157, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569157 != nil:
    section.add "api-version", valid_569157
  var valid_569158 = query.getOrDefault("SkipCorrelationLookup")
  valid_569158 = validateParameter(valid_569158, JBool, required = false, default = nil)
  if valid_569158 != nil:
    section.add "SkipCorrelationLookup", valid_569158
  var valid_569159 = query.getOrDefault("EventsTypesFilter")
  valid_569159 = validateParameter(valid_569159, JString, required = false,
                                 default = nil)
  if valid_569159 != nil:
    section.add "EventsTypesFilter", valid_569159
  var valid_569160 = query.getOrDefault("EndTimeUtc")
  valid_569160 = validateParameter(valid_569160, JString, required = true,
                                 default = nil)
  if valid_569160 != nil:
    section.add "EndTimeUtc", valid_569160
  var valid_569161 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569161 = validateParameter(valid_569161, JBool, required = false, default = nil)
  if valid_569161 != nil:
    section.add "ExcludeAnalysisEvents", valid_569161
  var valid_569162 = query.getOrDefault("StartTimeUtc")
  valid_569162 = validateParameter(valid_569162, JString, required = true,
                                 default = nil)
  if valid_569162 != nil:
    section.add "StartTimeUtc", valid_569162
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569163: Call_GetNodeEventList_569152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_569163.validator(path, query, header, formData, body)
  let scheme = call_569163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569163.url(scheme.get, call_569163.host, call_569163.base,
                         call_569163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569163, url, valid)

proc call*(call_569164: Call_GetNodeEventList_569152; nodeName: string;
          EndTimeUtc: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodeEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569165 = newJObject()
  var query_569166 = newJObject()
  add(query_569166, "timeout", newJInt(timeout))
  add(query_569166, "api-version", newJString(apiVersion))
  add(path_569165, "nodeName", newJString(nodeName))
  add(query_569166, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569166, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569166, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569166, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569166, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569164.call(path_569165, query_569166, nil, nil, nil)

var getNodeEventList* = Call_GetNodeEventList_569152(name: "getNodeEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/{nodeName}/$/Events",
    validator: validate_GetNodeEventList_569153, base: "",
    url: url_GetNodeEventList_569154, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionsEventList_569167 = ref object of OpenApiRestCall_567668
proc url_GetPartitionsEventList_569169(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPartitionsEventList_569168(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569170 = query.getOrDefault("timeout")
  valid_569170 = validateParameter(valid_569170, JInt, required = false,
                                 default = newJInt(60))
  if valid_569170 != nil:
    section.add "timeout", valid_569170
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569171 = query.getOrDefault("api-version")
  valid_569171 = validateParameter(valid_569171, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569171 != nil:
    section.add "api-version", valid_569171
  var valid_569172 = query.getOrDefault("SkipCorrelationLookup")
  valid_569172 = validateParameter(valid_569172, JBool, required = false, default = nil)
  if valid_569172 != nil:
    section.add "SkipCorrelationLookup", valid_569172
  var valid_569173 = query.getOrDefault("EventsTypesFilter")
  valid_569173 = validateParameter(valid_569173, JString, required = false,
                                 default = nil)
  if valid_569173 != nil:
    section.add "EventsTypesFilter", valid_569173
  var valid_569174 = query.getOrDefault("EndTimeUtc")
  valid_569174 = validateParameter(valid_569174, JString, required = true,
                                 default = nil)
  if valid_569174 != nil:
    section.add "EndTimeUtc", valid_569174
  var valid_569175 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569175 = validateParameter(valid_569175, JBool, required = false, default = nil)
  if valid_569175 != nil:
    section.add "ExcludeAnalysisEvents", valid_569175
  var valid_569176 = query.getOrDefault("StartTimeUtc")
  valid_569176 = validateParameter(valid_569176, JString, required = true,
                                 default = nil)
  if valid_569176 != nil:
    section.add "StartTimeUtc", valid_569176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569177: Call_GetPartitionsEventList_569167; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_569177.validator(path, query, header, formData, body)
  let scheme = call_569177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569177.url(scheme.get, call_569177.host, call_569177.base,
                         call_569177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569177, url, valid)

proc call*(call_569178: Call_GetPartitionsEventList_569167; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionsEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569179 = newJObject()
  add(query_569179, "timeout", newJInt(timeout))
  add(query_569179, "api-version", newJString(apiVersion))
  add(query_569179, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569179, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569179, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569179, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569179, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569178.call(nil, query_569179, nil, nil, nil)

var getPartitionsEventList* = Call_GetPartitionsEventList_569167(
    name: "getPartitionsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/Events",
    validator: validate_GetPartitionsEventList_569168, base: "",
    url: url_GetPartitionsEventList_569169, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionEventList_569180 = ref object of OpenApiRestCall_567668
proc url_GetPartitionEventList_569182(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionEventList_569181(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569183 = path.getOrDefault("partitionId")
  valid_569183 = validateParameter(valid_569183, JString, required = true,
                                 default = nil)
  if valid_569183 != nil:
    section.add "partitionId", valid_569183
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569184 = query.getOrDefault("timeout")
  valid_569184 = validateParameter(valid_569184, JInt, required = false,
                                 default = newJInt(60))
  if valid_569184 != nil:
    section.add "timeout", valid_569184
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569185 = query.getOrDefault("api-version")
  valid_569185 = validateParameter(valid_569185, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569185 != nil:
    section.add "api-version", valid_569185
  var valid_569186 = query.getOrDefault("SkipCorrelationLookup")
  valid_569186 = validateParameter(valid_569186, JBool, required = false, default = nil)
  if valid_569186 != nil:
    section.add "SkipCorrelationLookup", valid_569186
  var valid_569187 = query.getOrDefault("EventsTypesFilter")
  valid_569187 = validateParameter(valid_569187, JString, required = false,
                                 default = nil)
  if valid_569187 != nil:
    section.add "EventsTypesFilter", valid_569187
  var valid_569188 = query.getOrDefault("EndTimeUtc")
  valid_569188 = validateParameter(valid_569188, JString, required = true,
                                 default = nil)
  if valid_569188 != nil:
    section.add "EndTimeUtc", valid_569188
  var valid_569189 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569189 = validateParameter(valid_569189, JBool, required = false, default = nil)
  if valid_569189 != nil:
    section.add "ExcludeAnalysisEvents", valid_569189
  var valid_569190 = query.getOrDefault("StartTimeUtc")
  valid_569190 = validateParameter(valid_569190, JString, required = true,
                                 default = nil)
  if valid_569190 != nil:
    section.add "StartTimeUtc", valid_569190
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569191: Call_GetPartitionEventList_569180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_569191.validator(path, query, header, formData, body)
  let scheme = call_569191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569191.url(scheme.get, call_569191.host, call_569191.base,
                         call_569191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569191, url, valid)

proc call*(call_569192: Call_GetPartitionEventList_569180; EndTimeUtc: string;
          partitionId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569193 = newJObject()
  var query_569194 = newJObject()
  add(query_569194, "timeout", newJInt(timeout))
  add(query_569194, "api-version", newJString(apiVersion))
  add(query_569194, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569194, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569194, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569193, "partitionId", newJString(partitionId))
  add(query_569194, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569194, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569192.call(path_569193, query_569194, nil, nil, nil)

var getPartitionEventList* = Call_GetPartitionEventList_569180(
    name: "getPartitionEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Events",
    validator: validate_GetPartitionEventList_569181, base: "",
    url: url_GetPartitionEventList_569182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicasEventList_569195 = ref object of OpenApiRestCall_567668
proc url_GetPartitionReplicasEventList_569197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicasEventList_569196(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569198 = path.getOrDefault("partitionId")
  valid_569198 = validateParameter(valid_569198, JString, required = true,
                                 default = nil)
  if valid_569198 != nil:
    section.add "partitionId", valid_569198
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569199 = query.getOrDefault("timeout")
  valid_569199 = validateParameter(valid_569199, JInt, required = false,
                                 default = newJInt(60))
  if valid_569199 != nil:
    section.add "timeout", valid_569199
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569200 = query.getOrDefault("api-version")
  valid_569200 = validateParameter(valid_569200, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569200 != nil:
    section.add "api-version", valid_569200
  var valid_569201 = query.getOrDefault("SkipCorrelationLookup")
  valid_569201 = validateParameter(valid_569201, JBool, required = false, default = nil)
  if valid_569201 != nil:
    section.add "SkipCorrelationLookup", valid_569201
  var valid_569202 = query.getOrDefault("EventsTypesFilter")
  valid_569202 = validateParameter(valid_569202, JString, required = false,
                                 default = nil)
  if valid_569202 != nil:
    section.add "EventsTypesFilter", valid_569202
  var valid_569203 = query.getOrDefault("EndTimeUtc")
  valid_569203 = validateParameter(valid_569203, JString, required = true,
                                 default = nil)
  if valid_569203 != nil:
    section.add "EndTimeUtc", valid_569203
  var valid_569204 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569204 = validateParameter(valid_569204, JBool, required = false, default = nil)
  if valid_569204 != nil:
    section.add "ExcludeAnalysisEvents", valid_569204
  var valid_569205 = query.getOrDefault("StartTimeUtc")
  valid_569205 = validateParameter(valid_569205, JString, required = true,
                                 default = nil)
  if valid_569205 != nil:
    section.add "StartTimeUtc", valid_569205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569206: Call_GetPartitionReplicasEventList_569195; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_569206.validator(path, query, header, formData, body)
  let scheme = call_569206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569206.url(scheme.get, call_569206.host, call_569206.base,
                         call_569206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569206, url, valid)

proc call*(call_569207: Call_GetPartitionReplicasEventList_569195;
          EndTimeUtc: string; partitionId: string; StartTimeUtc: string;
          timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicasEventList
  ## The response is list of ReplicaEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569208 = newJObject()
  var query_569209 = newJObject()
  add(query_569209, "timeout", newJInt(timeout))
  add(query_569209, "api-version", newJString(apiVersion))
  add(query_569209, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569209, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569209, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569208, "partitionId", newJString(partitionId))
  add(query_569209, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569209, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569207.call(path_569208, query_569209, nil, nil, nil)

var getPartitionReplicasEventList* = Call_GetPartitionReplicasEventList_569195(
    name: "getPartitionReplicasEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Replicas/Events",
    validator: validate_GetPartitionReplicasEventList_569196, base: "",
    url: url_GetPartitionReplicasEventList_569197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicaEventList_569210 = ref object of OpenApiRestCall_567668
proc url_GetPartitionReplicaEventList_569212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicaEventList_569211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569213 = path.getOrDefault("replicaId")
  valid_569213 = validateParameter(valid_569213, JString, required = true,
                                 default = nil)
  if valid_569213 != nil:
    section.add "replicaId", valid_569213
  var valid_569214 = path.getOrDefault("partitionId")
  valid_569214 = validateParameter(valid_569214, JString, required = true,
                                 default = nil)
  if valid_569214 != nil:
    section.add "partitionId", valid_569214
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569215 = query.getOrDefault("timeout")
  valid_569215 = validateParameter(valid_569215, JInt, required = false,
                                 default = newJInt(60))
  if valid_569215 != nil:
    section.add "timeout", valid_569215
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569216 = query.getOrDefault("api-version")
  valid_569216 = validateParameter(valid_569216, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569216 != nil:
    section.add "api-version", valid_569216
  var valid_569217 = query.getOrDefault("SkipCorrelationLookup")
  valid_569217 = validateParameter(valid_569217, JBool, required = false, default = nil)
  if valid_569217 != nil:
    section.add "SkipCorrelationLookup", valid_569217
  var valid_569218 = query.getOrDefault("EventsTypesFilter")
  valid_569218 = validateParameter(valid_569218, JString, required = false,
                                 default = nil)
  if valid_569218 != nil:
    section.add "EventsTypesFilter", valid_569218
  var valid_569219 = query.getOrDefault("EndTimeUtc")
  valid_569219 = validateParameter(valid_569219, JString, required = true,
                                 default = nil)
  if valid_569219 != nil:
    section.add "EndTimeUtc", valid_569219
  var valid_569220 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569220 = validateParameter(valid_569220, JBool, required = false, default = nil)
  if valid_569220 != nil:
    section.add "ExcludeAnalysisEvents", valid_569220
  var valid_569221 = query.getOrDefault("StartTimeUtc")
  valid_569221 = validateParameter(valid_569221, JString, required = true,
                                 default = nil)
  if valid_569221 != nil:
    section.add "StartTimeUtc", valid_569221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569222: Call_GetPartitionReplicaEventList_569210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_569222.validator(path, query, header, formData, body)
  let scheme = call_569222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569222.url(scheme.get, call_569222.host, call_569222.base,
                         call_569222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569222, url, valid)

proc call*(call_569223: Call_GetPartitionReplicaEventList_569210;
          replicaId: string; EndTimeUtc: string; partitionId: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicaEventList
  ## The response is list of ReplicaEvent objects.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569224 = newJObject()
  var query_569225 = newJObject()
  add(path_569224, "replicaId", newJString(replicaId))
  add(query_569225, "timeout", newJInt(timeout))
  add(query_569225, "api-version", newJString(apiVersion))
  add(query_569225, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569225, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569225, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569224, "partitionId", newJString(partitionId))
  add(query_569225, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569225, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569223.call(path_569224, query_569225, nil, nil, nil)

var getPartitionReplicaEventList* = Call_GetPartitionReplicaEventList_569210(
    name: "getPartitionReplicaEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events",
    validator: validate_GetPartitionReplicaEventList_569211, base: "",
    url: url_GetPartitionReplicaEventList_569212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServicesEventList_569226 = ref object of OpenApiRestCall_567668
proc url_GetServicesEventList_569228(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetServicesEventList_569227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569229 = query.getOrDefault("timeout")
  valid_569229 = validateParameter(valid_569229, JInt, required = false,
                                 default = newJInt(60))
  if valid_569229 != nil:
    section.add "timeout", valid_569229
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569230 = query.getOrDefault("api-version")
  valid_569230 = validateParameter(valid_569230, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569230 != nil:
    section.add "api-version", valid_569230
  var valid_569231 = query.getOrDefault("SkipCorrelationLookup")
  valid_569231 = validateParameter(valid_569231, JBool, required = false, default = nil)
  if valid_569231 != nil:
    section.add "SkipCorrelationLookup", valid_569231
  var valid_569232 = query.getOrDefault("EventsTypesFilter")
  valid_569232 = validateParameter(valid_569232, JString, required = false,
                                 default = nil)
  if valid_569232 != nil:
    section.add "EventsTypesFilter", valid_569232
  var valid_569233 = query.getOrDefault("EndTimeUtc")
  valid_569233 = validateParameter(valid_569233, JString, required = true,
                                 default = nil)
  if valid_569233 != nil:
    section.add "EndTimeUtc", valid_569233
  var valid_569234 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569234 = validateParameter(valid_569234, JBool, required = false, default = nil)
  if valid_569234 != nil:
    section.add "ExcludeAnalysisEvents", valid_569234
  var valid_569235 = query.getOrDefault("StartTimeUtc")
  valid_569235 = validateParameter(valid_569235, JString, required = true,
                                 default = nil)
  if valid_569235 != nil:
    section.add "StartTimeUtc", valid_569235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569236: Call_GetServicesEventList_569226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_569236.validator(path, query, header, formData, body)
  let scheme = call_569236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569236.url(scheme.get, call_569236.host, call_569236.base,
                         call_569236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569236, url, valid)

proc call*(call_569237: Call_GetServicesEventList_569226; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServicesEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569238 = newJObject()
  add(query_569238, "timeout", newJInt(timeout))
  add(query_569238, "api-version", newJString(apiVersion))
  add(query_569238, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569238, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569238, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569238, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569238, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569237.call(nil, query_569238, nil, nil, nil)

var getServicesEventList* = Call_GetServicesEventList_569226(
    name: "getServicesEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Services/Events",
    validator: validate_GetServicesEventList_569227, base: "",
    url: url_GetServicesEventList_569228, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceEventList_569239 = ref object of OpenApiRestCall_567668
proc url_GetServiceEventList_569241(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceEventList_569240(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_569242 = path.getOrDefault("serviceId")
  valid_569242 = validateParameter(valid_569242, JString, required = true,
                                 default = nil)
  if valid_569242 != nil:
    section.add "serviceId", valid_569242
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569243 = query.getOrDefault("timeout")
  valid_569243 = validateParameter(valid_569243, JInt, required = false,
                                 default = newJInt(60))
  if valid_569243 != nil:
    section.add "timeout", valid_569243
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569244 = query.getOrDefault("api-version")
  valid_569244 = validateParameter(valid_569244, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569244 != nil:
    section.add "api-version", valid_569244
  var valid_569245 = query.getOrDefault("SkipCorrelationLookup")
  valid_569245 = validateParameter(valid_569245, JBool, required = false, default = nil)
  if valid_569245 != nil:
    section.add "SkipCorrelationLookup", valid_569245
  var valid_569246 = query.getOrDefault("EventsTypesFilter")
  valid_569246 = validateParameter(valid_569246, JString, required = false,
                                 default = nil)
  if valid_569246 != nil:
    section.add "EventsTypesFilter", valid_569246
  var valid_569247 = query.getOrDefault("EndTimeUtc")
  valid_569247 = validateParameter(valid_569247, JString, required = true,
                                 default = nil)
  if valid_569247 != nil:
    section.add "EndTimeUtc", valid_569247
  var valid_569248 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569248 = validateParameter(valid_569248, JBool, required = false, default = nil)
  if valid_569248 != nil:
    section.add "ExcludeAnalysisEvents", valid_569248
  var valid_569249 = query.getOrDefault("StartTimeUtc")
  valid_569249 = validateParameter(valid_569249, JString, required = true,
                                 default = nil)
  if valid_569249 != nil:
    section.add "StartTimeUtc", valid_569249
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569250: Call_GetServiceEventList_569239; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_569250.validator(path, query, header, formData, body)
  let scheme = call_569250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569250.url(scheme.get, call_569250.host, call_569250.base,
                         call_569250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569250, url, valid)

proc call*(call_569251: Call_GetServiceEventList_569239; EndTimeUtc: string;
          serviceId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServiceEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569252 = newJObject()
  var query_569253 = newJObject()
  add(query_569253, "timeout", newJInt(timeout))
  add(query_569253, "api-version", newJString(apiVersion))
  add(query_569253, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569253, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569253, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569252, "serviceId", newJString(serviceId))
  add(query_569253, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569253, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569251.call(path_569252, query_569253, nil, nil, nil)

var getServiceEventList* = Call_GetServiceEventList_569239(
    name: "getServiceEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Services/{serviceId}/$/Events",
    validator: validate_GetServiceEventList_569240, base: "",
    url: url_GetServiceEventList_569241, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFaultOperationList_569254 = ref object of OpenApiRestCall_567668
proc url_GetFaultOperationList_569256(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFaultOperationList_569255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: JInt (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: JInt (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  section = newJObject()
  var valid_569257 = query.getOrDefault("timeout")
  valid_569257 = validateParameter(valid_569257, JInt, required = false,
                                 default = newJInt(60))
  if valid_569257 != nil:
    section.add "timeout", valid_569257
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569258 = query.getOrDefault("api-version")
  valid_569258 = validateParameter(valid_569258, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569258 != nil:
    section.add "api-version", valid_569258
  var valid_569259 = query.getOrDefault("TypeFilter")
  valid_569259 = validateParameter(valid_569259, JInt, required = true,
                                 default = newJInt(65535))
  if valid_569259 != nil:
    section.add "TypeFilter", valid_569259
  var valid_569260 = query.getOrDefault("StateFilter")
  valid_569260 = validateParameter(valid_569260, JInt, required = true,
                                 default = newJInt(65535))
  if valid_569260 != nil:
    section.add "StateFilter", valid_569260
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569261: Call_GetFaultOperationList_569254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  let valid = call_569261.validator(path, query, header, formData, body)
  let scheme = call_569261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569261.url(scheme.get, call_569261.host, call_569261.base,
                         call_569261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569261, url, valid)

proc call*(call_569262: Call_GetFaultOperationList_569254; timeout: int = 60;
          apiVersion: string = "6.0"; TypeFilter: int = 65535; StateFilter: int = 65535): Recallable =
  ## getFaultOperationList
  ## Gets the list of user-induced fault operations filtered by provided input.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: int (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: int (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  var query_569263 = newJObject()
  add(query_569263, "timeout", newJInt(timeout))
  add(query_569263, "api-version", newJString(apiVersion))
  add(query_569263, "TypeFilter", newJInt(TypeFilter))
  add(query_569263, "StateFilter", newJInt(StateFilter))
  result = call_569262.call(nil, query_569263, nil, nil, nil)

var getFaultOperationList* = Call_GetFaultOperationList_569254(
    name: "getFaultOperationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/",
    validator: validate_GetFaultOperationList_569255, base: "",
    url: url_GetFaultOperationList_569256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelOperation_569264 = ref object of OpenApiRestCall_567668
proc url_CancelOperation_569266(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelOperation_569265(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: JBool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  section = newJObject()
  var valid_569267 = query.getOrDefault("timeout")
  valid_569267 = validateParameter(valid_569267, JInt, required = false,
                                 default = newJInt(60))
  if valid_569267 != nil:
    section.add "timeout", valid_569267
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569268 = query.getOrDefault("api-version")
  valid_569268 = validateParameter(valid_569268, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569268 != nil:
    section.add "api-version", valid_569268
  var valid_569269 = query.getOrDefault("OperationId")
  valid_569269 = validateParameter(valid_569269, JString, required = true,
                                 default = nil)
  if valid_569269 != nil:
    section.add "OperationId", valid_569269
  var valid_569270 = query.getOrDefault("Force")
  valid_569270 = validateParameter(valid_569270, JBool, required = true,
                                 default = newJBool(false))
  if valid_569270 != nil:
    section.add "Force", valid_569270
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569271: Call_CancelOperation_569264; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  let valid = call_569271.validator(path, query, header, formData, body)
  let scheme = call_569271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569271.url(scheme.get, call_569271.host, call_569271.base,
                         call_569271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569271, url, valid)

proc call*(call_569272: Call_CancelOperation_569264; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Force: bool = false): Recallable =
  ## cancelOperation
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: bool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  var query_569273 = newJObject()
  add(query_569273, "timeout", newJInt(timeout))
  add(query_569273, "api-version", newJString(apiVersion))
  add(query_569273, "OperationId", newJString(OperationId))
  add(query_569273, "Force", newJBool(Force))
  result = call_569272.call(nil, query_569273, nil, nil, nil)

var cancelOperation* = Call_CancelOperation_569264(name: "cancelOperation",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/$/Cancel",
    validator: validate_CancelOperation_569265, base: "", url: url_CancelOperation_569266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeTransitionProgress_569274 = ref object of OpenApiRestCall_567668
proc url_GetNodeTransitionProgress_569276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetTransitionProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeTransitionProgress_569275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569277 = path.getOrDefault("nodeName")
  valid_569277 = validateParameter(valid_569277, JString, required = true,
                                 default = nil)
  if valid_569277 != nil:
    section.add "nodeName", valid_569277
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569278 = query.getOrDefault("timeout")
  valid_569278 = validateParameter(valid_569278, JInt, required = false,
                                 default = newJInt(60))
  if valid_569278 != nil:
    section.add "timeout", valid_569278
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569279 = query.getOrDefault("api-version")
  valid_569279 = validateParameter(valid_569279, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569279 != nil:
    section.add "api-version", valid_569279
  var valid_569280 = query.getOrDefault("OperationId")
  valid_569280 = validateParameter(valid_569280, JString, required = true,
                                 default = nil)
  if valid_569280 != nil:
    section.add "OperationId", valid_569280
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569281: Call_GetNodeTransitionProgress_569274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  let valid = call_569281.validator(path, query, header, formData, body)
  let scheme = call_569281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569281.url(scheme.get, call_569281.host, call_569281.base,
                         call_569281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569281, url, valid)

proc call*(call_569282: Call_GetNodeTransitionProgress_569274; nodeName: string;
          OperationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeTransitionProgress
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569283 = newJObject()
  var query_569284 = newJObject()
  add(query_569284, "timeout", newJInt(timeout))
  add(query_569284, "api-version", newJString(apiVersion))
  add(path_569283, "nodeName", newJString(nodeName))
  add(query_569284, "OperationId", newJString(OperationId))
  result = call_569282.call(path_569283, query_569284, nil, nil, nil)

var getNodeTransitionProgress* = Call_GetNodeTransitionProgress_569274(
    name: "getNodeTransitionProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/GetTransitionProgress",
    validator: validate_GetNodeTransitionProgress_569275, base: "",
    url: url_GetNodeTransitionProgress_569276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartNodeTransition_569285 = ref object of OpenApiRestCall_567668
proc url_StartNodeTransition_569287(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/StartTransition/")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartNodeTransition_569286(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569288 = path.getOrDefault("nodeName")
  valid_569288 = validateParameter(valid_569288, JString, required = true,
                                 default = nil)
  if valid_569288 != nil:
    section.add "nodeName", valid_569288
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeInstanceId: JString (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: JInt (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: JString (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569289 = query.getOrDefault("timeout")
  valid_569289 = validateParameter(valid_569289, JInt, required = false,
                                 default = newJInt(60))
  if valid_569289 != nil:
    section.add "timeout", valid_569289
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569290 = query.getOrDefault("api-version")
  valid_569290 = validateParameter(valid_569290, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569290 != nil:
    section.add "api-version", valid_569290
  var valid_569291 = query.getOrDefault("NodeInstanceId")
  valid_569291 = validateParameter(valid_569291, JString, required = true,
                                 default = nil)
  if valid_569291 != nil:
    section.add "NodeInstanceId", valid_569291
  var valid_569292 = query.getOrDefault("StopDurationInSeconds")
  valid_569292 = validateParameter(valid_569292, JInt, required = true, default = nil)
  if valid_569292 != nil:
    section.add "StopDurationInSeconds", valid_569292
  var valid_569293 = query.getOrDefault("NodeTransitionType")
  valid_569293 = validateParameter(valid_569293, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569293 != nil:
    section.add "NodeTransitionType", valid_569293
  var valid_569294 = query.getOrDefault("OperationId")
  valid_569294 = validateParameter(valid_569294, JString, required = true,
                                 default = nil)
  if valid_569294 != nil:
    section.add "OperationId", valid_569294
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569295: Call_StartNodeTransition_569285; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  let valid = call_569295.validator(path, query, header, formData, body)
  let scheme = call_569295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569295.url(scheme.get, call_569295.host, call_569295.base,
                         call_569295.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569295, url, valid)

proc call*(call_569296: Call_StartNodeTransition_569285; nodeName: string;
          NodeInstanceId: string; StopDurationInSeconds: int; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          NodeTransitionType: string = "Invalid"): Recallable =
  ## startNodeTransition
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   NodeInstanceId: string (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: int (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: string (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569297 = newJObject()
  var query_569298 = newJObject()
  add(query_569298, "timeout", newJInt(timeout))
  add(query_569298, "api-version", newJString(apiVersion))
  add(path_569297, "nodeName", newJString(nodeName))
  add(query_569298, "NodeInstanceId", newJString(NodeInstanceId))
  add(query_569298, "StopDurationInSeconds", newJInt(StopDurationInSeconds))
  add(query_569298, "NodeTransitionType", newJString(NodeTransitionType))
  add(query_569298, "OperationId", newJString(OperationId))
  result = call_569296.call(path_569297, query_569298, nil, nil, nil)

var startNodeTransition* = Call_StartNodeTransition_569285(
    name: "startNodeTransition", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/StartTransition/",
    validator: validate_StartNodeTransition_569286, base: "",
    url: url_StartNodeTransition_569287, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDataLossProgress_569299 = ref object of OpenApiRestCall_567668
proc url_GetDataLossProgress_569301(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetDataLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDataLossProgress_569300(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569302 = path.getOrDefault("partitionId")
  valid_569302 = validateParameter(valid_569302, JString, required = true,
                                 default = nil)
  if valid_569302 != nil:
    section.add "partitionId", valid_569302
  var valid_569303 = path.getOrDefault("serviceId")
  valid_569303 = validateParameter(valid_569303, JString, required = true,
                                 default = nil)
  if valid_569303 != nil:
    section.add "serviceId", valid_569303
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569304 = query.getOrDefault("timeout")
  valid_569304 = validateParameter(valid_569304, JInt, required = false,
                                 default = newJInt(60))
  if valid_569304 != nil:
    section.add "timeout", valid_569304
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569305 = query.getOrDefault("api-version")
  valid_569305 = validateParameter(valid_569305, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569305 != nil:
    section.add "api-version", valid_569305
  var valid_569306 = query.getOrDefault("OperationId")
  valid_569306 = validateParameter(valid_569306, JString, required = true,
                                 default = nil)
  if valid_569306 != nil:
    section.add "OperationId", valid_569306
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569307: Call_GetDataLossProgress_569299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  let valid = call_569307.validator(path, query, header, formData, body)
  let scheme = call_569307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569307.url(scheme.get, call_569307.host, call_569307.base,
                         call_569307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569307, url, valid)

proc call*(call_569308: Call_GetDataLossProgress_569299; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDataLossProgress
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569309 = newJObject()
  var query_569310 = newJObject()
  add(query_569310, "timeout", newJInt(timeout))
  add(query_569310, "api-version", newJString(apiVersion))
  add(path_569309, "partitionId", newJString(partitionId))
  add(path_569309, "serviceId", newJString(serviceId))
  add(query_569310, "OperationId", newJString(OperationId))
  result = call_569308.call(path_569309, query_569310, nil, nil, nil)

var getDataLossProgress* = Call_GetDataLossProgress_569299(
    name: "getDataLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress",
    validator: validate_GetDataLossProgress_569300, base: "",
    url: url_GetDataLossProgress_569301, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetQuorumLossProgress_569311 = ref object of OpenApiRestCall_567668
proc url_GetQuorumLossProgress_569313(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetQuorumLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetQuorumLossProgress_569312(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569314 = path.getOrDefault("partitionId")
  valid_569314 = validateParameter(valid_569314, JString, required = true,
                                 default = nil)
  if valid_569314 != nil:
    section.add "partitionId", valid_569314
  var valid_569315 = path.getOrDefault("serviceId")
  valid_569315 = validateParameter(valid_569315, JString, required = true,
                                 default = nil)
  if valid_569315 != nil:
    section.add "serviceId", valid_569315
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569316 = query.getOrDefault("timeout")
  valid_569316 = validateParameter(valid_569316, JInt, required = false,
                                 default = newJInt(60))
  if valid_569316 != nil:
    section.add "timeout", valid_569316
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569317 = query.getOrDefault("api-version")
  valid_569317 = validateParameter(valid_569317, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569317 != nil:
    section.add "api-version", valid_569317
  var valid_569318 = query.getOrDefault("OperationId")
  valid_569318 = validateParameter(valid_569318, JString, required = true,
                                 default = nil)
  if valid_569318 != nil:
    section.add "OperationId", valid_569318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569319: Call_GetQuorumLossProgress_569311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  let valid = call_569319.validator(path, query, header, formData, body)
  let scheme = call_569319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569319.url(scheme.get, call_569319.host, call_569319.base,
                         call_569319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569319, url, valid)

proc call*(call_569320: Call_GetQuorumLossProgress_569311; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getQuorumLossProgress
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569321 = newJObject()
  var query_569322 = newJObject()
  add(query_569322, "timeout", newJInt(timeout))
  add(query_569322, "api-version", newJString(apiVersion))
  add(path_569321, "partitionId", newJString(partitionId))
  add(path_569321, "serviceId", newJString(serviceId))
  add(query_569322, "OperationId", newJString(OperationId))
  result = call_569320.call(path_569321, query_569322, nil, nil, nil)

var getQuorumLossProgress* = Call_GetQuorumLossProgress_569311(
    name: "getQuorumLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress",
    validator: validate_GetQuorumLossProgress_569312, base: "",
    url: url_GetQuorumLossProgress_569313, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestartProgress_569323 = ref object of OpenApiRestCall_567668
proc url_GetPartitionRestartProgress_569325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestartProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestartProgress_569324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569326 = path.getOrDefault("partitionId")
  valid_569326 = validateParameter(valid_569326, JString, required = true,
                                 default = nil)
  if valid_569326 != nil:
    section.add "partitionId", valid_569326
  var valid_569327 = path.getOrDefault("serviceId")
  valid_569327 = validateParameter(valid_569327, JString, required = true,
                                 default = nil)
  if valid_569327 != nil:
    section.add "serviceId", valid_569327
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569328 = query.getOrDefault("timeout")
  valid_569328 = validateParameter(valid_569328, JInt, required = false,
                                 default = newJInt(60))
  if valid_569328 != nil:
    section.add "timeout", valid_569328
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569329 = query.getOrDefault("api-version")
  valid_569329 = validateParameter(valid_569329, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569329 != nil:
    section.add "api-version", valid_569329
  var valid_569330 = query.getOrDefault("OperationId")
  valid_569330 = validateParameter(valid_569330, JString, required = true,
                                 default = nil)
  if valid_569330 != nil:
    section.add "OperationId", valid_569330
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569331: Call_GetPartitionRestartProgress_569323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  let valid = call_569331.validator(path, query, header, formData, body)
  let scheme = call_569331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569331.url(scheme.get, call_569331.host, call_569331.base,
                         call_569331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569331, url, valid)

proc call*(call_569332: Call_GetPartitionRestartProgress_569323;
          partitionId: string; serviceId: string; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionRestartProgress
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569333 = newJObject()
  var query_569334 = newJObject()
  add(query_569334, "timeout", newJInt(timeout))
  add(query_569334, "api-version", newJString(apiVersion))
  add(path_569333, "partitionId", newJString(partitionId))
  add(path_569333, "serviceId", newJString(serviceId))
  add(query_569334, "OperationId", newJString(OperationId))
  result = call_569332.call(path_569333, query_569334, nil, nil, nil)

var getPartitionRestartProgress* = Call_GetPartitionRestartProgress_569323(
    name: "getPartitionRestartProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress",
    validator: validate_GetPartitionRestartProgress_569324, base: "",
    url: url_GetPartitionRestartProgress_569325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartDataLoss_569335 = ref object of OpenApiRestCall_567668
proc url_StartDataLoss_569337(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartDataLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartDataLoss_569336(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569338 = path.getOrDefault("partitionId")
  valid_569338 = validateParameter(valid_569338, JString, required = true,
                                 default = nil)
  if valid_569338 != nil:
    section.add "partitionId", valid_569338
  var valid_569339 = path.getOrDefault("serviceId")
  valid_569339 = validateParameter(valid_569339, JString, required = true,
                                 default = nil)
  if valid_569339 != nil:
    section.add "serviceId", valid_569339
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DataLossMode: JString (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569340 = query.getOrDefault("timeout")
  valid_569340 = validateParameter(valid_569340, JInt, required = false,
                                 default = newJInt(60))
  if valid_569340 != nil:
    section.add "timeout", valid_569340
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569341 = query.getOrDefault("api-version")
  valid_569341 = validateParameter(valid_569341, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569341 != nil:
    section.add "api-version", valid_569341
  var valid_569342 = query.getOrDefault("DataLossMode")
  valid_569342 = validateParameter(valid_569342, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569342 != nil:
    section.add "DataLossMode", valid_569342
  var valid_569343 = query.getOrDefault("OperationId")
  valid_569343 = validateParameter(valid_569343, JString, required = true,
                                 default = nil)
  if valid_569343 != nil:
    section.add "OperationId", valid_569343
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569344: Call_StartDataLoss_569335; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  let valid = call_569344.validator(path, query, header, formData, body)
  let scheme = call_569344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569344.url(scheme.get, call_569344.host, call_569344.base,
                         call_569344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569344, url, valid)

proc call*(call_569345: Call_StartDataLoss_569335; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; DataLossMode: string = "Invalid"): Recallable =
  ## startDataLoss
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   DataLossMode: string (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569346 = newJObject()
  var query_569347 = newJObject()
  add(query_569347, "timeout", newJInt(timeout))
  add(query_569347, "api-version", newJString(apiVersion))
  add(path_569346, "partitionId", newJString(partitionId))
  add(query_569347, "DataLossMode", newJString(DataLossMode))
  add(path_569346, "serviceId", newJString(serviceId))
  add(query_569347, "OperationId", newJString(OperationId))
  result = call_569345.call(path_569346, query_569347, nil, nil, nil)

var startDataLoss* = Call_StartDataLoss_569335(name: "startDataLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss",
    validator: validate_StartDataLoss_569336, base: "", url: url_StartDataLoss_569337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartQuorumLoss_569348 = ref object of OpenApiRestCall_567668
proc url_StartQuorumLoss_569350(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartQuorumLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartQuorumLoss_569349(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569351 = path.getOrDefault("partitionId")
  valid_569351 = validateParameter(valid_569351, JString, required = true,
                                 default = nil)
  if valid_569351 != nil:
    section.add "partitionId", valid_569351
  var valid_569352 = path.getOrDefault("serviceId")
  valid_569352 = validateParameter(valid_569352, JString, required = true,
                                 default = nil)
  if valid_569352 != nil:
    section.add "serviceId", valid_569352
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: JString (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   QuorumLossDuration: JInt (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569353 = query.getOrDefault("timeout")
  valid_569353 = validateParameter(valid_569353, JInt, required = false,
                                 default = newJInt(60))
  if valid_569353 != nil:
    section.add "timeout", valid_569353
  assert query != nil,
        "query argument is necessary due to required `QuorumLossMode` field"
  var valid_569354 = query.getOrDefault("QuorumLossMode")
  valid_569354 = validateParameter(valid_569354, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569354 != nil:
    section.add "QuorumLossMode", valid_569354
  var valid_569355 = query.getOrDefault("api-version")
  valid_569355 = validateParameter(valid_569355, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569355 != nil:
    section.add "api-version", valid_569355
  var valid_569356 = query.getOrDefault("QuorumLossDuration")
  valid_569356 = validateParameter(valid_569356, JInt, required = true, default = nil)
  if valid_569356 != nil:
    section.add "QuorumLossDuration", valid_569356
  var valid_569357 = query.getOrDefault("OperationId")
  valid_569357 = validateParameter(valid_569357, JString, required = true,
                                 default = nil)
  if valid_569357 != nil:
    section.add "OperationId", valid_569357
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569358: Call_StartQuorumLoss_569348; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  let valid = call_569358.validator(path, query, header, formData, body)
  let scheme = call_569358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569358.url(scheme.get, call_569358.host, call_569358.base,
                         call_569358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569358, url, valid)

proc call*(call_569359: Call_StartQuorumLoss_569348; partitionId: string;
          QuorumLossDuration: int; serviceId: string; OperationId: string;
          timeout: int = 60; QuorumLossMode: string = "Invalid";
          apiVersion: string = "6.0"): Recallable =
  ## startQuorumLoss
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: string (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   QuorumLossDuration: int (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569360 = newJObject()
  var query_569361 = newJObject()
  add(query_569361, "timeout", newJInt(timeout))
  add(query_569361, "QuorumLossMode", newJString(QuorumLossMode))
  add(query_569361, "api-version", newJString(apiVersion))
  add(path_569360, "partitionId", newJString(partitionId))
  add(query_569361, "QuorumLossDuration", newJInt(QuorumLossDuration))
  add(path_569360, "serviceId", newJString(serviceId))
  add(query_569361, "OperationId", newJString(OperationId))
  result = call_569359.call(path_569360, query_569361, nil, nil, nil)

var startQuorumLoss* = Call_StartQuorumLoss_569348(name: "startQuorumLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss",
    validator: validate_StartQuorumLoss_569349, base: "", url: url_StartQuorumLoss_569350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartPartitionRestart_569362 = ref object of OpenApiRestCall_567668
proc url_StartPartitionRestart_569364(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartRestart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartPartitionRestart_569363(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569365 = path.getOrDefault("partitionId")
  valid_569365 = validateParameter(valid_569365, JString, required = true,
                                 default = nil)
  if valid_569365 != nil:
    section.add "partitionId", valid_569365
  var valid_569366 = path.getOrDefault("serviceId")
  valid_569366 = validateParameter(valid_569366, JString, required = true,
                                 default = nil)
  if valid_569366 != nil:
    section.add "serviceId", valid_569366
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: JString (required)
  ##                       : Describe which partitions to restart.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569367 = query.getOrDefault("timeout")
  valid_569367 = validateParameter(valid_569367, JInt, required = false,
                                 default = newJInt(60))
  if valid_569367 != nil:
    section.add "timeout", valid_569367
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569368 = query.getOrDefault("api-version")
  valid_569368 = validateParameter(valid_569368, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569368 != nil:
    section.add "api-version", valid_569368
  var valid_569369 = query.getOrDefault("RestartPartitionMode")
  valid_569369 = validateParameter(valid_569369, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569369 != nil:
    section.add "RestartPartitionMode", valid_569369
  var valid_569370 = query.getOrDefault("OperationId")
  valid_569370 = validateParameter(valid_569370, JString, required = true,
                                 default = nil)
  if valid_569370 != nil:
    section.add "OperationId", valid_569370
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569371: Call_StartPartitionRestart_569362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  let valid = call_569371.validator(path, query, header, formData, body)
  let scheme = call_569371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569371.url(scheme.get, call_569371.host, call_569371.base,
                         call_569371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569371, url, valid)

proc call*(call_569372: Call_StartPartitionRestart_569362; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; RestartPartitionMode: string = "Invalid"): Recallable =
  ## startPartitionRestart
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: string (required)
  ##                       : Describe which partitions to restart.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569373 = newJObject()
  var query_569374 = newJObject()
  add(query_569374, "timeout", newJInt(timeout))
  add(query_569374, "api-version", newJString(apiVersion))
  add(query_569374, "RestartPartitionMode", newJString(RestartPartitionMode))
  add(path_569373, "partitionId", newJString(partitionId))
  add(path_569373, "serviceId", newJString(serviceId))
  add(query_569374, "OperationId", newJString(OperationId))
  result = call_569372.call(path_569373, query_569374, nil, nil, nil)

var startPartitionRestart* = Call_StartPartitionRestart_569362(
    name: "startPartitionRestart", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart",
    validator: validate_StartPartitionRestart_569363, base: "",
    url: url_StartPartitionRestart_569364, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootContent_569375 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreRootContent_569377(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootContent_569376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569378 = query.getOrDefault("timeout")
  valid_569378 = validateParameter(valid_569378, JInt, required = false,
                                 default = newJInt(60))
  if valid_569378 != nil:
    section.add "timeout", valid_569378
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569379 = query.getOrDefault("api-version")
  valid_569379 = validateParameter(valid_569379, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569379 != nil:
    section.add "api-version", valid_569379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569380: Call_GetImageStoreRootContent_569375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  let valid = call_569380.validator(path, query, header, formData, body)
  let scheme = call_569380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569380.url(scheme.get, call_569380.host, call_569380.base,
                         call_569380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569380, url, valid)

proc call*(call_569381: Call_GetImageStoreRootContent_569375; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getImageStoreRootContent
  ## Returns the information about the image store content at the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_569382 = newJObject()
  add(query_569382, "timeout", newJInt(timeout))
  add(query_569382, "api-version", newJString(apiVersion))
  result = call_569381.call(nil, query_569382, nil, nil, nil)

var getImageStoreRootContent* = Call_GetImageStoreRootContent_569375(
    name: "getImageStoreRootContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore",
    validator: validate_GetImageStoreRootContent_569376, base: "",
    url: url_GetImageStoreRootContent_569377, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CommitImageStoreUploadSession_569383 = ref object of OpenApiRestCall_567668
proc url_CommitImageStoreUploadSession_569385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CommitImageStoreUploadSession_569384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569386 = query.getOrDefault("timeout")
  valid_569386 = validateParameter(valid_569386, JInt, required = false,
                                 default = newJInt(60))
  if valid_569386 != nil:
    section.add "timeout", valid_569386
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569387 = query.getOrDefault("api-version")
  valid_569387 = validateParameter(valid_569387, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569387 != nil:
    section.add "api-version", valid_569387
  var valid_569388 = query.getOrDefault("session-id")
  valid_569388 = validateParameter(valid_569388, JString, required = true,
                                 default = nil)
  if valid_569388 != nil:
    section.add "session-id", valid_569388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569389: Call_CommitImageStoreUploadSession_569383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  let valid = call_569389.validator(path, query, header, formData, body)
  let scheme = call_569389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569389.url(scheme.get, call_569389.host, call_569389.base,
                         call_569389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569389, url, valid)

proc call*(call_569390: Call_CommitImageStoreUploadSession_569383;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## commitImageStoreUploadSession
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_569391 = newJObject()
  add(query_569391, "timeout", newJInt(timeout))
  add(query_569391, "api-version", newJString(apiVersion))
  add(query_569391, "session-id", newJString(sessionId))
  result = call_569390.call(nil, query_569391, nil, nil, nil)

var commitImageStoreUploadSession* = Call_CommitImageStoreUploadSession_569383(
    name: "commitImageStoreUploadSession", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/CommitUploadSession",
    validator: validate_CommitImageStoreUploadSession_569384, base: "",
    url: url_CommitImageStoreUploadSession_569385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CopyImageStoreContent_569392 = ref object of OpenApiRestCall_567668
proc url_CopyImageStoreContent_569394(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CopyImageStoreContent_569393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569395 = query.getOrDefault("timeout")
  valid_569395 = validateParameter(valid_569395, JInt, required = false,
                                 default = newJInt(60))
  if valid_569395 != nil:
    section.add "timeout", valid_569395
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569396 = query.getOrDefault("api-version")
  valid_569396 = validateParameter(valid_569396, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569396 != nil:
    section.add "api-version", valid_569396
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569398: Call_CopyImageStoreContent_569392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  let valid = call_569398.validator(path, query, header, formData, body)
  let scheme = call_569398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569398.url(scheme.get, call_569398.host, call_569398.base,
                         call_569398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569398, url, valid)

proc call*(call_569399: Call_CopyImageStoreContent_569392;
          ImageStoreCopyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## copyImageStoreContent
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  var query_569400 = newJObject()
  var body_569401 = newJObject()
  add(query_569400, "timeout", newJInt(timeout))
  add(query_569400, "api-version", newJString(apiVersion))
  if ImageStoreCopyDescription != nil:
    body_569401 = ImageStoreCopyDescription
  result = call_569399.call(nil, query_569400, nil, nil, body_569401)

var copyImageStoreContent* = Call_CopyImageStoreContent_569392(
    name: "copyImageStoreContent", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/Copy",
    validator: validate_CopyImageStoreContent_569393, base: "",
    url: url_CopyImageStoreContent_569394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreUploadSession_569402 = ref object of OpenApiRestCall_567668
proc url_DeleteImageStoreUploadSession_569404(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteImageStoreUploadSession_569403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569405 = query.getOrDefault("timeout")
  valid_569405 = validateParameter(valid_569405, JInt, required = false,
                                 default = newJInt(60))
  if valid_569405 != nil:
    section.add "timeout", valid_569405
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569406 = query.getOrDefault("api-version")
  valid_569406 = validateParameter(valid_569406, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569406 != nil:
    section.add "api-version", valid_569406
  var valid_569407 = query.getOrDefault("session-id")
  valid_569407 = validateParameter(valid_569407, JString, required = true,
                                 default = nil)
  if valid_569407 != nil:
    section.add "session-id", valid_569407
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569408: Call_DeleteImageStoreUploadSession_569402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  let valid = call_569408.validator(path, query, header, formData, body)
  let scheme = call_569408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569408.url(scheme.get, call_569408.host, call_569408.base,
                         call_569408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569408, url, valid)

proc call*(call_569409: Call_DeleteImageStoreUploadSession_569402;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreUploadSession
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_569410 = newJObject()
  add(query_569410, "timeout", newJInt(timeout))
  add(query_569410, "api-version", newJString(apiVersion))
  add(query_569410, "session-id", newJString(sessionId))
  result = call_569409.call(nil, query_569410, nil, nil, nil)

var deleteImageStoreUploadSession* = Call_DeleteImageStoreUploadSession_569402(
    name: "deleteImageStoreUploadSession", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/$/DeleteUploadSession",
    validator: validate_DeleteImageStoreUploadSession_569403, base: "",
    url: url_DeleteImageStoreUploadSession_569404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootFolderSize_569411 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreRootFolderSize_569413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootFolderSize_569412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the total size of files at the root and children folders in image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569414 = query.getOrDefault("timeout")
  valid_569414 = validateParameter(valid_569414, JInt, required = false,
                                 default = newJInt(60))
  if valid_569414 != nil:
    section.add "timeout", valid_569414
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569415 = query.getOrDefault("api-version")
  valid_569415 = validateParameter(valid_569415, JString, required = true,
                                 default = newJString("6.5"))
  if valid_569415 != nil:
    section.add "api-version", valid_569415
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569416: Call_GetImageStoreRootFolderSize_569411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the total size of files at the root and children folders in image store.
  ## 
  let valid = call_569416.validator(path, query, header, formData, body)
  let scheme = call_569416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569416.url(scheme.get, call_569416.host, call_569416.base,
                         call_569416.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569416, url, valid)

proc call*(call_569417: Call_GetImageStoreRootFolderSize_569411; timeout: int = 60;
          apiVersion: string = "6.5"): Recallable =
  ## getImageStoreRootFolderSize
  ## Returns the total size of files at the root and children folders in image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_569418 = newJObject()
  add(query_569418, "timeout", newJInt(timeout))
  add(query_569418, "api-version", newJString(apiVersion))
  result = call_569417.call(nil, query_569418, nil, nil, nil)

var getImageStoreRootFolderSize* = Call_GetImageStoreRootFolderSize_569411(
    name: "getImageStoreRootFolderSize", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/FolderSize",
    validator: validate_GetImageStoreRootFolderSize_569412, base: "",
    url: url_GetImageStoreRootFolderSize_569413,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionById_569419 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreUploadSessionById_569421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreUploadSessionById_569420(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569422 = query.getOrDefault("timeout")
  valid_569422 = validateParameter(valid_569422, JInt, required = false,
                                 default = newJInt(60))
  if valid_569422 != nil:
    section.add "timeout", valid_569422
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569423 = query.getOrDefault("api-version")
  valid_569423 = validateParameter(valid_569423, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569423 != nil:
    section.add "api-version", valid_569423
  var valid_569424 = query.getOrDefault("session-id")
  valid_569424 = validateParameter(valid_569424, JString, required = true,
                                 default = nil)
  if valid_569424 != nil:
    section.add "session-id", valid_569424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569425: Call_GetImageStoreUploadSessionById_569419; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_569425.validator(path, query, header, formData, body)
  let scheme = call_569425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569425.url(scheme.get, call_569425.host, call_569425.base,
                         call_569425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569425, url, valid)

proc call*(call_569426: Call_GetImageStoreUploadSessionById_569419;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionById
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_569427 = newJObject()
  add(query_569427, "timeout", newJInt(timeout))
  add(query_569427, "api-version", newJString(apiVersion))
  add(query_569427, "session-id", newJString(sessionId))
  result = call_569426.call(nil, query_569427, nil, nil, nil)

var getImageStoreUploadSessionById* = Call_GetImageStoreUploadSessionById_569419(
    name: "getImageStoreUploadSessionById", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionById_569420, base: "",
    url: url_GetImageStoreUploadSessionById_569421,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFile_569438 = ref object of OpenApiRestCall_567668
proc url_UploadFile_569440(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFile_569439(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569441 = path.getOrDefault("contentPath")
  valid_569441 = validateParameter(valid_569441, JString, required = true,
                                 default = nil)
  if valid_569441 != nil:
    section.add "contentPath", valid_569441
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569442 = query.getOrDefault("timeout")
  valid_569442 = validateParameter(valid_569442, JInt, required = false,
                                 default = newJInt(60))
  if valid_569442 != nil:
    section.add "timeout", valid_569442
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569443 = query.getOrDefault("api-version")
  valid_569443 = validateParameter(valid_569443, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569443 != nil:
    section.add "api-version", valid_569443
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569444: Call_UploadFile_569438; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  let valid = call_569444.validator(path, query, header, formData, body)
  let scheme = call_569444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569444.url(scheme.get, call_569444.host, call_569444.base,
                         call_569444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569444, url, valid)

proc call*(call_569445: Call_UploadFile_569438; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFile
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569446 = newJObject()
  var query_569447 = newJObject()
  add(query_569447, "timeout", newJInt(timeout))
  add(query_569447, "api-version", newJString(apiVersion))
  add(path_569446, "contentPath", newJString(contentPath))
  result = call_569445.call(path_569446, query_569447, nil, nil, nil)

var uploadFile* = Call_UploadFile_569438(name: "uploadFile",
                                      meth: HttpMethod.HttpPut,
                                      host: "azure.local:19080",
                                      route: "/ImageStore/{contentPath}",
                                      validator: validate_UploadFile_569439,
                                      base: "", url: url_UploadFile_569440,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreContent_569428 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreContent_569430(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreContent_569429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569431 = path.getOrDefault("contentPath")
  valid_569431 = validateParameter(valid_569431, JString, required = true,
                                 default = nil)
  if valid_569431 != nil:
    section.add "contentPath", valid_569431
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569432 = query.getOrDefault("timeout")
  valid_569432 = validateParameter(valid_569432, JInt, required = false,
                                 default = newJInt(60))
  if valid_569432 != nil:
    section.add "timeout", valid_569432
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569433 = query.getOrDefault("api-version")
  valid_569433 = validateParameter(valid_569433, JString, required = true,
                                 default = newJString("6.2"))
  if valid_569433 != nil:
    section.add "api-version", valid_569433
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569434: Call_GetImageStoreContent_569428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_569434.validator(path, query, header, formData, body)
  let scheme = call_569434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569434.url(scheme.get, call_569434.host, call_569434.base,
                         call_569434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569434, url, valid)

proc call*(call_569435: Call_GetImageStoreContent_569428; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## getImageStoreContent
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569436 = newJObject()
  var query_569437 = newJObject()
  add(query_569437, "timeout", newJInt(timeout))
  add(query_569437, "api-version", newJString(apiVersion))
  add(path_569436, "contentPath", newJString(contentPath))
  result = call_569435.call(path_569436, query_569437, nil, nil, nil)

var getImageStoreContent* = Call_GetImageStoreContent_569428(
    name: "getImageStoreContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_GetImageStoreContent_569429, base: "",
    url: url_GetImageStoreContent_569430, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreContent_569448 = ref object of OpenApiRestCall_567668
proc url_DeleteImageStoreContent_569450(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteImageStoreContent_569449(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569451 = path.getOrDefault("contentPath")
  valid_569451 = validateParameter(valid_569451, JString, required = true,
                                 default = nil)
  if valid_569451 != nil:
    section.add "contentPath", valid_569451
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569452 = query.getOrDefault("timeout")
  valid_569452 = validateParameter(valid_569452, JInt, required = false,
                                 default = newJInt(60))
  if valid_569452 != nil:
    section.add "timeout", valid_569452
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569453 = query.getOrDefault("api-version")
  valid_569453 = validateParameter(valid_569453, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569453 != nil:
    section.add "api-version", valid_569453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569454: Call_DeleteImageStoreContent_569448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  let valid = call_569454.validator(path, query, header, formData, body)
  let scheme = call_569454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569454.url(scheme.get, call_569454.host, call_569454.base,
                         call_569454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569454, url, valid)

proc call*(call_569455: Call_DeleteImageStoreContent_569448; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreContent
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569456 = newJObject()
  var query_569457 = newJObject()
  add(query_569457, "timeout", newJInt(timeout))
  add(query_569457, "api-version", newJString(apiVersion))
  add(path_569456, "contentPath", newJString(contentPath))
  result = call_569455.call(path_569456, query_569457, nil, nil, nil)

var deleteImageStoreContent* = Call_DeleteImageStoreContent_569448(
    name: "deleteImageStoreContent", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_DeleteImageStoreContent_569449, base: "",
    url: url_DeleteImageStoreContent_569450, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreFolderSize_569458 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreFolderSize_569460(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/FolderSize")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreFolderSize_569459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569461 = path.getOrDefault("contentPath")
  valid_569461 = validateParameter(valid_569461, JString, required = true,
                                 default = nil)
  if valid_569461 != nil:
    section.add "contentPath", valid_569461
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569462 = query.getOrDefault("timeout")
  valid_569462 = validateParameter(valid_569462, JInt, required = false,
                                 default = newJInt(60))
  if valid_569462 != nil:
    section.add "timeout", valid_569462
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569463 = query.getOrDefault("api-version")
  valid_569463 = validateParameter(valid_569463, JString, required = true,
                                 default = newJString("6.5"))
  if valid_569463 != nil:
    section.add "api-version", valid_569463
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569464: Call_GetImageStoreFolderSize_569458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_569464.validator(path, query, header, formData, body)
  let scheme = call_569464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569464.url(scheme.get, call_569464.host, call_569464.base,
                         call_569464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569464, url, valid)

proc call*(call_569465: Call_GetImageStoreFolderSize_569458; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.5"): Recallable =
  ## getImageStoreFolderSize
  ## Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569466 = newJObject()
  var query_569467 = newJObject()
  add(query_569467, "timeout", newJInt(timeout))
  add(query_569467, "api-version", newJString(apiVersion))
  add(path_569466, "contentPath", newJString(contentPath))
  result = call_569465.call(path_569466, query_569467, nil, nil, nil)

var getImageStoreFolderSize* = Call_GetImageStoreFolderSize_569458(
    name: "getImageStoreFolderSize", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}/$/FolderSize",
    validator: validate_GetImageStoreFolderSize_569459, base: "",
    url: url_GetImageStoreFolderSize_569460, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionByPath_569468 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreUploadSessionByPath_569470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/GetUploadSession")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreUploadSessionByPath_569469(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569471 = path.getOrDefault("contentPath")
  valid_569471 = validateParameter(valid_569471, JString, required = true,
                                 default = nil)
  if valid_569471 != nil:
    section.add "contentPath", valid_569471
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569472 = query.getOrDefault("timeout")
  valid_569472 = validateParameter(valid_569472, JInt, required = false,
                                 default = newJInt(60))
  if valid_569472 != nil:
    section.add "timeout", valid_569472
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569473 = query.getOrDefault("api-version")
  valid_569473 = validateParameter(valid_569473, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569473 != nil:
    section.add "api-version", valid_569473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569474: Call_GetImageStoreUploadSessionByPath_569468;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_569474.validator(path, query, header, formData, body)
  let scheme = call_569474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569474.url(scheme.get, call_569474.host, call_569474.base,
                         call_569474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569474, url, valid)

proc call*(call_569475: Call_GetImageStoreUploadSessionByPath_569468;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionByPath
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569476 = newJObject()
  var query_569477 = newJObject()
  add(query_569477, "timeout", newJInt(timeout))
  add(query_569477, "api-version", newJString(apiVersion))
  add(path_569476, "contentPath", newJString(contentPath))
  result = call_569475.call(path_569476, query_569477, nil, nil, nil)

var getImageStoreUploadSessionByPath* = Call_GetImageStoreUploadSessionByPath_569468(
    name: "getImageStoreUploadSessionByPath", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionByPath_569469, base: "",
    url: url_GetImageStoreUploadSessionByPath_569470,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFileChunk_569478 = ref object of OpenApiRestCall_567668
proc url_UploadFileChunk_569480(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/UploadChunk")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFileChunk_569479(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569481 = path.getOrDefault("contentPath")
  valid_569481 = validateParameter(valid_569481, JString, required = true,
                                 default = nil)
  if valid_569481 != nil:
    section.add "contentPath", valid_569481
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569482 = query.getOrDefault("timeout")
  valid_569482 = validateParameter(valid_569482, JInt, required = false,
                                 default = newJInt(60))
  if valid_569482 != nil:
    section.add "timeout", valid_569482
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569483 = query.getOrDefault("api-version")
  valid_569483 = validateParameter(valid_569483, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569483 != nil:
    section.add "api-version", valid_569483
  var valid_569484 = query.getOrDefault("session-id")
  valid_569484 = validateParameter(valid_569484, JString, required = true,
                                 default = nil)
  if valid_569484 != nil:
    section.add "session-id", valid_569484
  result.add "query", section
  ## parameters in `header` object:
  ##   Content-Range: JString (required)
  ##                : When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
  section = newJObject()
  assert header != nil,
        "header argument is necessary due to required `Content-Range` field"
  var valid_569485 = header.getOrDefault("Content-Range")
  valid_569485 = validateParameter(valid_569485, JString, required = true,
                                 default = nil)
  if valid_569485 != nil:
    section.add "Content-Range", valid_569485
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569486: Call_UploadFileChunk_569478; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  let valid = call_569486.validator(path, query, header, formData, body)
  let scheme = call_569486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569486.url(scheme.get, call_569486.host, call_569486.base,
                         call_569486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569486, url, valid)

proc call*(call_569487: Call_UploadFileChunk_569478; sessionId: string;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFileChunk
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569488 = newJObject()
  var query_569489 = newJObject()
  add(query_569489, "timeout", newJInt(timeout))
  add(query_569489, "api-version", newJString(apiVersion))
  add(query_569489, "session-id", newJString(sessionId))
  add(path_569488, "contentPath", newJString(contentPath))
  result = call_569487.call(path_569488, query_569489, nil, nil, nil)

var uploadFileChunk* = Call_UploadFileChunk_569478(name: "uploadFileChunk",
    meth: HttpMethod.HttpPut, host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/UploadChunk",
    validator: validate_UploadFileChunk_569479, base: "", url: url_UploadFileChunk_569480,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateName_569490 = ref object of OpenApiRestCall_567668
proc url_CreateName_569492(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateName_569491(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates the specified Service Fabric name.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569493 = query.getOrDefault("timeout")
  valid_569493 = validateParameter(valid_569493, JInt, required = false,
                                 default = newJInt(60))
  if valid_569493 != nil:
    section.add "timeout", valid_569493
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569494 = query.getOrDefault("api-version")
  valid_569494 = validateParameter(valid_569494, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569494 != nil:
    section.add "api-version", valid_569494
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569496: Call_CreateName_569490; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates the specified Service Fabric name.
  ## 
  let valid = call_569496.validator(path, query, header, formData, body)
  let scheme = call_569496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569496.url(scheme.get, call_569496.host, call_569496.base,
                         call_569496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569496, url, valid)

proc call*(call_569497: Call_CreateName_569490; NameDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createName
  ## Creates the specified Service Fabric name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  var query_569498 = newJObject()
  var body_569499 = newJObject()
  add(query_569498, "timeout", newJInt(timeout))
  add(query_569498, "api-version", newJString(apiVersion))
  if NameDescription != nil:
    body_569499 = NameDescription
  result = call_569497.call(nil, query_569498, nil, nil, body_569499)

var createName* = Call_CreateName_569490(name: "createName",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Names/$/Create",
                                      validator: validate_CreateName_569491,
                                      base: "", url: url_CreateName_569492,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNameExistsInfo_569500 = ref object of OpenApiRestCall_567668
proc url_GetNameExistsInfo_569502(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNameExistsInfo_569501(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569503 = path.getOrDefault("nameId")
  valid_569503 = validateParameter(valid_569503, JString, required = true,
                                 default = nil)
  if valid_569503 != nil:
    section.add "nameId", valid_569503
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569504 = query.getOrDefault("timeout")
  valid_569504 = validateParameter(valid_569504, JInt, required = false,
                                 default = newJInt(60))
  if valid_569504 != nil:
    section.add "timeout", valid_569504
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569505 = query.getOrDefault("api-version")
  valid_569505 = validateParameter(valid_569505, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569505 != nil:
    section.add "api-version", valid_569505
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569506: Call_GetNameExistsInfo_569500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  let valid = call_569506.validator(path, query, header, formData, body)
  let scheme = call_569506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569506.url(scheme.get, call_569506.host, call_569506.base,
                         call_569506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569506, url, valid)

proc call*(call_569507: Call_GetNameExistsInfo_569500; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNameExistsInfo
  ## Returns whether the specified Service Fabric name exists.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_569508 = newJObject()
  var query_569509 = newJObject()
  add(query_569509, "timeout", newJInt(timeout))
  add(query_569509, "api-version", newJString(apiVersion))
  add(path_569508, "nameId", newJString(nameId))
  result = call_569507.call(path_569508, query_569509, nil, nil, nil)

var getNameExistsInfo* = Call_GetNameExistsInfo_569500(name: "getNameExistsInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Names/{nameId}",
    validator: validate_GetNameExistsInfo_569501, base: "",
    url: url_GetNameExistsInfo_569502, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteName_569510 = ref object of OpenApiRestCall_567668
proc url_DeleteName_569512(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteName_569511(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569513 = path.getOrDefault("nameId")
  valid_569513 = validateParameter(valid_569513, JString, required = true,
                                 default = nil)
  if valid_569513 != nil:
    section.add "nameId", valid_569513
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569514 = query.getOrDefault("timeout")
  valid_569514 = validateParameter(valid_569514, JInt, required = false,
                                 default = newJInt(60))
  if valid_569514 != nil:
    section.add "timeout", valid_569514
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569515 = query.getOrDefault("api-version")
  valid_569515 = validateParameter(valid_569515, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569515 != nil:
    section.add "api-version", valid_569515
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569516: Call_DeleteName_569510; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  let valid = call_569516.validator(path, query, header, formData, body)
  let scheme = call_569516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569516.url(scheme.get, call_569516.host, call_569516.base,
                         call_569516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569516, url, valid)

proc call*(call_569517: Call_DeleteName_569510; nameId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deleteName
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_569518 = newJObject()
  var query_569519 = newJObject()
  add(query_569519, "timeout", newJInt(timeout))
  add(query_569519, "api-version", newJString(apiVersion))
  add(path_569518, "nameId", newJString(nameId))
  result = call_569517.call(path_569518, query_569519, nil, nil, nil)

var deleteName* = Call_DeleteName_569510(name: "deleteName",
                                      meth: HttpMethod.HttpDelete,
                                      host: "azure.local:19080",
                                      route: "/Names/{nameId}",
                                      validator: validate_DeleteName_569511,
                                      base: "", url: url_DeleteName_569512,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfoList_569520 = ref object of OpenApiRestCall_567668
proc url_GetPropertyInfoList_569522(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfoList_569521(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569523 = path.getOrDefault("nameId")
  valid_569523 = validateParameter(valid_569523, JString, required = true,
                                 default = nil)
  if valid_569523 != nil:
    section.add "nameId", valid_569523
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: JBool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  section = newJObject()
  var valid_569524 = query.getOrDefault("timeout")
  valid_569524 = validateParameter(valid_569524, JInt, required = false,
                                 default = newJInt(60))
  if valid_569524 != nil:
    section.add "timeout", valid_569524
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569525 = query.getOrDefault("api-version")
  valid_569525 = validateParameter(valid_569525, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569525 != nil:
    section.add "api-version", valid_569525
  var valid_569526 = query.getOrDefault("ContinuationToken")
  valid_569526 = validateParameter(valid_569526, JString, required = false,
                                 default = nil)
  if valid_569526 != nil:
    section.add "ContinuationToken", valid_569526
  var valid_569527 = query.getOrDefault("IncludeValues")
  valid_569527 = validateParameter(valid_569527, JBool, required = false,
                                 default = newJBool(false))
  if valid_569527 != nil:
    section.add "IncludeValues", valid_569527
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569528: Call_GetPropertyInfoList_569520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  let valid = call_569528.validator(path, query, header, formData, body)
  let scheme = call_569528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569528.url(scheme.get, call_569528.host, call_569528.base,
                         call_569528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569528, url, valid)

proc call*(call_569529: Call_GetPropertyInfoList_569520; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          IncludeValues: bool = false): Recallable =
  ## getPropertyInfoList
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: bool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  var path_569530 = newJObject()
  var query_569531 = newJObject()
  add(query_569531, "timeout", newJInt(timeout))
  add(query_569531, "api-version", newJString(apiVersion))
  add(path_569530, "nameId", newJString(nameId))
  add(query_569531, "ContinuationToken", newJString(ContinuationToken))
  add(query_569531, "IncludeValues", newJBool(IncludeValues))
  result = call_569529.call(path_569530, query_569531, nil, nil, nil)

var getPropertyInfoList* = Call_GetPropertyInfoList_569520(
    name: "getPropertyInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Names/{nameId}/$/GetProperties",
    validator: validate_GetPropertyInfoList_569521, base: "",
    url: url_GetPropertyInfoList_569522, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SubmitPropertyBatch_569532 = ref object of OpenApiRestCall_567668
proc url_SubmitPropertyBatch_569534(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties/$/SubmitBatch")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SubmitPropertyBatch_569533(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569535 = path.getOrDefault("nameId")
  valid_569535 = validateParameter(valid_569535, JString, required = true,
                                 default = nil)
  if valid_569535 != nil:
    section.add "nameId", valid_569535
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569536 = query.getOrDefault("timeout")
  valid_569536 = validateParameter(valid_569536, JInt, required = false,
                                 default = newJInt(60))
  if valid_569536 != nil:
    section.add "timeout", valid_569536
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569537 = query.getOrDefault("api-version")
  valid_569537 = validateParameter(valid_569537, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569537 != nil:
    section.add "api-version", valid_569537
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569539: Call_SubmitPropertyBatch_569532; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  let valid = call_569539.validator(path, query, header, formData, body)
  let scheme = call_569539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569539.url(scheme.get, call_569539.host, call_569539.base,
                         call_569539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569539, url, valid)

proc call*(call_569540: Call_SubmitPropertyBatch_569532; nameId: string;
          PropertyBatchDescriptionList: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## submitPropertyBatch
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  var path_569541 = newJObject()
  var query_569542 = newJObject()
  var body_569543 = newJObject()
  add(query_569542, "timeout", newJInt(timeout))
  add(query_569542, "api-version", newJString(apiVersion))
  add(path_569541, "nameId", newJString(nameId))
  if PropertyBatchDescriptionList != nil:
    body_569543 = PropertyBatchDescriptionList
  result = call_569540.call(path_569541, query_569542, nil, nil, body_569543)

var submitPropertyBatch* = Call_SubmitPropertyBatch_569532(
    name: "submitPropertyBatch", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperties/$/SubmitBatch",
    validator: validate_SubmitPropertyBatch_569533, base: "",
    url: url_SubmitPropertyBatch_569534, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutProperty_569555 = ref object of OpenApiRestCall_567668
proc url_PutProperty_569557(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_PutProperty_569556(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569558 = path.getOrDefault("nameId")
  valid_569558 = validateParameter(valid_569558, JString, required = true,
                                 default = nil)
  if valid_569558 != nil:
    section.add "nameId", valid_569558
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569559 = query.getOrDefault("timeout")
  valid_569559 = validateParameter(valid_569559, JInt, required = false,
                                 default = newJInt(60))
  if valid_569559 != nil:
    section.add "timeout", valid_569559
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569560 = query.getOrDefault("api-version")
  valid_569560 = validateParameter(valid_569560, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569560 != nil:
    section.add "api-version", valid_569560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569562: Call_PutProperty_569555; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  let valid = call_569562.validator(path, query, header, formData, body)
  let scheme = call_569562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569562.url(scheme.get, call_569562.host, call_569562.base,
                         call_569562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569562, url, valid)

proc call*(call_569563: Call_PutProperty_569555; nameId: string;
          PropertyDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## putProperty
  ## Creates or updates the specified Service Fabric property under a given name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  var path_569564 = newJObject()
  var query_569565 = newJObject()
  var body_569566 = newJObject()
  add(query_569565, "timeout", newJInt(timeout))
  add(query_569565, "api-version", newJString(apiVersion))
  add(path_569564, "nameId", newJString(nameId))
  if PropertyDescription != nil:
    body_569566 = PropertyDescription
  result = call_569563.call(path_569564, query_569565, nil, nil, body_569566)

var putProperty* = Call_PutProperty_569555(name: "putProperty",
                                        meth: HttpMethod.HttpPut,
                                        host: "azure.local:19080",
                                        route: "/Names/{nameId}/$/GetProperty",
                                        validator: validate_PutProperty_569556,
                                        base: "", url: url_PutProperty_569557,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfo_569544 = ref object of OpenApiRestCall_567668
proc url_GetPropertyInfo_569546(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfo_569545(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569547 = path.getOrDefault("nameId")
  valid_569547 = validateParameter(valid_569547, JString, required = true,
                                 default = nil)
  if valid_569547 != nil:
    section.add "nameId", valid_569547
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_569548 = query.getOrDefault("timeout")
  valid_569548 = validateParameter(valid_569548, JInt, required = false,
                                 default = newJInt(60))
  if valid_569548 != nil:
    section.add "timeout", valid_569548
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569549 = query.getOrDefault("api-version")
  valid_569549 = validateParameter(valid_569549, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569549 != nil:
    section.add "api-version", valid_569549
  var valid_569550 = query.getOrDefault("PropertyName")
  valid_569550 = validateParameter(valid_569550, JString, required = true,
                                 default = nil)
  if valid_569550 != nil:
    section.add "PropertyName", valid_569550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569551: Call_GetPropertyInfo_569544; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  let valid = call_569551.validator(path, query, header, formData, body)
  let scheme = call_569551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569551.url(scheme.get, call_569551.host, call_569551.base,
                         call_569551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569551, url, valid)

proc call*(call_569552: Call_GetPropertyInfo_569544; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPropertyInfo
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_569553 = newJObject()
  var query_569554 = newJObject()
  add(query_569554, "timeout", newJInt(timeout))
  add(query_569554, "api-version", newJString(apiVersion))
  add(path_569553, "nameId", newJString(nameId))
  add(query_569554, "PropertyName", newJString(PropertyName))
  result = call_569552.call(path_569553, query_569554, nil, nil, nil)

var getPropertyInfo* = Call_GetPropertyInfo_569544(name: "getPropertyInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_GetPropertyInfo_569545,
    base: "", url: url_GetPropertyInfo_569546, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProperty_569567 = ref object of OpenApiRestCall_567668
proc url_DeleteProperty_569569(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteProperty_569568(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569570 = path.getOrDefault("nameId")
  valid_569570 = validateParameter(valid_569570, JString, required = true,
                                 default = nil)
  if valid_569570 != nil:
    section.add "nameId", valid_569570
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_569571 = query.getOrDefault("timeout")
  valid_569571 = validateParameter(valid_569571, JInt, required = false,
                                 default = newJInt(60))
  if valid_569571 != nil:
    section.add "timeout", valid_569571
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569572 = query.getOrDefault("api-version")
  valid_569572 = validateParameter(valid_569572, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569572 != nil:
    section.add "api-version", valid_569572
  var valid_569573 = query.getOrDefault("PropertyName")
  valid_569573 = validateParameter(valid_569573, JString, required = true,
                                 default = nil)
  if valid_569573 != nil:
    section.add "PropertyName", valid_569573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569574: Call_DeleteProperty_569567; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  let valid = call_569574.validator(path, query, header, formData, body)
  let scheme = call_569574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569574.url(scheme.get, call_569574.host, call_569574.base,
                         call_569574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569574, url, valid)

proc call*(call_569575: Call_DeleteProperty_569567; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteProperty
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_569576 = newJObject()
  var query_569577 = newJObject()
  add(query_569577, "timeout", newJInt(timeout))
  add(query_569577, "api-version", newJString(apiVersion))
  add(path_569576, "nameId", newJString(nameId))
  add(query_569577, "PropertyName", newJString(PropertyName))
  result = call_569575.call(path_569576, query_569577, nil, nil, nil)

var deleteProperty* = Call_DeleteProperty_569567(name: "deleteProperty",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_DeleteProperty_569568,
    base: "", url: url_DeleteProperty_569569, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSubNameInfoList_569578 = ref object of OpenApiRestCall_567668
proc url_GetSubNameInfoList_569580(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetSubNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetSubNameInfoList_569579(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569581 = path.getOrDefault("nameId")
  valid_569581 = validateParameter(valid_569581, JString, required = true,
                                 default = nil)
  if valid_569581 != nil:
    section.add "nameId", valid_569581
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: JBool
  ##            : Allows specifying that the search performed should be recursive.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_569582 = query.getOrDefault("timeout")
  valid_569582 = validateParameter(valid_569582, JInt, required = false,
                                 default = newJInt(60))
  if valid_569582 != nil:
    section.add "timeout", valid_569582
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569583 = query.getOrDefault("api-version")
  valid_569583 = validateParameter(valid_569583, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569583 != nil:
    section.add "api-version", valid_569583
  var valid_569584 = query.getOrDefault("Recursive")
  valid_569584 = validateParameter(valid_569584, JBool, required = false,
                                 default = newJBool(false))
  if valid_569584 != nil:
    section.add "Recursive", valid_569584
  var valid_569585 = query.getOrDefault("ContinuationToken")
  valid_569585 = validateParameter(valid_569585, JString, required = false,
                                 default = nil)
  if valid_569585 != nil:
    section.add "ContinuationToken", valid_569585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569586: Call_GetSubNameInfoList_569578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  let valid = call_569586.validator(path, query, header, formData, body)
  let scheme = call_569586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569586.url(scheme.get, call_569586.host, call_569586.base,
                         call_569586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569586, url, valid)

proc call*(call_569587: Call_GetSubNameInfoList_569578; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Recursive: bool = false;
          ContinuationToken: string = ""): Recallable =
  ## getSubNameInfoList
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: bool
  ##            : Allows specifying that the search performed should be recursive.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_569588 = newJObject()
  var query_569589 = newJObject()
  add(query_569589, "timeout", newJInt(timeout))
  add(query_569589, "api-version", newJString(apiVersion))
  add(query_569589, "Recursive", newJBool(Recursive))
  add(path_569588, "nameId", newJString(nameId))
  add(query_569589, "ContinuationToken", newJString(ContinuationToken))
  result = call_569587.call(path_569588, query_569589, nil, nil, nil)

var getSubNameInfoList* = Call_GetSubNameInfoList_569578(
    name: "getSubNameInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetSubNames",
    validator: validate_GetSubNameInfoList_569579, base: "",
    url: url_GetSubNameInfoList_569580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfoList_569590 = ref object of OpenApiRestCall_567668
proc url_GetNodeInfoList_569592(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodeInfoList_569591(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: JString
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_569593 = query.getOrDefault("timeout")
  valid_569593 = validateParameter(valid_569593, JInt, required = false,
                                 default = newJInt(60))
  if valid_569593 != nil:
    section.add "timeout", valid_569593
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569594 = query.getOrDefault("api-version")
  valid_569594 = validateParameter(valid_569594, JString, required = true,
                                 default = newJString("6.3"))
  if valid_569594 != nil:
    section.add "api-version", valid_569594
  var valid_569595 = query.getOrDefault("NodeStatusFilter")
  valid_569595 = validateParameter(valid_569595, JString, required = false,
                                 default = newJString("default"))
  if valid_569595 != nil:
    section.add "NodeStatusFilter", valid_569595
  var valid_569596 = query.getOrDefault("ContinuationToken")
  valid_569596 = validateParameter(valid_569596, JString, required = false,
                                 default = nil)
  if valid_569596 != nil:
    section.add "ContinuationToken", valid_569596
  var valid_569597 = query.getOrDefault("MaxResults")
  valid_569597 = validateParameter(valid_569597, JInt, required = false,
                                 default = newJInt(0))
  if valid_569597 != nil:
    section.add "MaxResults", valid_569597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569598: Call_GetNodeInfoList_569590; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  let valid = call_569598.validator(path, query, header, formData, body)
  let scheme = call_569598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569598.url(scheme.get, call_569598.host, call_569598.base,
                         call_569598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569598, url, valid)

proc call*(call_569599: Call_GetNodeInfoList_569590; timeout: int = 60;
          apiVersion: string = "6.3"; NodeStatusFilter: string = "default";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getNodeInfoList
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: string
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_569600 = newJObject()
  add(query_569600, "timeout", newJInt(timeout))
  add(query_569600, "api-version", newJString(apiVersion))
  add(query_569600, "NodeStatusFilter", newJString(NodeStatusFilter))
  add(query_569600, "ContinuationToken", newJString(ContinuationToken))
  add(query_569600, "MaxResults", newJInt(MaxResults))
  result = call_569599.call(nil, query_569600, nil, nil, nil)

var getNodeInfoList* = Call_GetNodeInfoList_569590(name: "getNodeInfoList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Nodes",
    validator: validate_GetNodeInfoList_569591, base: "", url: url_GetNodeInfoList_569592,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfo_569601 = ref object of OpenApiRestCall_567668
proc url_GetNodeInfo_569603(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeInfo_569602(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569604 = path.getOrDefault("nodeName")
  valid_569604 = validateParameter(valid_569604, JString, required = true,
                                 default = nil)
  if valid_569604 != nil:
    section.add "nodeName", valid_569604
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569605 = query.getOrDefault("timeout")
  valid_569605 = validateParameter(valid_569605, JInt, required = false,
                                 default = newJInt(60))
  if valid_569605 != nil:
    section.add "timeout", valid_569605
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569606 = query.getOrDefault("api-version")
  valid_569606 = validateParameter(valid_569606, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569606 != nil:
    section.add "api-version", valid_569606
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569607: Call_GetNodeInfo_569601; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  let valid = call_569607.validator(path, query, header, formData, body)
  let scheme = call_569607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569607.url(scheme.get, call_569607.host, call_569607.base,
                         call_569607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569607, url, valid)

proc call*(call_569608: Call_GetNodeInfo_569601; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getNodeInfo
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569609 = newJObject()
  var query_569610 = newJObject()
  add(query_569610, "timeout", newJInt(timeout))
  add(query_569610, "api-version", newJString(apiVersion))
  add(path_569609, "nodeName", newJString(nodeName))
  result = call_569608.call(path_569609, query_569610, nil, nil, nil)

var getNodeInfo* = Call_GetNodeInfo_569601(name: "getNodeInfo",
                                        meth: HttpMethod.HttpGet,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}",
                                        validator: validate_GetNodeInfo_569602,
                                        base: "", url: url_GetNodeInfo_569603,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableNode_569611 = ref object of OpenApiRestCall_567668
proc url_EnableNode_569613(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Activate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableNode_569612(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569614 = path.getOrDefault("nodeName")
  valid_569614 = validateParameter(valid_569614, JString, required = true,
                                 default = nil)
  if valid_569614 != nil:
    section.add "nodeName", valid_569614
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569615 = query.getOrDefault("timeout")
  valid_569615 = validateParameter(valid_569615, JInt, required = false,
                                 default = newJInt(60))
  if valid_569615 != nil:
    section.add "timeout", valid_569615
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569616 = query.getOrDefault("api-version")
  valid_569616 = validateParameter(valid_569616, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569616 != nil:
    section.add "api-version", valid_569616
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569617: Call_EnableNode_569611; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  let valid = call_569617.validator(path, query, header, formData, body)
  let scheme = call_569617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569617.url(scheme.get, call_569617.host, call_569617.base,
                         call_569617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569617, url, valid)

proc call*(call_569618: Call_EnableNode_569611; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## enableNode
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569619 = newJObject()
  var query_569620 = newJObject()
  add(query_569620, "timeout", newJInt(timeout))
  add(query_569620, "api-version", newJString(apiVersion))
  add(path_569619, "nodeName", newJString(nodeName))
  result = call_569618.call(path_569619, query_569620, nil, nil, nil)

var enableNode* = Call_EnableNode_569611(name: "enableNode",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Nodes/{nodeName}/$/Activate",
                                      validator: validate_EnableNode_569612,
                                      base: "", url: url_EnableNode_569613,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableNode_569621 = ref object of OpenApiRestCall_567668
proc url_DisableNode_569623(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Deactivate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableNode_569622(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569624 = path.getOrDefault("nodeName")
  valid_569624 = validateParameter(valid_569624, JString, required = true,
                                 default = nil)
  if valid_569624 != nil:
    section.add "nodeName", valid_569624
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569625 = query.getOrDefault("timeout")
  valid_569625 = validateParameter(valid_569625, JInt, required = false,
                                 default = newJInt(60))
  if valid_569625 != nil:
    section.add "timeout", valid_569625
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569626 = query.getOrDefault("api-version")
  valid_569626 = validateParameter(valid_569626, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569626 != nil:
    section.add "api-version", valid_569626
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569628: Call_DisableNode_569621; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  let valid = call_569628.validator(path, query, header, formData, body)
  let scheme = call_569628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569628.url(scheme.get, call_569628.host, call_569628.base,
                         call_569628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569628, url, valid)

proc call*(call_569629: Call_DisableNode_569621; nodeName: string;
          DeactivationIntentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## disableNode
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  var path_569630 = newJObject()
  var query_569631 = newJObject()
  var body_569632 = newJObject()
  add(query_569631, "timeout", newJInt(timeout))
  add(query_569631, "api-version", newJString(apiVersion))
  add(path_569630, "nodeName", newJString(nodeName))
  if DeactivationIntentDescription != nil:
    body_569632 = DeactivationIntentDescription
  result = call_569629.call(path_569630, query_569631, nil, nil, body_569632)

var disableNode* = Call_DisableNode_569621(name: "disableNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080", route: "/Nodes/{nodeName}/$/Deactivate",
                                        validator: validate_DisableNode_569622,
                                        base: "", url: url_DisableNode_569623,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeployServicePackageToNode_569633 = ref object of OpenApiRestCall_567668
proc url_DeployServicePackageToNode_569635(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/DeployServicePackage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeployServicePackageToNode_569634(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569636 = path.getOrDefault("nodeName")
  valid_569636 = validateParameter(valid_569636, JString, required = true,
                                 default = nil)
  if valid_569636 != nil:
    section.add "nodeName", valid_569636
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569637 = query.getOrDefault("timeout")
  valid_569637 = validateParameter(valid_569637, JInt, required = false,
                                 default = newJInt(60))
  if valid_569637 != nil:
    section.add "timeout", valid_569637
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569638 = query.getOrDefault("api-version")
  valid_569638 = validateParameter(valid_569638, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569638 != nil:
    section.add "api-version", valid_569638
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569640: Call_DeployServicePackageToNode_569633; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  let valid = call_569640.validator(path, query, header, formData, body)
  let scheme = call_569640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569640.url(scheme.get, call_569640.host, call_569640.base,
                         call_569640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569640, url, valid)

proc call*(call_569641: Call_DeployServicePackageToNode_569633; nodeName: string;
          DeployServicePackageToNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deployServicePackageToNode
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  var path_569642 = newJObject()
  var query_569643 = newJObject()
  var body_569644 = newJObject()
  add(query_569643, "timeout", newJInt(timeout))
  add(query_569643, "api-version", newJString(apiVersion))
  add(path_569642, "nodeName", newJString(nodeName))
  if DeployServicePackageToNodeDescription != nil:
    body_569644 = DeployServicePackageToNodeDescription
  result = call_569641.call(path_569642, query_569643, nil, nil, body_569644)

var deployServicePackageToNode* = Call_DeployServicePackageToNode_569633(
    name: "deployServicePackageToNode", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/DeployServicePackage",
    validator: validate_DeployServicePackageToNode_569634, base: "",
    url: url_DeployServicePackageToNode_569635,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfoList_569645 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationInfoList_569647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfoList_569646(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569648 = path.getOrDefault("nodeName")
  valid_569648 = validateParameter(valid_569648, JString, required = true,
                                 default = nil)
  if valid_569648 != nil:
    section.add "nodeName", valid_569648
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_569649 = query.getOrDefault("timeout")
  valid_569649 = validateParameter(valid_569649, JInt, required = false,
                                 default = newJInt(60))
  if valid_569649 != nil:
    section.add "timeout", valid_569649
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569650 = query.getOrDefault("api-version")
  valid_569650 = validateParameter(valid_569650, JString, required = true,
                                 default = newJString("6.1"))
  if valid_569650 != nil:
    section.add "api-version", valid_569650
  var valid_569651 = query.getOrDefault("IncludeHealthState")
  valid_569651 = validateParameter(valid_569651, JBool, required = false,
                                 default = newJBool(false))
  if valid_569651 != nil:
    section.add "IncludeHealthState", valid_569651
  var valid_569652 = query.getOrDefault("ContinuationToken")
  valid_569652 = validateParameter(valid_569652, JString, required = false,
                                 default = nil)
  if valid_569652 != nil:
    section.add "ContinuationToken", valid_569652
  var valid_569653 = query.getOrDefault("MaxResults")
  valid_569653 = validateParameter(valid_569653, JInt, required = false,
                                 default = newJInt(0))
  if valid_569653 != nil:
    section.add "MaxResults", valid_569653
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569654: Call_GetDeployedApplicationInfoList_569645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_569654.validator(path, query, header, formData, body)
  let scheme = call_569654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569654.url(scheme.get, call_569654.host, call_569654.base,
                         call_569654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569654, url, valid)

proc call*(call_569655: Call_GetDeployedApplicationInfoList_569645;
          nodeName: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getDeployedApplicationInfoList
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_569656 = newJObject()
  var query_569657 = newJObject()
  add(query_569657, "timeout", newJInt(timeout))
  add(query_569657, "api-version", newJString(apiVersion))
  add(path_569656, "nodeName", newJString(nodeName))
  add(query_569657, "IncludeHealthState", newJBool(IncludeHealthState))
  add(query_569657, "ContinuationToken", newJString(ContinuationToken))
  add(query_569657, "MaxResults", newJInt(MaxResults))
  result = call_569655.call(path_569656, query_569657, nil, nil, nil)

var getDeployedApplicationInfoList* = Call_GetDeployedApplicationInfoList_569645(
    name: "getDeployedApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications",
    validator: validate_GetDeployedApplicationInfoList_569646, base: "",
    url: url_GetDeployedApplicationInfoList_569647,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfo_569658 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationInfo_569660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfo_569659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569661 = path.getOrDefault("nodeName")
  valid_569661 = validateParameter(valid_569661, JString, required = true,
                                 default = nil)
  if valid_569661 != nil:
    section.add "nodeName", valid_569661
  var valid_569662 = path.getOrDefault("applicationId")
  valid_569662 = validateParameter(valid_569662, JString, required = true,
                                 default = nil)
  if valid_569662 != nil:
    section.add "applicationId", valid_569662
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  section = newJObject()
  var valid_569663 = query.getOrDefault("timeout")
  valid_569663 = validateParameter(valid_569663, JInt, required = false,
                                 default = newJInt(60))
  if valid_569663 != nil:
    section.add "timeout", valid_569663
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569664 = query.getOrDefault("api-version")
  valid_569664 = validateParameter(valid_569664, JString, required = true,
                                 default = newJString("6.1"))
  if valid_569664 != nil:
    section.add "api-version", valid_569664
  var valid_569665 = query.getOrDefault("IncludeHealthState")
  valid_569665 = validateParameter(valid_569665, JBool, required = false,
                                 default = newJBool(false))
  if valid_569665 != nil:
    section.add "IncludeHealthState", valid_569665
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569666: Call_GetDeployedApplicationInfo_569658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_569666.validator(path, query, header, formData, body)
  let scheme = call_569666.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569666.url(scheme.get, call_569666.host, call_569666.base,
                         call_569666.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569666, url, valid)

proc call*(call_569667: Call_GetDeployedApplicationInfo_569658; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false): Recallable =
  ## getDeployedApplicationInfo
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569668 = newJObject()
  var query_569669 = newJObject()
  add(query_569669, "timeout", newJInt(timeout))
  add(query_569669, "api-version", newJString(apiVersion))
  add(path_569668, "nodeName", newJString(nodeName))
  add(query_569669, "IncludeHealthState", newJBool(IncludeHealthState))
  add(path_569668, "applicationId", newJString(applicationId))
  result = call_569667.call(path_569668, query_569669, nil, nil, nil)

var getDeployedApplicationInfo* = Call_GetDeployedApplicationInfo_569658(
    name: "getDeployedApplicationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}",
    validator: validate_GetDeployedApplicationInfo_569659, base: "",
    url: url_GetDeployedApplicationInfo_569660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedCodePackageInfoList_569670 = ref object of OpenApiRestCall_567668
proc url_GetDeployedCodePackageInfoList_569672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedCodePackageInfoList_569671(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569673 = path.getOrDefault("nodeName")
  valid_569673 = validateParameter(valid_569673, JString, required = true,
                                 default = nil)
  if valid_569673 != nil:
    section.add "nodeName", valid_569673
  var valid_569674 = path.getOrDefault("applicationId")
  valid_569674 = validateParameter(valid_569674, JString, required = true,
                                 default = nil)
  if valid_569674 != nil:
    section.add "applicationId", valid_569674
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_569675 = query.getOrDefault("timeout")
  valid_569675 = validateParameter(valid_569675, JInt, required = false,
                                 default = newJInt(60))
  if valid_569675 != nil:
    section.add "timeout", valid_569675
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569676 = query.getOrDefault("api-version")
  valid_569676 = validateParameter(valid_569676, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569676 != nil:
    section.add "api-version", valid_569676
  var valid_569677 = query.getOrDefault("ServiceManifestName")
  valid_569677 = validateParameter(valid_569677, JString, required = false,
                                 default = nil)
  if valid_569677 != nil:
    section.add "ServiceManifestName", valid_569677
  var valid_569678 = query.getOrDefault("CodePackageName")
  valid_569678 = validateParameter(valid_569678, JString, required = false,
                                 default = nil)
  if valid_569678 != nil:
    section.add "CodePackageName", valid_569678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569679: Call_GetDeployedCodePackageInfoList_569670; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_569679.validator(path, query, header, formData, body)
  let scheme = call_569679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569679.url(scheme.get, call_569679.host, call_569679.base,
                         call_569679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569679, url, valid)

proc call*(call_569680: Call_GetDeployedCodePackageInfoList_569670;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          CodePackageName: string = ""): Recallable =
  ## getDeployedCodePackageInfoList
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   CodePackageName: string
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_569681 = newJObject()
  var query_569682 = newJObject()
  add(query_569682, "timeout", newJInt(timeout))
  add(query_569682, "api-version", newJString(apiVersion))
  add(path_569681, "nodeName", newJString(nodeName))
  add(query_569682, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569681, "applicationId", newJString(applicationId))
  add(query_569682, "CodePackageName", newJString(CodePackageName))
  result = call_569680.call(path_569681, query_569682, nil, nil, nil)

var getDeployedCodePackageInfoList* = Call_GetDeployedCodePackageInfoList_569670(
    name: "getDeployedCodePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages",
    validator: validate_GetDeployedCodePackageInfoList_569671, base: "",
    url: url_GetDeployedCodePackageInfoList_569672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeContainerApi_569683 = ref object of OpenApiRestCall_567668
proc url_InvokeContainerApi_569685(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerApi")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_InvokeContainerApi_569684(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569686 = path.getOrDefault("nodeName")
  valid_569686 = validateParameter(valid_569686, JString, required = true,
                                 default = nil)
  if valid_569686 != nil:
    section.add "nodeName", valid_569686
  var valid_569687 = path.getOrDefault("applicationId")
  valid_569687 = validateParameter(valid_569687, JString, required = true,
                                 default = nil)
  if valid_569687 != nil:
    section.add "applicationId", valid_569687
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: JString (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  section = newJObject()
  var valid_569688 = query.getOrDefault("timeout")
  valid_569688 = validateParameter(valid_569688, JInt, required = false,
                                 default = newJInt(60))
  if valid_569688 != nil:
    section.add "timeout", valid_569688
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569689 = query.getOrDefault("api-version")
  valid_569689 = validateParameter(valid_569689, JString, required = true,
                                 default = newJString("6.2"))
  if valid_569689 != nil:
    section.add "api-version", valid_569689
  var valid_569690 = query.getOrDefault("ServiceManifestName")
  valid_569690 = validateParameter(valid_569690, JString, required = true,
                                 default = nil)
  if valid_569690 != nil:
    section.add "ServiceManifestName", valid_569690
  var valid_569691 = query.getOrDefault("CodePackageName")
  valid_569691 = validateParameter(valid_569691, JString, required = true,
                                 default = nil)
  if valid_569691 != nil:
    section.add "CodePackageName", valid_569691
  var valid_569692 = query.getOrDefault("CodePackageInstanceId")
  valid_569692 = validateParameter(valid_569692, JString, required = true,
                                 default = nil)
  if valid_569692 != nil:
    section.add "CodePackageInstanceId", valid_569692
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569694: Call_InvokeContainerApi_569683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_569694.validator(path, query, header, formData, body)
  let scheme = call_569694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569694.url(scheme.get, call_569694.host, call_569694.base,
                         call_569694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569694, url, valid)

proc call*(call_569695: Call_InvokeContainerApi_569683; nodeName: string;
          ServiceManifestName: string; applicationId: string;
          ContainerApiRequestBody: JsonNode; CodePackageName: string;
          CodePackageInstanceId: string; timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## invokeContainerApi
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: string (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  var path_569696 = newJObject()
  var query_569697 = newJObject()
  var body_569698 = newJObject()
  add(query_569697, "timeout", newJInt(timeout))
  add(query_569697, "api-version", newJString(apiVersion))
  add(path_569696, "nodeName", newJString(nodeName))
  add(query_569697, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569696, "applicationId", newJString(applicationId))
  if ContainerApiRequestBody != nil:
    body_569698 = ContainerApiRequestBody
  add(query_569697, "CodePackageName", newJString(CodePackageName))
  add(query_569697, "CodePackageInstanceId", newJString(CodePackageInstanceId))
  result = call_569695.call(path_569696, query_569697, nil, nil, body_569698)

var invokeContainerApi* = Call_InvokeContainerApi_569683(
    name: "invokeContainerApi", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi",
    validator: validate_InvokeContainerApi_569684, base: "",
    url: url_InvokeContainerApi_569685, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainerLogsDeployedOnNode_569699 = ref object of OpenApiRestCall_567668
proc url_GetContainerLogsDeployedOnNode_569701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetContainerLogsDeployedOnNode_569700(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569702 = path.getOrDefault("nodeName")
  valid_569702 = validateParameter(valid_569702, JString, required = true,
                                 default = nil)
  if valid_569702 != nil:
    section.add "nodeName", valid_569702
  var valid_569703 = path.getOrDefault("applicationId")
  valid_569703 = validateParameter(valid_569703, JString, required = true,
                                 default = nil)
  if valid_569703 != nil:
    section.add "applicationId", valid_569703
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   Previous: JBool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_569704 = query.getOrDefault("timeout")
  valid_569704 = validateParameter(valid_569704, JInt, required = false,
                                 default = newJInt(60))
  if valid_569704 != nil:
    section.add "timeout", valid_569704
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569705 = query.getOrDefault("api-version")
  valid_569705 = validateParameter(valid_569705, JString, required = true,
                                 default = newJString("6.2"))
  if valid_569705 != nil:
    section.add "api-version", valid_569705
  var valid_569706 = query.getOrDefault("ServiceManifestName")
  valid_569706 = validateParameter(valid_569706, JString, required = true,
                                 default = nil)
  if valid_569706 != nil:
    section.add "ServiceManifestName", valid_569706
  var valid_569707 = query.getOrDefault("Tail")
  valid_569707 = validateParameter(valid_569707, JString, required = false,
                                 default = nil)
  if valid_569707 != nil:
    section.add "Tail", valid_569707
  var valid_569708 = query.getOrDefault("Previous")
  valid_569708 = validateParameter(valid_569708, JBool, required = false,
                                 default = newJBool(false))
  if valid_569708 != nil:
    section.add "Previous", valid_569708
  var valid_569709 = query.getOrDefault("CodePackageName")
  valid_569709 = validateParameter(valid_569709, JString, required = true,
                                 default = nil)
  if valid_569709 != nil:
    section.add "CodePackageName", valid_569709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569710: Call_GetContainerLogsDeployedOnNode_569699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_569710.validator(path, query, header, formData, body)
  let scheme = call_569710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569710.url(scheme.get, call_569710.host, call_569710.base,
                         call_569710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569710, url, valid)

proc call*(call_569711: Call_GetContainerLogsDeployedOnNode_569699;
          nodeName: string; ServiceManifestName: string; applicationId: string;
          CodePackageName: string; timeout: int = 60; apiVersion: string = "6.2";
          Tail: string = ""; Previous: bool = false): Recallable =
  ## getContainerLogsDeployedOnNode
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   Previous: bool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_569712 = newJObject()
  var query_569713 = newJObject()
  add(query_569713, "timeout", newJInt(timeout))
  add(query_569713, "api-version", newJString(apiVersion))
  add(path_569712, "nodeName", newJString(nodeName))
  add(query_569713, "ServiceManifestName", newJString(ServiceManifestName))
  add(query_569713, "Tail", newJString(Tail))
  add(path_569712, "applicationId", newJString(applicationId))
  add(query_569713, "Previous", newJBool(Previous))
  add(query_569713, "CodePackageName", newJString(CodePackageName))
  result = call_569711.call(path_569712, query_569713, nil, nil, nil)

var getContainerLogsDeployedOnNode* = Call_GetContainerLogsDeployedOnNode_569699(
    name: "getContainerLogsDeployedOnNode", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs",
    validator: validate_GetContainerLogsDeployedOnNode_569700, base: "",
    url: url_GetContainerLogsDeployedOnNode_569701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartDeployedCodePackage_569714 = ref object of OpenApiRestCall_567668
proc url_RestartDeployedCodePackage_569716(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartDeployedCodePackage_569715(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569717 = path.getOrDefault("nodeName")
  valid_569717 = validateParameter(valid_569717, JString, required = true,
                                 default = nil)
  if valid_569717 != nil:
    section.add "nodeName", valid_569717
  var valid_569718 = path.getOrDefault("applicationId")
  valid_569718 = validateParameter(valid_569718, JString, required = true,
                                 default = nil)
  if valid_569718 != nil:
    section.add "applicationId", valid_569718
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569719 = query.getOrDefault("timeout")
  valid_569719 = validateParameter(valid_569719, JInt, required = false,
                                 default = newJInt(60))
  if valid_569719 != nil:
    section.add "timeout", valid_569719
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569720 = query.getOrDefault("api-version")
  valid_569720 = validateParameter(valid_569720, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569720 != nil:
    section.add "api-version", valid_569720
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569722: Call_RestartDeployedCodePackage_569714; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  let valid = call_569722.validator(path, query, header, formData, body)
  let scheme = call_569722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569722.url(scheme.get, call_569722.host, call_569722.base,
                         call_569722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569722, url, valid)

proc call*(call_569723: Call_RestartDeployedCodePackage_569714; nodeName: string;
          applicationId: string; RestartDeployedCodePackageDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## restartDeployedCodePackage
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  var path_569724 = newJObject()
  var query_569725 = newJObject()
  var body_569726 = newJObject()
  add(query_569725, "timeout", newJInt(timeout))
  add(query_569725, "api-version", newJString(apiVersion))
  add(path_569724, "nodeName", newJString(nodeName))
  add(path_569724, "applicationId", newJString(applicationId))
  if RestartDeployedCodePackageDescription != nil:
    body_569726 = RestartDeployedCodePackageDescription
  result = call_569723.call(path_569724, query_569725, nil, nil, body_569726)

var restartDeployedCodePackage* = Call_RestartDeployedCodePackage_569714(
    name: "restartDeployedCodePackage", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart",
    validator: validate_RestartDeployedCodePackage_569715, base: "",
    url: url_RestartDeployedCodePackage_569716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealthUsingPolicy_569741 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationHealthUsingPolicy_569743(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealthUsingPolicy_569742(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569744 = path.getOrDefault("nodeName")
  valid_569744 = validateParameter(valid_569744, JString, required = true,
                                 default = nil)
  if valid_569744 != nil:
    section.add "nodeName", valid_569744
  var valid_569745 = path.getOrDefault("applicationId")
  valid_569745 = validateParameter(valid_569745, JString, required = true,
                                 default = nil)
  if valid_569745 != nil:
    section.add "applicationId", valid_569745
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569746 = query.getOrDefault("timeout")
  valid_569746 = validateParameter(valid_569746, JInt, required = false,
                                 default = newJInt(60))
  if valid_569746 != nil:
    section.add "timeout", valid_569746
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569747 = query.getOrDefault("api-version")
  valid_569747 = validateParameter(valid_569747, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569747 != nil:
    section.add "api-version", valid_569747
  var valid_569748 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_569748 = validateParameter(valid_569748, JInt, required = false,
                                 default = newJInt(0))
  if valid_569748 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_569748
  var valid_569749 = query.getOrDefault("ExcludeHealthStatistics")
  valid_569749 = validateParameter(valid_569749, JBool, required = false,
                                 default = newJBool(false))
  if valid_569749 != nil:
    section.add "ExcludeHealthStatistics", valid_569749
  var valid_569750 = query.getOrDefault("EventsHealthStateFilter")
  valid_569750 = validateParameter(valid_569750, JInt, required = false,
                                 default = newJInt(0))
  if valid_569750 != nil:
    section.add "EventsHealthStateFilter", valid_569750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569752: Call_GetDeployedApplicationHealthUsingPolicy_569741;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  let valid = call_569752.validator(path, query, header, formData, body)
  let scheme = call_569752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569752.url(scheme.get, call_569752.host, call_569752.base,
                         call_569752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569752, url, valid)

proc call*(call_569753: Call_GetDeployedApplicationHealthUsingPolicy_569741;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationHealthPolicy: JsonNode = nil;
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealthUsingPolicy
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569754 = newJObject()
  var query_569755 = newJObject()
  var body_569756 = newJObject()
  add(query_569755, "timeout", newJInt(timeout))
  add(query_569755, "api-version", newJString(apiVersion))
  add(path_569754, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_569756 = ApplicationHealthPolicy
  add(query_569755, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_569755, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_569755, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569754, "applicationId", newJString(applicationId))
  result = call_569753.call(path_569754, query_569755, nil, nil, body_569756)

var getDeployedApplicationHealthUsingPolicy* = Call_GetDeployedApplicationHealthUsingPolicy_569741(
    name: "getDeployedApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealthUsingPolicy_569742, base: "",
    url: url_GetDeployedApplicationHealthUsingPolicy_569743,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealth_569727 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationHealth_569729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealth_569728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569730 = path.getOrDefault("nodeName")
  valid_569730 = validateParameter(valid_569730, JString, required = true,
                                 default = nil)
  if valid_569730 != nil:
    section.add "nodeName", valid_569730
  var valid_569731 = path.getOrDefault("applicationId")
  valid_569731 = validateParameter(valid_569731, JString, required = true,
                                 default = nil)
  if valid_569731 != nil:
    section.add "applicationId", valid_569731
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569732 = query.getOrDefault("timeout")
  valid_569732 = validateParameter(valid_569732, JInt, required = false,
                                 default = newJInt(60))
  if valid_569732 != nil:
    section.add "timeout", valid_569732
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569733 = query.getOrDefault("api-version")
  valid_569733 = validateParameter(valid_569733, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569733 != nil:
    section.add "api-version", valid_569733
  var valid_569734 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_569734 = validateParameter(valid_569734, JInt, required = false,
                                 default = newJInt(0))
  if valid_569734 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_569734
  var valid_569735 = query.getOrDefault("ExcludeHealthStatistics")
  valid_569735 = validateParameter(valid_569735, JBool, required = false,
                                 default = newJBool(false))
  if valid_569735 != nil:
    section.add "ExcludeHealthStatistics", valid_569735
  var valid_569736 = query.getOrDefault("EventsHealthStateFilter")
  valid_569736 = validateParameter(valid_569736, JInt, required = false,
                                 default = newJInt(0))
  if valid_569736 != nil:
    section.add "EventsHealthStateFilter", valid_569736
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569737: Call_GetDeployedApplicationHealth_569727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  let valid = call_569737.validator(path, query, header, formData, body)
  let scheme = call_569737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569737.url(scheme.get, call_569737.host, call_569737.base,
                         call_569737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569737, url, valid)

proc call*(call_569738: Call_GetDeployedApplicationHealth_569727; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealth
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569739 = newJObject()
  var query_569740 = newJObject()
  add(query_569740, "timeout", newJInt(timeout))
  add(query_569740, "api-version", newJString(apiVersion))
  add(path_569739, "nodeName", newJString(nodeName))
  add(query_569740, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_569740, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_569740, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569739, "applicationId", newJString(applicationId))
  result = call_569738.call(path_569739, query_569740, nil, nil, nil)

var getDeployedApplicationHealth* = Call_GetDeployedApplicationHealth_569727(
    name: "getDeployedApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealth_569728, base: "",
    url: url_GetDeployedApplicationHealth_569729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaInfoList_569757 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceReplicaInfoList_569759(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaInfoList_569758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569760 = path.getOrDefault("nodeName")
  valid_569760 = validateParameter(valid_569760, JString, required = true,
                                 default = nil)
  if valid_569760 != nil:
    section.add "nodeName", valid_569760
  var valid_569761 = path.getOrDefault("applicationId")
  valid_569761 = validateParameter(valid_569761, JString, required = true,
                                 default = nil)
  if valid_569761 != nil:
    section.add "applicationId", valid_569761
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   PartitionId: JString
  ##              : The identity of the partition.
  section = newJObject()
  var valid_569762 = query.getOrDefault("timeout")
  valid_569762 = validateParameter(valid_569762, JInt, required = false,
                                 default = newJInt(60))
  if valid_569762 != nil:
    section.add "timeout", valid_569762
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569763 = query.getOrDefault("api-version")
  valid_569763 = validateParameter(valid_569763, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569763 != nil:
    section.add "api-version", valid_569763
  var valid_569764 = query.getOrDefault("ServiceManifestName")
  valid_569764 = validateParameter(valid_569764, JString, required = false,
                                 default = nil)
  if valid_569764 != nil:
    section.add "ServiceManifestName", valid_569764
  var valid_569765 = query.getOrDefault("PartitionId")
  valid_569765 = validateParameter(valid_569765, JString, required = false,
                                 default = nil)
  if valid_569765 != nil:
    section.add "PartitionId", valid_569765
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569766: Call_GetDeployedServiceReplicaInfoList_569757;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  let valid = call_569766.validator(path, query, header, formData, body)
  let scheme = call_569766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569766.url(scheme.get, call_569766.host, call_569766.base,
                         call_569766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569766, url, valid)

proc call*(call_569767: Call_GetDeployedServiceReplicaInfoList_569757;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          PartitionId: string = ""): Recallable =
  ## getDeployedServiceReplicaInfoList
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   PartitionId: string
  ##              : The identity of the partition.
  var path_569768 = newJObject()
  var query_569769 = newJObject()
  add(query_569769, "timeout", newJInt(timeout))
  add(query_569769, "api-version", newJString(apiVersion))
  add(path_569768, "nodeName", newJString(nodeName))
  add(query_569769, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569768, "applicationId", newJString(applicationId))
  add(query_569769, "PartitionId", newJString(PartitionId))
  result = call_569767.call(path_569768, query_569769, nil, nil, nil)

var getDeployedServiceReplicaInfoList* = Call_GetDeployedServiceReplicaInfoList_569757(
    name: "getDeployedServiceReplicaInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaInfoList_569758, base: "",
    url: url_GetDeployedServiceReplicaInfoList_569759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoList_569770 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageInfoList_569772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoList_569771(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569773 = path.getOrDefault("nodeName")
  valid_569773 = validateParameter(valid_569773, JString, required = true,
                                 default = nil)
  if valid_569773 != nil:
    section.add "nodeName", valid_569773
  var valid_569774 = path.getOrDefault("applicationId")
  valid_569774 = validateParameter(valid_569774, JString, required = true,
                                 default = nil)
  if valid_569774 != nil:
    section.add "applicationId", valid_569774
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569775 = query.getOrDefault("timeout")
  valid_569775 = validateParameter(valid_569775, JInt, required = false,
                                 default = newJInt(60))
  if valid_569775 != nil:
    section.add "timeout", valid_569775
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569776 = query.getOrDefault("api-version")
  valid_569776 = validateParameter(valid_569776, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569776 != nil:
    section.add "api-version", valid_569776
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569777: Call_GetDeployedServicePackageInfoList_569770;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_569777.validator(path, query, header, formData, body)
  let scheme = call_569777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569777.url(scheme.get, call_569777.host, call_569777.base,
                         call_569777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569777, url, valid)

proc call*(call_569778: Call_GetDeployedServicePackageInfoList_569770;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoList
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569779 = newJObject()
  var query_569780 = newJObject()
  add(query_569780, "timeout", newJInt(timeout))
  add(query_569780, "api-version", newJString(apiVersion))
  add(path_569779, "nodeName", newJString(nodeName))
  add(path_569779, "applicationId", newJString(applicationId))
  result = call_569778.call(path_569779, query_569780, nil, nil, nil)

var getDeployedServicePackageInfoList* = Call_GetDeployedServicePackageInfoList_569770(
    name: "getDeployedServicePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages",
    validator: validate_GetDeployedServicePackageInfoList_569771, base: "",
    url: url_GetDeployedServicePackageInfoList_569772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoListByName_569781 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageInfoListByName_569783(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoListByName_569782(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569784 = path.getOrDefault("nodeName")
  valid_569784 = validateParameter(valid_569784, JString, required = true,
                                 default = nil)
  if valid_569784 != nil:
    section.add "nodeName", valid_569784
  var valid_569785 = path.getOrDefault("applicationId")
  valid_569785 = validateParameter(valid_569785, JString, required = true,
                                 default = nil)
  if valid_569785 != nil:
    section.add "applicationId", valid_569785
  var valid_569786 = path.getOrDefault("servicePackageName")
  valid_569786 = validateParameter(valid_569786, JString, required = true,
                                 default = nil)
  if valid_569786 != nil:
    section.add "servicePackageName", valid_569786
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569787 = query.getOrDefault("timeout")
  valid_569787 = validateParameter(valid_569787, JInt, required = false,
                                 default = newJInt(60))
  if valid_569787 != nil:
    section.add "timeout", valid_569787
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569788 = query.getOrDefault("api-version")
  valid_569788 = validateParameter(valid_569788, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569788 != nil:
    section.add "api-version", valid_569788
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569789: Call_GetDeployedServicePackageInfoListByName_569781;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  let valid = call_569789.validator(path, query, header, formData, body)
  let scheme = call_569789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569789.url(scheme.get, call_569789.host, call_569789.base,
                         call_569789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569789, url, valid)

proc call*(call_569790: Call_GetDeployedServicePackageInfoListByName_569781;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoListByName
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569791 = newJObject()
  var query_569792 = newJObject()
  add(query_569792, "timeout", newJInt(timeout))
  add(query_569792, "api-version", newJString(apiVersion))
  add(path_569791, "nodeName", newJString(nodeName))
  add(path_569791, "applicationId", newJString(applicationId))
  add(path_569791, "servicePackageName", newJString(servicePackageName))
  result = call_569790.call(path_569791, query_569792, nil, nil, nil)

var getDeployedServicePackageInfoListByName* = Call_GetDeployedServicePackageInfoListByName_569781(
    name: "getDeployedServicePackageInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}",
    validator: validate_GetDeployedServicePackageInfoListByName_569782, base: "",
    url: url_GetDeployedServicePackageInfoListByName_569783,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealthUsingPolicy_569806 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageHealthUsingPolicy_569808(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealthUsingPolicy_569807(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569809 = path.getOrDefault("nodeName")
  valid_569809 = validateParameter(valid_569809, JString, required = true,
                                 default = nil)
  if valid_569809 != nil:
    section.add "nodeName", valid_569809
  var valid_569810 = path.getOrDefault("applicationId")
  valid_569810 = validateParameter(valid_569810, JString, required = true,
                                 default = nil)
  if valid_569810 != nil:
    section.add "applicationId", valid_569810
  var valid_569811 = path.getOrDefault("servicePackageName")
  valid_569811 = validateParameter(valid_569811, JString, required = true,
                                 default = nil)
  if valid_569811 != nil:
    section.add "servicePackageName", valid_569811
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569812 = query.getOrDefault("timeout")
  valid_569812 = validateParameter(valid_569812, JInt, required = false,
                                 default = newJInt(60))
  if valid_569812 != nil:
    section.add "timeout", valid_569812
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569813 = query.getOrDefault("api-version")
  valid_569813 = validateParameter(valid_569813, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569813 != nil:
    section.add "api-version", valid_569813
  var valid_569814 = query.getOrDefault("EventsHealthStateFilter")
  valid_569814 = validateParameter(valid_569814, JInt, required = false,
                                 default = newJInt(0))
  if valid_569814 != nil:
    section.add "EventsHealthStateFilter", valid_569814
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569816: Call_GetDeployedServicePackageHealthUsingPolicy_569806;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  let valid = call_569816.validator(path, query, header, formData, body)
  let scheme = call_569816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569816.url(scheme.get, call_569816.host, call_569816.base,
                         call_569816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569816, url, valid)

proc call*(call_569817: Call_GetDeployedServicePackageHealthUsingPolicy_569806;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealthUsingPolicy
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569818 = newJObject()
  var query_569819 = newJObject()
  var body_569820 = newJObject()
  add(query_569819, "timeout", newJInt(timeout))
  add(query_569819, "api-version", newJString(apiVersion))
  add(path_569818, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_569820 = ApplicationHealthPolicy
  add(query_569819, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569818, "applicationId", newJString(applicationId))
  add(path_569818, "servicePackageName", newJString(servicePackageName))
  result = call_569817.call(path_569818, query_569819, nil, nil, body_569820)

var getDeployedServicePackageHealthUsingPolicy* = Call_GetDeployedServicePackageHealthUsingPolicy_569806(
    name: "getDeployedServicePackageHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealthUsingPolicy_569807,
    base: "", url: url_GetDeployedServicePackageHealthUsingPolicy_569808,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealth_569793 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageHealth_569795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealth_569794(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569796 = path.getOrDefault("nodeName")
  valid_569796 = validateParameter(valid_569796, JString, required = true,
                                 default = nil)
  if valid_569796 != nil:
    section.add "nodeName", valid_569796
  var valid_569797 = path.getOrDefault("applicationId")
  valid_569797 = validateParameter(valid_569797, JString, required = true,
                                 default = nil)
  if valid_569797 != nil:
    section.add "applicationId", valid_569797
  var valid_569798 = path.getOrDefault("servicePackageName")
  valid_569798 = validateParameter(valid_569798, JString, required = true,
                                 default = nil)
  if valid_569798 != nil:
    section.add "servicePackageName", valid_569798
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569799 = query.getOrDefault("timeout")
  valid_569799 = validateParameter(valid_569799, JInt, required = false,
                                 default = newJInt(60))
  if valid_569799 != nil:
    section.add "timeout", valid_569799
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569800 = query.getOrDefault("api-version")
  valid_569800 = validateParameter(valid_569800, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569800 != nil:
    section.add "api-version", valid_569800
  var valid_569801 = query.getOrDefault("EventsHealthStateFilter")
  valid_569801 = validateParameter(valid_569801, JInt, required = false,
                                 default = newJInt(0))
  if valid_569801 != nil:
    section.add "EventsHealthStateFilter", valid_569801
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569802: Call_GetDeployedServicePackageHealth_569793;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  let valid = call_569802.validator(path, query, header, formData, body)
  let scheme = call_569802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569802.url(scheme.get, call_569802.host, call_569802.base,
                         call_569802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569802, url, valid)

proc call*(call_569803: Call_GetDeployedServicePackageHealth_569793;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealth
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569804 = newJObject()
  var query_569805 = newJObject()
  add(query_569805, "timeout", newJInt(timeout))
  add(query_569805, "api-version", newJString(apiVersion))
  add(path_569804, "nodeName", newJString(nodeName))
  add(query_569805, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569804, "applicationId", newJString(applicationId))
  add(path_569804, "servicePackageName", newJString(servicePackageName))
  result = call_569803.call(path_569804, query_569805, nil, nil, nil)

var getDeployedServicePackageHealth* = Call_GetDeployedServicePackageHealth_569793(
    name: "getDeployedServicePackageHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealth_569794, base: "",
    url: url_GetDeployedServicePackageHealth_569795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedServicePackageHealth_569821 = ref object of OpenApiRestCall_567668
proc url_ReportDeployedServicePackageHealth_569823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedServicePackageHealth_569822(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569824 = path.getOrDefault("nodeName")
  valid_569824 = validateParameter(valid_569824, JString, required = true,
                                 default = nil)
  if valid_569824 != nil:
    section.add "nodeName", valid_569824
  var valid_569825 = path.getOrDefault("applicationId")
  valid_569825 = validateParameter(valid_569825, JString, required = true,
                                 default = nil)
  if valid_569825 != nil:
    section.add "applicationId", valid_569825
  var valid_569826 = path.getOrDefault("servicePackageName")
  valid_569826 = validateParameter(valid_569826, JString, required = true,
                                 default = nil)
  if valid_569826 != nil:
    section.add "servicePackageName", valid_569826
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569827 = query.getOrDefault("Immediate")
  valid_569827 = validateParameter(valid_569827, JBool, required = false,
                                 default = newJBool(false))
  if valid_569827 != nil:
    section.add "Immediate", valid_569827
  var valid_569828 = query.getOrDefault("timeout")
  valid_569828 = validateParameter(valid_569828, JInt, required = false,
                                 default = newJInt(60))
  if valid_569828 != nil:
    section.add "timeout", valid_569828
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569829 = query.getOrDefault("api-version")
  valid_569829 = validateParameter(valid_569829, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569829 != nil:
    section.add "api-version", valid_569829
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569831: Call_ReportDeployedServicePackageHealth_569821;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_569831.validator(path, query, header, formData, body)
  let scheme = call_569831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569831.url(scheme.get, call_569831.host, call_569831.base,
                         call_569831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569831, url, valid)

proc call*(call_569832: Call_ReportDeployedServicePackageHealth_569821;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          servicePackageName: string; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportDeployedServicePackageHealth
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569833 = newJObject()
  var query_569834 = newJObject()
  var body_569835 = newJObject()
  add(query_569834, "Immediate", newJBool(Immediate))
  add(query_569834, "timeout", newJInt(timeout))
  add(query_569834, "api-version", newJString(apiVersion))
  add(path_569833, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_569835 = HealthInformation
  add(path_569833, "applicationId", newJString(applicationId))
  add(path_569833, "servicePackageName", newJString(servicePackageName))
  result = call_569832.call(path_569833, query_569834, nil, nil, body_569835)

var reportDeployedServicePackageHealth* = Call_ReportDeployedServicePackageHealth_569821(
    name: "reportDeployedServicePackageHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth",
    validator: validate_ReportDeployedServicePackageHealth_569822, base: "",
    url: url_ReportDeployedServicePackageHealth_569823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoList_569836 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceTypeInfoList_569838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoList_569837(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569839 = path.getOrDefault("nodeName")
  valid_569839 = validateParameter(valid_569839, JString, required = true,
                                 default = nil)
  if valid_569839 != nil:
    section.add "nodeName", valid_569839
  var valid_569840 = path.getOrDefault("applicationId")
  valid_569840 = validateParameter(valid_569840, JString, required = true,
                                 default = nil)
  if valid_569840 != nil:
    section.add "applicationId", valid_569840
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_569841 = query.getOrDefault("timeout")
  valid_569841 = validateParameter(valid_569841, JInt, required = false,
                                 default = newJInt(60))
  if valid_569841 != nil:
    section.add "timeout", valid_569841
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569842 = query.getOrDefault("api-version")
  valid_569842 = validateParameter(valid_569842, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569842 != nil:
    section.add "api-version", valid_569842
  var valid_569843 = query.getOrDefault("ServiceManifestName")
  valid_569843 = validateParameter(valid_569843, JString, required = false,
                                 default = nil)
  if valid_569843 != nil:
    section.add "ServiceManifestName", valid_569843
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569844: Call_GetDeployedServiceTypeInfoList_569836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  let valid = call_569844.validator(path, query, header, formData, body)
  let scheme = call_569844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569844.url(scheme.get, call_569844.host, call_569844.base,
                         call_569844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569844, url, valid)

proc call*(call_569845: Call_GetDeployedServiceTypeInfoList_569836;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoList
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569846 = newJObject()
  var query_569847 = newJObject()
  add(query_569847, "timeout", newJInt(timeout))
  add(query_569847, "api-version", newJString(apiVersion))
  add(path_569846, "nodeName", newJString(nodeName))
  add(query_569847, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569846, "applicationId", newJString(applicationId))
  result = call_569845.call(path_569846, query_569847, nil, nil, nil)

var getDeployedServiceTypeInfoList* = Call_GetDeployedServiceTypeInfoList_569836(
    name: "getDeployedServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes",
    validator: validate_GetDeployedServiceTypeInfoList_569837, base: "",
    url: url_GetDeployedServiceTypeInfoList_569838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoByName_569848 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceTypeInfoByName_569850(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoByName_569849(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_569851 = path.getOrDefault("serviceTypeName")
  valid_569851 = validateParameter(valid_569851, JString, required = true,
                                 default = nil)
  if valid_569851 != nil:
    section.add "serviceTypeName", valid_569851
  var valid_569852 = path.getOrDefault("nodeName")
  valid_569852 = validateParameter(valid_569852, JString, required = true,
                                 default = nil)
  if valid_569852 != nil:
    section.add "nodeName", valid_569852
  var valid_569853 = path.getOrDefault("applicationId")
  valid_569853 = validateParameter(valid_569853, JString, required = true,
                                 default = nil)
  if valid_569853 != nil:
    section.add "applicationId", valid_569853
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_569854 = query.getOrDefault("timeout")
  valid_569854 = validateParameter(valid_569854, JInt, required = false,
                                 default = newJInt(60))
  if valid_569854 != nil:
    section.add "timeout", valid_569854
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569855 = query.getOrDefault("api-version")
  valid_569855 = validateParameter(valid_569855, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569855 != nil:
    section.add "api-version", valid_569855
  var valid_569856 = query.getOrDefault("ServiceManifestName")
  valid_569856 = validateParameter(valid_569856, JString, required = false,
                                 default = nil)
  if valid_569856 != nil:
    section.add "ServiceManifestName", valid_569856
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569857: Call_GetDeployedServiceTypeInfoByName_569848;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  let valid = call_569857.validator(path, query, header, formData, body)
  let scheme = call_569857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569857.url(scheme.get, call_569857.host, call_569857.base,
                         call_569857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569857, url, valid)

proc call*(call_569858: Call_GetDeployedServiceTypeInfoByName_569848;
          serviceTypeName: string; nodeName: string; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoByName
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569859 = newJObject()
  var query_569860 = newJObject()
  add(query_569860, "timeout", newJInt(timeout))
  add(path_569859, "serviceTypeName", newJString(serviceTypeName))
  add(query_569860, "api-version", newJString(apiVersion))
  add(path_569859, "nodeName", newJString(nodeName))
  add(query_569860, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569859, "applicationId", newJString(applicationId))
  result = call_569858.call(path_569859, query_569860, nil, nil, nil)

var getDeployedServiceTypeInfoByName* = Call_GetDeployedServiceTypeInfoByName_569848(
    name: "getDeployedServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetDeployedServiceTypeInfoByName_569849, base: "",
    url: url_GetDeployedServiceTypeInfoByName_569850,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedApplicationHealth_569861 = ref object of OpenApiRestCall_567668
proc url_ReportDeployedApplicationHealth_569863(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedApplicationHealth_569862(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569864 = path.getOrDefault("nodeName")
  valid_569864 = validateParameter(valid_569864, JString, required = true,
                                 default = nil)
  if valid_569864 != nil:
    section.add "nodeName", valid_569864
  var valid_569865 = path.getOrDefault("applicationId")
  valid_569865 = validateParameter(valid_569865, JString, required = true,
                                 default = nil)
  if valid_569865 != nil:
    section.add "applicationId", valid_569865
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569866 = query.getOrDefault("Immediate")
  valid_569866 = validateParameter(valid_569866, JBool, required = false,
                                 default = newJBool(false))
  if valid_569866 != nil:
    section.add "Immediate", valid_569866
  var valid_569867 = query.getOrDefault("timeout")
  valid_569867 = validateParameter(valid_569867, JInt, required = false,
                                 default = newJInt(60))
  if valid_569867 != nil:
    section.add "timeout", valid_569867
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569868 = query.getOrDefault("api-version")
  valid_569868 = validateParameter(valid_569868, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569868 != nil:
    section.add "api-version", valid_569868
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569870: Call_ReportDeployedApplicationHealth_569861;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_569870.validator(path, query, header, formData, body)
  let scheme = call_569870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569870.url(scheme.get, call_569870.host, call_569870.base,
                         call_569870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569870, url, valid)

proc call*(call_569871: Call_ReportDeployedApplicationHealth_569861;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportDeployedApplicationHealth
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569872 = newJObject()
  var query_569873 = newJObject()
  var body_569874 = newJObject()
  add(query_569873, "Immediate", newJBool(Immediate))
  add(query_569873, "timeout", newJInt(timeout))
  add(query_569873, "api-version", newJString(apiVersion))
  add(path_569872, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_569874 = HealthInformation
  add(path_569872, "applicationId", newJString(applicationId))
  result = call_569871.call(path_569872, query_569873, nil, nil, body_569874)

var reportDeployedApplicationHealth* = Call_ReportDeployedApplicationHealth_569861(
    name: "reportDeployedApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth",
    validator: validate_ReportDeployedApplicationHealth_569862, base: "",
    url: url_ReportDeployedApplicationHealth_569863,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealthUsingPolicy_569886 = ref object of OpenApiRestCall_567668
proc url_GetNodeHealthUsingPolicy_569888(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealthUsingPolicy_569887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569889 = path.getOrDefault("nodeName")
  valid_569889 = validateParameter(valid_569889, JString, required = true,
                                 default = nil)
  if valid_569889 != nil:
    section.add "nodeName", valid_569889
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569890 = query.getOrDefault("timeout")
  valid_569890 = validateParameter(valid_569890, JInt, required = false,
                                 default = newJInt(60))
  if valid_569890 != nil:
    section.add "timeout", valid_569890
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569891 = query.getOrDefault("api-version")
  valid_569891 = validateParameter(valid_569891, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569891 != nil:
    section.add "api-version", valid_569891
  var valid_569892 = query.getOrDefault("EventsHealthStateFilter")
  valid_569892 = validateParameter(valid_569892, JInt, required = false,
                                 default = newJInt(0))
  if valid_569892 != nil:
    section.add "EventsHealthStateFilter", valid_569892
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569894: Call_GetNodeHealthUsingPolicy_569886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_569894.validator(path, query, header, formData, body)
  let scheme = call_569894.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569894.url(scheme.get, call_569894.host, call_569894.base,
                         call_569894.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569894, url, valid)

proc call*(call_569895: Call_GetNodeHealthUsingPolicy_569886; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0; ClusterHealthPolicy: JsonNode = nil): Recallable =
  ## getNodeHealthUsingPolicy
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  var path_569896 = newJObject()
  var query_569897 = newJObject()
  var body_569898 = newJObject()
  add(query_569897, "timeout", newJInt(timeout))
  add(query_569897, "api-version", newJString(apiVersion))
  add(path_569896, "nodeName", newJString(nodeName))
  add(query_569897, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  if ClusterHealthPolicy != nil:
    body_569898 = ClusterHealthPolicy
  result = call_569895.call(path_569896, query_569897, nil, nil, body_569898)

var getNodeHealthUsingPolicy* = Call_GetNodeHealthUsingPolicy_569886(
    name: "getNodeHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetHealth",
    validator: validate_GetNodeHealthUsingPolicy_569887, base: "",
    url: url_GetNodeHealthUsingPolicy_569888, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealth_569875 = ref object of OpenApiRestCall_567668
proc url_GetNodeHealth_569877(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealth_569876(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569878 = path.getOrDefault("nodeName")
  valid_569878 = validateParameter(valid_569878, JString, required = true,
                                 default = nil)
  if valid_569878 != nil:
    section.add "nodeName", valid_569878
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569879 = query.getOrDefault("timeout")
  valid_569879 = validateParameter(valid_569879, JInt, required = false,
                                 default = newJInt(60))
  if valid_569879 != nil:
    section.add "timeout", valid_569879
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569880 = query.getOrDefault("api-version")
  valid_569880 = validateParameter(valid_569880, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569880 != nil:
    section.add "api-version", valid_569880
  var valid_569881 = query.getOrDefault("EventsHealthStateFilter")
  valid_569881 = validateParameter(valid_569881, JInt, required = false,
                                 default = newJInt(0))
  if valid_569881 != nil:
    section.add "EventsHealthStateFilter", valid_569881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569882: Call_GetNodeHealth_569875; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_569882.validator(path, query, header, formData, body)
  let scheme = call_569882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569882.url(scheme.get, call_569882.host, call_569882.base,
                         call_569882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569882, url, valid)

proc call*(call_569883: Call_GetNodeHealth_569875; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getNodeHealth
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_569884 = newJObject()
  var query_569885 = newJObject()
  add(query_569885, "timeout", newJInt(timeout))
  add(query_569885, "api-version", newJString(apiVersion))
  add(path_569884, "nodeName", newJString(nodeName))
  add(query_569885, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_569883.call(path_569884, query_569885, nil, nil, nil)

var getNodeHealth* = Call_GetNodeHealth_569875(name: "getNodeHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetHealth", validator: validate_GetNodeHealth_569876,
    base: "", url: url_GetNodeHealth_569877, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeLoadInfo_569899 = ref object of OpenApiRestCall_567668
proc url_GetNodeLoadInfo_569901(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeLoadInfo_569900(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569902 = path.getOrDefault("nodeName")
  valid_569902 = validateParameter(valid_569902, JString, required = true,
                                 default = nil)
  if valid_569902 != nil:
    section.add "nodeName", valid_569902
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569903 = query.getOrDefault("timeout")
  valid_569903 = validateParameter(valid_569903, JInt, required = false,
                                 default = newJInt(60))
  if valid_569903 != nil:
    section.add "timeout", valid_569903
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569904 = query.getOrDefault("api-version")
  valid_569904 = validateParameter(valid_569904, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569904 != nil:
    section.add "api-version", valid_569904
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569905: Call_GetNodeLoadInfo_569899; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  let valid = call_569905.validator(path, query, header, formData, body)
  let scheme = call_569905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569905.url(scheme.get, call_569905.host, call_569905.base,
                         call_569905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569905, url, valid)

proc call*(call_569906: Call_GetNodeLoadInfo_569899; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeLoadInfo
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569907 = newJObject()
  var query_569908 = newJObject()
  add(query_569908, "timeout", newJInt(timeout))
  add(query_569908, "api-version", newJString(apiVersion))
  add(path_569907, "nodeName", newJString(nodeName))
  result = call_569906.call(path_569907, query_569908, nil, nil, nil)

var getNodeLoadInfo* = Call_GetNodeLoadInfo_569899(name: "getNodeLoadInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetLoadInformation",
    validator: validate_GetNodeLoadInfo_569900, base: "", url: url_GetNodeLoadInfo_569901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569909 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceReplicaDetailInfoByPartitionId_569911(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfoByPartitionId_569910(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569912 = path.getOrDefault("nodeName")
  valid_569912 = validateParameter(valid_569912, JString, required = true,
                                 default = nil)
  if valid_569912 != nil:
    section.add "nodeName", valid_569912
  var valid_569913 = path.getOrDefault("partitionId")
  valid_569913 = validateParameter(valid_569913, JString, required = true,
                                 default = nil)
  if valid_569913 != nil:
    section.add "partitionId", valid_569913
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569914 = query.getOrDefault("timeout")
  valid_569914 = validateParameter(valid_569914, JInt, required = false,
                                 default = newJInt(60))
  if valid_569914 != nil:
    section.add "timeout", valid_569914
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569915 = query.getOrDefault("api-version")
  valid_569915 = validateParameter(valid_569915, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569915 != nil:
    section.add "api-version", valid_569915
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569916: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569909;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_569916.validator(path, query, header, formData, body)
  let scheme = call_569916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569916.url(scheme.get, call_569916.host, call_569916.base,
                         call_569916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569916, url, valid)

proc call*(call_569917: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569909;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfoByPartitionId
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569918 = newJObject()
  var query_569919 = newJObject()
  add(query_569919, "timeout", newJInt(timeout))
  add(query_569919, "api-version", newJString(apiVersion))
  add(path_569918, "nodeName", newJString(nodeName))
  add(path_569918, "partitionId", newJString(partitionId))
  result = call_569917.call(path_569918, query_569919, nil, nil, nil)

var getDeployedServiceReplicaDetailInfoByPartitionId* = Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569909(
    name: "getDeployedServiceReplicaDetailInfoByPartitionId",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaDetailInfoByPartitionId_569910,
    base: "", url: url_GetDeployedServiceReplicaDetailInfoByPartitionId_569911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveReplica_569920 = ref object of OpenApiRestCall_567668
proc url_RemoveReplica_569922(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveReplica_569921(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569923 = path.getOrDefault("replicaId")
  valid_569923 = validateParameter(valid_569923, JString, required = true,
                                 default = nil)
  if valid_569923 != nil:
    section.add "replicaId", valid_569923
  var valid_569924 = path.getOrDefault("nodeName")
  valid_569924 = validateParameter(valid_569924, JString, required = true,
                                 default = nil)
  if valid_569924 != nil:
    section.add "nodeName", valid_569924
  var valid_569925 = path.getOrDefault("partitionId")
  valid_569925 = validateParameter(valid_569925, JString, required = true,
                                 default = nil)
  if valid_569925 != nil:
    section.add "partitionId", valid_569925
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_569926 = query.getOrDefault("timeout")
  valid_569926 = validateParameter(valid_569926, JInt, required = false,
                                 default = newJInt(60))
  if valid_569926 != nil:
    section.add "timeout", valid_569926
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569927 = query.getOrDefault("api-version")
  valid_569927 = validateParameter(valid_569927, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569927 != nil:
    section.add "api-version", valid_569927
  var valid_569928 = query.getOrDefault("ForceRemove")
  valid_569928 = validateParameter(valid_569928, JBool, required = false, default = nil)
  if valid_569928 != nil:
    section.add "ForceRemove", valid_569928
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569929: Call_RemoveReplica_569920; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  let valid = call_569929.validator(path, query, header, formData, body)
  let scheme = call_569929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569929.url(scheme.get, call_569929.host, call_569929.base,
                         call_569929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569929, url, valid)

proc call*(call_569930: Call_RemoveReplica_569920; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## removeReplica
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569931 = newJObject()
  var query_569932 = newJObject()
  add(path_569931, "replicaId", newJString(replicaId))
  add(query_569932, "timeout", newJInt(timeout))
  add(query_569932, "api-version", newJString(apiVersion))
  add(query_569932, "ForceRemove", newJBool(ForceRemove))
  add(path_569931, "nodeName", newJString(nodeName))
  add(path_569931, "partitionId", newJString(partitionId))
  result = call_569930.call(path_569931, query_569932, nil, nil, nil)

var removeReplica* = Call_RemoveReplica_569920(name: "removeReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete",
    validator: validate_RemoveReplica_569921, base: "", url: url_RemoveReplica_569922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfo_569933 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceReplicaDetailInfo_569935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetDetail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfo_569934(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569936 = path.getOrDefault("replicaId")
  valid_569936 = validateParameter(valid_569936, JString, required = true,
                                 default = nil)
  if valid_569936 != nil:
    section.add "replicaId", valid_569936
  var valid_569937 = path.getOrDefault("nodeName")
  valid_569937 = validateParameter(valid_569937, JString, required = true,
                                 default = nil)
  if valid_569937 != nil:
    section.add "nodeName", valid_569937
  var valid_569938 = path.getOrDefault("partitionId")
  valid_569938 = validateParameter(valid_569938, JString, required = true,
                                 default = nil)
  if valid_569938 != nil:
    section.add "partitionId", valid_569938
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569939 = query.getOrDefault("timeout")
  valid_569939 = validateParameter(valid_569939, JInt, required = false,
                                 default = newJInt(60))
  if valid_569939 != nil:
    section.add "timeout", valid_569939
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569940 = query.getOrDefault("api-version")
  valid_569940 = validateParameter(valid_569940, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569940 != nil:
    section.add "api-version", valid_569940
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569941: Call_GetDeployedServiceReplicaDetailInfo_569933;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_569941.validator(path, query, header, formData, body)
  let scheme = call_569941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569941.url(scheme.get, call_569941.host, call_569941.base,
                         call_569941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569941, url, valid)

proc call*(call_569942: Call_GetDeployedServiceReplicaDetailInfo_569933;
          replicaId: string; nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfo
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569943 = newJObject()
  var query_569944 = newJObject()
  add(path_569943, "replicaId", newJString(replicaId))
  add(query_569944, "timeout", newJInt(timeout))
  add(query_569944, "api-version", newJString(apiVersion))
  add(path_569943, "nodeName", newJString(nodeName))
  add(path_569943, "partitionId", newJString(partitionId))
  result = call_569942.call(path_569943, query_569944, nil, nil, nil)

var getDeployedServiceReplicaDetailInfo* = Call_GetDeployedServiceReplicaDetailInfo_569933(
    name: "getDeployedServiceReplicaDetailInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail",
    validator: validate_GetDeployedServiceReplicaDetailInfo_569934, base: "",
    url: url_GetDeployedServiceReplicaDetailInfo_569935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartReplica_569945 = ref object of OpenApiRestCall_567668
proc url_RestartReplica_569947(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartReplica_569946(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569948 = path.getOrDefault("replicaId")
  valid_569948 = validateParameter(valid_569948, JString, required = true,
                                 default = nil)
  if valid_569948 != nil:
    section.add "replicaId", valid_569948
  var valid_569949 = path.getOrDefault("nodeName")
  valid_569949 = validateParameter(valid_569949, JString, required = true,
                                 default = nil)
  if valid_569949 != nil:
    section.add "nodeName", valid_569949
  var valid_569950 = path.getOrDefault("partitionId")
  valid_569950 = validateParameter(valid_569950, JString, required = true,
                                 default = nil)
  if valid_569950 != nil:
    section.add "partitionId", valid_569950
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569951 = query.getOrDefault("timeout")
  valid_569951 = validateParameter(valid_569951, JInt, required = false,
                                 default = newJInt(60))
  if valid_569951 != nil:
    section.add "timeout", valid_569951
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569952 = query.getOrDefault("api-version")
  valid_569952 = validateParameter(valid_569952, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569952 != nil:
    section.add "api-version", valid_569952
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569953: Call_RestartReplica_569945; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  let valid = call_569953.validator(path, query, header, formData, body)
  let scheme = call_569953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569953.url(scheme.get, call_569953.host, call_569953.base,
                         call_569953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569953, url, valid)

proc call*(call_569954: Call_RestartReplica_569945; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartReplica
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569955 = newJObject()
  var query_569956 = newJObject()
  add(path_569955, "replicaId", newJString(replicaId))
  add(query_569956, "timeout", newJInt(timeout))
  add(query_569956, "api-version", newJString(apiVersion))
  add(path_569955, "nodeName", newJString(nodeName))
  add(path_569955, "partitionId", newJString(partitionId))
  result = call_569954.call(path_569955, query_569956, nil, nil, nil)

var restartReplica* = Call_RestartReplica_569945(name: "restartReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart",
    validator: validate_RestartReplica_569946, base: "", url: url_RestartReplica_569947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveNodeState_569957 = ref object of OpenApiRestCall_567668
proc url_RemoveNodeState_569959(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/RemoveNodeState")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveNodeState_569958(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, see https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569960 = path.getOrDefault("nodeName")
  valid_569960 = validateParameter(valid_569960, JString, required = true,
                                 default = nil)
  if valid_569960 != nil:
    section.add "nodeName", valid_569960
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569961 = query.getOrDefault("timeout")
  valid_569961 = validateParameter(valid_569961, JInt, required = false,
                                 default = newJInt(60))
  if valid_569961 != nil:
    section.add "timeout", valid_569961
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569962 = query.getOrDefault("api-version")
  valid_569962 = validateParameter(valid_569962, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569962 != nil:
    section.add "api-version", valid_569962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569963: Call_RemoveNodeState_569957; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, see https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
  ## 
  let valid = call_569963.validator(path, query, header, formData, body)
  let scheme = call_569963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569963.url(scheme.get, call_569963.host, call_569963.base,
                         call_569963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569963, url, valid)

proc call*(call_569964: Call_RemoveNodeState_569957; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## removeNodeState
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to come back up with its state intact, please remove the node from the cluster, see https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569965 = newJObject()
  var query_569966 = newJObject()
  add(query_569966, "timeout", newJInt(timeout))
  add(query_569966, "api-version", newJString(apiVersion))
  add(path_569965, "nodeName", newJString(nodeName))
  result = call_569964.call(path_569965, query_569966, nil, nil, nil)

var removeNodeState* = Call_RemoveNodeState_569957(name: "removeNodeState",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/RemoveNodeState",
    validator: validate_RemoveNodeState_569958, base: "", url: url_RemoveNodeState_569959,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportNodeHealth_569967 = ref object of OpenApiRestCall_567668
proc url_ReportNodeHealth_569969(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportNodeHealth_569968(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569970 = path.getOrDefault("nodeName")
  valid_569970 = validateParameter(valid_569970, JString, required = true,
                                 default = nil)
  if valid_569970 != nil:
    section.add "nodeName", valid_569970
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569971 = query.getOrDefault("Immediate")
  valid_569971 = validateParameter(valid_569971, JBool, required = false,
                                 default = newJBool(false))
  if valid_569971 != nil:
    section.add "Immediate", valid_569971
  var valid_569972 = query.getOrDefault("timeout")
  valid_569972 = validateParameter(valid_569972, JInt, required = false,
                                 default = newJInt(60))
  if valid_569972 != nil:
    section.add "timeout", valid_569972
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569973 = query.getOrDefault("api-version")
  valid_569973 = validateParameter(valid_569973, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569973 != nil:
    section.add "api-version", valid_569973
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569975: Call_ReportNodeHealth_569967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_569975.validator(path, query, header, formData, body)
  let scheme = call_569975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569975.url(scheme.get, call_569975.host, call_569975.base,
                         call_569975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569975, url, valid)

proc call*(call_569976: Call_ReportNodeHealth_569967; nodeName: string;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportNodeHealth
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var path_569977 = newJObject()
  var query_569978 = newJObject()
  var body_569979 = newJObject()
  add(query_569978, "Immediate", newJBool(Immediate))
  add(query_569978, "timeout", newJInt(timeout))
  add(query_569978, "api-version", newJString(apiVersion))
  add(path_569977, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_569979 = HealthInformation
  result = call_569976.call(path_569977, query_569978, nil, nil, body_569979)

var reportNodeHealth* = Call_ReportNodeHealth_569967(name: "reportNodeHealth",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/ReportHealth",
    validator: validate_ReportNodeHealth_569968, base: "",
    url: url_ReportNodeHealth_569969, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartNode_569980 = ref object of OpenApiRestCall_567668
proc url_RestartNode_569982(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartNode_569981(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569983 = path.getOrDefault("nodeName")
  valid_569983 = validateParameter(valid_569983, JString, required = true,
                                 default = nil)
  if valid_569983 != nil:
    section.add "nodeName", valid_569983
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569984 = query.getOrDefault("timeout")
  valid_569984 = validateParameter(valid_569984, JInt, required = false,
                                 default = newJInt(60))
  if valid_569984 != nil:
    section.add "timeout", valid_569984
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569985 = query.getOrDefault("api-version")
  valid_569985 = validateParameter(valid_569985, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569985 != nil:
    section.add "api-version", valid_569985
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569987: Call_RestartNode_569980; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  let valid = call_569987.validator(path, query, header, formData, body)
  let scheme = call_569987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569987.url(scheme.get, call_569987.host, call_569987.base,
                         call_569987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569987, url, valid)

proc call*(call_569988: Call_RestartNode_569980; nodeName: string;
          RestartNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartNode
  ## Restarts a Service Fabric cluster node that is already started.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  var path_569989 = newJObject()
  var query_569990 = newJObject()
  var body_569991 = newJObject()
  add(query_569990, "timeout", newJInt(timeout))
  add(query_569990, "api-version", newJString(apiVersion))
  add(path_569989, "nodeName", newJString(nodeName))
  if RestartNodeDescription != nil:
    body_569991 = RestartNodeDescription
  result = call_569988.call(path_569989, query_569990, nil, nil, body_569991)

var restartNode* = Call_RestartNode_569980(name: "restartNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}/$/Restart",
                                        validator: validate_RestartNode_569981,
                                        base: "", url: url_RestartNode_569982,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfo_569992 = ref object of OpenApiRestCall_567668
proc url_GetPartitionInfo_569994(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfo_569993(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569995 = path.getOrDefault("partitionId")
  valid_569995 = validateParameter(valid_569995, JString, required = true,
                                 default = nil)
  if valid_569995 != nil:
    section.add "partitionId", valid_569995
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569996 = query.getOrDefault("timeout")
  valid_569996 = validateParameter(valid_569996, JInt, required = false,
                                 default = newJInt(60))
  if valid_569996 != nil:
    section.add "timeout", valid_569996
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569997 = query.getOrDefault("api-version")
  valid_569997 = validateParameter(valid_569997, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569997 != nil:
    section.add "api-version", valid_569997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569998: Call_GetPartitionInfo_569992; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_569998.validator(path, query, header, formData, body)
  let scheme = call_569998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569998.url(scheme.get, call_569998.host, call_569998.base,
                         call_569998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569998, url, valid)

proc call*(call_569999: Call_GetPartitionInfo_569992; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionInfo
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570000 = newJObject()
  var query_570001 = newJObject()
  add(query_570001, "timeout", newJInt(timeout))
  add(query_570001, "api-version", newJString(apiVersion))
  add(path_570000, "partitionId", newJString(partitionId))
  result = call_569999.call(path_570000, query_570001, nil, nil, nil)

var getPartitionInfo* = Call_GetPartitionInfo_569992(name: "getPartitionInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}", validator: validate_GetPartitionInfo_569993,
    base: "", url: url_GetPartitionInfo_569994, schemes: {Scheme.Https, Scheme.Http})
type
  Call_BackupPartition_570002 = ref object of OpenApiRestCall_567668
proc url_BackupPartition_570004(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_BackupPartition_570003(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570005 = path.getOrDefault("partitionId")
  valid_570005 = validateParameter(valid_570005, JString, required = true,
                                 default = nil)
  if valid_570005 != nil:
    section.add "partitionId", valid_570005
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: JInt
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  section = newJObject()
  var valid_570006 = query.getOrDefault("timeout")
  valid_570006 = validateParameter(valid_570006, JInt, required = false,
                                 default = newJInt(60))
  if valid_570006 != nil:
    section.add "timeout", valid_570006
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570007 = query.getOrDefault("api-version")
  valid_570007 = validateParameter(valid_570007, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570007 != nil:
    section.add "api-version", valid_570007
  var valid_570008 = query.getOrDefault("BackupTimeout")
  valid_570008 = validateParameter(valid_570008, JInt, required = false,
                                 default = newJInt(10))
  if valid_570008 != nil:
    section.add "BackupTimeout", valid_570008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570010: Call_BackupPartition_570002; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  let valid = call_570010.validator(path, query, header, formData, body)
  let scheme = call_570010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570010.url(scheme.get, call_570010.host, call_570010.base,
                         call_570010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570010, url, valid)

proc call*(call_570011: Call_BackupPartition_570002; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; BackupTimeout: int = 10;
          BackupPartitionDescription: JsonNode = nil): Recallable =
  ## backupPartition
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: int
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  var path_570012 = newJObject()
  var query_570013 = newJObject()
  var body_570014 = newJObject()
  add(query_570013, "timeout", newJInt(timeout))
  add(query_570013, "api-version", newJString(apiVersion))
  add(query_570013, "BackupTimeout", newJInt(BackupTimeout))
  add(path_570012, "partitionId", newJString(partitionId))
  if BackupPartitionDescription != nil:
    body_570014 = BackupPartitionDescription
  result = call_570011.call(path_570012, query_570013, nil, nil, body_570014)

var backupPartition* = Call_BackupPartition_570002(name: "backupPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Backup",
    validator: validate_BackupPartition_570003, base: "", url: url_BackupPartition_570004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisablePartitionBackup_570015 = ref object of OpenApiRestCall_567668
proc url_DisablePartitionBackup_570017(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisablePartitionBackup_570016(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570018 = path.getOrDefault("partitionId")
  valid_570018 = validateParameter(valid_570018, JString, required = true,
                                 default = nil)
  if valid_570018 != nil:
    section.add "partitionId", valid_570018
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570019 = query.getOrDefault("timeout")
  valid_570019 = validateParameter(valid_570019, JInt, required = false,
                                 default = newJInt(60))
  if valid_570019 != nil:
    section.add "timeout", valid_570019
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570020 = query.getOrDefault("api-version")
  valid_570020 = validateParameter(valid_570020, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570020 != nil:
    section.add "api-version", valid_570020
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570022: Call_DisablePartitionBackup_570015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  let valid = call_570022.validator(path, query, header, formData, body)
  let scheme = call_570022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570022.url(scheme.get, call_570022.host, call_570022.base,
                         call_570022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570022, url, valid)

proc call*(call_570023: Call_DisablePartitionBackup_570015; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disablePartitionBackup
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570024 = newJObject()
  var query_570025 = newJObject()
  var body_570026 = newJObject()
  add(query_570025, "timeout", newJInt(timeout))
  add(query_570025, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_570026 = DisableBackupDescription
  add(path_570024, "partitionId", newJString(partitionId))
  result = call_570023.call(path_570024, query_570025, nil, nil, body_570026)

var disablePartitionBackup* = Call_DisablePartitionBackup_570015(
    name: "disablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/DisableBackup",
    validator: validate_DisablePartitionBackup_570016, base: "",
    url: url_DisablePartitionBackup_570017, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnablePartitionBackup_570027 = ref object of OpenApiRestCall_567668
proc url_EnablePartitionBackup_570029(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnablePartitionBackup_570028(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570030 = path.getOrDefault("partitionId")
  valid_570030 = validateParameter(valid_570030, JString, required = true,
                                 default = nil)
  if valid_570030 != nil:
    section.add "partitionId", valid_570030
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570031 = query.getOrDefault("timeout")
  valid_570031 = validateParameter(valid_570031, JInt, required = false,
                                 default = newJInt(60))
  if valid_570031 != nil:
    section.add "timeout", valid_570031
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570032 = query.getOrDefault("api-version")
  valid_570032 = validateParameter(valid_570032, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570032 != nil:
    section.add "api-version", valid_570032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570034: Call_EnablePartitionBackup_570027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_570034.validator(path, query, header, formData, body)
  let scheme = call_570034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570034.url(scheme.get, call_570034.host, call_570034.base,
                         call_570034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570034, url, valid)

proc call*(call_570035: Call_EnablePartitionBackup_570027;
          EnableBackupDescription: JsonNode; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enablePartitionBackup
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570036 = newJObject()
  var query_570037 = newJObject()
  var body_570038 = newJObject()
  add(query_570037, "timeout", newJInt(timeout))
  add(query_570037, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_570038 = EnableBackupDescription
  add(path_570036, "partitionId", newJString(partitionId))
  result = call_570035.call(path_570036, query_570037, nil, nil, body_570038)

var enablePartitionBackup* = Call_EnablePartitionBackup_570027(
    name: "enablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/EnableBackup",
    validator: validate_EnablePartitionBackup_570028, base: "",
    url: url_EnablePartitionBackup_570029, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupConfigurationInfo_570039 = ref object of OpenApiRestCall_567668
proc url_GetPartitionBackupConfigurationInfo_570041(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupConfigurationInfo_570040(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570042 = path.getOrDefault("partitionId")
  valid_570042 = validateParameter(valid_570042, JString, required = true,
                                 default = nil)
  if valid_570042 != nil:
    section.add "partitionId", valid_570042
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570043 = query.getOrDefault("timeout")
  valid_570043 = validateParameter(valid_570043, JInt, required = false,
                                 default = newJInt(60))
  if valid_570043 != nil:
    section.add "timeout", valid_570043
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570044 = query.getOrDefault("api-version")
  valid_570044 = validateParameter(valid_570044, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570044 != nil:
    section.add "api-version", valid_570044
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570045: Call_GetPartitionBackupConfigurationInfo_570039;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  let valid = call_570045.validator(path, query, header, formData, body)
  let scheme = call_570045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570045.url(scheme.get, call_570045.host, call_570045.base,
                         call_570045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570045, url, valid)

proc call*(call_570046: Call_GetPartitionBackupConfigurationInfo_570039;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupConfigurationInfo
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570047 = newJObject()
  var query_570048 = newJObject()
  add(query_570048, "timeout", newJInt(timeout))
  add(query_570048, "api-version", newJString(apiVersion))
  add(path_570047, "partitionId", newJString(partitionId))
  result = call_570046.call(path_570047, query_570048, nil, nil, nil)

var getPartitionBackupConfigurationInfo* = Call_GetPartitionBackupConfigurationInfo_570039(
    name: "getPartitionBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupConfigurationInfo",
    validator: validate_GetPartitionBackupConfigurationInfo_570040, base: "",
    url: url_GetPartitionBackupConfigurationInfo_570041,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupProgress_570049 = ref object of OpenApiRestCall_567668
proc url_GetPartitionBackupProgress_570051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupProgress_570050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570052 = path.getOrDefault("partitionId")
  valid_570052 = validateParameter(valid_570052, JString, required = true,
                                 default = nil)
  if valid_570052 != nil:
    section.add "partitionId", valid_570052
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570053 = query.getOrDefault("timeout")
  valid_570053 = validateParameter(valid_570053, JInt, required = false,
                                 default = newJInt(60))
  if valid_570053 != nil:
    section.add "timeout", valid_570053
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570054 = query.getOrDefault("api-version")
  valid_570054 = validateParameter(valid_570054, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570054 != nil:
    section.add "api-version", valid_570054
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570055: Call_GetPartitionBackupProgress_570049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  let valid = call_570055.validator(path, query, header, formData, body)
  let scheme = call_570055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570055.url(scheme.get, call_570055.host, call_570055.base,
                         call_570055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570055, url, valid)

proc call*(call_570056: Call_GetPartitionBackupProgress_570049;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupProgress
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570057 = newJObject()
  var query_570058 = newJObject()
  add(query_570058, "timeout", newJInt(timeout))
  add(query_570058, "api-version", newJString(apiVersion))
  add(path_570057, "partitionId", newJString(partitionId))
  result = call_570056.call(path_570057, query_570058, nil, nil, nil)

var getPartitionBackupProgress* = Call_GetPartitionBackupProgress_570049(
    name: "getPartitionBackupProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupProgress",
    validator: validate_GetPartitionBackupProgress_570050, base: "",
    url: url_GetPartitionBackupProgress_570051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupList_570059 = ref object of OpenApiRestCall_567668
proc url_GetPartitionBackupList_570061(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupList_570060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570062 = path.getOrDefault("partitionId")
  valid_570062 = validateParameter(valid_570062, JString, required = true,
                                 default = nil)
  if valid_570062 != nil:
    section.add "partitionId", valid_570062
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_570063 = query.getOrDefault("timeout")
  valid_570063 = validateParameter(valid_570063, JInt, required = false,
                                 default = newJInt(60))
  if valid_570063 != nil:
    section.add "timeout", valid_570063
  var valid_570064 = query.getOrDefault("Latest")
  valid_570064 = validateParameter(valid_570064, JBool, required = false,
                                 default = newJBool(false))
  if valid_570064 != nil:
    section.add "Latest", valid_570064
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570065 = query.getOrDefault("api-version")
  valid_570065 = validateParameter(valid_570065, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570065 != nil:
    section.add "api-version", valid_570065
  var valid_570066 = query.getOrDefault("StartDateTimeFilter")
  valid_570066 = validateParameter(valid_570066, JString, required = false,
                                 default = nil)
  if valid_570066 != nil:
    section.add "StartDateTimeFilter", valid_570066
  var valid_570067 = query.getOrDefault("EndDateTimeFilter")
  valid_570067 = validateParameter(valid_570067, JString, required = false,
                                 default = nil)
  if valid_570067 != nil:
    section.add "EndDateTimeFilter", valid_570067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570068: Call_GetPartitionBackupList_570059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  let valid = call_570068.validator(path, query, header, formData, body)
  let scheme = call_570068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570068.url(scheme.get, call_570068.host, call_570068.base,
                         call_570068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570068, url, valid)

proc call*(call_570069: Call_GetPartitionBackupList_570059; partitionId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = ""): Recallable =
  ## getPartitionBackupList
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570070 = newJObject()
  var query_570071 = newJObject()
  add(query_570071, "timeout", newJInt(timeout))
  add(query_570071, "Latest", newJBool(Latest))
  add(query_570071, "api-version", newJString(apiVersion))
  add(query_570071, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_570071, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_570070, "partitionId", newJString(partitionId))
  result = call_570069.call(path_570070, query_570071, nil, nil, nil)

var getPartitionBackupList* = Call_GetPartitionBackupList_570059(
    name: "getPartitionBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetBackups",
    validator: validate_GetPartitionBackupList_570060, base: "",
    url: url_GetPartitionBackupList_570061, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealthUsingPolicy_570085 = ref object of OpenApiRestCall_567668
proc url_GetPartitionHealthUsingPolicy_570087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealthUsingPolicy_570086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570088 = path.getOrDefault("partitionId")
  valid_570088 = validateParameter(valid_570088, JString, required = true,
                                 default = nil)
  if valid_570088 != nil:
    section.add "partitionId", valid_570088
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570089 = query.getOrDefault("timeout")
  valid_570089 = validateParameter(valid_570089, JInt, required = false,
                                 default = newJInt(60))
  if valid_570089 != nil:
    section.add "timeout", valid_570089
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570090 = query.getOrDefault("api-version")
  valid_570090 = validateParameter(valid_570090, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570090 != nil:
    section.add "api-version", valid_570090
  var valid_570091 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_570091 = validateParameter(valid_570091, JInt, required = false,
                                 default = newJInt(0))
  if valid_570091 != nil:
    section.add "ReplicasHealthStateFilter", valid_570091
  var valid_570092 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570092 = validateParameter(valid_570092, JBool, required = false,
                                 default = newJBool(false))
  if valid_570092 != nil:
    section.add "ExcludeHealthStatistics", valid_570092
  var valid_570093 = query.getOrDefault("EventsHealthStateFilter")
  valid_570093 = validateParameter(valid_570093, JInt, required = false,
                                 default = newJInt(0))
  if valid_570093 != nil:
    section.add "EventsHealthStateFilter", valid_570093
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570095: Call_GetPartitionHealthUsingPolicy_570085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570095.validator(path, query, header, formData, body)
  let scheme = call_570095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570095.url(scheme.get, call_570095.host, call_570095.base,
                         call_570095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570095, url, valid)

proc call*(call_570096: Call_GetPartitionHealthUsingPolicy_570085;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0;
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealthUsingPolicy
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570097 = newJObject()
  var query_570098 = newJObject()
  var body_570099 = newJObject()
  add(query_570098, "timeout", newJInt(timeout))
  add(query_570098, "api-version", newJString(apiVersion))
  add(query_570098, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  if ApplicationHealthPolicy != nil:
    body_570099 = ApplicationHealthPolicy
  add(query_570098, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570098, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570097, "partitionId", newJString(partitionId))
  result = call_570096.call(path_570097, query_570098, nil, nil, body_570099)

var getPartitionHealthUsingPolicy* = Call_GetPartitionHealthUsingPolicy_570085(
    name: "getPartitionHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealthUsingPolicy_570086, base: "",
    url: url_GetPartitionHealthUsingPolicy_570087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealth_570072 = ref object of OpenApiRestCall_567668
proc url_GetPartitionHealth_570074(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealth_570073(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570075 = path.getOrDefault("partitionId")
  valid_570075 = validateParameter(valid_570075, JString, required = true,
                                 default = nil)
  if valid_570075 != nil:
    section.add "partitionId", valid_570075
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570076 = query.getOrDefault("timeout")
  valid_570076 = validateParameter(valid_570076, JInt, required = false,
                                 default = newJInt(60))
  if valid_570076 != nil:
    section.add "timeout", valid_570076
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570077 = query.getOrDefault("api-version")
  valid_570077 = validateParameter(valid_570077, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570077 != nil:
    section.add "api-version", valid_570077
  var valid_570078 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_570078 = validateParameter(valid_570078, JInt, required = false,
                                 default = newJInt(0))
  if valid_570078 != nil:
    section.add "ReplicasHealthStateFilter", valid_570078
  var valid_570079 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570079 = validateParameter(valid_570079, JBool, required = false,
                                 default = newJBool(false))
  if valid_570079 != nil:
    section.add "ExcludeHealthStatistics", valid_570079
  var valid_570080 = query.getOrDefault("EventsHealthStateFilter")
  valid_570080 = validateParameter(valid_570080, JInt, required = false,
                                 default = newJInt(0))
  if valid_570080 != nil:
    section.add "EventsHealthStateFilter", valid_570080
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570081: Call_GetPartitionHealth_570072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570081.validator(path, query, header, formData, body)
  let scheme = call_570081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570081.url(scheme.get, call_570081.host, call_570081.base,
                         call_570081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570081, url, valid)

proc call*(call_570082: Call_GetPartitionHealth_570072; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0; ExcludeHealthStatistics: bool = false;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570083 = newJObject()
  var query_570084 = newJObject()
  add(query_570084, "timeout", newJInt(timeout))
  add(query_570084, "api-version", newJString(apiVersion))
  add(query_570084, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  add(query_570084, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570084, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570083, "partitionId", newJString(partitionId))
  result = call_570082.call(path_570083, query_570084, nil, nil, nil)

var getPartitionHealth* = Call_GetPartitionHealth_570072(
    name: "getPartitionHealth", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealth_570073, base: "",
    url: url_GetPartitionHealth_570074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionLoadInformation_570100 = ref object of OpenApiRestCall_567668
proc url_GetPartitionLoadInformation_570102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionLoadInformation_570101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570103 = path.getOrDefault("partitionId")
  valid_570103 = validateParameter(valid_570103, JString, required = true,
                                 default = nil)
  if valid_570103 != nil:
    section.add "partitionId", valid_570103
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570104 = query.getOrDefault("timeout")
  valid_570104 = validateParameter(valid_570104, JInt, required = false,
                                 default = newJInt(60))
  if valid_570104 != nil:
    section.add "timeout", valid_570104
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570105 = query.getOrDefault("api-version")
  valid_570105 = validateParameter(valid_570105, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570105 != nil:
    section.add "api-version", valid_570105
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570106: Call_GetPartitionLoadInformation_570100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  let valid = call_570106.validator(path, query, header, formData, body)
  let scheme = call_570106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570106.url(scheme.get, call_570106.host, call_570106.base,
                         call_570106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570106, url, valid)

proc call*(call_570107: Call_GetPartitionLoadInformation_570100;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionLoadInformation
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570108 = newJObject()
  var query_570109 = newJObject()
  add(query_570109, "timeout", newJInt(timeout))
  add(query_570109, "api-version", newJString(apiVersion))
  add(path_570108, "partitionId", newJString(partitionId))
  result = call_570107.call(path_570108, query_570109, nil, nil, nil)

var getPartitionLoadInformation* = Call_GetPartitionLoadInformation_570100(
    name: "getPartitionLoadInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetLoadInformation",
    validator: validate_GetPartitionLoadInformation_570101, base: "",
    url: url_GetPartitionLoadInformation_570102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfoList_570110 = ref object of OpenApiRestCall_567668
proc url_GetReplicaInfoList_570112(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfoList_570111(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570113 = path.getOrDefault("partitionId")
  valid_570113 = validateParameter(valid_570113, JString, required = true,
                                 default = nil)
  if valid_570113 != nil:
    section.add "partitionId", valid_570113
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_570114 = query.getOrDefault("timeout")
  valid_570114 = validateParameter(valid_570114, JInt, required = false,
                                 default = newJInt(60))
  if valid_570114 != nil:
    section.add "timeout", valid_570114
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570115 = query.getOrDefault("api-version")
  valid_570115 = validateParameter(valid_570115, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570115 != nil:
    section.add "api-version", valid_570115
  var valid_570116 = query.getOrDefault("ContinuationToken")
  valid_570116 = validateParameter(valid_570116, JString, required = false,
                                 default = nil)
  if valid_570116 != nil:
    section.add "ContinuationToken", valid_570116
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570117: Call_GetReplicaInfoList_570110; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_570117.validator(path, query, header, formData, body)
  let scheme = call_570117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570117.url(scheme.get, call_570117.host, call_570117.base,
                         call_570117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570117, url, valid)

proc call*(call_570118: Call_GetReplicaInfoList_570110; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = ""): Recallable =
  ## getReplicaInfoList
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_570119 = newJObject()
  var query_570120 = newJObject()
  add(query_570120, "timeout", newJInt(timeout))
  add(query_570120, "api-version", newJString(apiVersion))
  add(path_570119, "partitionId", newJString(partitionId))
  add(query_570120, "ContinuationToken", newJString(ContinuationToken))
  result = call_570118.call(path_570119, query_570120, nil, nil, nil)

var getReplicaInfoList* = Call_GetReplicaInfoList_570110(
    name: "getReplicaInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas",
    validator: validate_GetReplicaInfoList_570111, base: "",
    url: url_GetReplicaInfoList_570112, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfo_570121 = ref object of OpenApiRestCall_567668
proc url_GetReplicaInfo_570123(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfo_570122(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570124 = path.getOrDefault("replicaId")
  valid_570124 = validateParameter(valid_570124, JString, required = true,
                                 default = nil)
  if valid_570124 != nil:
    section.add "replicaId", valid_570124
  var valid_570125 = path.getOrDefault("partitionId")
  valid_570125 = validateParameter(valid_570125, JString, required = true,
                                 default = nil)
  if valid_570125 != nil:
    section.add "partitionId", valid_570125
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570126 = query.getOrDefault("timeout")
  valid_570126 = validateParameter(valid_570126, JInt, required = false,
                                 default = newJInt(60))
  if valid_570126 != nil:
    section.add "timeout", valid_570126
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570127 = query.getOrDefault("api-version")
  valid_570127 = validateParameter(valid_570127, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570127 != nil:
    section.add "api-version", valid_570127
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570128: Call_GetReplicaInfo_570121; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_570128.validator(path, query, header, formData, body)
  let scheme = call_570128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570128.url(scheme.get, call_570128.host, call_570128.base,
                         call_570128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570128, url, valid)

proc call*(call_570129: Call_GetReplicaInfo_570121; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getReplicaInfo
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570130 = newJObject()
  var query_570131 = newJObject()
  add(path_570130, "replicaId", newJString(replicaId))
  add(query_570131, "timeout", newJInt(timeout))
  add(query_570131, "api-version", newJString(apiVersion))
  add(path_570130, "partitionId", newJString(partitionId))
  result = call_570129.call(path_570130, query_570131, nil, nil, nil)

var getReplicaInfo* = Call_GetReplicaInfo_570121(name: "getReplicaInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}",
    validator: validate_GetReplicaInfo_570122, base: "", url: url_GetReplicaInfo_570123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealthUsingPolicy_570144 = ref object of OpenApiRestCall_567668
proc url_GetReplicaHealthUsingPolicy_570146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealthUsingPolicy_570145(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570147 = path.getOrDefault("replicaId")
  valid_570147 = validateParameter(valid_570147, JString, required = true,
                                 default = nil)
  if valid_570147 != nil:
    section.add "replicaId", valid_570147
  var valid_570148 = path.getOrDefault("partitionId")
  valid_570148 = validateParameter(valid_570148, JString, required = true,
                                 default = nil)
  if valid_570148 != nil:
    section.add "partitionId", valid_570148
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570149 = query.getOrDefault("timeout")
  valid_570149 = validateParameter(valid_570149, JInt, required = false,
                                 default = newJInt(60))
  if valid_570149 != nil:
    section.add "timeout", valid_570149
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570150 = query.getOrDefault("api-version")
  valid_570150 = validateParameter(valid_570150, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570150 != nil:
    section.add "api-version", valid_570150
  var valid_570151 = query.getOrDefault("EventsHealthStateFilter")
  valid_570151 = validateParameter(valid_570151, JInt, required = false,
                                 default = newJInt(0))
  if valid_570151 != nil:
    section.add "EventsHealthStateFilter", valid_570151
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570153: Call_GetReplicaHealthUsingPolicy_570144; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  let valid = call_570153.validator(path, query, header, formData, body)
  let scheme = call_570153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570153.url(scheme.get, call_570153.host, call_570153.base,
                         call_570153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570153, url, valid)

proc call*(call_570154: Call_GetReplicaHealthUsingPolicy_570144; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealthUsingPolicy
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570155 = newJObject()
  var query_570156 = newJObject()
  var body_570157 = newJObject()
  add(path_570155, "replicaId", newJString(replicaId))
  add(query_570156, "timeout", newJInt(timeout))
  add(query_570156, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_570157 = ApplicationHealthPolicy
  add(query_570156, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570155, "partitionId", newJString(partitionId))
  result = call_570154.call(path_570155, query_570156, nil, nil, body_570157)

var getReplicaHealthUsingPolicy* = Call_GetReplicaHealthUsingPolicy_570144(
    name: "getReplicaHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealthUsingPolicy_570145, base: "",
    url: url_GetReplicaHealthUsingPolicy_570146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealth_570132 = ref object of OpenApiRestCall_567668
proc url_GetReplicaHealth_570134(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealth_570133(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570135 = path.getOrDefault("replicaId")
  valid_570135 = validateParameter(valid_570135, JString, required = true,
                                 default = nil)
  if valid_570135 != nil:
    section.add "replicaId", valid_570135
  var valid_570136 = path.getOrDefault("partitionId")
  valid_570136 = validateParameter(valid_570136, JString, required = true,
                                 default = nil)
  if valid_570136 != nil:
    section.add "partitionId", valid_570136
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570137 = query.getOrDefault("timeout")
  valid_570137 = validateParameter(valid_570137, JInt, required = false,
                                 default = newJInt(60))
  if valid_570137 != nil:
    section.add "timeout", valid_570137
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570138 = query.getOrDefault("api-version")
  valid_570138 = validateParameter(valid_570138, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570138 != nil:
    section.add "api-version", valid_570138
  var valid_570139 = query.getOrDefault("EventsHealthStateFilter")
  valid_570139 = validateParameter(valid_570139, JInt, required = false,
                                 default = newJInt(0))
  if valid_570139 != nil:
    section.add "EventsHealthStateFilter", valid_570139
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570140: Call_GetReplicaHealth_570132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  let valid = call_570140.validator(path, query, header, formData, body)
  let scheme = call_570140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570140.url(scheme.get, call_570140.host, call_570140.base,
                         call_570140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570140, url, valid)

proc call*(call_570141: Call_GetReplicaHealth_570132; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealth
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570142 = newJObject()
  var query_570143 = newJObject()
  add(path_570142, "replicaId", newJString(replicaId))
  add(query_570143, "timeout", newJInt(timeout))
  add(query_570143, "api-version", newJString(apiVersion))
  add(query_570143, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570142, "partitionId", newJString(partitionId))
  result = call_570141.call(path_570142, query_570143, nil, nil, nil)

var getReplicaHealth* = Call_GetReplicaHealth_570132(name: "getReplicaHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealth_570133, base: "",
    url: url_GetReplicaHealth_570134, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportReplicaHealth_570158 = ref object of OpenApiRestCall_567668
proc url_ReportReplicaHealth_570160(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportReplicaHealth_570159(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570161 = path.getOrDefault("replicaId")
  valid_570161 = validateParameter(valid_570161, JString, required = true,
                                 default = nil)
  if valid_570161 != nil:
    section.add "replicaId", valid_570161
  var valid_570162 = path.getOrDefault("partitionId")
  valid_570162 = validateParameter(valid_570162, JString, required = true,
                                 default = nil)
  if valid_570162 != nil:
    section.add "partitionId", valid_570162
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceKind: JString (required)
  ##              : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  section = newJObject()
  var valid_570163 = query.getOrDefault("Immediate")
  valid_570163 = validateParameter(valid_570163, JBool, required = false,
                                 default = newJBool(false))
  if valid_570163 != nil:
    section.add "Immediate", valid_570163
  var valid_570164 = query.getOrDefault("timeout")
  valid_570164 = validateParameter(valid_570164, JInt, required = false,
                                 default = newJInt(60))
  if valid_570164 != nil:
    section.add "timeout", valid_570164
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570165 = query.getOrDefault("api-version")
  valid_570165 = validateParameter(valid_570165, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570165 != nil:
    section.add "api-version", valid_570165
  var valid_570166 = query.getOrDefault("ServiceKind")
  valid_570166 = validateParameter(valid_570166, JString, required = true,
                                 default = newJString("Stateful"))
  if valid_570166 != nil:
    section.add "ServiceKind", valid_570166
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570168: Call_ReportReplicaHealth_570158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_570168.validator(path, query, header, formData, body)
  let scheme = call_570168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570168.url(scheme.get, call_570168.host, call_570168.base,
                         call_570168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570168, url, valid)

proc call*(call_570169: Call_ReportReplicaHealth_570158; replicaId: string;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0";
          ServiceKind: string = "Stateful"): Recallable =
  ## reportReplicaHealth
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ServiceKind: string (required)
  ##              : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  var path_570170 = newJObject()
  var query_570171 = newJObject()
  var body_570172 = newJObject()
  add(path_570170, "replicaId", newJString(replicaId))
  add(query_570171, "Immediate", newJBool(Immediate))
  add(query_570171, "timeout", newJInt(timeout))
  add(query_570171, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_570172 = HealthInformation
  add(path_570170, "partitionId", newJString(partitionId))
  add(query_570171, "ServiceKind", newJString(ServiceKind))
  result = call_570169.call(path_570170, query_570171, nil, nil, body_570172)

var reportReplicaHealth* = Call_ReportReplicaHealth_570158(
    name: "reportReplicaHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth",
    validator: validate_ReportReplicaHealth_570159, base: "",
    url: url_ReportReplicaHealth_570160, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestoreProgress_570173 = ref object of OpenApiRestCall_567668
proc url_GetPartitionRestoreProgress_570175(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestoreProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestoreProgress_570174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570176 = path.getOrDefault("partitionId")
  valid_570176 = validateParameter(valid_570176, JString, required = true,
                                 default = nil)
  if valid_570176 != nil:
    section.add "partitionId", valid_570176
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570177 = query.getOrDefault("timeout")
  valid_570177 = validateParameter(valid_570177, JInt, required = false,
                                 default = newJInt(60))
  if valid_570177 != nil:
    section.add "timeout", valid_570177
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570178 = query.getOrDefault("api-version")
  valid_570178 = validateParameter(valid_570178, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570178 != nil:
    section.add "api-version", valid_570178
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570179: Call_GetPartitionRestoreProgress_570173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  let valid = call_570179.validator(path, query, header, formData, body)
  let scheme = call_570179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570179.url(scheme.get, call_570179.host, call_570179.base,
                         call_570179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570179, url, valid)

proc call*(call_570180: Call_GetPartitionRestoreProgress_570173;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionRestoreProgress
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570181 = newJObject()
  var query_570182 = newJObject()
  add(query_570182, "timeout", newJInt(timeout))
  add(query_570182, "api-version", newJString(apiVersion))
  add(path_570181, "partitionId", newJString(partitionId))
  result = call_570180.call(path_570181, query_570182, nil, nil, nil)

var getPartitionRestoreProgress* = Call_GetPartitionRestoreProgress_570173(
    name: "getPartitionRestoreProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetRestoreProgress",
    validator: validate_GetPartitionRestoreProgress_570174, base: "",
    url: url_GetPartitionRestoreProgress_570175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceNameInfo_570183 = ref object of OpenApiRestCall_567668
proc url_GetServiceNameInfo_570185(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetServiceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceNameInfo_570184(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570186 = path.getOrDefault("partitionId")
  valid_570186 = validateParameter(valid_570186, JString, required = true,
                                 default = nil)
  if valid_570186 != nil:
    section.add "partitionId", valid_570186
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570187 = query.getOrDefault("timeout")
  valid_570187 = validateParameter(valid_570187, JInt, required = false,
                                 default = newJInt(60))
  if valid_570187 != nil:
    section.add "timeout", valid_570187
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570188 = query.getOrDefault("api-version")
  valid_570188 = validateParameter(valid_570188, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570188 != nil:
    section.add "api-version", valid_570188
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570189: Call_GetServiceNameInfo_570183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  let valid = call_570189.validator(path, query, header, formData, body)
  let scheme = call_570189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570189.url(scheme.get, call_570189.host, call_570189.base,
                         call_570189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570189, url, valid)

proc call*(call_570190: Call_GetServiceNameInfo_570183; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceNameInfo
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570191 = newJObject()
  var query_570192 = newJObject()
  add(query_570192, "timeout", newJInt(timeout))
  add(query_570192, "api-version", newJString(apiVersion))
  add(path_570191, "partitionId", newJString(partitionId))
  result = call_570190.call(path_570191, query_570192, nil, nil, nil)

var getServiceNameInfo* = Call_GetServiceNameInfo_570183(
    name: "getServiceNameInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetServiceName",
    validator: validate_GetServiceNameInfo_570184, base: "",
    url: url_GetServiceNameInfo_570185, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MovePrimaryReplica_570193 = ref object of OpenApiRestCall_567668
proc url_MovePrimaryReplica_570195(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/MovePrimaryReplica")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MovePrimaryReplica_570194(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## This command moves the primary replica of a partition of a stateful service, respecting all constraints.
  ## If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
  ## If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
  ## If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570196 = path.getOrDefault("partitionId")
  valid_570196 = validateParameter(valid_570196, JString, required = true,
                                 default = nil)
  if valid_570196 != nil:
    section.add "partitionId", valid_570196
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeName: JString
  ##           : The name of the node.
  ##   IgnoreConstraints: JBool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  section = newJObject()
  var valid_570197 = query.getOrDefault("timeout")
  valid_570197 = validateParameter(valid_570197, JInt, required = false,
                                 default = newJInt(60))
  if valid_570197 != nil:
    section.add "timeout", valid_570197
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570198 = query.getOrDefault("api-version")
  valid_570198 = validateParameter(valid_570198, JString, required = true,
                                 default = newJString("6.5"))
  if valid_570198 != nil:
    section.add "api-version", valid_570198
  var valid_570199 = query.getOrDefault("NodeName")
  valid_570199 = validateParameter(valid_570199, JString, required = false,
                                 default = nil)
  if valid_570199 != nil:
    section.add "NodeName", valid_570199
  var valid_570200 = query.getOrDefault("IgnoreConstraints")
  valid_570200 = validateParameter(valid_570200, JBool, required = false,
                                 default = newJBool(false))
  if valid_570200 != nil:
    section.add "IgnoreConstraints", valid_570200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570201: Call_MovePrimaryReplica_570193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This command moves the primary replica of a partition of a stateful service, respecting all constraints.
  ## If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
  ## If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
  ## If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
  ## 
  let valid = call_570201.validator(path, query, header, formData, body)
  let scheme = call_570201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570201.url(scheme.get, call_570201.host, call_570201.base,
                         call_570201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570201, url, valid)

proc call*(call_570202: Call_MovePrimaryReplica_570193; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.5"; NodeName: string = "";
          IgnoreConstraints: bool = false): Recallable =
  ## movePrimaryReplica
  ## This command moves the primary replica of a partition of a stateful service, respecting all constraints.
  ## If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).
  ## If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.
  ## If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeName: string
  ##           : The name of the node.
  ##   IgnoreConstraints: bool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570203 = newJObject()
  var query_570204 = newJObject()
  add(query_570204, "timeout", newJInt(timeout))
  add(query_570204, "api-version", newJString(apiVersion))
  add(query_570204, "NodeName", newJString(NodeName))
  add(query_570204, "IgnoreConstraints", newJBool(IgnoreConstraints))
  add(path_570203, "partitionId", newJString(partitionId))
  result = call_570202.call(path_570203, query_570204, nil, nil, nil)

var movePrimaryReplica* = Call_MovePrimaryReplica_570193(
    name: "movePrimaryReplica", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/MovePrimaryReplica",
    validator: validate_MovePrimaryReplica_570194, base: "",
    url: url_MovePrimaryReplica_570195, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MoveSecondaryReplica_570205 = ref object of OpenApiRestCall_567668
proc url_MoveSecondaryReplica_570207(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/MoveSecondaryReplica")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MoveSecondaryReplica_570206(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
  ## CurrentNodeName parameter must be specified to identify the replica that is moved.
  ## Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.
  ## If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570208 = path.getOrDefault("partitionId")
  valid_570208 = validateParameter(valid_570208, JString, required = true,
                                 default = nil)
  if valid_570208 != nil:
    section.add "partitionId", valid_570208
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   CurrentNodeName: JString (required)
  ##                  : The name of the source node for secondary replica move.
  ##   NewNodeName: JString
  ##              : The name of the target node for secondary replica move. If not specified, replica is moved to a random node.
  ##   IgnoreConstraints: JBool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  section = newJObject()
  var valid_570209 = query.getOrDefault("timeout")
  valid_570209 = validateParameter(valid_570209, JInt, required = false,
                                 default = newJInt(60))
  if valid_570209 != nil:
    section.add "timeout", valid_570209
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570210 = query.getOrDefault("api-version")
  valid_570210 = validateParameter(valid_570210, JString, required = true,
                                 default = newJString("6.5"))
  if valid_570210 != nil:
    section.add "api-version", valid_570210
  var valid_570211 = query.getOrDefault("CurrentNodeName")
  valid_570211 = validateParameter(valid_570211, JString, required = true,
                                 default = nil)
  if valid_570211 != nil:
    section.add "CurrentNodeName", valid_570211
  var valid_570212 = query.getOrDefault("NewNodeName")
  valid_570212 = validateParameter(valid_570212, JString, required = false,
                                 default = nil)
  if valid_570212 != nil:
    section.add "NewNodeName", valid_570212
  var valid_570213 = query.getOrDefault("IgnoreConstraints")
  valid_570213 = validateParameter(valid_570213, JBool, required = false,
                                 default = newJBool(false))
  if valid_570213 != nil:
    section.add "IgnoreConstraints", valid_570213
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570214: Call_MoveSecondaryReplica_570205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
  ## CurrentNodeName parameter must be specified to identify the replica that is moved.
  ## Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.
  ## If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
  ## 
  let valid = call_570214.validator(path, query, header, formData, body)
  let scheme = call_570214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570214.url(scheme.get, call_570214.host, call_570214.base,
                         call_570214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570214, url, valid)

proc call*(call_570215: Call_MoveSecondaryReplica_570205; CurrentNodeName: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.5";
          NewNodeName: string = ""; IgnoreConstraints: bool = false): Recallable =
  ## moveSecondaryReplica
  ## This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
  ## CurrentNodeName parameter must be specified to identify the replica that is moved.
  ## Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.
  ## If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.5'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   CurrentNodeName: string (required)
  ##                  : The name of the source node for secondary replica move.
  ##   NewNodeName: string
  ##              : The name of the target node for secondary replica move. If not specified, replica is moved to a random node.
  ##   IgnoreConstraints: bool
  ##                    : Ignore constraints when moving a replica. If this parameter is not specified, all constraints are honored.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570216 = newJObject()
  var query_570217 = newJObject()
  add(query_570217, "timeout", newJInt(timeout))
  add(query_570217, "api-version", newJString(apiVersion))
  add(query_570217, "CurrentNodeName", newJString(CurrentNodeName))
  add(query_570217, "NewNodeName", newJString(NewNodeName))
  add(query_570217, "IgnoreConstraints", newJBool(IgnoreConstraints))
  add(path_570216, "partitionId", newJString(partitionId))
  result = call_570215.call(path_570216, query_570217, nil, nil, nil)

var moveSecondaryReplica* = Call_MoveSecondaryReplica_570205(
    name: "moveSecondaryReplica", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/MoveSecondaryReplica",
    validator: validate_MoveSecondaryReplica_570206, base: "",
    url: url_MoveSecondaryReplica_570207, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverPartition_570218 = ref object of OpenApiRestCall_567668
proc url_RecoverPartition_570220(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverPartition_570219(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570221 = path.getOrDefault("partitionId")
  valid_570221 = validateParameter(valid_570221, JString, required = true,
                                 default = nil)
  if valid_570221 != nil:
    section.add "partitionId", valid_570221
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570222 = query.getOrDefault("timeout")
  valid_570222 = validateParameter(valid_570222, JInt, required = false,
                                 default = newJInt(60))
  if valid_570222 != nil:
    section.add "timeout", valid_570222
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570223 = query.getOrDefault("api-version")
  valid_570223 = validateParameter(valid_570223, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570223 != nil:
    section.add "api-version", valid_570223
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570224: Call_RecoverPartition_570218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_570224.validator(path, query, header, formData, body)
  let scheme = call_570224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570224.url(scheme.get, call_570224.host, call_570224.base,
                         call_570224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570224, url, valid)

proc call*(call_570225: Call_RecoverPartition_570218; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverPartition
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570226 = newJObject()
  var query_570227 = newJObject()
  add(query_570227, "timeout", newJInt(timeout))
  add(query_570227, "api-version", newJString(apiVersion))
  add(path_570226, "partitionId", newJString(partitionId))
  result = call_570225.call(path_570226, query_570227, nil, nil, nil)

var recoverPartition* = Call_RecoverPartition_570218(name: "recoverPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Recover",
    validator: validate_RecoverPartition_570219, base: "",
    url: url_RecoverPartition_570220, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportPartitionHealth_570228 = ref object of OpenApiRestCall_567668
proc url_ReportPartitionHealth_570230(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportPartitionHealth_570229(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570231 = path.getOrDefault("partitionId")
  valid_570231 = validateParameter(valid_570231, JString, required = true,
                                 default = nil)
  if valid_570231 != nil:
    section.add "partitionId", valid_570231
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570232 = query.getOrDefault("Immediate")
  valid_570232 = validateParameter(valid_570232, JBool, required = false,
                                 default = newJBool(false))
  if valid_570232 != nil:
    section.add "Immediate", valid_570232
  var valid_570233 = query.getOrDefault("timeout")
  valid_570233 = validateParameter(valid_570233, JInt, required = false,
                                 default = newJInt(60))
  if valid_570233 != nil:
    section.add "timeout", valid_570233
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570234 = query.getOrDefault("api-version")
  valid_570234 = validateParameter(valid_570234, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570234 != nil:
    section.add "api-version", valid_570234
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570236: Call_ReportPartitionHealth_570228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_570236.validator(path, query, header, formData, body)
  let scheme = call_570236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570236.url(scheme.get, call_570236.host, call_570236.base,
                         call_570236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570236, url, valid)

proc call*(call_570237: Call_ReportPartitionHealth_570228;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportPartitionHealth
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570238 = newJObject()
  var query_570239 = newJObject()
  var body_570240 = newJObject()
  add(query_570239, "Immediate", newJBool(Immediate))
  add(query_570239, "timeout", newJInt(timeout))
  add(query_570239, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_570240 = HealthInformation
  add(path_570238, "partitionId", newJString(partitionId))
  result = call_570237.call(path_570238, query_570239, nil, nil, body_570240)

var reportPartitionHealth* = Call_ReportPartitionHealth_570228(
    name: "reportPartitionHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ReportHealth",
    validator: validate_ReportPartitionHealth_570229, base: "",
    url: url_ReportPartitionHealth_570230, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResetPartitionLoad_570241 = ref object of OpenApiRestCall_567668
proc url_ResetPartitionLoad_570243(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResetLoad")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResetPartitionLoad_570242(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570244 = path.getOrDefault("partitionId")
  valid_570244 = validateParameter(valid_570244, JString, required = true,
                                 default = nil)
  if valid_570244 != nil:
    section.add "partitionId", valid_570244
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570245 = query.getOrDefault("timeout")
  valid_570245 = validateParameter(valid_570245, JInt, required = false,
                                 default = newJInt(60))
  if valid_570245 != nil:
    section.add "timeout", valid_570245
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570246 = query.getOrDefault("api-version")
  valid_570246 = validateParameter(valid_570246, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570246 != nil:
    section.add "api-version", valid_570246
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570247: Call_ResetPartitionLoad_570241; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  let valid = call_570247.validator(path, query, header, formData, body)
  let scheme = call_570247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570247.url(scheme.get, call_570247.host, call_570247.base,
                         call_570247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570247, url, valid)

proc call*(call_570248: Call_ResetPartitionLoad_570241; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resetPartitionLoad
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570249 = newJObject()
  var query_570250 = newJObject()
  add(query_570250, "timeout", newJInt(timeout))
  add(query_570250, "api-version", newJString(apiVersion))
  add(path_570249, "partitionId", newJString(partitionId))
  result = call_570248.call(path_570249, query_570250, nil, nil, nil)

var resetPartitionLoad* = Call_ResetPartitionLoad_570241(
    name: "resetPartitionLoad", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResetLoad",
    validator: validate_ResetPartitionLoad_570242, base: "",
    url: url_ResetPartitionLoad_570243, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestorePartition_570251 = ref object of OpenApiRestCall_567668
proc url_RestorePartition_570253(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestorePartition_570252(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570254 = path.getOrDefault("partitionId")
  valid_570254 = validateParameter(valid_570254, JString, required = true,
                                 default = nil)
  if valid_570254 != nil:
    section.add "partitionId", valid_570254
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestoreTimeout: JInt
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  section = newJObject()
  var valid_570255 = query.getOrDefault("timeout")
  valid_570255 = validateParameter(valid_570255, JInt, required = false,
                                 default = newJInt(60))
  if valid_570255 != nil:
    section.add "timeout", valid_570255
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570256 = query.getOrDefault("api-version")
  valid_570256 = validateParameter(valid_570256, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570256 != nil:
    section.add "api-version", valid_570256
  var valid_570257 = query.getOrDefault("RestoreTimeout")
  valid_570257 = validateParameter(valid_570257, JInt, required = false,
                                 default = newJInt(10))
  if valid_570257 != nil:
    section.add "RestoreTimeout", valid_570257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570259: Call_RestorePartition_570251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  let valid = call_570259.validator(path, query, header, formData, body)
  let scheme = call_570259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570259.url(scheme.get, call_570259.host, call_570259.base,
                         call_570259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570259, url, valid)

proc call*(call_570260: Call_RestorePartition_570251;
          RestorePartitionDescription: JsonNode; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; RestoreTimeout: int = 10): Recallable =
  ## restorePartition
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   RestoreTimeout: int
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  var path_570261 = newJObject()
  var query_570262 = newJObject()
  var body_570263 = newJObject()
  add(query_570262, "timeout", newJInt(timeout))
  if RestorePartitionDescription != nil:
    body_570263 = RestorePartitionDescription
  add(query_570262, "api-version", newJString(apiVersion))
  add(path_570261, "partitionId", newJString(partitionId))
  add(query_570262, "RestoreTimeout", newJInt(RestoreTimeout))
  result = call_570260.call(path_570261, query_570262, nil, nil, body_570263)

var restorePartition* = Call_RestorePartition_570251(name: "restorePartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Restore",
    validator: validate_RestorePartition_570252, base: "",
    url: url_RestorePartition_570253, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumePartitionBackup_570264 = ref object of OpenApiRestCall_567668
proc url_ResumePartitionBackup_570266(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumePartitionBackup_570265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570267 = path.getOrDefault("partitionId")
  valid_570267 = validateParameter(valid_570267, JString, required = true,
                                 default = nil)
  if valid_570267 != nil:
    section.add "partitionId", valid_570267
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570268 = query.getOrDefault("timeout")
  valid_570268 = validateParameter(valid_570268, JInt, required = false,
                                 default = newJInt(60))
  if valid_570268 != nil:
    section.add "timeout", valid_570268
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570269 = query.getOrDefault("api-version")
  valid_570269 = validateParameter(valid_570269, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570269 != nil:
    section.add "api-version", valid_570269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570270: Call_ResumePartitionBackup_570264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_570270.validator(path, query, header, formData, body)
  let scheme = call_570270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570270.url(scheme.get, call_570270.host, call_570270.base,
                         call_570270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570270, url, valid)

proc call*(call_570271: Call_ResumePartitionBackup_570264; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumePartitionBackup
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570272 = newJObject()
  var query_570273 = newJObject()
  add(query_570273, "timeout", newJInt(timeout))
  add(query_570273, "api-version", newJString(apiVersion))
  add(path_570272, "partitionId", newJString(partitionId))
  result = call_570271.call(path_570272, query_570273, nil, nil, nil)

var resumePartitionBackup* = Call_ResumePartitionBackup_570264(
    name: "resumePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResumeBackup",
    validator: validate_ResumePartitionBackup_570265, base: "",
    url: url_ResumePartitionBackup_570266, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendPartitionBackup_570274 = ref object of OpenApiRestCall_567668
proc url_SuspendPartitionBackup_570276(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendPartitionBackup_570275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570277 = path.getOrDefault("partitionId")
  valid_570277 = validateParameter(valid_570277, JString, required = true,
                                 default = nil)
  if valid_570277 != nil:
    section.add "partitionId", valid_570277
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570278 = query.getOrDefault("timeout")
  valid_570278 = validateParameter(valid_570278, JInt, required = false,
                                 default = newJInt(60))
  if valid_570278 != nil:
    section.add "timeout", valid_570278
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570279 = query.getOrDefault("api-version")
  valid_570279 = validateParameter(valid_570279, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570279 != nil:
    section.add "api-version", valid_570279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570280: Call_SuspendPartitionBackup_570274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  let valid = call_570280.validator(path, query, header, formData, body)
  let scheme = call_570280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570280.url(scheme.get, call_570280.host, call_570280.base,
                         call_570280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570280, url, valid)

proc call*(call_570281: Call_SuspendPartitionBackup_570274; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendPartitionBackup
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570282 = newJObject()
  var query_570283 = newJObject()
  add(query_570283, "timeout", newJInt(timeout))
  add(query_570283, "api-version", newJString(apiVersion))
  add(path_570282, "partitionId", newJString(partitionId))
  result = call_570281.call(path_570282, query_570283, nil, nil, nil)

var suspendPartitionBackup* = Call_SuspendPartitionBackup_570274(
    name: "suspendPartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/SuspendBackup",
    validator: validate_SuspendPartitionBackup_570275, base: "",
    url: url_SuspendPartitionBackup_570276, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationList_570284 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationList_570286(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshApplicationList_570285(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570287 = query.getOrDefault("api-version")
  valid_570287 = validateParameter(valid_570287, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570287 != nil:
    section.add "api-version", valid_570287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570288: Call_MeshApplicationList_570284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  let valid = call_570288.validator(path, query, header, formData, body)
  let scheme = call_570288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570288.url(scheme.get, call_570288.host, call_570288.base,
                         call_570288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570288, url, valid)

proc call*(call_570289: Call_MeshApplicationList_570284;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationList
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570290 = newJObject()
  add(query_570290, "api-version", newJString(apiVersion))
  result = call_570289.call(nil, query_570290, nil, nil, nil)

var meshApplicationList* = Call_MeshApplicationList_570284(
    name: "meshApplicationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications",
    validator: validate_MeshApplicationList_570285, base: "",
    url: url_MeshApplicationList_570286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationCreateOrUpdate_570300 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationCreateOrUpdate_570302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationCreateOrUpdate_570301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570303 = path.getOrDefault("applicationResourceName")
  valid_570303 = validateParameter(valid_570303, JString, required = true,
                                 default = nil)
  if valid_570303 != nil:
    section.add "applicationResourceName", valid_570303
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570304 = query.getOrDefault("api-version")
  valid_570304 = validateParameter(valid_570304, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570304 != nil:
    section.add "api-version", valid_570304
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570306: Call_MeshApplicationCreateOrUpdate_570300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_570306.validator(path, query, header, formData, body)
  let scheme = call_570306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570306.url(scheme.get, call_570306.host, call_570306.base,
                         call_570306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570306, url, valid)

proc call*(call_570307: Call_MeshApplicationCreateOrUpdate_570300;
          applicationResourceDescription: JsonNode;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationCreateOrUpdate
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570308 = newJObject()
  var query_570309 = newJObject()
  var body_570310 = newJObject()
  if applicationResourceDescription != nil:
    body_570310 = applicationResourceDescription
  add(query_570309, "api-version", newJString(apiVersion))
  add(path_570308, "applicationResourceName", newJString(applicationResourceName))
  result = call_570307.call(path_570308, query_570309, nil, nil, body_570310)

var meshApplicationCreateOrUpdate* = Call_MeshApplicationCreateOrUpdate_570300(
    name: "meshApplicationCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationCreateOrUpdate_570301, base: "",
    url: url_MeshApplicationCreateOrUpdate_570302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationGet_570291 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationGet_570293(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationGet_570292(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570294 = path.getOrDefault("applicationResourceName")
  valid_570294 = validateParameter(valid_570294, JString, required = true,
                                 default = nil)
  if valid_570294 != nil:
    section.add "applicationResourceName", valid_570294
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570295 = query.getOrDefault("api-version")
  valid_570295 = validateParameter(valid_570295, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570295 != nil:
    section.add "api-version", valid_570295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570296: Call_MeshApplicationGet_570291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  let valid = call_570296.validator(path, query, header, formData, body)
  let scheme = call_570296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570296.url(scheme.get, call_570296.host, call_570296.base,
                         call_570296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570296, url, valid)

proc call*(call_570297: Call_MeshApplicationGet_570291;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationGet
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570298 = newJObject()
  var query_570299 = newJObject()
  add(query_570299, "api-version", newJString(apiVersion))
  add(path_570298, "applicationResourceName", newJString(applicationResourceName))
  result = call_570297.call(path_570298, query_570299, nil, nil, nil)

var meshApplicationGet* = Call_MeshApplicationGet_570291(
    name: "meshApplicationGet", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationGet_570292, base: "",
    url: url_MeshApplicationGet_570293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationDelete_570311 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationDelete_570313(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationDelete_570312(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the Application resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570314 = path.getOrDefault("applicationResourceName")
  valid_570314 = validateParameter(valid_570314, JString, required = true,
                                 default = nil)
  if valid_570314 != nil:
    section.add "applicationResourceName", valid_570314
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570315 = query.getOrDefault("api-version")
  valid_570315 = validateParameter(valid_570315, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570315 != nil:
    section.add "api-version", valid_570315
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570316: Call_MeshApplicationDelete_570311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Application resource identified by the name.
  ## 
  let valid = call_570316.validator(path, query, header, formData, body)
  let scheme = call_570316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570316.url(scheme.get, call_570316.host, call_570316.base,
                         call_570316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570316, url, valid)

proc call*(call_570317: Call_MeshApplicationDelete_570311;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationDelete
  ## Deletes the Application resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570318 = newJObject()
  var query_570319 = newJObject()
  add(query_570319, "api-version", newJString(apiVersion))
  add(path_570318, "applicationResourceName", newJString(applicationResourceName))
  result = call_570317.call(path_570318, query_570319, nil, nil, nil)

var meshApplicationDelete* = Call_MeshApplicationDelete_570311(
    name: "meshApplicationDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationDelete_570312, base: "",
    url: url_MeshApplicationDelete_570313, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceList_570320 = ref object of OpenApiRestCall_567668
proc url_MeshServiceList_570322(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceList_570321(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570323 = path.getOrDefault("applicationResourceName")
  valid_570323 = validateParameter(valid_570323, JString, required = true,
                                 default = nil)
  if valid_570323 != nil:
    section.add "applicationResourceName", valid_570323
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570324 = query.getOrDefault("api-version")
  valid_570324 = validateParameter(valid_570324, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570324 != nil:
    section.add "api-version", valid_570324
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570325: Call_MeshServiceList_570320; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  let valid = call_570325.validator(path, query, header, formData, body)
  let scheme = call_570325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570325.url(scheme.get, call_570325.host, call_570325.base,
                         call_570325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570325, url, valid)

proc call*(call_570326: Call_MeshServiceList_570320;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceList
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570327 = newJObject()
  var query_570328 = newJObject()
  add(query_570328, "api-version", newJString(apiVersion))
  add(path_570327, "applicationResourceName", newJString(applicationResourceName))
  result = call_570326.call(path_570327, query_570328, nil, nil, nil)

var meshServiceList* = Call_MeshServiceList_570320(name: "meshServiceList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}/Services",
    validator: validate_MeshServiceList_570321, base: "", url: url_MeshServiceList_570322,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceGet_570329 = ref object of OpenApiRestCall_567668
proc url_MeshServiceGet_570331(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceGet_570330(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570332 = path.getOrDefault("applicationResourceName")
  valid_570332 = validateParameter(valid_570332, JString, required = true,
                                 default = nil)
  if valid_570332 != nil:
    section.add "applicationResourceName", valid_570332
  var valid_570333 = path.getOrDefault("serviceResourceName")
  valid_570333 = validateParameter(valid_570333, JString, required = true,
                                 default = nil)
  if valid_570333 != nil:
    section.add "serviceResourceName", valid_570333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570334 = query.getOrDefault("api-version")
  valid_570334 = validateParameter(valid_570334, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570334 != nil:
    section.add "api-version", valid_570334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570335: Call_MeshServiceGet_570329; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  let valid = call_570335.validator(path, query, header, formData, body)
  let scheme = call_570335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570335.url(scheme.get, call_570335.host, call_570335.base,
                         call_570335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570335, url, valid)

proc call*(call_570336: Call_MeshServiceGet_570329;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceGet
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_570337 = newJObject()
  var query_570338 = newJObject()
  add(query_570338, "api-version", newJString(apiVersion))
  add(path_570337, "applicationResourceName", newJString(applicationResourceName))
  add(path_570337, "serviceResourceName", newJString(serviceResourceName))
  result = call_570336.call(path_570337, query_570338, nil, nil, nil)

var meshServiceGet* = Call_MeshServiceGet_570329(name: "meshServiceGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}",
    validator: validate_MeshServiceGet_570330, base: "", url: url_MeshServiceGet_570331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaList_570339 = ref object of OpenApiRestCall_567668
proc url_MeshServiceReplicaList_570341(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaList_570340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570342 = path.getOrDefault("applicationResourceName")
  valid_570342 = validateParameter(valid_570342, JString, required = true,
                                 default = nil)
  if valid_570342 != nil:
    section.add "applicationResourceName", valid_570342
  var valid_570343 = path.getOrDefault("serviceResourceName")
  valid_570343 = validateParameter(valid_570343, JString, required = true,
                                 default = nil)
  if valid_570343 != nil:
    section.add "serviceResourceName", valid_570343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570344 = query.getOrDefault("api-version")
  valid_570344 = validateParameter(valid_570344, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570344 != nil:
    section.add "api-version", valid_570344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570345: Call_MeshServiceReplicaList_570339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  let valid = call_570345.validator(path, query, header, formData, body)
  let scheme = call_570345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570345.url(scheme.get, call_570345.host, call_570345.base,
                         call_570345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570345, url, valid)

proc call*(call_570346: Call_MeshServiceReplicaList_570339;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaList
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_570347 = newJObject()
  var query_570348 = newJObject()
  add(query_570348, "api-version", newJString(apiVersion))
  add(path_570347, "applicationResourceName", newJString(applicationResourceName))
  add(path_570347, "serviceResourceName", newJString(serviceResourceName))
  result = call_570346.call(path_570347, query_570348, nil, nil, nil)

var meshServiceReplicaList* = Call_MeshServiceReplicaList_570339(
    name: "meshServiceReplicaList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas",
    validator: validate_MeshServiceReplicaList_570340, base: "",
    url: url_MeshServiceReplicaList_570341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaGet_570349 = ref object of OpenApiRestCall_567668
proc url_MeshServiceReplicaGet_570351(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaGet_570350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570352 = path.getOrDefault("applicationResourceName")
  valid_570352 = validateParameter(valid_570352, JString, required = true,
                                 default = nil)
  if valid_570352 != nil:
    section.add "applicationResourceName", valid_570352
  var valid_570353 = path.getOrDefault("serviceResourceName")
  valid_570353 = validateParameter(valid_570353, JString, required = true,
                                 default = nil)
  if valid_570353 != nil:
    section.add "serviceResourceName", valid_570353
  var valid_570354 = path.getOrDefault("replicaName")
  valid_570354 = validateParameter(valid_570354, JString, required = true,
                                 default = nil)
  if valid_570354 != nil:
    section.add "replicaName", valid_570354
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570355 = query.getOrDefault("api-version")
  valid_570355 = validateParameter(valid_570355, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570355 != nil:
    section.add "api-version", valid_570355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570356: Call_MeshServiceReplicaGet_570349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  let valid = call_570356.validator(path, query, header, formData, body)
  let scheme = call_570356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570356.url(scheme.get, call_570356.host, call_570356.base,
                         call_570356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570356, url, valid)

proc call*(call_570357: Call_MeshServiceReplicaGet_570349;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaGet
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  var path_570358 = newJObject()
  var query_570359 = newJObject()
  add(query_570359, "api-version", newJString(apiVersion))
  add(path_570358, "applicationResourceName", newJString(applicationResourceName))
  add(path_570358, "serviceResourceName", newJString(serviceResourceName))
  add(path_570358, "replicaName", newJString(replicaName))
  result = call_570357.call(path_570358, query_570359, nil, nil, nil)

var meshServiceReplicaGet* = Call_MeshServiceReplicaGet_570349(
    name: "meshServiceReplicaGet", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}",
    validator: validate_MeshServiceReplicaGet_570350, base: "",
    url: url_MeshServiceReplicaGet_570351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshCodePackageGetContainerLogs_570360 = ref object of OpenApiRestCall_567668
proc url_MeshCodePackageGetContainerLogs_570362(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  assert "codePackageName" in path, "`codePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName"),
               (kind: ConstantSegment, value: "/CodePackages/"),
               (kind: VariableSegment, value: "codePackageName"),
               (kind: ConstantSegment, value: "/Logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshCodePackageGetContainerLogs_570361(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: JString (required)
  ##                  : The name of code package of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570363 = path.getOrDefault("applicationResourceName")
  valid_570363 = validateParameter(valid_570363, JString, required = true,
                                 default = nil)
  if valid_570363 != nil:
    section.add "applicationResourceName", valid_570363
  var valid_570364 = path.getOrDefault("serviceResourceName")
  valid_570364 = validateParameter(valid_570364, JString, required = true,
                                 default = nil)
  if valid_570364 != nil:
    section.add "serviceResourceName", valid_570364
  var valid_570365 = path.getOrDefault("replicaName")
  valid_570365 = validateParameter(valid_570365, JString, required = true,
                                 default = nil)
  if valid_570365 != nil:
    section.add "replicaName", valid_570365
  var valid_570366 = path.getOrDefault("codePackageName")
  valid_570366 = validateParameter(valid_570366, JString, required = true,
                                 default = nil)
  if valid_570366 != nil:
    section.add "codePackageName", valid_570366
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570367 = query.getOrDefault("api-version")
  valid_570367 = validateParameter(valid_570367, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570367 != nil:
    section.add "api-version", valid_570367
  var valid_570368 = query.getOrDefault("Tail")
  valid_570368 = validateParameter(valid_570368, JString, required = false,
                                 default = nil)
  if valid_570368 != nil:
    section.add "Tail", valid_570368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570369: Call_MeshCodePackageGetContainerLogs_570360;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  let valid = call_570369.validator(path, query, header, formData, body)
  let scheme = call_570369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570369.url(scheme.get, call_570369.host, call_570369.base,
                         call_570369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570369, url, valid)

proc call*(call_570370: Call_MeshCodePackageGetContainerLogs_570360;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; codePackageName: string;
          apiVersion: string = "6.4-preview"; Tail: string = ""): Recallable =
  ## meshCodePackageGetContainerLogs
  ## Gets the logs for the container of the specified code package of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: string (required)
  ##                  : The name of code package of the service.
  var path_570371 = newJObject()
  var query_570372 = newJObject()
  add(query_570372, "api-version", newJString(apiVersion))
  add(path_570371, "applicationResourceName", newJString(applicationResourceName))
  add(path_570371, "serviceResourceName", newJString(serviceResourceName))
  add(query_570372, "Tail", newJString(Tail))
  add(path_570371, "replicaName", newJString(replicaName))
  add(path_570371, "codePackageName", newJString(codePackageName))
  result = call_570370.call(path_570371, query_570372, nil, nil, nil)

var meshCodePackageGetContainerLogs* = Call_MeshCodePackageGetContainerLogs_570360(
    name: "meshCodePackageGetContainerLogs", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs",
    validator: validate_MeshCodePackageGetContainerLogs_570361, base: "",
    url: url_MeshCodePackageGetContainerLogs_570362,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayList_570373 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayList_570375(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshGatewayList_570374(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570376 = query.getOrDefault("api-version")
  valid_570376 = validateParameter(valid_570376, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570376 != nil:
    section.add "api-version", valid_570376
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570377: Call_MeshGatewayList_570373; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_570377.validator(path, query, header, formData, body)
  let scheme = call_570377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570377.url(scheme.get, call_570377.host, call_570377.base,
                         call_570377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570377, url, valid)

proc call*(call_570378: Call_MeshGatewayList_570373;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayList
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570379 = newJObject()
  add(query_570379, "api-version", newJString(apiVersion))
  result = call_570378.call(nil, query_570379, nil, nil, nil)

var meshGatewayList* = Call_MeshGatewayList_570373(name: "meshGatewayList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways", validator: validate_MeshGatewayList_570374,
    base: "", url: url_MeshGatewayList_570375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayCreateOrUpdate_570389 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayCreateOrUpdate_570391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayCreateOrUpdate_570390(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_570392 = path.getOrDefault("gatewayResourceName")
  valid_570392 = validateParameter(valid_570392, JString, required = true,
                                 default = nil)
  if valid_570392 != nil:
    section.add "gatewayResourceName", valid_570392
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570393 = query.getOrDefault("api-version")
  valid_570393 = validateParameter(valid_570393, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570393 != nil:
    section.add "api-version", valid_570393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570395: Call_MeshGatewayCreateOrUpdate_570389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  let valid = call_570395.validator(path, query, header, formData, body)
  let scheme = call_570395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570395.url(scheme.get, call_570395.host, call_570395.base,
                         call_570395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570395, url, valid)

proc call*(call_570396: Call_MeshGatewayCreateOrUpdate_570389;
          gatewayResourceDescription: JsonNode; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayCreateOrUpdate
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_570397 = newJObject()
  var query_570398 = newJObject()
  var body_570399 = newJObject()
  add(query_570398, "api-version", newJString(apiVersion))
  if gatewayResourceDescription != nil:
    body_570399 = gatewayResourceDescription
  add(path_570397, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_570396.call(path_570397, query_570398, nil, nil, body_570399)

var meshGatewayCreateOrUpdate* = Call_MeshGatewayCreateOrUpdate_570389(
    name: "meshGatewayCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayCreateOrUpdate_570390, base: "",
    url: url_MeshGatewayCreateOrUpdate_570391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayGet_570380 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayGet_570382(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayGet_570381(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_570383 = path.getOrDefault("gatewayResourceName")
  valid_570383 = validateParameter(valid_570383, JString, required = true,
                                 default = nil)
  if valid_570383 != nil:
    section.add "gatewayResourceName", valid_570383
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570384 = query.getOrDefault("api-version")
  valid_570384 = validateParameter(valid_570384, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570384 != nil:
    section.add "api-version", valid_570384
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570385: Call_MeshGatewayGet_570380; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_570385.validator(path, query, header, formData, body)
  let scheme = call_570385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570385.url(scheme.get, call_570385.host, call_570385.base,
                         call_570385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570385, url, valid)

proc call*(call_570386: Call_MeshGatewayGet_570380; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayGet
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_570387 = newJObject()
  var query_570388 = newJObject()
  add(query_570388, "api-version", newJString(apiVersion))
  add(path_570387, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_570386.call(path_570387, query_570388, nil, nil, nil)

var meshGatewayGet* = Call_MeshGatewayGet_570380(name: "meshGatewayGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayGet_570381, base: "", url: url_MeshGatewayGet_570382,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayDelete_570400 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayDelete_570402(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayDelete_570401(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Gateway resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_570403 = path.getOrDefault("gatewayResourceName")
  valid_570403 = validateParameter(valid_570403, JString, required = true,
                                 default = nil)
  if valid_570403 != nil:
    section.add "gatewayResourceName", valid_570403
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570404 = query.getOrDefault("api-version")
  valid_570404 = validateParameter(valid_570404, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570404 != nil:
    section.add "api-version", valid_570404
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570405: Call_MeshGatewayDelete_570400; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Gateway resource identified by the name.
  ## 
  let valid = call_570405.validator(path, query, header, formData, body)
  let scheme = call_570405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570405.url(scheme.get, call_570405.host, call_570405.base,
                         call_570405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570405, url, valid)

proc call*(call_570406: Call_MeshGatewayDelete_570400; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayDelete
  ## Deletes the Gateway resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_570407 = newJObject()
  var query_570408 = newJObject()
  add(query_570408, "api-version", newJString(apiVersion))
  add(path_570407, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_570406.call(path_570407, query_570408, nil, nil, nil)

var meshGatewayDelete* = Call_MeshGatewayDelete_570400(name: "meshGatewayDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayDelete_570401, base: "",
    url: url_MeshGatewayDelete_570402, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkList_570409 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkList_570411(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshNetworkList_570410(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570412 = query.getOrDefault("api-version")
  valid_570412 = validateParameter(valid_570412, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570412 != nil:
    section.add "api-version", valid_570412
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570413: Call_MeshNetworkList_570409; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  let valid = call_570413.validator(path, query, header, formData, body)
  let scheme = call_570413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570413.url(scheme.get, call_570413.host, call_570413.base,
                         call_570413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570413, url, valid)

proc call*(call_570414: Call_MeshNetworkList_570409;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkList
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570415 = newJObject()
  add(query_570415, "api-version", newJString(apiVersion))
  result = call_570414.call(nil, query_570415, nil, nil, nil)

var meshNetworkList* = Call_MeshNetworkList_570409(name: "meshNetworkList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks", validator: validate_MeshNetworkList_570410,
    base: "", url: url_MeshNetworkList_570411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkCreateOrUpdate_570425 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkCreateOrUpdate_570427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkCreateOrUpdate_570426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_570428 = path.getOrDefault("networkResourceName")
  valid_570428 = validateParameter(valid_570428, JString, required = true,
                                 default = nil)
  if valid_570428 != nil:
    section.add "networkResourceName", valid_570428
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570429 = query.getOrDefault("api-version")
  valid_570429 = validateParameter(valid_570429, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570429 != nil:
    section.add "api-version", valid_570429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570431: Call_MeshNetworkCreateOrUpdate_570425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  let valid = call_570431.validator(path, query, header, formData, body)
  let scheme = call_570431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570431.url(scheme.get, call_570431.host, call_570431.base,
                         call_570431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570431, url, valid)

proc call*(call_570432: Call_MeshNetworkCreateOrUpdate_570425;
          networkResourceDescription: JsonNode; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkCreateOrUpdate
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_570433 = newJObject()
  var query_570434 = newJObject()
  var body_570435 = newJObject()
  add(query_570434, "api-version", newJString(apiVersion))
  if networkResourceDescription != nil:
    body_570435 = networkResourceDescription
  add(path_570433, "networkResourceName", newJString(networkResourceName))
  result = call_570432.call(path_570433, query_570434, nil, nil, body_570435)

var meshNetworkCreateOrUpdate* = Call_MeshNetworkCreateOrUpdate_570425(
    name: "meshNetworkCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkCreateOrUpdate_570426, base: "",
    url: url_MeshNetworkCreateOrUpdate_570427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkGet_570416 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkGet_570418(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkGet_570417(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_570419 = path.getOrDefault("networkResourceName")
  valid_570419 = validateParameter(valid_570419, JString, required = true,
                                 default = nil)
  if valid_570419 != nil:
    section.add "networkResourceName", valid_570419
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570420 = query.getOrDefault("api-version")
  valid_570420 = validateParameter(valid_570420, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570420 != nil:
    section.add "api-version", valid_570420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570421: Call_MeshNetworkGet_570416; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  let valid = call_570421.validator(path, query, header, formData, body)
  let scheme = call_570421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570421.url(scheme.get, call_570421.host, call_570421.base,
                         call_570421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570421, url, valid)

proc call*(call_570422: Call_MeshNetworkGet_570416; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkGet
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_570423 = newJObject()
  var query_570424 = newJObject()
  add(query_570424, "api-version", newJString(apiVersion))
  add(path_570423, "networkResourceName", newJString(networkResourceName))
  result = call_570422.call(path_570423, query_570424, nil, nil, nil)

var meshNetworkGet* = Call_MeshNetworkGet_570416(name: "meshNetworkGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkGet_570417, base: "", url: url_MeshNetworkGet_570418,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkDelete_570436 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkDelete_570438(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkDelete_570437(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Network resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_570439 = path.getOrDefault("networkResourceName")
  valid_570439 = validateParameter(valid_570439, JString, required = true,
                                 default = nil)
  if valid_570439 != nil:
    section.add "networkResourceName", valid_570439
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570440 = query.getOrDefault("api-version")
  valid_570440 = validateParameter(valid_570440, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570440 != nil:
    section.add "api-version", valid_570440
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570441: Call_MeshNetworkDelete_570436; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Network resource identified by the name.
  ## 
  let valid = call_570441.validator(path, query, header, formData, body)
  let scheme = call_570441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570441.url(scheme.get, call_570441.host, call_570441.base,
                         call_570441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570441, url, valid)

proc call*(call_570442: Call_MeshNetworkDelete_570436; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkDelete
  ## Deletes the Network resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_570443 = newJObject()
  var query_570444 = newJObject()
  add(query_570444, "api-version", newJString(apiVersion))
  add(path_570443, "networkResourceName", newJString(networkResourceName))
  result = call_570442.call(path_570443, query_570444, nil, nil, nil)

var meshNetworkDelete* = Call_MeshNetworkDelete_570436(name: "meshNetworkDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkDelete_570437, base: "",
    url: url_MeshNetworkDelete_570438, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretList_570445 = ref object of OpenApiRestCall_567668
proc url_MeshSecretList_570447(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshSecretList_570446(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570448 = query.getOrDefault("api-version")
  valid_570448 = validateParameter(valid_570448, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570448 != nil:
    section.add "api-version", valid_570448
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570449: Call_MeshSecretList_570445; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  let valid = call_570449.validator(path, query, header, formData, body)
  let scheme = call_570449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570449.url(scheme.get, call_570449.host, call_570449.base,
                         call_570449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570449, url, valid)

proc call*(call_570450: Call_MeshSecretList_570445;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretList
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570451 = newJObject()
  add(query_570451, "api-version", newJString(apiVersion))
  result = call_570450.call(nil, query_570451, nil, nil, nil)

var meshSecretList* = Call_MeshSecretList_570445(name: "meshSecretList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets", validator: validate_MeshSecretList_570446,
    base: "", url: url_MeshSecretList_570447, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretCreateOrUpdate_570461 = ref object of OpenApiRestCall_567668
proc url_MeshSecretCreateOrUpdate_570463(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretCreateOrUpdate_570462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570464 = path.getOrDefault("secretResourceName")
  valid_570464 = validateParameter(valid_570464, JString, required = true,
                                 default = nil)
  if valid_570464 != nil:
    section.add "secretResourceName", valid_570464
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570465 = query.getOrDefault("api-version")
  valid_570465 = validateParameter(valid_570465, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570465 != nil:
    section.add "api-version", valid_570465
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570467: Call_MeshSecretCreateOrUpdate_570461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  let valid = call_570467.validator(path, query, header, formData, body)
  let scheme = call_570467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570467.url(scheme.get, call_570467.host, call_570467.base,
                         call_570467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570467, url, valid)

proc call*(call_570468: Call_MeshSecretCreateOrUpdate_570461;
          secretResourceDescription: JsonNode; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretCreateOrUpdate
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570469 = newJObject()
  var query_570470 = newJObject()
  var body_570471 = newJObject()
  add(query_570470, "api-version", newJString(apiVersion))
  if secretResourceDescription != nil:
    body_570471 = secretResourceDescription
  add(path_570469, "secretResourceName", newJString(secretResourceName))
  result = call_570468.call(path_570469, query_570470, nil, nil, body_570471)

var meshSecretCreateOrUpdate* = Call_MeshSecretCreateOrUpdate_570461(
    name: "meshSecretCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretCreateOrUpdate_570462, base: "",
    url: url_MeshSecretCreateOrUpdate_570463, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretGet_570452 = ref object of OpenApiRestCall_567668
proc url_MeshSecretGet_570454(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretGet_570453(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570455 = path.getOrDefault("secretResourceName")
  valid_570455 = validateParameter(valid_570455, JString, required = true,
                                 default = nil)
  if valid_570455 != nil:
    section.add "secretResourceName", valid_570455
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570456 = query.getOrDefault("api-version")
  valid_570456 = validateParameter(valid_570456, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570456 != nil:
    section.add "api-version", valid_570456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570457: Call_MeshSecretGet_570452; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  let valid = call_570457.validator(path, query, header, formData, body)
  let scheme = call_570457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570457.url(scheme.get, call_570457.host, call_570457.base,
                         call_570457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570457, url, valid)

proc call*(call_570458: Call_MeshSecretGet_570452; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretGet
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570459 = newJObject()
  var query_570460 = newJObject()
  add(query_570460, "api-version", newJString(apiVersion))
  add(path_570459, "secretResourceName", newJString(secretResourceName))
  result = call_570458.call(path_570459, query_570460, nil, nil, nil)

var meshSecretGet* = Call_MeshSecretGet_570452(name: "meshSecretGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretGet_570453, base: "", url: url_MeshSecretGet_570454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretDelete_570472 = ref object of OpenApiRestCall_567668
proc url_MeshSecretDelete_570474(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretDelete_570473(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570475 = path.getOrDefault("secretResourceName")
  valid_570475 = validateParameter(valid_570475, JString, required = true,
                                 default = nil)
  if valid_570475 != nil:
    section.add "secretResourceName", valid_570475
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570476 = query.getOrDefault("api-version")
  valid_570476 = validateParameter(valid_570476, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570476 != nil:
    section.add "api-version", valid_570476
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570477: Call_MeshSecretDelete_570472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  let valid = call_570477.validator(path, query, header, formData, body)
  let scheme = call_570477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570477.url(scheme.get, call_570477.host, call_570477.base,
                         call_570477.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570477, url, valid)

proc call*(call_570478: Call_MeshSecretDelete_570472; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretDelete
  ## Deletes the specified Secret resource and all of its named values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570479 = newJObject()
  var query_570480 = newJObject()
  add(query_570480, "api-version", newJString(apiVersion))
  add(path_570479, "secretResourceName", newJString(secretResourceName))
  result = call_570478.call(path_570479, query_570480, nil, nil, nil)

var meshSecretDelete* = Call_MeshSecretDelete_570472(name: "meshSecretDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretDelete_570473, base: "",
    url: url_MeshSecretDelete_570474, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueList_570481 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueList_570483(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueList_570482(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570484 = path.getOrDefault("secretResourceName")
  valid_570484 = validateParameter(valid_570484, JString, required = true,
                                 default = nil)
  if valid_570484 != nil:
    section.add "secretResourceName", valid_570484
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570485 = query.getOrDefault("api-version")
  valid_570485 = validateParameter(valid_570485, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570485 != nil:
    section.add "api-version", valid_570485
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570486: Call_MeshSecretValueList_570481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  let valid = call_570486.validator(path, query, header, formData, body)
  let scheme = call_570486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570486.url(scheme.get, call_570486.host, call_570486.base,
                         call_570486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570486, url, valid)

proc call*(call_570487: Call_MeshSecretValueList_570481;
          secretResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueList
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570488 = newJObject()
  var query_570489 = newJObject()
  add(query_570489, "api-version", newJString(apiVersion))
  add(path_570488, "secretResourceName", newJString(secretResourceName))
  result = call_570487.call(path_570488, query_570489, nil, nil, nil)

var meshSecretValueList* = Call_MeshSecretValueList_570481(
    name: "meshSecretValueList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}/values",
    validator: validate_MeshSecretValueList_570482, base: "",
    url: url_MeshSecretValueList_570483, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueAddValue_570500 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueAddValue_570502(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueAddValue_570501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570503 = path.getOrDefault("secretValueResourceName")
  valid_570503 = validateParameter(valid_570503, JString, required = true,
                                 default = nil)
  if valid_570503 != nil:
    section.add "secretValueResourceName", valid_570503
  var valid_570504 = path.getOrDefault("secretResourceName")
  valid_570504 = validateParameter(valid_570504, JString, required = true,
                                 default = nil)
  if valid_570504 != nil:
    section.add "secretResourceName", valid_570504
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570505 = query.getOrDefault("api-version")
  valid_570505 = validateParameter(valid_570505, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570505 != nil:
    section.add "api-version", valid_570505
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570507: Call_MeshSecretValueAddValue_570500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  let valid = call_570507.validator(path, query, header, formData, body)
  let scheme = call_570507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570507.url(scheme.get, call_570507.host, call_570507.base,
                         call_570507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570507, url, valid)

proc call*(call_570508: Call_MeshSecretValueAddValue_570500;
          secretValueResourceName: string; secretResourceName: string;
          secretValueResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueAddValue
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  var path_570509 = newJObject()
  var query_570510 = newJObject()
  var body_570511 = newJObject()
  add(query_570510, "api-version", newJString(apiVersion))
  add(path_570509, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570509, "secretResourceName", newJString(secretResourceName))
  if secretValueResourceDescription != nil:
    body_570511 = secretValueResourceDescription
  result = call_570508.call(path_570509, query_570510, nil, nil, body_570511)

var meshSecretValueAddValue* = Call_MeshSecretValueAddValue_570500(
    name: "meshSecretValueAddValue", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueAddValue_570501, base: "",
    url: url_MeshSecretValueAddValue_570502, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueGet_570490 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueGet_570492(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueGet_570491(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570493 = path.getOrDefault("secretValueResourceName")
  valid_570493 = validateParameter(valid_570493, JString, required = true,
                                 default = nil)
  if valid_570493 != nil:
    section.add "secretValueResourceName", valid_570493
  var valid_570494 = path.getOrDefault("secretResourceName")
  valid_570494 = validateParameter(valid_570494, JString, required = true,
                                 default = nil)
  if valid_570494 != nil:
    section.add "secretResourceName", valid_570494
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570495 = query.getOrDefault("api-version")
  valid_570495 = validateParameter(valid_570495, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570495 != nil:
    section.add "api-version", valid_570495
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570496: Call_MeshSecretValueGet_570490; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  let valid = call_570496.validator(path, query, header, formData, body)
  let scheme = call_570496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570496.url(scheme.get, call_570496.host, call_570496.base,
                         call_570496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570496, url, valid)

proc call*(call_570497: Call_MeshSecretValueGet_570490;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueGet
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570498 = newJObject()
  var query_570499 = newJObject()
  add(query_570499, "api-version", newJString(apiVersion))
  add(path_570498, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570498, "secretResourceName", newJString(secretResourceName))
  result = call_570497.call(path_570498, query_570499, nil, nil, nil)

var meshSecretValueGet* = Call_MeshSecretValueGet_570490(
    name: "meshSecretValueGet", meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueGet_570491, base: "",
    url: url_MeshSecretValueGet_570492, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueDelete_570512 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueDelete_570514(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueDelete_570513(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570515 = path.getOrDefault("secretValueResourceName")
  valid_570515 = validateParameter(valid_570515, JString, required = true,
                                 default = nil)
  if valid_570515 != nil:
    section.add "secretValueResourceName", valid_570515
  var valid_570516 = path.getOrDefault("secretResourceName")
  valid_570516 = validateParameter(valid_570516, JString, required = true,
                                 default = nil)
  if valid_570516 != nil:
    section.add "secretResourceName", valid_570516
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570517 = query.getOrDefault("api-version")
  valid_570517 = validateParameter(valid_570517, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570517 != nil:
    section.add "api-version", valid_570517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570518: Call_MeshSecretValueDelete_570512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  let valid = call_570518.validator(path, query, header, formData, body)
  let scheme = call_570518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570518.url(scheme.get, call_570518.host, call_570518.base,
                         call_570518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570518, url, valid)

proc call*(call_570519: Call_MeshSecretValueDelete_570512;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueDelete
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570520 = newJObject()
  var query_570521 = newJObject()
  add(query_570521, "api-version", newJString(apiVersion))
  add(path_570520, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570520, "secretResourceName", newJString(secretResourceName))
  result = call_570519.call(path_570520, query_570521, nil, nil, nil)

var meshSecretValueDelete* = Call_MeshSecretValueDelete_570512(
    name: "meshSecretValueDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueDelete_570513, base: "",
    url: url_MeshSecretValueDelete_570514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueShow_570522 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueShow_570524(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName"),
               (kind: ConstantSegment, value: "/list_value")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueShow_570523(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570525 = path.getOrDefault("secretValueResourceName")
  valid_570525 = validateParameter(valid_570525, JString, required = true,
                                 default = nil)
  if valid_570525 != nil:
    section.add "secretValueResourceName", valid_570525
  var valid_570526 = path.getOrDefault("secretResourceName")
  valid_570526 = validateParameter(valid_570526, JString, required = true,
                                 default = nil)
  if valid_570526 != nil:
    section.add "secretResourceName", valid_570526
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570527 = query.getOrDefault("api-version")
  valid_570527 = validateParameter(valid_570527, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570527 != nil:
    section.add "api-version", valid_570527
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570528: Call_MeshSecretValueShow_570522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  let valid = call_570528.validator(path, query, header, formData, body)
  let scheme = call_570528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570528.url(scheme.get, call_570528.host, call_570528.base,
                         call_570528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570528, url, valid)

proc call*(call_570529: Call_MeshSecretValueShow_570522;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueShow
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570530 = newJObject()
  var query_570531 = newJObject()
  add(query_570531, "api-version", newJString(apiVersion))
  add(path_570530, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570530, "secretResourceName", newJString(secretResourceName))
  result = call_570529.call(path_570530, query_570531, nil, nil, nil)

var meshSecretValueShow* = Call_MeshSecretValueShow_570522(
    name: "meshSecretValueShow", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value",
    validator: validate_MeshSecretValueShow_570523, base: "",
    url: url_MeshSecretValueShow_570524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeList_570532 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeList_570534(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshVolumeList_570533(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570535 = query.getOrDefault("api-version")
  valid_570535 = validateParameter(valid_570535, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570535 != nil:
    section.add "api-version", valid_570535
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570536: Call_MeshVolumeList_570532; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  let valid = call_570536.validator(path, query, header, formData, body)
  let scheme = call_570536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570536.url(scheme.get, call_570536.host, call_570536.base,
                         call_570536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570536, url, valid)

proc call*(call_570537: Call_MeshVolumeList_570532;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeList
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570538 = newJObject()
  add(query_570538, "api-version", newJString(apiVersion))
  result = call_570537.call(nil, query_570538, nil, nil, nil)

var meshVolumeList* = Call_MeshVolumeList_570532(name: "meshVolumeList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes", validator: validate_MeshVolumeList_570533,
    base: "", url: url_MeshVolumeList_570534, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeCreateOrUpdate_570548 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeCreateOrUpdate_570550(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeCreateOrUpdate_570549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_570551 = path.getOrDefault("volumeResourceName")
  valid_570551 = validateParameter(valid_570551, JString, required = true,
                                 default = nil)
  if valid_570551 != nil:
    section.add "volumeResourceName", valid_570551
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570552 = query.getOrDefault("api-version")
  valid_570552 = validateParameter(valid_570552, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570552 != nil:
    section.add "api-version", valid_570552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570554: Call_MeshVolumeCreateOrUpdate_570548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_570554.validator(path, query, header, formData, body)
  let scheme = call_570554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570554.url(scheme.get, call_570554.host, call_570554.base,
                         call_570554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570554, url, valid)

proc call*(call_570555: Call_MeshVolumeCreateOrUpdate_570548;
          volumeResourceName: string; volumeResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeCreateOrUpdate
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  var path_570556 = newJObject()
  var query_570557 = newJObject()
  var body_570558 = newJObject()
  add(query_570557, "api-version", newJString(apiVersion))
  add(path_570556, "volumeResourceName", newJString(volumeResourceName))
  if volumeResourceDescription != nil:
    body_570558 = volumeResourceDescription
  result = call_570555.call(path_570556, query_570557, nil, nil, body_570558)

var meshVolumeCreateOrUpdate* = Call_MeshVolumeCreateOrUpdate_570548(
    name: "meshVolumeCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeCreateOrUpdate_570549, base: "",
    url: url_MeshVolumeCreateOrUpdate_570550, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeGet_570539 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeGet_570541(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeGet_570540(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_570542 = path.getOrDefault("volumeResourceName")
  valid_570542 = validateParameter(valid_570542, JString, required = true,
                                 default = nil)
  if valid_570542 != nil:
    section.add "volumeResourceName", valid_570542
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570543 = query.getOrDefault("api-version")
  valid_570543 = validateParameter(valid_570543, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570543 != nil:
    section.add "api-version", valid_570543
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570544: Call_MeshVolumeGet_570539; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  let valid = call_570544.validator(path, query, header, formData, body)
  let scheme = call_570544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570544.url(scheme.get, call_570544.host, call_570544.base,
                         call_570544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570544, url, valid)

proc call*(call_570545: Call_MeshVolumeGet_570539; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeGet
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_570546 = newJObject()
  var query_570547 = newJObject()
  add(query_570547, "api-version", newJString(apiVersion))
  add(path_570546, "volumeResourceName", newJString(volumeResourceName))
  result = call_570545.call(path_570546, query_570547, nil, nil, nil)

var meshVolumeGet* = Call_MeshVolumeGet_570539(name: "meshVolumeGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeGet_570540, base: "", url: url_MeshVolumeGet_570541,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeDelete_570559 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeDelete_570561(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeDelete_570560(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the Volume resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_570562 = path.getOrDefault("volumeResourceName")
  valid_570562 = validateParameter(valid_570562, JString, required = true,
                                 default = nil)
  if valid_570562 != nil:
    section.add "volumeResourceName", valid_570562
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570563 = query.getOrDefault("api-version")
  valid_570563 = validateParameter(valid_570563, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570563 != nil:
    section.add "api-version", valid_570563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570564: Call_MeshVolumeDelete_570559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Volume resource identified by the name.
  ## 
  let valid = call_570564.validator(path, query, header, formData, body)
  let scheme = call_570564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570564.url(scheme.get, call_570564.host, call_570564.base,
                         call_570564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570564, url, valid)

proc call*(call_570565: Call_MeshVolumeDelete_570559; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeDelete
  ## Deletes the Volume resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_570566 = newJObject()
  var query_570567 = newJObject()
  add(query_570567, "api-version", newJString(apiVersion))
  add(path_570566, "volumeResourceName", newJString(volumeResourceName))
  result = call_570565.call(path_570566, query_570567, nil, nil, nil)

var meshVolumeDelete* = Call_MeshVolumeDelete_570559(name: "meshVolumeDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeDelete_570560, base: "",
    url: url_MeshVolumeDelete_570561, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverServicePartitions_570568 = ref object of OpenApiRestCall_567668
proc url_RecoverServicePartitions_570570(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/$/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverServicePartitions_570569(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570571 = path.getOrDefault("serviceId")
  valid_570571 = validateParameter(valid_570571, JString, required = true,
                                 default = nil)
  if valid_570571 != nil:
    section.add "serviceId", valid_570571
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570572 = query.getOrDefault("timeout")
  valid_570572 = validateParameter(valid_570572, JInt, required = false,
                                 default = newJInt(60))
  if valid_570572 != nil:
    section.add "timeout", valid_570572
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570573 = query.getOrDefault("api-version")
  valid_570573 = validateParameter(valid_570573, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570573 != nil:
    section.add "api-version", valid_570573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570574: Call_RecoverServicePartitions_570568; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_570574.validator(path, query, header, formData, body)
  let scheme = call_570574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570574.url(scheme.get, call_570574.host, call_570574.base,
                         call_570574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570574, url, valid)

proc call*(call_570575: Call_RecoverServicePartitions_570568; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverServicePartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570576 = newJObject()
  var query_570577 = newJObject()
  add(query_570577, "timeout", newJInt(timeout))
  add(query_570577, "api-version", newJString(apiVersion))
  add(path_570576, "serviceId", newJString(serviceId))
  result = call_570575.call(path_570576, query_570577, nil, nil, nil)

var recoverServicePartitions* = Call_RecoverServicePartitions_570568(
    name: "recoverServicePartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Services/$/{serviceId}/$/GetPartitions/$/Recover",
    validator: validate_RecoverServicePartitions_570569, base: "",
    url: url_RecoverServicePartitions_570570, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteService_570578 = ref object of OpenApiRestCall_567668
proc url_DeleteService_570580(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteService_570579(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570581 = path.getOrDefault("serviceId")
  valid_570581 = validateParameter(valid_570581, JString, required = true,
                                 default = nil)
  if valid_570581 != nil:
    section.add "serviceId", valid_570581
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_570582 = query.getOrDefault("timeout")
  valid_570582 = validateParameter(valid_570582, JInt, required = false,
                                 default = newJInt(60))
  if valid_570582 != nil:
    section.add "timeout", valid_570582
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570583 = query.getOrDefault("api-version")
  valid_570583 = validateParameter(valid_570583, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570583 != nil:
    section.add "api-version", valid_570583
  var valid_570584 = query.getOrDefault("ForceRemove")
  valid_570584 = validateParameter(valid_570584, JBool, required = false, default = nil)
  if valid_570584 != nil:
    section.add "ForceRemove", valid_570584
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570585: Call_DeleteService_570578; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  let valid = call_570585.validator(path, query, header, formData, body)
  let scheme = call_570585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570585.url(scheme.get, call_570585.host, call_570585.base,
                         call_570585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570585, url, valid)

proc call*(call_570586: Call_DeleteService_570578; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteService
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570587 = newJObject()
  var query_570588 = newJObject()
  add(query_570588, "timeout", newJInt(timeout))
  add(query_570588, "api-version", newJString(apiVersion))
  add(query_570588, "ForceRemove", newJBool(ForceRemove))
  add(path_570587, "serviceId", newJString(serviceId))
  result = call_570586.call(path_570587, query_570588, nil, nil, nil)

var deleteService* = Call_DeleteService_570578(name: "deleteService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Delete", validator: validate_DeleteService_570579,
    base: "", url: url_DeleteService_570580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableServiceBackup_570589 = ref object of OpenApiRestCall_567668
proc url_DisableServiceBackup_570591(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableServiceBackup_570590(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570592 = path.getOrDefault("serviceId")
  valid_570592 = validateParameter(valid_570592, JString, required = true,
                                 default = nil)
  if valid_570592 != nil:
    section.add "serviceId", valid_570592
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570593 = query.getOrDefault("timeout")
  valid_570593 = validateParameter(valid_570593, JInt, required = false,
                                 default = newJInt(60))
  if valid_570593 != nil:
    section.add "timeout", valid_570593
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570594 = query.getOrDefault("api-version")
  valid_570594 = validateParameter(valid_570594, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570594 != nil:
    section.add "api-version", valid_570594
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570596: Call_DisableServiceBackup_570589; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  let valid = call_570596.validator(path, query, header, formData, body)
  let scheme = call_570596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570596.url(scheme.get, call_570596.host, call_570596.base,
                         call_570596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570596, url, valid)

proc call*(call_570597: Call_DisableServiceBackup_570589; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableServiceBackup
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570598 = newJObject()
  var query_570599 = newJObject()
  var body_570600 = newJObject()
  add(query_570599, "timeout", newJInt(timeout))
  add(query_570599, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_570600 = DisableBackupDescription
  add(path_570598, "serviceId", newJString(serviceId))
  result = call_570597.call(path_570598, query_570599, nil, nil, body_570600)

var disableServiceBackup* = Call_DisableServiceBackup_570589(
    name: "disableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/DisableBackup",
    validator: validate_DisableServiceBackup_570590, base: "",
    url: url_DisableServiceBackup_570591, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableServiceBackup_570601 = ref object of OpenApiRestCall_567668
proc url_EnableServiceBackup_570603(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableServiceBackup_570602(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570604 = path.getOrDefault("serviceId")
  valid_570604 = validateParameter(valid_570604, JString, required = true,
                                 default = nil)
  if valid_570604 != nil:
    section.add "serviceId", valid_570604
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570605 = query.getOrDefault("timeout")
  valid_570605 = validateParameter(valid_570605, JInt, required = false,
                                 default = newJInt(60))
  if valid_570605 != nil:
    section.add "timeout", valid_570605
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570606 = query.getOrDefault("api-version")
  valid_570606 = validateParameter(valid_570606, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570606 != nil:
    section.add "api-version", valid_570606
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570608: Call_EnableServiceBackup_570601; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_570608.validator(path, query, header, formData, body)
  let scheme = call_570608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570608.url(scheme.get, call_570608.host, call_570608.base,
                         call_570608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570608, url, valid)

proc call*(call_570609: Call_EnableServiceBackup_570601;
          EnableBackupDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enableServiceBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570610 = newJObject()
  var query_570611 = newJObject()
  var body_570612 = newJObject()
  add(query_570611, "timeout", newJInt(timeout))
  add(query_570611, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_570612 = EnableBackupDescription
  add(path_570610, "serviceId", newJString(serviceId))
  result = call_570609.call(path_570610, query_570611, nil, nil, body_570612)

var enableServiceBackup* = Call_EnableServiceBackup_570601(
    name: "enableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/EnableBackup",
    validator: validate_EnableServiceBackup_570602, base: "",
    url: url_EnableServiceBackup_570603, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationNameInfo_570613 = ref object of OpenApiRestCall_567668
proc url_GetApplicationNameInfo_570615(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetApplicationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationNameInfo_570614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570616 = path.getOrDefault("serviceId")
  valid_570616 = validateParameter(valid_570616, JString, required = true,
                                 default = nil)
  if valid_570616 != nil:
    section.add "serviceId", valid_570616
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570617 = query.getOrDefault("timeout")
  valid_570617 = validateParameter(valid_570617, JInt, required = false,
                                 default = newJInt(60))
  if valid_570617 != nil:
    section.add "timeout", valid_570617
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570618 = query.getOrDefault("api-version")
  valid_570618 = validateParameter(valid_570618, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570618 != nil:
    section.add "api-version", valid_570618
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570619: Call_GetApplicationNameInfo_570613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  let valid = call_570619.validator(path, query, header, formData, body)
  let scheme = call_570619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570619.url(scheme.get, call_570619.host, call_570619.base,
                         call_570619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570619, url, valid)

proc call*(call_570620: Call_GetApplicationNameInfo_570613; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationNameInfo
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570621 = newJObject()
  var query_570622 = newJObject()
  add(query_570622, "timeout", newJInt(timeout))
  add(query_570622, "api-version", newJString(apiVersion))
  add(path_570621, "serviceId", newJString(serviceId))
  result = call_570620.call(path_570621, query_570622, nil, nil, nil)

var getApplicationNameInfo* = Call_GetApplicationNameInfo_570613(
    name: "getApplicationNameInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetApplicationName",
    validator: validate_GetApplicationNameInfo_570614, base: "",
    url: url_GetApplicationNameInfo_570615, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupConfigurationInfo_570623 = ref object of OpenApiRestCall_567668
proc url_GetServiceBackupConfigurationInfo_570625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupConfigurationInfo_570624(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570626 = path.getOrDefault("serviceId")
  valid_570626 = validateParameter(valid_570626, JString, required = true,
                                 default = nil)
  if valid_570626 != nil:
    section.add "serviceId", valid_570626
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_570627 = query.getOrDefault("timeout")
  valid_570627 = validateParameter(valid_570627, JInt, required = false,
                                 default = newJInt(60))
  if valid_570627 != nil:
    section.add "timeout", valid_570627
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570628 = query.getOrDefault("api-version")
  valid_570628 = validateParameter(valid_570628, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570628 != nil:
    section.add "api-version", valid_570628
  var valid_570629 = query.getOrDefault("ContinuationToken")
  valid_570629 = validateParameter(valid_570629, JString, required = false,
                                 default = nil)
  if valid_570629 != nil:
    section.add "ContinuationToken", valid_570629
  var valid_570630 = query.getOrDefault("MaxResults")
  valid_570630 = validateParameter(valid_570630, JInt, required = false,
                                 default = newJInt(0))
  if valid_570630 != nil:
    section.add "MaxResults", valid_570630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570631: Call_GetServiceBackupConfigurationInfo_570623;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  let valid = call_570631.validator(path, query, header, formData, body)
  let scheme = call_570631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570631.url(scheme.get, call_570631.host, call_570631.base,
                         call_570631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570631, url, valid)

proc call*(call_570632: Call_GetServiceBackupConfigurationInfo_570623;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_570633 = newJObject()
  var query_570634 = newJObject()
  add(query_570634, "timeout", newJInt(timeout))
  add(query_570634, "api-version", newJString(apiVersion))
  add(path_570633, "serviceId", newJString(serviceId))
  add(query_570634, "ContinuationToken", newJString(ContinuationToken))
  add(query_570634, "MaxResults", newJInt(MaxResults))
  result = call_570632.call(path_570633, query_570634, nil, nil, nil)

var getServiceBackupConfigurationInfo* = Call_GetServiceBackupConfigurationInfo_570623(
    name: "getServiceBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetBackupConfigurationInfo",
    validator: validate_GetServiceBackupConfigurationInfo_570624, base: "",
    url: url_GetServiceBackupConfigurationInfo_570625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupList_570635 = ref object of OpenApiRestCall_567668
proc url_GetServiceBackupList_570637(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupList_570636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570638 = path.getOrDefault("serviceId")
  valid_570638 = validateParameter(valid_570638, JString, required = true,
                                 default = nil)
  if valid_570638 != nil:
    section.add "serviceId", valid_570638
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_570639 = query.getOrDefault("timeout")
  valid_570639 = validateParameter(valid_570639, JInt, required = false,
                                 default = newJInt(60))
  if valid_570639 != nil:
    section.add "timeout", valid_570639
  var valid_570640 = query.getOrDefault("Latest")
  valid_570640 = validateParameter(valid_570640, JBool, required = false,
                                 default = newJBool(false))
  if valid_570640 != nil:
    section.add "Latest", valid_570640
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570641 = query.getOrDefault("api-version")
  valid_570641 = validateParameter(valid_570641, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570641 != nil:
    section.add "api-version", valid_570641
  var valid_570642 = query.getOrDefault("StartDateTimeFilter")
  valid_570642 = validateParameter(valid_570642, JString, required = false,
                                 default = nil)
  if valid_570642 != nil:
    section.add "StartDateTimeFilter", valid_570642
  var valid_570643 = query.getOrDefault("EndDateTimeFilter")
  valid_570643 = validateParameter(valid_570643, JString, required = false,
                                 default = nil)
  if valid_570643 != nil:
    section.add "EndDateTimeFilter", valid_570643
  var valid_570644 = query.getOrDefault("ContinuationToken")
  valid_570644 = validateParameter(valid_570644, JString, required = false,
                                 default = nil)
  if valid_570644 != nil:
    section.add "ContinuationToken", valid_570644
  var valid_570645 = query.getOrDefault("MaxResults")
  valid_570645 = validateParameter(valid_570645, JInt, required = false,
                                 default = newJInt(0))
  if valid_570645 != nil:
    section.add "MaxResults", valid_570645
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570646: Call_GetServiceBackupList_570635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_570646.validator(path, query, header, formData, body)
  let scheme = call_570646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570646.url(scheme.get, call_570646.host, call_570646.base,
                         call_570646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570646, url, valid)

proc call*(call_570647: Call_GetServiceBackupList_570635; serviceId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupList
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_570648 = newJObject()
  var query_570649 = newJObject()
  add(query_570649, "timeout", newJInt(timeout))
  add(query_570649, "Latest", newJBool(Latest))
  add(query_570649, "api-version", newJString(apiVersion))
  add(query_570649, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_570649, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_570648, "serviceId", newJString(serviceId))
  add(query_570649, "ContinuationToken", newJString(ContinuationToken))
  add(query_570649, "MaxResults", newJInt(MaxResults))
  result = call_570647.call(path_570648, query_570649, nil, nil, nil)

var getServiceBackupList* = Call_GetServiceBackupList_570635(
    name: "getServiceBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetBackups",
    validator: validate_GetServiceBackupList_570636, base: "",
    url: url_GetServiceBackupList_570637, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceDescription_570650 = ref object of OpenApiRestCall_567668
proc url_GetServiceDescription_570652(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetDescription")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceDescription_570651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570653 = path.getOrDefault("serviceId")
  valid_570653 = validateParameter(valid_570653, JString, required = true,
                                 default = nil)
  if valid_570653 != nil:
    section.add "serviceId", valid_570653
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570654 = query.getOrDefault("timeout")
  valid_570654 = validateParameter(valid_570654, JInt, required = false,
                                 default = newJInt(60))
  if valid_570654 != nil:
    section.add "timeout", valid_570654
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570655 = query.getOrDefault("api-version")
  valid_570655 = validateParameter(valid_570655, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570655 != nil:
    section.add "api-version", valid_570655
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570656: Call_GetServiceDescription_570650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  let valid = call_570656.validator(path, query, header, formData, body)
  let scheme = call_570656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570656.url(scheme.get, call_570656.host, call_570656.base,
                         call_570656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570656, url, valid)

proc call*(call_570657: Call_GetServiceDescription_570650; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceDescription
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570658 = newJObject()
  var query_570659 = newJObject()
  add(query_570659, "timeout", newJInt(timeout))
  add(query_570659, "api-version", newJString(apiVersion))
  add(path_570658, "serviceId", newJString(serviceId))
  result = call_570657.call(path_570658, query_570659, nil, nil, nil)

var getServiceDescription* = Call_GetServiceDescription_570650(
    name: "getServiceDescription", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetDescription",
    validator: validate_GetServiceDescription_570651, base: "",
    url: url_GetServiceDescription_570652, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealthUsingPolicy_570673 = ref object of OpenApiRestCall_567668
proc url_GetServiceHealthUsingPolicy_570675(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealthUsingPolicy_570674(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570676 = path.getOrDefault("serviceId")
  valid_570676 = validateParameter(valid_570676, JString, required = true,
                                 default = nil)
  if valid_570676 != nil:
    section.add "serviceId", valid_570676
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570677 = query.getOrDefault("timeout")
  valid_570677 = validateParameter(valid_570677, JInt, required = false,
                                 default = newJInt(60))
  if valid_570677 != nil:
    section.add "timeout", valid_570677
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570678 = query.getOrDefault("api-version")
  valid_570678 = validateParameter(valid_570678, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570678 != nil:
    section.add "api-version", valid_570678
  var valid_570679 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570679 = validateParameter(valid_570679, JBool, required = false,
                                 default = newJBool(false))
  if valid_570679 != nil:
    section.add "ExcludeHealthStatistics", valid_570679
  var valid_570680 = query.getOrDefault("EventsHealthStateFilter")
  valid_570680 = validateParameter(valid_570680, JInt, required = false,
                                 default = newJInt(0))
  if valid_570680 != nil:
    section.add "EventsHealthStateFilter", valid_570680
  var valid_570681 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_570681 = validateParameter(valid_570681, JInt, required = false,
                                 default = newJInt(0))
  if valid_570681 != nil:
    section.add "PartitionsHealthStateFilter", valid_570681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570683: Call_GetServiceHealthUsingPolicy_570673; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570683.validator(path, query, header, formData, body)
  let scheme = call_570683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570683.url(scheme.get, call_570683.host, call_570683.base,
                         call_570683.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570683, url, valid)

proc call*(call_570684: Call_GetServiceHealthUsingPolicy_570673; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealthUsingPolicy
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_570685 = newJObject()
  var query_570686 = newJObject()
  var body_570687 = newJObject()
  add(query_570686, "timeout", newJInt(timeout))
  add(query_570686, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_570687 = ApplicationHealthPolicy
  add(query_570686, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570686, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570685, "serviceId", newJString(serviceId))
  add(query_570686, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_570684.call(path_570685, query_570686, nil, nil, body_570687)

var getServiceHealthUsingPolicy* = Call_GetServiceHealthUsingPolicy_570673(
    name: "getServiceHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealthUsingPolicy_570674, base: "",
    url: url_GetServiceHealthUsingPolicy_570675,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealth_570660 = ref object of OpenApiRestCall_567668
proc url_GetServiceHealth_570662(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealth_570661(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570663 = path.getOrDefault("serviceId")
  valid_570663 = validateParameter(valid_570663, JString, required = true,
                                 default = nil)
  if valid_570663 != nil:
    section.add "serviceId", valid_570663
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570664 = query.getOrDefault("timeout")
  valid_570664 = validateParameter(valid_570664, JInt, required = false,
                                 default = newJInt(60))
  if valid_570664 != nil:
    section.add "timeout", valid_570664
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570665 = query.getOrDefault("api-version")
  valid_570665 = validateParameter(valid_570665, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570665 != nil:
    section.add "api-version", valid_570665
  var valid_570666 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570666 = validateParameter(valid_570666, JBool, required = false,
                                 default = newJBool(false))
  if valid_570666 != nil:
    section.add "ExcludeHealthStatistics", valid_570666
  var valid_570667 = query.getOrDefault("EventsHealthStateFilter")
  valid_570667 = validateParameter(valid_570667, JInt, required = false,
                                 default = newJInt(0))
  if valid_570667 != nil:
    section.add "EventsHealthStateFilter", valid_570667
  var valid_570668 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_570668 = validateParameter(valid_570668, JInt, required = false,
                                 default = newJInt(0))
  if valid_570668 != nil:
    section.add "PartitionsHealthStateFilter", valid_570668
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570669: Call_GetServiceHealth_570660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570669.validator(path, query, header, formData, body)
  let scheme = call_570669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570669.url(scheme.get, call_570669.host, call_570669.base,
                         call_570669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570669, url, valid)

proc call*(call_570670: Call_GetServiceHealth_570660; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealth
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_570671 = newJObject()
  var query_570672 = newJObject()
  add(query_570672, "timeout", newJInt(timeout))
  add(query_570672, "api-version", newJString(apiVersion))
  add(query_570672, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570672, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570671, "serviceId", newJString(serviceId))
  add(query_570672, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_570670.call(path_570671, query_570672, nil, nil, nil)

var getServiceHealth* = Call_GetServiceHealth_570660(name: "getServiceHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealth_570661, base: "",
    url: url_GetServiceHealth_570662, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfoList_570688 = ref object of OpenApiRestCall_567668
proc url_GetPartitionInfoList_570690(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfoList_570689(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570691 = path.getOrDefault("serviceId")
  valid_570691 = validateParameter(valid_570691, JString, required = true,
                                 default = nil)
  if valid_570691 != nil:
    section.add "serviceId", valid_570691
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_570692 = query.getOrDefault("timeout")
  valid_570692 = validateParameter(valid_570692, JInt, required = false,
                                 default = newJInt(60))
  if valid_570692 != nil:
    section.add "timeout", valid_570692
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570693 = query.getOrDefault("api-version")
  valid_570693 = validateParameter(valid_570693, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570693 != nil:
    section.add "api-version", valid_570693
  var valid_570694 = query.getOrDefault("ContinuationToken")
  valid_570694 = validateParameter(valid_570694, JString, required = false,
                                 default = nil)
  if valid_570694 != nil:
    section.add "ContinuationToken", valid_570694
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570695: Call_GetPartitionInfoList_570688; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_570695.validator(path, query, header, formData, body)
  let scheme = call_570695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570695.url(scheme.get, call_570695.host, call_570695.base,
                         call_570695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570695, url, valid)

proc call*(call_570696: Call_GetPartitionInfoList_570688; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"; ContinuationToken: string = ""): Recallable =
  ## getPartitionInfoList
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_570697 = newJObject()
  var query_570698 = newJObject()
  add(query_570698, "timeout", newJInt(timeout))
  add(query_570698, "api-version", newJString(apiVersion))
  add(path_570697, "serviceId", newJString(serviceId))
  add(query_570698, "ContinuationToken", newJString(ContinuationToken))
  result = call_570696.call(path_570697, query_570698, nil, nil, nil)

var getPartitionInfoList* = Call_GetPartitionInfoList_570688(
    name: "getPartitionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetPartitions",
    validator: validate_GetPartitionInfoList_570689, base: "",
    url: url_GetPartitionInfoList_570690, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUnplacedReplicaInformation_570699 = ref object of OpenApiRestCall_567668
proc url_GetUnplacedReplicaInformation_570701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"), (kind: ConstantSegment,
        value: "/$/GetUnplacedReplicaInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetUnplacedReplicaInformation_570700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the unplaced replicas of the service.
  ## If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
  ## If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.
  ## If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570702 = path.getOrDefault("serviceId")
  valid_570702 = validateParameter(valid_570702, JString, required = true,
                                 default = nil)
  if valid_570702 != nil:
    section.add "serviceId", valid_570702
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OnlyQueryPrimaries: JBool
  ##                     : Indicates that unplaced replica information will be queries only for primary replicas.
  ##   PartitionId: JString
  ##              : The identity of the partition.
  section = newJObject()
  var valid_570703 = query.getOrDefault("timeout")
  valid_570703 = validateParameter(valid_570703, JInt, required = false,
                                 default = newJInt(60))
  if valid_570703 != nil:
    section.add "timeout", valid_570703
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570704 = query.getOrDefault("api-version")
  valid_570704 = validateParameter(valid_570704, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570704 != nil:
    section.add "api-version", valid_570704
  var valid_570705 = query.getOrDefault("OnlyQueryPrimaries")
  valid_570705 = validateParameter(valid_570705, JBool, required = false,
                                 default = newJBool(false))
  if valid_570705 != nil:
    section.add "OnlyQueryPrimaries", valid_570705
  var valid_570706 = query.getOrDefault("PartitionId")
  valid_570706 = validateParameter(valid_570706, JString, required = false,
                                 default = nil)
  if valid_570706 != nil:
    section.add "PartitionId", valid_570706
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570707: Call_GetUnplacedReplicaInformation_570699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the unplaced replicas of the service.
  ## If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
  ## If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.
  ## If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
  ## 
  let valid = call_570707.validator(path, query, header, formData, body)
  let scheme = call_570707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570707.url(scheme.get, call_570707.host, call_570707.base,
                         call_570707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570707, url, valid)

proc call*(call_570708: Call_GetUnplacedReplicaInformation_570699;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.4";
          OnlyQueryPrimaries: bool = false; PartitionId: string = ""): Recallable =
  ## getUnplacedReplicaInformation
  ## Returns the information about the unplaced replicas of the service.
  ## If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.
  ## If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.
  ## If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OnlyQueryPrimaries: bool
  ##                     : Indicates that unplaced replica information will be queries only for primary replicas.
  ##   PartitionId: string
  ##              : The identity of the partition.
  var path_570709 = newJObject()
  var query_570710 = newJObject()
  add(query_570710, "timeout", newJInt(timeout))
  add(query_570710, "api-version", newJString(apiVersion))
  add(path_570709, "serviceId", newJString(serviceId))
  add(query_570710, "OnlyQueryPrimaries", newJBool(OnlyQueryPrimaries))
  add(query_570710, "PartitionId", newJString(PartitionId))
  result = call_570708.call(path_570709, query_570710, nil, nil, nil)

var getUnplacedReplicaInformation* = Call_GetUnplacedReplicaInformation_570699(
    name: "getUnplacedReplicaInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetUnplacedReplicaInformation",
    validator: validate_GetUnplacedReplicaInformation_570700, base: "",
    url: url_GetUnplacedReplicaInformation_570701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportServiceHealth_570711 = ref object of OpenApiRestCall_567668
proc url_ReportServiceHealth_570713(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportServiceHealth_570712(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570714 = path.getOrDefault("serviceId")
  valid_570714 = validateParameter(valid_570714, JString, required = true,
                                 default = nil)
  if valid_570714 != nil:
    section.add "serviceId", valid_570714
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570715 = query.getOrDefault("Immediate")
  valid_570715 = validateParameter(valid_570715, JBool, required = false,
                                 default = newJBool(false))
  if valid_570715 != nil:
    section.add "Immediate", valid_570715
  var valid_570716 = query.getOrDefault("timeout")
  valid_570716 = validateParameter(valid_570716, JInt, required = false,
                                 default = newJInt(60))
  if valid_570716 != nil:
    section.add "timeout", valid_570716
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570717 = query.getOrDefault("api-version")
  valid_570717 = validateParameter(valid_570717, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570717 != nil:
    section.add "api-version", valid_570717
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570719: Call_ReportServiceHealth_570711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_570719.validator(path, query, header, formData, body)
  let scheme = call_570719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570719.url(scheme.get, call_570719.host, call_570719.base,
                         call_570719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570719, url, valid)

proc call*(call_570720: Call_ReportServiceHealth_570711;
          HealthInformation: JsonNode; serviceId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportServiceHealth
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570721 = newJObject()
  var query_570722 = newJObject()
  var body_570723 = newJObject()
  add(query_570722, "Immediate", newJBool(Immediate))
  add(query_570722, "timeout", newJInt(timeout))
  add(query_570722, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_570723 = HealthInformation
  add(path_570721, "serviceId", newJString(serviceId))
  result = call_570720.call(path_570721, query_570722, nil, nil, body_570723)

var reportServiceHealth* = Call_ReportServiceHealth_570711(
    name: "reportServiceHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ReportHealth",
    validator: validate_ReportServiceHealth_570712, base: "",
    url: url_ReportServiceHealth_570713, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResolveService_570724 = ref object of OpenApiRestCall_567668
proc url_ResolveService_570726(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResolvePartition")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResolveService_570725(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570727 = path.getOrDefault("serviceId")
  valid_570727 = validateParameter(valid_570727, JString, required = true,
                                 default = nil)
  if valid_570727 != nil:
    section.add "serviceId", valid_570727
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: JString
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: JInt
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   PreviousRspVersion: JString
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  section = newJObject()
  var valid_570728 = query.getOrDefault("timeout")
  valid_570728 = validateParameter(valid_570728, JInt, required = false,
                                 default = newJInt(60))
  if valid_570728 != nil:
    section.add "timeout", valid_570728
  var valid_570729 = query.getOrDefault("PartitionKeyValue")
  valid_570729 = validateParameter(valid_570729, JString, required = false,
                                 default = nil)
  if valid_570729 != nil:
    section.add "PartitionKeyValue", valid_570729
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570730 = query.getOrDefault("api-version")
  valid_570730 = validateParameter(valid_570730, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570730 != nil:
    section.add "api-version", valid_570730
  var valid_570731 = query.getOrDefault("PartitionKeyType")
  valid_570731 = validateParameter(valid_570731, JInt, required = false, default = nil)
  if valid_570731 != nil:
    section.add "PartitionKeyType", valid_570731
  var valid_570732 = query.getOrDefault("PreviousRspVersion")
  valid_570732 = validateParameter(valid_570732, JString, required = false,
                                 default = nil)
  if valid_570732 != nil:
    section.add "PreviousRspVersion", valid_570732
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570733: Call_ResolveService_570724; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  let valid = call_570733.validator(path, query, header, formData, body)
  let scheme = call_570733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570733.url(scheme.get, call_570733.host, call_570733.base,
                         call_570733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570733, url, valid)

proc call*(call_570734: Call_ResolveService_570724; serviceId: string;
          timeout: int = 60; PartitionKeyValue: string = ""; apiVersion: string = "6.0";
          PartitionKeyType: int = 0; PreviousRspVersion: string = ""): Recallable =
  ## resolveService
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: string
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: int
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PreviousRspVersion: string
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  var path_570735 = newJObject()
  var query_570736 = newJObject()
  add(query_570736, "timeout", newJInt(timeout))
  add(query_570736, "PartitionKeyValue", newJString(PartitionKeyValue))
  add(query_570736, "api-version", newJString(apiVersion))
  add(query_570736, "PartitionKeyType", newJInt(PartitionKeyType))
  add(path_570735, "serviceId", newJString(serviceId))
  add(query_570736, "PreviousRspVersion", newJString(PreviousRspVersion))
  result = call_570734.call(path_570735, query_570736, nil, nil, nil)

var resolveService* = Call_ResolveService_570724(name: "resolveService",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/ResolvePartition",
    validator: validate_ResolveService_570725, base: "", url: url_ResolveService_570726,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeServiceBackup_570737 = ref object of OpenApiRestCall_567668
proc url_ResumeServiceBackup_570739(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeServiceBackup_570738(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570740 = path.getOrDefault("serviceId")
  valid_570740 = validateParameter(valid_570740, JString, required = true,
                                 default = nil)
  if valid_570740 != nil:
    section.add "serviceId", valid_570740
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570741 = query.getOrDefault("timeout")
  valid_570741 = validateParameter(valid_570741, JInt, required = false,
                                 default = newJInt(60))
  if valid_570741 != nil:
    section.add "timeout", valid_570741
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570742 = query.getOrDefault("api-version")
  valid_570742 = validateParameter(valid_570742, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570742 != nil:
    section.add "api-version", valid_570742
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570743: Call_ResumeServiceBackup_570737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_570743.validator(path, query, header, formData, body)
  let scheme = call_570743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570743.url(scheme.get, call_570743.host, call_570743.base,
                         call_570743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570743, url, valid)

proc call*(call_570744: Call_ResumeServiceBackup_570737; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeServiceBackup
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570745 = newJObject()
  var query_570746 = newJObject()
  add(query_570746, "timeout", newJInt(timeout))
  add(query_570746, "api-version", newJString(apiVersion))
  add(path_570745, "serviceId", newJString(serviceId))
  result = call_570744.call(path_570745, query_570746, nil, nil, nil)

var resumeServiceBackup* = Call_ResumeServiceBackup_570737(
    name: "resumeServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ResumeBackup",
    validator: validate_ResumeServiceBackup_570738, base: "",
    url: url_ResumeServiceBackup_570739, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendServiceBackup_570747 = ref object of OpenApiRestCall_567668
proc url_SuspendServiceBackup_570749(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendServiceBackup_570748(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570750 = path.getOrDefault("serviceId")
  valid_570750 = validateParameter(valid_570750, JString, required = true,
                                 default = nil)
  if valid_570750 != nil:
    section.add "serviceId", valid_570750
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570751 = query.getOrDefault("timeout")
  valid_570751 = validateParameter(valid_570751, JInt, required = false,
                                 default = newJInt(60))
  if valid_570751 != nil:
    section.add "timeout", valid_570751
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570752 = query.getOrDefault("api-version")
  valid_570752 = validateParameter(valid_570752, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570752 != nil:
    section.add "api-version", valid_570752
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570753: Call_SuspendServiceBackup_570747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  let valid = call_570753.validator(path, query, header, formData, body)
  let scheme = call_570753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570753.url(scheme.get, call_570753.host, call_570753.base,
                         call_570753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570753, url, valid)

proc call*(call_570754: Call_SuspendServiceBackup_570747; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendServiceBackup
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570755 = newJObject()
  var query_570756 = newJObject()
  add(query_570756, "timeout", newJInt(timeout))
  add(query_570756, "api-version", newJString(apiVersion))
  add(path_570755, "serviceId", newJString(serviceId))
  result = call_570754.call(path_570755, query_570756, nil, nil, nil)

var suspendServiceBackup* = Call_SuspendServiceBackup_570747(
    name: "suspendServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/SuspendBackup",
    validator: validate_SuspendServiceBackup_570748, base: "",
    url: url_SuspendServiceBackup_570749, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateService_570757 = ref object of OpenApiRestCall_567668
proc url_UpdateService_570759(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateService_570758(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570760 = path.getOrDefault("serviceId")
  valid_570760 = validateParameter(valid_570760, JString, required = true,
                                 default = nil)
  if valid_570760 != nil:
    section.add "serviceId", valid_570760
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570761 = query.getOrDefault("timeout")
  valid_570761 = validateParameter(valid_570761, JInt, required = false,
                                 default = newJInt(60))
  if valid_570761 != nil:
    section.add "timeout", valid_570761
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570762 = query.getOrDefault("api-version")
  valid_570762 = validateParameter(valid_570762, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570762 != nil:
    section.add "api-version", valid_570762
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570764: Call_UpdateService_570757; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  let valid = call_570764.validator(path, query, header, formData, body)
  let scheme = call_570764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570764.url(scheme.get, call_570764.host, call_570764.base,
                         call_570764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570764, url, valid)

proc call*(call_570765: Call_UpdateService_570757;
          ServiceUpdateDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateService
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570766 = newJObject()
  var query_570767 = newJObject()
  var body_570768 = newJObject()
  add(query_570767, "timeout", newJInt(timeout))
  add(query_570767, "api-version", newJString(apiVersion))
  if ServiceUpdateDescription != nil:
    body_570768 = ServiceUpdateDescription
  add(path_570766, "serviceId", newJString(serviceId))
  result = call_570765.call(path_570766, query_570767, nil, nil, body_570768)

var updateService* = Call_UpdateService_570757(name: "updateService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Update", validator: validate_UpdateService_570758,
    base: "", url: url_UpdateService_570759, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaos_570769 = ref object of OpenApiRestCall_567668
proc url_GetChaos_570771(protocol: Scheme; host: string; base: string; route: string;
                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaos_570770(path: JsonNode; query: JsonNode; header: JsonNode;
                             formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570772 = query.getOrDefault("timeout")
  valid_570772 = validateParameter(valid_570772, JInt, required = false,
                                 default = newJInt(60))
  if valid_570772 != nil:
    section.add "timeout", valid_570772
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570773 = query.getOrDefault("api-version")
  valid_570773 = validateParameter(valid_570773, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570773 != nil:
    section.add "api-version", valid_570773
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570774: Call_GetChaos_570769; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  let valid = call_570774.validator(path, query, header, formData, body)
  let scheme = call_570774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570774.url(scheme.get, call_570774.host, call_570774.base,
                         call_570774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570774, url, valid)

proc call*(call_570775: Call_GetChaos_570769; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaos
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_570776 = newJObject()
  add(query_570776, "timeout", newJInt(timeout))
  add(query_570776, "api-version", newJString(apiVersion))
  result = call_570775.call(nil, query_570776, nil, nil, nil)

var getChaos* = Call_GetChaos_570769(name: "getChaos", meth: HttpMethod.HttpGet,
                                  host: "azure.local:19080",
                                  route: "/Tools/Chaos",
                                  validator: validate_GetChaos_570770, base: "",
                                  url: url_GetChaos_570771,
                                  schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartChaos_570777 = ref object of OpenApiRestCall_567668
proc url_StartChaos_570779(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartChaos_570778(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570780 = query.getOrDefault("timeout")
  valid_570780 = validateParameter(valid_570780, JInt, required = false,
                                 default = newJInt(60))
  if valid_570780 != nil:
    section.add "timeout", valid_570780
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570781 = query.getOrDefault("api-version")
  valid_570781 = validateParameter(valid_570781, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570781 != nil:
    section.add "api-version", valid_570781
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570783: Call_StartChaos_570777; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  let valid = call_570783.validator(path, query, header, formData, body)
  let scheme = call_570783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570783.url(scheme.get, call_570783.host, call_570783.base,
                         call_570783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570783, url, valid)

proc call*(call_570784: Call_StartChaos_570777; ChaosParameters: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## startChaos
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  var query_570785 = newJObject()
  var body_570786 = newJObject()
  add(query_570785, "timeout", newJInt(timeout))
  add(query_570785, "api-version", newJString(apiVersion))
  if ChaosParameters != nil:
    body_570786 = ChaosParameters
  result = call_570784.call(nil, query_570785, nil, nil, body_570786)

var startChaos* = Call_StartChaos_570777(name: "startChaos",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Tools/Chaos/$/Start",
                                      validator: validate_StartChaos_570778,
                                      base: "", url: url_StartChaos_570779,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopChaos_570787 = ref object of OpenApiRestCall_567668
proc url_StopChaos_570789(protocol: Scheme; host: string; base: string; route: string;
                         path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StopChaos_570788(path: JsonNode; query: JsonNode; header: JsonNode;
                              formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570790 = query.getOrDefault("timeout")
  valid_570790 = validateParameter(valid_570790, JInt, required = false,
                                 default = newJInt(60))
  if valid_570790 != nil:
    section.add "timeout", valid_570790
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570791 = query.getOrDefault("api-version")
  valid_570791 = validateParameter(valid_570791, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570791 != nil:
    section.add "api-version", valid_570791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570792: Call_StopChaos_570787; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  let valid = call_570792.validator(path, query, header, formData, body)
  let scheme = call_570792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570792.url(scheme.get, call_570792.host, call_570792.base,
                         call_570792.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570792, url, valid)

proc call*(call_570793: Call_StopChaos_570787; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## stopChaos
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_570794 = newJObject()
  add(query_570794, "timeout", newJInt(timeout))
  add(query_570794, "api-version", newJString(apiVersion))
  result = call_570793.call(nil, query_570794, nil, nil, nil)

var stopChaos* = Call_StopChaos_570787(name: "stopChaos", meth: HttpMethod.HttpPost,
                                    host: "azure.local:19080",
                                    route: "/Tools/Chaos/$/Stop",
                                    validator: validate_StopChaos_570788,
                                    base: "", url: url_StopChaos_570789,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosEvents_570795 = ref object of OpenApiRestCall_567668
proc url_GetChaosEvents_570797(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosEvents_570796(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: JString
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: JString
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  section = newJObject()
  var valid_570798 = query.getOrDefault("timeout")
  valid_570798 = validateParameter(valid_570798, JInt, required = false,
                                 default = newJInt(60))
  if valid_570798 != nil:
    section.add "timeout", valid_570798
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570799 = query.getOrDefault("api-version")
  valid_570799 = validateParameter(valid_570799, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570799 != nil:
    section.add "api-version", valid_570799
  var valid_570800 = query.getOrDefault("EndTimeUtc")
  valid_570800 = validateParameter(valid_570800, JString, required = false,
                                 default = nil)
  if valid_570800 != nil:
    section.add "EndTimeUtc", valid_570800
  var valid_570801 = query.getOrDefault("ContinuationToken")
  valid_570801 = validateParameter(valid_570801, JString, required = false,
                                 default = nil)
  if valid_570801 != nil:
    section.add "ContinuationToken", valid_570801
  var valid_570802 = query.getOrDefault("MaxResults")
  valid_570802 = validateParameter(valid_570802, JInt, required = false,
                                 default = newJInt(0))
  if valid_570802 != nil:
    section.add "MaxResults", valid_570802
  var valid_570803 = query.getOrDefault("StartTimeUtc")
  valid_570803 = validateParameter(valid_570803, JString, required = false,
                                 default = nil)
  if valid_570803 != nil:
    section.add "StartTimeUtc", valid_570803
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570804: Call_GetChaosEvents_570795; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  let valid = call_570804.validator(path, query, header, formData, body)
  let scheme = call_570804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570804.url(scheme.get, call_570804.host, call_570804.base,
                         call_570804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570804, url, valid)

proc call*(call_570805: Call_GetChaosEvents_570795; timeout: int = 60;
          apiVersion: string = "6.2"; EndTimeUtc: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0; StartTimeUtc: string = ""): Recallable =
  ## getChaosEvents
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: string
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: string
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  var query_570806 = newJObject()
  add(query_570806, "timeout", newJInt(timeout))
  add(query_570806, "api-version", newJString(apiVersion))
  add(query_570806, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_570806, "ContinuationToken", newJString(ContinuationToken))
  add(query_570806, "MaxResults", newJInt(MaxResults))
  add(query_570806, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_570805.call(nil, query_570806, nil, nil, nil)

var getChaosEvents* = Call_GetChaosEvents_570795(name: "getChaosEvents",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Events", validator: validate_GetChaosEvents_570796,
    base: "", url: url_GetChaosEvents_570797, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChaosSchedule_570815 = ref object of OpenApiRestCall_567668
proc url_PostChaosSchedule_570817(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostChaosSchedule_570816(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570818 = query.getOrDefault("timeout")
  valid_570818 = validateParameter(valid_570818, JInt, required = false,
                                 default = newJInt(60))
  if valid_570818 != nil:
    section.add "timeout", valid_570818
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570819 = query.getOrDefault("api-version")
  valid_570819 = validateParameter(valid_570819, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570819 != nil:
    section.add "api-version", valid_570819
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570821: Call_PostChaosSchedule_570815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  let valid = call_570821.validator(path, query, header, formData, body)
  let scheme = call_570821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570821.url(scheme.get, call_570821.host, call_570821.base,
                         call_570821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570821, url, valid)

proc call*(call_570822: Call_PostChaosSchedule_570815; ChaosSchedule: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## postChaosSchedule
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  var query_570823 = newJObject()
  var body_570824 = newJObject()
  add(query_570823, "timeout", newJInt(timeout))
  add(query_570823, "api-version", newJString(apiVersion))
  if ChaosSchedule != nil:
    body_570824 = ChaosSchedule
  result = call_570822.call(nil, query_570823, nil, nil, body_570824)

var postChaosSchedule* = Call_PostChaosSchedule_570815(name: "postChaosSchedule",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_PostChaosSchedule_570816,
    base: "", url: url_PostChaosSchedule_570817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosSchedule_570807 = ref object of OpenApiRestCall_567668
proc url_GetChaosSchedule_570809(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosSchedule_570808(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570810 = query.getOrDefault("timeout")
  valid_570810 = validateParameter(valid_570810, JInt, required = false,
                                 default = newJInt(60))
  if valid_570810 != nil:
    section.add "timeout", valid_570810
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570811 = query.getOrDefault("api-version")
  valid_570811 = validateParameter(valid_570811, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570811 != nil:
    section.add "api-version", valid_570811
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570812: Call_GetChaosSchedule_570807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  let valid = call_570812.validator(path, query, header, formData, body)
  let scheme = call_570812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570812.url(scheme.get, call_570812.host, call_570812.base,
                         call_570812.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570812, url, valid)

proc call*(call_570813: Call_GetChaosSchedule_570807; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaosSchedule
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_570814 = newJObject()
  add(query_570814, "timeout", newJInt(timeout))
  add(query_570814, "api-version", newJString(apiVersion))
  result = call_570813.call(nil, query_570814, nil, nil, nil)

var getChaosSchedule* = Call_GetChaosSchedule_570807(name: "getChaosSchedule",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_GetChaosSchedule_570808,
    base: "", url: url_GetChaosSchedule_570809, schemes: {Scheme.Https, Scheme.Http})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
