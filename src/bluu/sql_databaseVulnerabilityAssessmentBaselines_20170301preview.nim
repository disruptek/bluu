
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: SqlManagementClient
## version: 2017-03-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593408 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593408](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593408): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "sql-databaseVulnerabilityAssessmentBaselines"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593961 = ref object of OpenApiRestCall_593408
proc url_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593963(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "ruleId" in path, "`ruleId` is a required path parameter"
  assert "baselineName" in path, "`baselineName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleId"),
               (kind: ConstantSegment, value: "/baselines/"),
               (kind: VariableSegment, value: "baselineName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593962(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates or updates a database's vulnerability assessment rule baseline.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   baselineName: JString (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: JString (required)
  ##         : The vulnerability assessment rule ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593964 = path.getOrDefault("resourceGroupName")
  valid_593964 = validateParameter(valid_593964, JString, required = true,
                                 default = nil)
  if valid_593964 != nil:
    section.add "resourceGroupName", valid_593964
  var valid_593965 = path.getOrDefault("baselineName")
  valid_593965 = validateParameter(valid_593965, JString, required = true,
                                 default = newJString("master"))
  if valid_593965 != nil:
    section.add "baselineName", valid_593965
  var valid_593966 = path.getOrDefault("serverName")
  valid_593966 = validateParameter(valid_593966, JString, required = true,
                                 default = nil)
  if valid_593966 != nil:
    section.add "serverName", valid_593966
  var valid_593967 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_593967 = validateParameter(valid_593967, JString, required = true,
                                 default = newJString("default"))
  if valid_593967 != nil:
    section.add "vulnerabilityAssessmentName", valid_593967
  var valid_593968 = path.getOrDefault("subscriptionId")
  valid_593968 = validateParameter(valid_593968, JString, required = true,
                                 default = nil)
  if valid_593968 != nil:
    section.add "subscriptionId", valid_593968
  var valid_593969 = path.getOrDefault("databaseName")
  valid_593969 = validateParameter(valid_593969, JString, required = true,
                                 default = nil)
  if valid_593969 != nil:
    section.add "databaseName", valid_593969
  var valid_593970 = path.getOrDefault("ruleId")
  valid_593970 = validateParameter(valid_593970, JString, required = true,
                                 default = nil)
  if valid_593970 != nil:
    section.add "ruleId", valid_593970
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593971 = query.getOrDefault("api-version")
  valid_593971 = validateParameter(valid_593971, JString, required = true,
                                 default = nil)
  if valid_593971 != nil:
    section.add "api-version", valid_593971
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : The requested rule baseline resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593973: Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593961;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates a database's vulnerability assessment rule baseline.
  ## 
  let valid = call_593973.validator(path, query, header, formData, body)
  let scheme = call_593973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593973.url(scheme.get, call_593973.host, call_593973.base,
                         call_593973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593973, url, valid)

proc call*(call_593974: Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593961;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string; ruleId: string;
          parameters: JsonNode; baselineName: string = "master";
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate
  ## Creates or updates a database's vulnerability assessment rule baseline.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   baselineName: string (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: string (required)
  ##         : The vulnerability assessment rule ID.
  ##   parameters: JObject (required)
  ##             : The requested rule baseline resource.
  var path_593975 = newJObject()
  var query_593976 = newJObject()
  var body_593977 = newJObject()
  add(path_593975, "resourceGroupName", newJString(resourceGroupName))
  add(query_593976, "api-version", newJString(apiVersion))
  add(path_593975, "baselineName", newJString(baselineName))
  add(path_593975, "serverName", newJString(serverName))
  add(path_593975, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_593975, "subscriptionId", newJString(subscriptionId))
  add(path_593975, "databaseName", newJString(databaseName))
  add(path_593975, "ruleId", newJString(ruleId))
  if parameters != nil:
    body_593977 = parameters
  result = call_593974.call(path_593975, query_593976, nil, nil, body_593977)

var databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate* = Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593961(
    name: "databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}", validator: validate_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593962,
    base: "", url: url_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_593963,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593630 = ref object of OpenApiRestCall_593408
proc url_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593632(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "ruleId" in path, "`ruleId` is a required path parameter"
  assert "baselineName" in path, "`baselineName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleId"),
               (kind: ConstantSegment, value: "/baselines/"),
               (kind: VariableSegment, value: "baselineName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593631(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets a database's vulnerability assessment rule baseline.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   baselineName: JString (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: JString (required)
  ##         : The vulnerability assessment rule ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593805 = path.getOrDefault("resourceGroupName")
  valid_593805 = validateParameter(valid_593805, JString, required = true,
                                 default = nil)
  if valid_593805 != nil:
    section.add "resourceGroupName", valid_593805
  var valid_593819 = path.getOrDefault("baselineName")
  valid_593819 = validateParameter(valid_593819, JString, required = true,
                                 default = newJString("master"))
  if valid_593819 != nil:
    section.add "baselineName", valid_593819
  var valid_593820 = path.getOrDefault("serverName")
  valid_593820 = validateParameter(valid_593820, JString, required = true,
                                 default = nil)
  if valid_593820 != nil:
    section.add "serverName", valid_593820
  var valid_593821 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_593821 = validateParameter(valid_593821, JString, required = true,
                                 default = newJString("default"))
  if valid_593821 != nil:
    section.add "vulnerabilityAssessmentName", valid_593821
  var valid_593822 = path.getOrDefault("subscriptionId")
  valid_593822 = validateParameter(valid_593822, JString, required = true,
                                 default = nil)
  if valid_593822 != nil:
    section.add "subscriptionId", valid_593822
  var valid_593823 = path.getOrDefault("databaseName")
  valid_593823 = validateParameter(valid_593823, JString, required = true,
                                 default = nil)
  if valid_593823 != nil:
    section.add "databaseName", valid_593823
  var valid_593824 = path.getOrDefault("ruleId")
  valid_593824 = validateParameter(valid_593824, JString, required = true,
                                 default = nil)
  if valid_593824 != nil:
    section.add "ruleId", valid_593824
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593825 = query.getOrDefault("api-version")
  valid_593825 = validateParameter(valid_593825, JString, required = true,
                                 default = nil)
  if valid_593825 != nil:
    section.add "api-version", valid_593825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593848: Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593630;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a database's vulnerability assessment rule baseline.
  ## 
  let valid = call_593848.validator(path, query, header, formData, body)
  let scheme = call_593848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593848.url(scheme.get, call_593848.host, call_593848.base,
                         call_593848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593848, url, valid)

proc call*(call_593919: Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593630;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string; ruleId: string;
          baselineName: string = "master";
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentRuleBaselinesGet
  ## Gets a database's vulnerability assessment rule baseline.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   baselineName: string (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: string (required)
  ##         : The vulnerability assessment rule ID.
  var path_593920 = newJObject()
  var query_593922 = newJObject()
  add(path_593920, "resourceGroupName", newJString(resourceGroupName))
  add(query_593922, "api-version", newJString(apiVersion))
  add(path_593920, "baselineName", newJString(baselineName))
  add(path_593920, "serverName", newJString(serverName))
  add(path_593920, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_593920, "subscriptionId", newJString(subscriptionId))
  add(path_593920, "databaseName", newJString(databaseName))
  add(path_593920, "ruleId", newJString(ruleId))
  result = call_593919.call(path_593920, query_593922, nil, nil, nil)

var databaseVulnerabilityAssessmentRuleBaselinesGet* = Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593630(
    name: "databaseVulnerabilityAssessmentRuleBaselinesGet",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
    validator: validate_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593631,
    base: "", url: url_DatabaseVulnerabilityAssessmentRuleBaselinesGet_593632,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593978 = ref object of OpenApiRestCall_593408
proc url_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593980(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "ruleId" in path, "`ruleId` is a required path parameter"
  assert "baselineName" in path, "`baselineName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleId"),
               (kind: ConstantSegment, value: "/baselines/"),
               (kind: VariableSegment, value: "baselineName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593979(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Removes the database's vulnerability assessment rule baseline.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   baselineName: JString (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: JString (required)
  ##         : The vulnerability assessment rule ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593981 = path.getOrDefault("resourceGroupName")
  valid_593981 = validateParameter(valid_593981, JString, required = true,
                                 default = nil)
  if valid_593981 != nil:
    section.add "resourceGroupName", valid_593981
  var valid_593982 = path.getOrDefault("baselineName")
  valid_593982 = validateParameter(valid_593982, JString, required = true,
                                 default = newJString("master"))
  if valid_593982 != nil:
    section.add "baselineName", valid_593982
  var valid_593983 = path.getOrDefault("serverName")
  valid_593983 = validateParameter(valid_593983, JString, required = true,
                                 default = nil)
  if valid_593983 != nil:
    section.add "serverName", valid_593983
  var valid_593984 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_593984 = validateParameter(valid_593984, JString, required = true,
                                 default = newJString("default"))
  if valid_593984 != nil:
    section.add "vulnerabilityAssessmentName", valid_593984
  var valid_593985 = path.getOrDefault("subscriptionId")
  valid_593985 = validateParameter(valid_593985, JString, required = true,
                                 default = nil)
  if valid_593985 != nil:
    section.add "subscriptionId", valid_593985
  var valid_593986 = path.getOrDefault("databaseName")
  valid_593986 = validateParameter(valid_593986, JString, required = true,
                                 default = nil)
  if valid_593986 != nil:
    section.add "databaseName", valid_593986
  var valid_593987 = path.getOrDefault("ruleId")
  valid_593987 = validateParameter(valid_593987, JString, required = true,
                                 default = nil)
  if valid_593987 != nil:
    section.add "ruleId", valid_593987
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593988 = query.getOrDefault("api-version")
  valid_593988 = validateParameter(valid_593988, JString, required = true,
                                 default = nil)
  if valid_593988 != nil:
    section.add "api-version", valid_593988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593989: Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593978;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes the database's vulnerability assessment rule baseline.
  ## 
  let valid = call_593989.validator(path, query, header, formData, body)
  let scheme = call_593989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593989.url(scheme.get, call_593989.host, call_593989.base,
                         call_593989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593989, url, valid)

proc call*(call_593990: Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593978;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string; ruleId: string;
          baselineName: string = "master";
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentRuleBaselinesDelete
  ## Removes the database's vulnerability assessment rule baseline.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   baselineName: string (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: string (required)
  ##         : The vulnerability assessment rule ID.
  var path_593991 = newJObject()
  var query_593992 = newJObject()
  add(path_593991, "resourceGroupName", newJString(resourceGroupName))
  add(query_593992, "api-version", newJString(apiVersion))
  add(path_593991, "baselineName", newJString(baselineName))
  add(path_593991, "serverName", newJString(serverName))
  add(path_593991, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_593991, "subscriptionId", newJString(subscriptionId))
  add(path_593991, "databaseName", newJString(databaseName))
  add(path_593991, "ruleId", newJString(ruleId))
  result = call_593990.call(path_593991, query_593992, nil, nil, nil)

var databaseVulnerabilityAssessmentRuleBaselinesDelete* = Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593978(
    name: "databaseVulnerabilityAssessmentRuleBaselinesDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
    validator: validate_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593979,
    base: "", url: url_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_593980,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
