
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: SqlManagementClient
## version: 2017-03-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567641 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567641](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567641): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "sql-databaseVulnerabilityAssessmentBaselines"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568194 = ref object of OpenApiRestCall_567641
proc url_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568196(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "ruleId" in path, "`ruleId` is a required path parameter"
  assert "baselineName" in path, "`baselineName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleId"),
               (kind: ConstantSegment, value: "/baselines/"),
               (kind: VariableSegment, value: "baselineName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568195(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates or updates a database's vulnerability assessment rule baseline.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   baselineName: JString (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: JString (required)
  ##         : The vulnerability assessment rule ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568197 = path.getOrDefault("resourceGroupName")
  valid_568197 = validateParameter(valid_568197, JString, required = true,
                                 default = nil)
  if valid_568197 != nil:
    section.add "resourceGroupName", valid_568197
  var valid_568198 = path.getOrDefault("baselineName")
  valid_568198 = validateParameter(valid_568198, JString, required = true,
                                 default = newJString("master"))
  if valid_568198 != nil:
    section.add "baselineName", valid_568198
  var valid_568199 = path.getOrDefault("serverName")
  valid_568199 = validateParameter(valid_568199, JString, required = true,
                                 default = nil)
  if valid_568199 != nil:
    section.add "serverName", valid_568199
  var valid_568200 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568200 = validateParameter(valid_568200, JString, required = true,
                                 default = newJString("default"))
  if valid_568200 != nil:
    section.add "vulnerabilityAssessmentName", valid_568200
  var valid_568201 = path.getOrDefault("subscriptionId")
  valid_568201 = validateParameter(valid_568201, JString, required = true,
                                 default = nil)
  if valid_568201 != nil:
    section.add "subscriptionId", valid_568201
  var valid_568202 = path.getOrDefault("databaseName")
  valid_568202 = validateParameter(valid_568202, JString, required = true,
                                 default = nil)
  if valid_568202 != nil:
    section.add "databaseName", valid_568202
  var valid_568203 = path.getOrDefault("ruleId")
  valid_568203 = validateParameter(valid_568203, JString, required = true,
                                 default = nil)
  if valid_568203 != nil:
    section.add "ruleId", valid_568203
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568204 = query.getOrDefault("api-version")
  valid_568204 = validateParameter(valid_568204, JString, required = true,
                                 default = nil)
  if valid_568204 != nil:
    section.add "api-version", valid_568204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : The requested rule baseline resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568206: Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates or updates a database's vulnerability assessment rule baseline.
  ## 
  let valid = call_568206.validator(path, query, header, formData, body)
  let scheme = call_568206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568206.url(scheme.get, call_568206.host, call_568206.base,
                         call_568206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568206, url, valid)

proc call*(call_568207: Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568194;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string; ruleId: string;
          parameters: JsonNode; baselineName: string = "master";
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate
  ## Creates or updates a database's vulnerability assessment rule baseline.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   baselineName: string (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: string (required)
  ##         : The vulnerability assessment rule ID.
  ##   parameters: JObject (required)
  ##             : The requested rule baseline resource.
  var path_568208 = newJObject()
  var query_568209 = newJObject()
  var body_568210 = newJObject()
  add(path_568208, "resourceGroupName", newJString(resourceGroupName))
  add(query_568209, "api-version", newJString(apiVersion))
  add(path_568208, "baselineName", newJString(baselineName))
  add(path_568208, "serverName", newJString(serverName))
  add(path_568208, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568208, "subscriptionId", newJString(subscriptionId))
  add(path_568208, "databaseName", newJString(databaseName))
  add(path_568208, "ruleId", newJString(ruleId))
  if parameters != nil:
    body_568210 = parameters
  result = call_568207.call(path_568208, query_568209, nil, nil, body_568210)

var databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate* = Call_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568194(
    name: "databaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}", validator: validate_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568195,
    base: "", url: url_DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate_568196,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567863 = ref object of OpenApiRestCall_567641
proc url_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567865(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "ruleId" in path, "`ruleId` is a required path parameter"
  assert "baselineName" in path, "`baselineName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleId"),
               (kind: ConstantSegment, value: "/baselines/"),
               (kind: VariableSegment, value: "baselineName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567864(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets a database's vulnerability assessment rule baseline.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   baselineName: JString (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: JString (required)
  ##         : The vulnerability assessment rule ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568038 = path.getOrDefault("resourceGroupName")
  valid_568038 = validateParameter(valid_568038, JString, required = true,
                                 default = nil)
  if valid_568038 != nil:
    section.add "resourceGroupName", valid_568038
  var valid_568052 = path.getOrDefault("baselineName")
  valid_568052 = validateParameter(valid_568052, JString, required = true,
                                 default = newJString("master"))
  if valid_568052 != nil:
    section.add "baselineName", valid_568052
  var valid_568053 = path.getOrDefault("serverName")
  valid_568053 = validateParameter(valid_568053, JString, required = true,
                                 default = nil)
  if valid_568053 != nil:
    section.add "serverName", valid_568053
  var valid_568054 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568054 = validateParameter(valid_568054, JString, required = true,
                                 default = newJString("default"))
  if valid_568054 != nil:
    section.add "vulnerabilityAssessmentName", valid_568054
  var valid_568055 = path.getOrDefault("subscriptionId")
  valid_568055 = validateParameter(valid_568055, JString, required = true,
                                 default = nil)
  if valid_568055 != nil:
    section.add "subscriptionId", valid_568055
  var valid_568056 = path.getOrDefault("databaseName")
  valid_568056 = validateParameter(valid_568056, JString, required = true,
                                 default = nil)
  if valid_568056 != nil:
    section.add "databaseName", valid_568056
  var valid_568057 = path.getOrDefault("ruleId")
  valid_568057 = validateParameter(valid_568057, JString, required = true,
                                 default = nil)
  if valid_568057 != nil:
    section.add "ruleId", valid_568057
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568058 = query.getOrDefault("api-version")
  valid_568058 = validateParameter(valid_568058, JString, required = true,
                                 default = nil)
  if valid_568058 != nil:
    section.add "api-version", valid_568058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568081: Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a database's vulnerability assessment rule baseline.
  ## 
  let valid = call_568081.validator(path, query, header, formData, body)
  let scheme = call_568081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568081.url(scheme.get, call_568081.host, call_568081.base,
                         call_568081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568081, url, valid)

proc call*(call_568152: Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567863;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string; ruleId: string;
          baselineName: string = "master";
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentRuleBaselinesGet
  ## Gets a database's vulnerability assessment rule baseline.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   baselineName: string (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: string (required)
  ##         : The vulnerability assessment rule ID.
  var path_568153 = newJObject()
  var query_568155 = newJObject()
  add(path_568153, "resourceGroupName", newJString(resourceGroupName))
  add(query_568155, "api-version", newJString(apiVersion))
  add(path_568153, "baselineName", newJString(baselineName))
  add(path_568153, "serverName", newJString(serverName))
  add(path_568153, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568153, "subscriptionId", newJString(subscriptionId))
  add(path_568153, "databaseName", newJString(databaseName))
  add(path_568153, "ruleId", newJString(ruleId))
  result = call_568152.call(path_568153, query_568155, nil, nil, nil)

var databaseVulnerabilityAssessmentRuleBaselinesGet* = Call_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567863(
    name: "databaseVulnerabilityAssessmentRuleBaselinesGet",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
    validator: validate_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567864,
    base: "", url: url_DatabaseVulnerabilityAssessmentRuleBaselinesGet_567865,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568211 = ref object of OpenApiRestCall_567641
proc url_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568213(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "ruleId" in path, "`ruleId` is a required path parameter"
  assert "baselineName" in path, "`baselineName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleId"),
               (kind: ConstantSegment, value: "/baselines/"),
               (kind: VariableSegment, value: "baselineName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568212(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Removes the database's vulnerability assessment rule baseline.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   baselineName: JString (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: JString (required)
  ##         : The vulnerability assessment rule ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568214 = path.getOrDefault("resourceGroupName")
  valid_568214 = validateParameter(valid_568214, JString, required = true,
                                 default = nil)
  if valid_568214 != nil:
    section.add "resourceGroupName", valid_568214
  var valid_568215 = path.getOrDefault("baselineName")
  valid_568215 = validateParameter(valid_568215, JString, required = true,
                                 default = newJString("master"))
  if valid_568215 != nil:
    section.add "baselineName", valid_568215
  var valid_568216 = path.getOrDefault("serverName")
  valid_568216 = validateParameter(valid_568216, JString, required = true,
                                 default = nil)
  if valid_568216 != nil:
    section.add "serverName", valid_568216
  var valid_568217 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568217 = validateParameter(valid_568217, JString, required = true,
                                 default = newJString("default"))
  if valid_568217 != nil:
    section.add "vulnerabilityAssessmentName", valid_568217
  var valid_568218 = path.getOrDefault("subscriptionId")
  valid_568218 = validateParameter(valid_568218, JString, required = true,
                                 default = nil)
  if valid_568218 != nil:
    section.add "subscriptionId", valid_568218
  var valid_568219 = path.getOrDefault("databaseName")
  valid_568219 = validateParameter(valid_568219, JString, required = true,
                                 default = nil)
  if valid_568219 != nil:
    section.add "databaseName", valid_568219
  var valid_568220 = path.getOrDefault("ruleId")
  valid_568220 = validateParameter(valid_568220, JString, required = true,
                                 default = nil)
  if valid_568220 != nil:
    section.add "ruleId", valid_568220
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568221 = query.getOrDefault("api-version")
  valid_568221 = validateParameter(valid_568221, JString, required = true,
                                 default = nil)
  if valid_568221 != nil:
    section.add "api-version", valid_568221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568222: Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568211;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes the database's vulnerability assessment rule baseline.
  ## 
  let valid = call_568222.validator(path, query, header, formData, body)
  let scheme = call_568222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568222.url(scheme.get, call_568222.host, call_568222.base,
                         call_568222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568222, url, valid)

proc call*(call_568223: Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568211;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string; ruleId: string;
          baselineName: string = "master";
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentRuleBaselinesDelete
  ## Removes the database's vulnerability assessment rule baseline.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   baselineName: string (required)
  ##               : The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database for which the vulnerability assessment rule baseline is defined.
  ##   ruleId: string (required)
  ##         : The vulnerability assessment rule ID.
  var path_568224 = newJObject()
  var query_568225 = newJObject()
  add(path_568224, "resourceGroupName", newJString(resourceGroupName))
  add(query_568225, "api-version", newJString(apiVersion))
  add(path_568224, "baselineName", newJString(baselineName))
  add(path_568224, "serverName", newJString(serverName))
  add(path_568224, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568224, "subscriptionId", newJString(subscriptionId))
  add(path_568224, "databaseName", newJString(databaseName))
  add(path_568224, "ruleId", newJString(ruleId))
  result = call_568223.call(path_568224, query_568225, nil, nil, nil)

var databaseVulnerabilityAssessmentRuleBaselinesDelete* = Call_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568211(
    name: "databaseVulnerabilityAssessmentRuleBaselinesDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
    validator: validate_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568212,
    base: "", url: url_DatabaseVulnerabilityAssessmentRuleBaselinesDelete_568213,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
