
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: Service Fabric Client APIs
## version: 6.4.0.36
## termsOfService: (not provided)
## license: (not provided)
## 
## Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593439 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593439](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593439): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "servicefabric"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_CancelRepairTask_593661 = ref object of OpenApiRestCall_593439
proc url_CancelRepairTask_593663(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelRepairTask_593662(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593852 = query.getOrDefault("api-version")
  valid_593852 = validateParameter(valid_593852, JString, required = true,
                                 default = newJString("6.0"))
  if valid_593852 != nil:
    section.add "api-version", valid_593852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593876: Call_CancelRepairTask_593661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_593876.validator(path, query, header, formData, body)
  let scheme = call_593876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593876.url(scheme.get, call_593876.host, call_593876.base,
                         call_593876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593876, url, valid)

proc call*(call_593947: Call_CancelRepairTask_593661;
          RepairTaskCancelDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## cancelRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  var query_593948 = newJObject()
  var body_593950 = newJObject()
  add(query_593948, "api-version", newJString(apiVersion))
  if RepairTaskCancelDescription != nil:
    body_593950 = RepairTaskCancelDescription
  result = call_593947.call(nil, query_593948, nil, nil, body_593950)

var cancelRepairTask* = Call_CancelRepairTask_593661(name: "cancelRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CancelRepairTask", validator: validate_CancelRepairTask_593662,
    base: "", url: url_CancelRepairTask_593663, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRepairTask_593989 = ref object of OpenApiRestCall_593439
proc url_CreateRepairTask_593991(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateRepairTask_593990(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593992 = query.getOrDefault("api-version")
  valid_593992 = validateParameter(valid_593992, JString, required = true,
                                 default = newJString("6.0"))
  if valid_593992 != nil:
    section.add "api-version", valid_593992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_593994: Call_CreateRepairTask_593989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_593994.validator(path, query, header, formData, body)
  let scheme = call_593994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593994.url(scheme.get, call_593994.host, call_593994.base,
                         call_593994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593994, url, valid)

proc call*(call_593995: Call_CreateRepairTask_593989; RepairTask: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## createRepairTask
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_593996 = newJObject()
  var body_593997 = newJObject()
  if RepairTask != nil:
    body_593997 = RepairTask
  add(query_593996, "api-version", newJString(apiVersion))
  result = call_593995.call(nil, query_593996, nil, nil, body_593997)

var createRepairTask* = Call_CreateRepairTask_593989(name: "createRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CreateRepairTask", validator: validate_CreateRepairTask_593990,
    base: "", url: url_CreateRepairTask_593991, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRepairTask_593998 = ref object of OpenApiRestCall_593439
proc url_DeleteRepairTask_594000(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteRepairTask_593999(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594001 = query.getOrDefault("api-version")
  valid_594001 = validateParameter(valid_594001, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594001 != nil:
    section.add "api-version", valid_594001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594003: Call_DeleteRepairTask_593998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594003.validator(path, query, header, formData, body)
  let scheme = call_594003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594003.url(scheme.get, call_594003.host, call_594003.base,
                         call_594003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594003, url, valid)

proc call*(call_594004: Call_DeleteRepairTask_593998;
          RepairTaskDeleteDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## deleteRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  var query_594005 = newJObject()
  var body_594006 = newJObject()
  add(query_594005, "api-version", newJString(apiVersion))
  if RepairTaskDeleteDescription != nil:
    body_594006 = RepairTaskDeleteDescription
  result = call_594004.call(nil, query_594005, nil, nil, body_594006)

var deleteRepairTask* = Call_DeleteRepairTask_593998(name: "deleteRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/DeleteRepairTask", validator: validate_DeleteRepairTask_593999,
    base: "", url: url_DeleteRepairTask_594000, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ForceApproveRepairTask_594007 = ref object of OpenApiRestCall_593439
proc url_ForceApproveRepairTask_594009(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ForceApproveRepairTask_594008(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594010 = query.getOrDefault("api-version")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594010 != nil:
    section.add "api-version", valid_594010
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594012: Call_ForceApproveRepairTask_594007; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594012.validator(path, query, header, formData, body)
  let scheme = call_594012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594012.url(scheme.get, call_594012.host, call_594012.base,
                         call_594012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594012, url, valid)

proc call*(call_594013: Call_ForceApproveRepairTask_594007;
          RepairTaskApproveDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## forceApproveRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  var query_594014 = newJObject()
  var body_594015 = newJObject()
  add(query_594014, "api-version", newJString(apiVersion))
  if RepairTaskApproveDescription != nil:
    body_594015 = RepairTaskApproveDescription
  result = call_594013.call(nil, query_594014, nil, nil, body_594015)

var forceApproveRepairTask* = Call_ForceApproveRepairTask_594007(
    name: "forceApproveRepairTask", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ForceApproveRepairTask",
    validator: validate_ForceApproveRepairTask_594008, base: "",
    url: url_ForceApproveRepairTask_594009, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAadMetadata_594016 = ref object of OpenApiRestCall_593439
proc url_GetAadMetadata_594018(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAadMetadata_594017(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594020 = query.getOrDefault("timeout")
  valid_594020 = validateParameter(valid_594020, JInt, required = false,
                                 default = newJInt(60))
  if valid_594020 != nil:
    section.add "timeout", valid_594020
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594021 = query.getOrDefault("api-version")
  valid_594021 = validateParameter(valid_594021, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594021 != nil:
    section.add "api-version", valid_594021
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594022: Call_GetAadMetadata_594016; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  let valid = call_594022.validator(path, query, header, formData, body)
  let scheme = call_594022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594022.url(scheme.get, call_594022.host, call_594022.base,
                         call_594022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594022, url, valid)

proc call*(call_594023: Call_GetAadMetadata_594016; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getAadMetadata
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594024 = newJObject()
  add(query_594024, "timeout", newJInt(timeout))
  add(query_594024, "api-version", newJString(apiVersion))
  result = call_594023.call(nil, query_594024, nil, nil, nil)

var getAadMetadata* = Call_GetAadMetadata_594016(name: "getAadMetadata",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/$/GetAadMetadata",
    validator: validate_GetAadMetadata_594017, base: "", url: url_GetAadMetadata_594018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfiguration_594025 = ref object of OpenApiRestCall_593439
proc url_GetClusterConfiguration_594027(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfiguration_594026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: JString (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594028 = query.getOrDefault("timeout")
  valid_594028 = validateParameter(valid_594028, JInt, required = false,
                                 default = newJInt(60))
  if valid_594028 != nil:
    section.add "timeout", valid_594028
  assert query != nil, "query argument is necessary due to required `ConfigurationApiVersion` field"
  var valid_594029 = query.getOrDefault("ConfigurationApiVersion")
  valid_594029 = validateParameter(valid_594029, JString, required = true,
                                 default = nil)
  if valid_594029 != nil:
    section.add "ConfigurationApiVersion", valid_594029
  var valid_594030 = query.getOrDefault("api-version")
  valid_594030 = validateParameter(valid_594030, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594030 != nil:
    section.add "api-version", valid_594030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594031: Call_GetClusterConfiguration_594025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  let valid = call_594031.validator(path, query, header, formData, body)
  let scheme = call_594031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594031.url(scheme.get, call_594031.host, call_594031.base,
                         call_594031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594031, url, valid)

proc call*(call_594032: Call_GetClusterConfiguration_594025;
          ConfigurationApiVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterConfiguration
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: string (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594033 = newJObject()
  add(query_594033, "timeout", newJInt(timeout))
  add(query_594033, "ConfigurationApiVersion", newJString(ConfigurationApiVersion))
  add(query_594033, "api-version", newJString(apiVersion))
  result = call_594032.call(nil, query_594033, nil, nil, nil)

var getClusterConfiguration* = Call_GetClusterConfiguration_594025(
    name: "getClusterConfiguration", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfiguration",
    validator: validate_GetClusterConfiguration_594026, base: "",
    url: url_GetClusterConfiguration_594027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfigurationUpgradeStatus_594034 = ref object of OpenApiRestCall_593439
proc url_GetClusterConfigurationUpgradeStatus_594036(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfigurationUpgradeStatus_594035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594037 = query.getOrDefault("timeout")
  valid_594037 = validateParameter(valid_594037, JInt, required = false,
                                 default = newJInt(60))
  if valid_594037 != nil:
    section.add "timeout", valid_594037
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594038 = query.getOrDefault("api-version")
  valid_594038 = validateParameter(valid_594038, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594038 != nil:
    section.add "api-version", valid_594038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594039: Call_GetClusterConfigurationUpgradeStatus_594034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  let valid = call_594039.validator(path, query, header, formData, body)
  let scheme = call_594039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594039.url(scheme.get, call_594039.host, call_594039.base,
                         call_594039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594039, url, valid)

proc call*(call_594040: Call_GetClusterConfigurationUpgradeStatus_594034;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getClusterConfigurationUpgradeStatus
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594041 = newJObject()
  add(query_594041, "timeout", newJInt(timeout))
  add(query_594041, "api-version", newJString(apiVersion))
  result = call_594040.call(nil, query_594041, nil, nil, nil)

var getClusterConfigurationUpgradeStatus* = Call_GetClusterConfigurationUpgradeStatus_594034(
    name: "getClusterConfigurationUpgradeStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfigurationUpgradeStatus",
    validator: validate_GetClusterConfigurationUpgradeStatus_594035, base: "",
    url: url_GetClusterConfigurationUpgradeStatus_594036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthUsingPolicy_594055 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealthUsingPolicy_594057(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthUsingPolicy_594056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594058 = query.getOrDefault("timeout")
  valid_594058 = validateParameter(valid_594058, JInt, required = false,
                                 default = newJInt(60))
  if valid_594058 != nil:
    section.add "timeout", valid_594058
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594059 = query.getOrDefault("api-version")
  valid_594059 = validateParameter(valid_594059, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594059 != nil:
    section.add "api-version", valid_594059
  var valid_594060 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_594060 = validateParameter(valid_594060, JInt, required = false,
                                 default = newJInt(0))
  if valid_594060 != nil:
    section.add "ApplicationsHealthStateFilter", valid_594060
  var valid_594061 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_594061 = validateParameter(valid_594061, JBool, required = false,
                                 default = newJBool(false))
  if valid_594061 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_594061
  var valid_594062 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594062 = validateParameter(valid_594062, JBool, required = false,
                                 default = newJBool(false))
  if valid_594062 != nil:
    section.add "ExcludeHealthStatistics", valid_594062
  var valid_594063 = query.getOrDefault("EventsHealthStateFilter")
  valid_594063 = validateParameter(valid_594063, JInt, required = false,
                                 default = newJInt(0))
  if valid_594063 != nil:
    section.add "EventsHealthStateFilter", valid_594063
  var valid_594064 = query.getOrDefault("NodesHealthStateFilter")
  valid_594064 = validateParameter(valid_594064, JInt, required = false,
                                 default = newJInt(0))
  if valid_594064 != nil:
    section.add "NodesHealthStateFilter", valid_594064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594066: Call_GetClusterHealthUsingPolicy_594055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_594066.validator(path, query, header, formData, body)
  let scheme = call_594066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594066.url(scheme.get, call_594066.host, call_594066.base,
                         call_594066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594066, url, valid)

proc call*(call_594067: Call_GetClusterHealthUsingPolicy_594055; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ClusterHealthPolicies: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealthUsingPolicy
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_594068 = newJObject()
  var body_594069 = newJObject()
  add(query_594068, "timeout", newJInt(timeout))
  add(query_594068, "api-version", newJString(apiVersion))
  add(query_594068, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_594068, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  if ClusterHealthPolicies != nil:
    body_594069 = ClusterHealthPolicies
  add(query_594068, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594068, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_594068, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_594067.call(nil, query_594068, nil, nil, body_594069)

var getClusterHealthUsingPolicy* = Call_GetClusterHealthUsingPolicy_594055(
    name: "getClusterHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/GetClusterHealth",
    validator: validate_GetClusterHealthUsingPolicy_594056, base: "",
    url: url_GetClusterHealthUsingPolicy_594057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealth_594042 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealth_594044(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealth_594043(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594045 = query.getOrDefault("timeout")
  valid_594045 = validateParameter(valid_594045, JInt, required = false,
                                 default = newJInt(60))
  if valid_594045 != nil:
    section.add "timeout", valid_594045
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594046 = query.getOrDefault("api-version")
  valid_594046 = validateParameter(valid_594046, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594046 != nil:
    section.add "api-version", valid_594046
  var valid_594047 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_594047 = validateParameter(valid_594047, JInt, required = false,
                                 default = newJInt(0))
  if valid_594047 != nil:
    section.add "ApplicationsHealthStateFilter", valid_594047
  var valid_594048 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_594048 = validateParameter(valid_594048, JBool, required = false,
                                 default = newJBool(false))
  if valid_594048 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_594048
  var valid_594049 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594049 = validateParameter(valid_594049, JBool, required = false,
                                 default = newJBool(false))
  if valid_594049 != nil:
    section.add "ExcludeHealthStatistics", valid_594049
  var valid_594050 = query.getOrDefault("EventsHealthStateFilter")
  valid_594050 = validateParameter(valid_594050, JInt, required = false,
                                 default = newJInt(0))
  if valid_594050 != nil:
    section.add "EventsHealthStateFilter", valid_594050
  var valid_594051 = query.getOrDefault("NodesHealthStateFilter")
  valid_594051 = validateParameter(valid_594051, JInt, required = false,
                                 default = newJInt(0))
  if valid_594051 != nil:
    section.add "NodesHealthStateFilter", valid_594051
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594052: Call_GetClusterHealth_594042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  let valid = call_594052.validator(path, query, header, formData, body)
  let scheme = call_594052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594052.url(scheme.get, call_594052.host, call_594052.base,
                         call_594052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594052, url, valid)

proc call*(call_594053: Call_GetClusterHealth_594042; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_594054 = newJObject()
  add(query_594054, "timeout", newJInt(timeout))
  add(query_594054, "api-version", newJString(apiVersion))
  add(query_594054, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_594054, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  add(query_594054, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594054, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_594054, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_594053.call(nil, query_594054, nil, nil, nil)

var getClusterHealth* = Call_GetClusterHealth_594042(name: "getClusterHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterHealth", validator: validate_GetClusterHealth_594043,
    base: "", url: url_GetClusterHealth_594044, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594080(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594079(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594081 = query.getOrDefault("timeout")
  valid_594081 = validateParameter(valid_594081, JInt, required = false,
                                 default = newJInt(60))
  if valid_594081 != nil:
    section.add "timeout", valid_594081
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594082 = query.getOrDefault("api-version")
  valid_594082 = validateParameter(valid_594082, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594082 != nil:
    section.add "api-version", valid_594082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594084: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  let valid = call_594084.validator(path, query, header, formData, body)
  let scheme = call_594084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594084.url(scheme.get, call_594084.host, call_594084.base,
                         call_594084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594084, url, valid)

proc call*(call_594085: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078;
          timeout: int = 60; apiVersion: string = "6.0";
          ClusterHealthChunkQueryDescription: JsonNode = nil): Recallable =
  ## getClusterHealthChunkUsingPolicyAndAdvancedFilters
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  var query_594086 = newJObject()
  var body_594087 = newJObject()
  add(query_594086, "timeout", newJInt(timeout))
  add(query_594086, "api-version", newJString(apiVersion))
  if ClusterHealthChunkQueryDescription != nil:
    body_594087 = ClusterHealthChunkQueryDescription
  result = call_594085.call(nil, query_594086, nil, nil, body_594087)

var getClusterHealthChunkUsingPolicyAndAdvancedFilters* = Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594078(
    name: "getClusterHealthChunkUsingPolicyAndAdvancedFilters",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594079,
    base: "", url: url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_594080,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunk_594070 = ref object of OpenApiRestCall_593439
proc url_GetClusterHealthChunk_594072(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunk_594071(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594073 = query.getOrDefault("timeout")
  valid_594073 = validateParameter(valid_594073, JInt, required = false,
                                 default = newJInt(60))
  if valid_594073 != nil:
    section.add "timeout", valid_594073
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594074 = query.getOrDefault("api-version")
  valid_594074 = validateParameter(valid_594074, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594074 != nil:
    section.add "api-version", valid_594074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594075: Call_GetClusterHealthChunk_594070; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  let valid = call_594075.validator(path, query, header, formData, body)
  let scheme = call_594075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594075.url(scheme.get, call_594075.host, call_594075.base,
                         call_594075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594075, url, valid)

proc call*(call_594076: Call_GetClusterHealthChunk_594070; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterHealthChunk
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594077 = newJObject()
  add(query_594077, "timeout", newJInt(timeout))
  add(query_594077, "api-version", newJString(apiVersion))
  result = call_594076.call(nil, query_594077, nil, nil, nil)

var getClusterHealthChunk* = Call_GetClusterHealthChunk_594070(
    name: "getClusterHealthChunk", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunk_594071, base: "",
    url: url_GetClusterHealthChunk_594072, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterManifest_594088 = ref object of OpenApiRestCall_593439
proc url_GetClusterManifest_594090(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterManifest_594089(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594091 = query.getOrDefault("timeout")
  valid_594091 = validateParameter(valid_594091, JInt, required = false,
                                 default = newJInt(60))
  if valid_594091 != nil:
    section.add "timeout", valid_594091
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594092 = query.getOrDefault("api-version")
  valid_594092 = validateParameter(valid_594092, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594092 != nil:
    section.add "api-version", valid_594092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594093: Call_GetClusterManifest_594088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  let valid = call_594093.validator(path, query, header, formData, body)
  let scheme = call_594093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594093.url(scheme.get, call_594093.host, call_594093.base,
                         call_594093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594093, url, valid)

proc call*(call_594094: Call_GetClusterManifest_594088; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterManifest
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594095 = newJObject()
  add(query_594095, "timeout", newJInt(timeout))
  add(query_594095, "api-version", newJString(apiVersion))
  result = call_594094.call(nil, query_594095, nil, nil, nil)

var getClusterManifest* = Call_GetClusterManifest_594088(
    name: "getClusterManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterManifest", validator: validate_GetClusterManifest_594089,
    base: "", url: url_GetClusterManifest_594090,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterVersion_594096 = ref object of OpenApiRestCall_593439
proc url_GetClusterVersion_594098(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterVersion_594097(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594099 = query.getOrDefault("timeout")
  valid_594099 = validateParameter(valid_594099, JInt, required = false,
                                 default = newJInt(60))
  if valid_594099 != nil:
    section.add "timeout", valid_594099
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594100 = query.getOrDefault("api-version")
  valid_594100 = validateParameter(valid_594100, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594100 != nil:
    section.add "api-version", valid_594100
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594101: Call_GetClusterVersion_594096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  let valid = call_594101.validator(path, query, header, formData, body)
  let scheme = call_594101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594101.url(scheme.get, call_594101.host, call_594101.base,
                         call_594101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594101, url, valid)

proc call*(call_594102: Call_GetClusterVersion_594096; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## getClusterVersion
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594103 = newJObject()
  add(query_594103, "timeout", newJInt(timeout))
  add(query_594103, "api-version", newJString(apiVersion))
  result = call_594102.call(nil, query_594103, nil, nil, nil)

var getClusterVersion* = Call_GetClusterVersion_594096(name: "getClusterVersion",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterVersion", validator: validate_GetClusterVersion_594097,
    base: "", url: url_GetClusterVersion_594098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricCodeVersionInfoList_594104 = ref object of OpenApiRestCall_593439
proc url_GetProvisionedFabricCodeVersionInfoList_594106(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricCodeVersionInfoList_594105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: JString
  ##              : The product version of Service Fabric.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594107 = query.getOrDefault("timeout")
  valid_594107 = validateParameter(valid_594107, JInt, required = false,
                                 default = newJInt(60))
  if valid_594107 != nil:
    section.add "timeout", valid_594107
  var valid_594108 = query.getOrDefault("CodeVersion")
  valid_594108 = validateParameter(valid_594108, JString, required = false,
                                 default = nil)
  if valid_594108 != nil:
    section.add "CodeVersion", valid_594108
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594109 = query.getOrDefault("api-version")
  valid_594109 = validateParameter(valid_594109, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594109 != nil:
    section.add "api-version", valid_594109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594110: Call_GetProvisionedFabricCodeVersionInfoList_594104;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_594110.validator(path, query, header, formData, body)
  let scheme = call_594110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594110.url(scheme.get, call_594110.host, call_594110.base,
                         call_594110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594110, url, valid)

proc call*(call_594111: Call_GetProvisionedFabricCodeVersionInfoList_594104;
          timeout: int = 60; CodeVersion: string = ""; apiVersion: string = "6.0"): Recallable =
  ## getProvisionedFabricCodeVersionInfoList
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: string
  ##              : The product version of Service Fabric.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594112 = newJObject()
  add(query_594112, "timeout", newJInt(timeout))
  add(query_594112, "CodeVersion", newJString(CodeVersion))
  add(query_594112, "api-version", newJString(apiVersion))
  result = call_594111.call(nil, query_594112, nil, nil, nil)

var getProvisionedFabricCodeVersionInfoList* = Call_GetProvisionedFabricCodeVersionInfoList_594104(
    name: "getProvisionedFabricCodeVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedCodeVersions",
    validator: validate_GetProvisionedFabricCodeVersionInfoList_594105, base: "",
    url: url_GetProvisionedFabricCodeVersionInfoList_594106,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricConfigVersionInfoList_594113 = ref object of OpenApiRestCall_593439
proc url_GetProvisionedFabricConfigVersionInfoList_594115(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricConfigVersionInfoList_594114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: JString
  ##                : The config version of Service Fabric.
  section = newJObject()
  var valid_594116 = query.getOrDefault("timeout")
  valid_594116 = validateParameter(valid_594116, JInt, required = false,
                                 default = newJInt(60))
  if valid_594116 != nil:
    section.add "timeout", valid_594116
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594117 = query.getOrDefault("api-version")
  valid_594117 = validateParameter(valid_594117, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594117 != nil:
    section.add "api-version", valid_594117
  var valid_594118 = query.getOrDefault("ConfigVersion")
  valid_594118 = validateParameter(valid_594118, JString, required = false,
                                 default = nil)
  if valid_594118 != nil:
    section.add "ConfigVersion", valid_594118
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594119: Call_GetProvisionedFabricConfigVersionInfoList_594113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_594119.validator(path, query, header, formData, body)
  let scheme = call_594119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594119.url(scheme.get, call_594119.host, call_594119.base,
                         call_594119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594119, url, valid)

proc call*(call_594120: Call_GetProvisionedFabricConfigVersionInfoList_594113;
          timeout: int = 60; apiVersion: string = "6.0"; ConfigVersion: string = ""): Recallable =
  ## getProvisionedFabricConfigVersionInfoList
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: string
  ##                : The config version of Service Fabric.
  var query_594121 = newJObject()
  add(query_594121, "timeout", newJInt(timeout))
  add(query_594121, "api-version", newJString(apiVersion))
  add(query_594121, "ConfigVersion", newJString(ConfigVersion))
  result = call_594120.call(nil, query_594121, nil, nil, nil)

var getProvisionedFabricConfigVersionInfoList* = Call_GetProvisionedFabricConfigVersionInfoList_594113(
    name: "getProvisionedFabricConfigVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedConfigVersions",
    validator: validate_GetProvisionedFabricConfigVersionInfoList_594114,
    base: "", url: url_GetProvisionedFabricConfigVersionInfoList_594115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRepairTaskList_594122 = ref object of OpenApiRestCall_593439
proc url_GetRepairTaskList_594124(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRepairTaskList_594123(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: JString
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: JString
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: JInt
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594125 = query.getOrDefault("api-version")
  valid_594125 = validateParameter(valid_594125, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594125 != nil:
    section.add "api-version", valid_594125
  var valid_594126 = query.getOrDefault("TaskIdFilter")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "TaskIdFilter", valid_594126
  var valid_594127 = query.getOrDefault("ExecutorFilter")
  valid_594127 = validateParameter(valid_594127, JString, required = false,
                                 default = nil)
  if valid_594127 != nil:
    section.add "ExecutorFilter", valid_594127
  var valid_594128 = query.getOrDefault("StateFilter")
  valid_594128 = validateParameter(valid_594128, JInt, required = false, default = nil)
  if valid_594128 != nil:
    section.add "StateFilter", valid_594128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594129: Call_GetRepairTaskList_594122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594129.validator(path, query, header, formData, body)
  let scheme = call_594129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594129.url(scheme.get, call_594129.host, call_594129.base,
                         call_594129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594129, url, valid)

proc call*(call_594130: Call_GetRepairTaskList_594122; apiVersion: string = "6.0";
          TaskIdFilter: string = ""; ExecutorFilter: string = ""; StateFilter: int = 0): Recallable =
  ## getRepairTaskList
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: string
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: string
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: int
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  var query_594131 = newJObject()
  add(query_594131, "api-version", newJString(apiVersion))
  add(query_594131, "TaskIdFilter", newJString(TaskIdFilter))
  add(query_594131, "ExecutorFilter", newJString(ExecutorFilter))
  add(query_594131, "StateFilter", newJInt(StateFilter))
  result = call_594130.call(nil, query_594131, nil, nil, nil)

var getRepairTaskList* = Call_GetRepairTaskList_594122(name: "getRepairTaskList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetRepairTaskList", validator: validate_GetRepairTaskList_594123,
    base: "", url: url_GetRepairTaskList_594124,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpgradeOrchestrationServiceState_594132 = ref object of OpenApiRestCall_593439
proc url_GetUpgradeOrchestrationServiceState_594134(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpgradeOrchestrationServiceState_594133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594135 = query.getOrDefault("timeout")
  valid_594135 = validateParameter(valid_594135, JInt, required = false,
                                 default = newJInt(60))
  if valid_594135 != nil:
    section.add "timeout", valid_594135
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594136 = query.getOrDefault("api-version")
  valid_594136 = validateParameter(valid_594136, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594136 != nil:
    section.add "api-version", valid_594136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594137: Call_GetUpgradeOrchestrationServiceState_594132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_594137.validator(path, query, header, formData, body)
  let scheme = call_594137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594137.url(scheme.get, call_594137.host, call_594137.base,
                         call_594137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594137, url, valid)

proc call*(call_594138: Call_GetUpgradeOrchestrationServiceState_594132;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getUpgradeOrchestrationServiceState
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594139 = newJObject()
  add(query_594139, "timeout", newJInt(timeout))
  add(query_594139, "api-version", newJString(apiVersion))
  result = call_594138.call(nil, query_594139, nil, nil, nil)

var getUpgradeOrchestrationServiceState* = Call_GetUpgradeOrchestrationServiceState_594132(
    name: "getUpgradeOrchestrationServiceState", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeOrchestrationServiceState",
    validator: validate_GetUpgradeOrchestrationServiceState_594133, base: "",
    url: url_GetUpgradeOrchestrationServiceState_594134,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterUpgradeProgress_594140 = ref object of OpenApiRestCall_593439
proc url_GetClusterUpgradeProgress_594142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterUpgradeProgress_594141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594143 = query.getOrDefault("timeout")
  valid_594143 = validateParameter(valid_594143, JInt, required = false,
                                 default = newJInt(60))
  if valid_594143 != nil:
    section.add "timeout", valid_594143
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594144 = query.getOrDefault("api-version")
  valid_594144 = validateParameter(valid_594144, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594144 != nil:
    section.add "api-version", valid_594144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594145: Call_GetClusterUpgradeProgress_594140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  let valid = call_594145.validator(path, query, header, formData, body)
  let scheme = call_594145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594145.url(scheme.get, call_594145.host, call_594145.base,
                         call_594145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594145, url, valid)

proc call*(call_594146: Call_GetClusterUpgradeProgress_594140; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterUpgradeProgress
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594147 = newJObject()
  add(query_594147, "timeout", newJInt(timeout))
  add(query_594147, "api-version", newJString(apiVersion))
  result = call_594146.call(nil, query_594147, nil, nil, nil)

var getClusterUpgradeProgress* = Call_GetClusterUpgradeProgress_594140(
    name: "getClusterUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeProgress",
    validator: validate_GetClusterUpgradeProgress_594141, base: "",
    url: url_GetClusterUpgradeProgress_594142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureCommand_594148 = ref object of OpenApiRestCall_593439
proc url_InvokeInfrastructureCommand_594150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureCommand_594149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_594151 = query.getOrDefault("timeout")
  valid_594151 = validateParameter(valid_594151, JInt, required = false,
                                 default = newJInt(60))
  if valid_594151 != nil:
    section.add "timeout", valid_594151
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594152 = query.getOrDefault("api-version")
  valid_594152 = validateParameter(valid_594152, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594152 != nil:
    section.add "api-version", valid_594152
  var valid_594153 = query.getOrDefault("ServiceId")
  valid_594153 = validateParameter(valid_594153, JString, required = false,
                                 default = nil)
  if valid_594153 != nil:
    section.add "ServiceId", valid_594153
  var valid_594154 = query.getOrDefault("Command")
  valid_594154 = validateParameter(valid_594154, JString, required = true,
                                 default = nil)
  if valid_594154 != nil:
    section.add "Command", valid_594154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594155: Call_InvokeInfrastructureCommand_594148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594155.validator(path, query, header, formData, body)
  let scheme = call_594155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594155.url(scheme.get, call_594155.host, call_594155.base,
                         call_594155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594155, url, valid)

proc call*(call_594156: Call_InvokeInfrastructureCommand_594148; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureCommand
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_594157 = newJObject()
  add(query_594157, "timeout", newJInt(timeout))
  add(query_594157, "api-version", newJString(apiVersion))
  add(query_594157, "ServiceId", newJString(ServiceId))
  add(query_594157, "Command", newJString(Command))
  result = call_594156.call(nil, query_594157, nil, nil, nil)

var invokeInfrastructureCommand* = Call_InvokeInfrastructureCommand_594148(
    name: "invokeInfrastructureCommand", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureCommand",
    validator: validate_InvokeInfrastructureCommand_594149, base: "",
    url: url_InvokeInfrastructureCommand_594150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureQuery_594158 = ref object of OpenApiRestCall_593439
proc url_InvokeInfrastructureQuery_594160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureQuery_594159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_594161 = query.getOrDefault("timeout")
  valid_594161 = validateParameter(valid_594161, JInt, required = false,
                                 default = newJInt(60))
  if valid_594161 != nil:
    section.add "timeout", valid_594161
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594162 = query.getOrDefault("api-version")
  valid_594162 = validateParameter(valid_594162, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594162 != nil:
    section.add "api-version", valid_594162
  var valid_594163 = query.getOrDefault("ServiceId")
  valid_594163 = validateParameter(valid_594163, JString, required = false,
                                 default = nil)
  if valid_594163 != nil:
    section.add "ServiceId", valid_594163
  var valid_594164 = query.getOrDefault("Command")
  valid_594164 = validateParameter(valid_594164, JString, required = true,
                                 default = nil)
  if valid_594164 != nil:
    section.add "Command", valid_594164
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594165: Call_InvokeInfrastructureQuery_594158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594165.validator(path, query, header, formData, body)
  let scheme = call_594165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594165.url(scheme.get, call_594165.host, call_594165.base,
                         call_594165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594165, url, valid)

proc call*(call_594166: Call_InvokeInfrastructureQuery_594158; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureQuery
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_594167 = newJObject()
  add(query_594167, "timeout", newJInt(timeout))
  add(query_594167, "api-version", newJString(apiVersion))
  add(query_594167, "ServiceId", newJString(ServiceId))
  add(query_594167, "Command", newJString(Command))
  result = call_594166.call(nil, query_594167, nil, nil, nil)

var invokeInfrastructureQuery* = Call_InvokeInfrastructureQuery_594158(
    name: "invokeInfrastructureQuery", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureQuery",
    validator: validate_InvokeInfrastructureQuery_594159, base: "",
    url: url_InvokeInfrastructureQuery_594160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeClusterUpgrade_594168 = ref object of OpenApiRestCall_593439
proc url_ResumeClusterUpgrade_594170(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ResumeClusterUpgrade_594169(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594171 = query.getOrDefault("timeout")
  valid_594171 = validateParameter(valid_594171, JInt, required = false,
                                 default = newJInt(60))
  if valid_594171 != nil:
    section.add "timeout", valid_594171
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594172 = query.getOrDefault("api-version")
  valid_594172 = validateParameter(valid_594172, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594172 != nil:
    section.add "api-version", valid_594172
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594174: Call_ResumeClusterUpgrade_594168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  let valid = call_594174.validator(path, query, header, formData, body)
  let scheme = call_594174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594174.url(scheme.get, call_594174.host, call_594174.base,
                         call_594174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594174, url, valid)

proc call*(call_594175: Call_ResumeClusterUpgrade_594168;
          ResumeClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## resumeClusterUpgrade
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  var query_594176 = newJObject()
  var body_594177 = newJObject()
  add(query_594176, "timeout", newJInt(timeout))
  add(query_594176, "api-version", newJString(apiVersion))
  if ResumeClusterUpgradeDescription != nil:
    body_594177 = ResumeClusterUpgradeDescription
  result = call_594175.call(nil, query_594176, nil, nil, body_594177)

var resumeClusterUpgrade* = Call_ResumeClusterUpgrade_594168(
    name: "resumeClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeClusterUpgrade_594169, base: "",
    url: url_ResumeClusterUpgrade_594170, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionCluster_594178 = ref object of OpenApiRestCall_593439
proc url_ProvisionCluster_594180(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionCluster_594179(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594181 = query.getOrDefault("timeout")
  valid_594181 = validateParameter(valid_594181, JInt, required = false,
                                 default = newJInt(60))
  if valid_594181 != nil:
    section.add "timeout", valid_594181
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594182 = query.getOrDefault("api-version")
  valid_594182 = validateParameter(valid_594182, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594182 != nil:
    section.add "api-version", valid_594182
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594184: Call_ProvisionCluster_594178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  let valid = call_594184.validator(path, query, header, formData, body)
  let scheme = call_594184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594184.url(scheme.get, call_594184.host, call_594184.base,
                         call_594184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594184, url, valid)

proc call*(call_594185: Call_ProvisionCluster_594178;
          ProvisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## provisionCluster
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  var query_594186 = newJObject()
  var body_594187 = newJObject()
  add(query_594186, "timeout", newJInt(timeout))
  add(query_594186, "api-version", newJString(apiVersion))
  if ProvisionFabricDescription != nil:
    body_594187 = ProvisionFabricDescription
  result = call_594185.call(nil, query_594186, nil, nil, body_594187)

var provisionCluster* = Call_ProvisionCluster_594178(name: "provisionCluster",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/$/Provision",
    validator: validate_ProvisionCluster_594179, base: "",
    url: url_ProvisionCluster_594180, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverAllPartitions_594188 = ref object of OpenApiRestCall_593439
proc url_RecoverAllPartitions_594190(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverAllPartitions_594189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594191 = query.getOrDefault("timeout")
  valid_594191 = validateParameter(valid_594191, JInt, required = false,
                                 default = newJInt(60))
  if valid_594191 != nil:
    section.add "timeout", valid_594191
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594192 = query.getOrDefault("api-version")
  valid_594192 = validateParameter(valid_594192, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594192 != nil:
    section.add "api-version", valid_594192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594193: Call_RecoverAllPartitions_594188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_594193.validator(path, query, header, formData, body)
  let scheme = call_594193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594193.url(scheme.get, call_594193.host, call_594193.base,
                         call_594193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594193, url, valid)

proc call*(call_594194: Call_RecoverAllPartitions_594188; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverAllPartitions
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594195 = newJObject()
  add(query_594195, "timeout", newJInt(timeout))
  add(query_594195, "api-version", newJString(apiVersion))
  result = call_594194.call(nil, query_594195, nil, nil, nil)

var recoverAllPartitions* = Call_RecoverAllPartitions_594188(
    name: "recoverAllPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverAllPartitions",
    validator: validate_RecoverAllPartitions_594189, base: "",
    url: url_RecoverAllPartitions_594190, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverSystemPartitions_594196 = ref object of OpenApiRestCall_593439
proc url_RecoverSystemPartitions_594198(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverSystemPartitions_594197(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594199 = query.getOrDefault("timeout")
  valid_594199 = validateParameter(valid_594199, JInt, required = false,
                                 default = newJInt(60))
  if valid_594199 != nil:
    section.add "timeout", valid_594199
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594200 = query.getOrDefault("api-version")
  valid_594200 = validateParameter(valid_594200, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594200 != nil:
    section.add "api-version", valid_594200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594201: Call_RecoverSystemPartitions_594196; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_594201.validator(path, query, header, formData, body)
  let scheme = call_594201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594201.url(scheme.get, call_594201.host, call_594201.base,
                         call_594201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594201, url, valid)

proc call*(call_594202: Call_RecoverSystemPartitions_594196; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverSystemPartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594203 = newJObject()
  add(query_594203, "timeout", newJInt(timeout))
  add(query_594203, "api-version", newJString(apiVersion))
  result = call_594202.call(nil, query_594203, nil, nil, nil)

var recoverSystemPartitions* = Call_RecoverSystemPartitions_594196(
    name: "recoverSystemPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverSystemPartitions",
    validator: validate_RecoverSystemPartitions_594197, base: "",
    url: url_RecoverSystemPartitions_594198, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportClusterHealth_594204 = ref object of OpenApiRestCall_593439
proc url_ReportClusterHealth_594206(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ReportClusterHealth_594205(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594207 = query.getOrDefault("Immediate")
  valid_594207 = validateParameter(valid_594207, JBool, required = false,
                                 default = newJBool(false))
  if valid_594207 != nil:
    section.add "Immediate", valid_594207
  var valid_594208 = query.getOrDefault("timeout")
  valid_594208 = validateParameter(valid_594208, JInt, required = false,
                                 default = newJInt(60))
  if valid_594208 != nil:
    section.add "timeout", valid_594208
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594209 = query.getOrDefault("api-version")
  valid_594209 = validateParameter(valid_594209, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594209 != nil:
    section.add "api-version", valid_594209
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594211: Call_ReportClusterHealth_594204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_594211.validator(path, query, header, formData, body)
  let scheme = call_594211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594211.url(scheme.get, call_594211.host, call_594211.base,
                         call_594211.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594211, url, valid)

proc call*(call_594212: Call_ReportClusterHealth_594204;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportClusterHealth
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var query_594213 = newJObject()
  var body_594214 = newJObject()
  add(query_594213, "Immediate", newJBool(Immediate))
  add(query_594213, "timeout", newJInt(timeout))
  add(query_594213, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_594214 = HealthInformation
  result = call_594212.call(nil, query_594213, nil, nil, body_594214)

var reportClusterHealth* = Call_ReportClusterHealth_594204(
    name: "reportClusterHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ReportClusterHealth",
    validator: validate_ReportClusterHealth_594205, base: "",
    url: url_ReportClusterHealth_594206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackClusterUpgrade_594215 = ref object of OpenApiRestCall_593439
proc url_RollbackClusterUpgrade_594217(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RollbackClusterUpgrade_594216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594218 = query.getOrDefault("timeout")
  valid_594218 = validateParameter(valid_594218, JInt, required = false,
                                 default = newJInt(60))
  if valid_594218 != nil:
    section.add "timeout", valid_594218
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594219 = query.getOrDefault("api-version")
  valid_594219 = validateParameter(valid_594219, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594219 != nil:
    section.add "api-version", valid_594219
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594220: Call_RollbackClusterUpgrade_594215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  let valid = call_594220.validator(path, query, header, formData, body)
  let scheme = call_594220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594220.url(scheme.get, call_594220.host, call_594220.base,
                         call_594220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594220, url, valid)

proc call*(call_594221: Call_RollbackClusterUpgrade_594215; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## rollbackClusterUpgrade
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594222 = newJObject()
  add(query_594222, "timeout", newJInt(timeout))
  add(query_594222, "api-version", newJString(apiVersion))
  result = call_594221.call(nil, query_594222, nil, nil, nil)

var rollbackClusterUpgrade* = Call_RollbackClusterUpgrade_594215(
    name: "rollbackClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RollbackUpgrade",
    validator: validate_RollbackClusterUpgrade_594216, base: "",
    url: url_RollbackClusterUpgrade_594217, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetUpgradeOrchestrationServiceState_594223 = ref object of OpenApiRestCall_593439
proc url_SetUpgradeOrchestrationServiceState_594225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_SetUpgradeOrchestrationServiceState_594224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594226 = query.getOrDefault("timeout")
  valid_594226 = validateParameter(valid_594226, JInt, required = false,
                                 default = newJInt(60))
  if valid_594226 != nil:
    section.add "timeout", valid_594226
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594227 = query.getOrDefault("api-version")
  valid_594227 = validateParameter(valid_594227, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594227 != nil:
    section.add "api-version", valid_594227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594229: Call_SetUpgradeOrchestrationServiceState_594223;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_594229.validator(path, query, header, formData, body)
  let scheme = call_594229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594229.url(scheme.get, call_594229.host, call_594229.base,
                         call_594229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594229, url, valid)

proc call*(call_594230: Call_SetUpgradeOrchestrationServiceState_594223;
          UpgradeOrchestrationServiceState: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## setUpgradeOrchestrationServiceState
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  var query_594231 = newJObject()
  var body_594232 = newJObject()
  add(query_594231, "timeout", newJInt(timeout))
  add(query_594231, "api-version", newJString(apiVersion))
  if UpgradeOrchestrationServiceState != nil:
    body_594232 = UpgradeOrchestrationServiceState
  result = call_594230.call(nil, query_594231, nil, nil, body_594232)

var setUpgradeOrchestrationServiceState* = Call_SetUpgradeOrchestrationServiceState_594223(
    name: "setUpgradeOrchestrationServiceState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/SetUpgradeOrchestrationServiceState",
    validator: validate_SetUpgradeOrchestrationServiceState_594224, base: "",
    url: url_SetUpgradeOrchestrationServiceState_594225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterConfigurationUpgrade_594233 = ref object of OpenApiRestCall_593439
proc url_StartClusterConfigurationUpgrade_594235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterConfigurationUpgrade_594234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594246 = query.getOrDefault("timeout")
  valid_594246 = validateParameter(valid_594246, JInt, required = false,
                                 default = newJInt(60))
  if valid_594246 != nil:
    section.add "timeout", valid_594246
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594247 = query.getOrDefault("api-version")
  valid_594247 = validateParameter(valid_594247, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594247 != nil:
    section.add "api-version", valid_594247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594249: Call_StartClusterConfigurationUpgrade_594233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  let valid = call_594249.validator(path, query, header, formData, body)
  let scheme = call_594249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594249.url(scheme.get, call_594249.host, call_594249.base,
                         call_594249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594249, url, valid)

proc call*(call_594250: Call_StartClusterConfigurationUpgrade_594233;
          ClusterConfigurationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterConfigurationUpgrade
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  var query_594251 = newJObject()
  var body_594252 = newJObject()
  add(query_594251, "timeout", newJInt(timeout))
  add(query_594251, "api-version", newJString(apiVersion))
  if ClusterConfigurationUpgradeDescription != nil:
    body_594252 = ClusterConfigurationUpgradeDescription
  result = call_594250.call(nil, query_594251, nil, nil, body_594252)

var startClusterConfigurationUpgrade* = Call_StartClusterConfigurationUpgrade_594233(
    name: "startClusterConfigurationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/StartClusterConfigurationUpgrade",
    validator: validate_StartClusterConfigurationUpgrade_594234, base: "",
    url: url_StartClusterConfigurationUpgrade_594235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionCluster_594253 = ref object of OpenApiRestCall_593439
proc url_UnprovisionCluster_594255(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UnprovisionCluster_594254(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## It is supported to unprovision code and configuration separately.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594256 = query.getOrDefault("timeout")
  valid_594256 = validateParameter(valid_594256, JInt, required = false,
                                 default = newJInt(60))
  if valid_594256 != nil:
    section.add "timeout", valid_594256
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594257 = query.getOrDefault("api-version")
  valid_594257 = validateParameter(valid_594257, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594257 != nil:
    section.add "api-version", valid_594257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594259: Call_UnprovisionCluster_594253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## It is supported to unprovision code and configuration separately.
  ## 
  let valid = call_594259.validator(path, query, header, formData, body)
  let scheme = call_594259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594259.url(scheme.get, call_594259.host, call_594259.base,
                         call_594259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594259, url, valid)

proc call*(call_594260: Call_UnprovisionCluster_594253;
          UnprovisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionCluster
  ## It is supported to unprovision code and configuration separately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  var query_594261 = newJObject()
  var body_594262 = newJObject()
  add(query_594261, "timeout", newJInt(timeout))
  add(query_594261, "api-version", newJString(apiVersion))
  if UnprovisionFabricDescription != nil:
    body_594262 = UnprovisionFabricDescription
  result = call_594260.call(nil, query_594261, nil, nil, body_594262)

var unprovisionCluster* = Call_UnprovisionCluster_594253(
    name: "unprovisionCluster", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Unprovision",
    validator: validate_UnprovisionCluster_594254, base: "",
    url: url_UnprovisionCluster_594255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairExecutionState_594263 = ref object of OpenApiRestCall_593439
proc url_UpdateRepairExecutionState_594265(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairExecutionState_594264(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594266 = query.getOrDefault("api-version")
  valid_594266 = validateParameter(valid_594266, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594266 != nil:
    section.add "api-version", valid_594266
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594268: Call_UpdateRepairExecutionState_594263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594268.validator(path, query, header, formData, body)
  let scheme = call_594268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594268.url(scheme.get, call_594268.host, call_594268.base,
                         call_594268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594268, url, valid)

proc call*(call_594269: Call_UpdateRepairExecutionState_594263;
          RepairTask: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## updateRepairExecutionState
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_594270 = newJObject()
  var body_594271 = newJObject()
  if RepairTask != nil:
    body_594271 = RepairTask
  add(query_594270, "api-version", newJString(apiVersion))
  result = call_594269.call(nil, query_594270, nil, nil, body_594271)

var updateRepairExecutionState* = Call_UpdateRepairExecutionState_594263(
    name: "updateRepairExecutionState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairExecutionState",
    validator: validate_UpdateRepairExecutionState_594264, base: "",
    url: url_UpdateRepairExecutionState_594265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairTaskHealthPolicy_594272 = ref object of OpenApiRestCall_593439
proc url_UpdateRepairTaskHealthPolicy_594274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairTaskHealthPolicy_594273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594275 = query.getOrDefault("api-version")
  valid_594275 = validateParameter(valid_594275, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594275 != nil:
    section.add "api-version", valid_594275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594277: Call_UpdateRepairTaskHealthPolicy_594272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_594277.validator(path, query, header, formData, body)
  let scheme = call_594277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594277.url(scheme.get, call_594277.host, call_594277.base,
                         call_594277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594277, url, valid)

proc call*(call_594278: Call_UpdateRepairTaskHealthPolicy_594272;
          RepairTaskUpdateHealthPolicyDescription: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## updateRepairTaskHealthPolicy
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  var query_594279 = newJObject()
  var body_594280 = newJObject()
  add(query_594279, "api-version", newJString(apiVersion))
  if RepairTaskUpdateHealthPolicyDescription != nil:
    body_594280 = RepairTaskUpdateHealthPolicyDescription
  result = call_594278.call(nil, query_594279, nil, nil, body_594280)

var updateRepairTaskHealthPolicy* = Call_UpdateRepairTaskHealthPolicy_594272(
    name: "updateRepairTaskHealthPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairTaskHealthPolicy",
    validator: validate_UpdateRepairTaskHealthPolicy_594273, base: "",
    url: url_UpdateRepairTaskHealthPolicy_594274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateClusterUpgrade_594281 = ref object of OpenApiRestCall_593439
proc url_UpdateClusterUpgrade_594283(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateClusterUpgrade_594282(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594284 = query.getOrDefault("timeout")
  valid_594284 = validateParameter(valid_594284, JInt, required = false,
                                 default = newJInt(60))
  if valid_594284 != nil:
    section.add "timeout", valid_594284
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594285 = query.getOrDefault("api-version")
  valid_594285 = validateParameter(valid_594285, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594285 != nil:
    section.add "api-version", valid_594285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594287: Call_UpdateClusterUpgrade_594281; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  let valid = call_594287.validator(path, query, header, formData, body)
  let scheme = call_594287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594287.url(scheme.get, call_594287.host, call_594287.base,
                         call_594287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594287, url, valid)

proc call*(call_594288: Call_UpdateClusterUpgrade_594281;
          UpdateClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateClusterUpgrade
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  var query_594289 = newJObject()
  var body_594290 = newJObject()
  add(query_594289, "timeout", newJInt(timeout))
  add(query_594289, "api-version", newJString(apiVersion))
  if UpdateClusterUpgradeDescription != nil:
    body_594290 = UpdateClusterUpgradeDescription
  result = call_594288.call(nil, query_594289, nil, nil, body_594290)

var updateClusterUpgrade* = Call_UpdateClusterUpgrade_594281(
    name: "updateClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateUpgrade",
    validator: validate_UpdateClusterUpgrade_594282, base: "",
    url: url_UpdateClusterUpgrade_594283, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterUpgrade_594291 = ref object of OpenApiRestCall_593439
proc url_StartClusterUpgrade_594293(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterUpgrade_594292(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594294 = query.getOrDefault("timeout")
  valid_594294 = validateParameter(valid_594294, JInt, required = false,
                                 default = newJInt(60))
  if valid_594294 != nil:
    section.add "timeout", valid_594294
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594295 = query.getOrDefault("api-version")
  valid_594295 = validateParameter(valid_594295, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594295 != nil:
    section.add "api-version", valid_594295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594297: Call_StartClusterUpgrade_594291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  let valid = call_594297.validator(path, query, header, formData, body)
  let scheme = call_594297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594297.url(scheme.get, call_594297.host, call_594297.base,
                         call_594297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594297, url, valid)

proc call*(call_594298: Call_StartClusterUpgrade_594291;
          StartClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterUpgrade
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  var query_594299 = newJObject()
  var body_594300 = newJObject()
  add(query_594299, "timeout", newJInt(timeout))
  add(query_594299, "api-version", newJString(apiVersion))
  if StartClusterUpgradeDescription != nil:
    body_594300 = StartClusterUpgradeDescription
  result = call_594298.call(nil, query_594299, nil, nil, body_594300)

var startClusterUpgrade* = Call_StartClusterUpgrade_594291(
    name: "startClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Upgrade",
    validator: validate_StartClusterUpgrade_594292, base: "",
    url: url_StartClusterUpgrade_594293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoList_594301 = ref object of OpenApiRestCall_593439
proc url_GetApplicationTypeInfoList_594303(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationTypeInfoList_594302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: JInt
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594304 = query.getOrDefault("timeout")
  valid_594304 = validateParameter(valid_594304, JInt, required = false,
                                 default = newJInt(60))
  if valid_594304 != nil:
    section.add "timeout", valid_594304
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594305 = query.getOrDefault("api-version")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594305 != nil:
    section.add "api-version", valid_594305
  var valid_594306 = query.getOrDefault("ApplicationTypeDefinitionKindFilter")
  valid_594306 = validateParameter(valid_594306, JInt, required = false,
                                 default = newJInt(0))
  if valid_594306 != nil:
    section.add "ApplicationTypeDefinitionKindFilter", valid_594306
  var valid_594307 = query.getOrDefault("ContinuationToken")
  valid_594307 = validateParameter(valid_594307, JString, required = false,
                                 default = nil)
  if valid_594307 != nil:
    section.add "ContinuationToken", valid_594307
  var valid_594308 = query.getOrDefault("MaxResults")
  valid_594308 = validateParameter(valid_594308, JInt, required = false,
                                 default = newJInt(0))
  if valid_594308 != nil:
    section.add "MaxResults", valid_594308
  var valid_594309 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594309 = validateParameter(valid_594309, JBool, required = false,
                                 default = newJBool(false))
  if valid_594309 != nil:
    section.add "ExcludeApplicationParameters", valid_594309
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594310: Call_GetApplicationTypeInfoList_594301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_594310.validator(path, query, header, formData, body)
  let scheme = call_594310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594310.url(scheme.get, call_594310.host, call_594310.base,
                         call_594310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594310, url, valid)

proc call*(call_594311: Call_GetApplicationTypeInfoList_594301; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationTypeDefinitionKindFilter: int = 0;
          ContinuationToken: string = ""; MaxResults: int = 0;
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoList
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: int
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_594312 = newJObject()
  add(query_594312, "timeout", newJInt(timeout))
  add(query_594312, "api-version", newJString(apiVersion))
  add(query_594312, "ApplicationTypeDefinitionKindFilter",
      newJInt(ApplicationTypeDefinitionKindFilter))
  add(query_594312, "ContinuationToken", newJString(ContinuationToken))
  add(query_594312, "MaxResults", newJInt(MaxResults))
  add(query_594312, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594311.call(nil, query_594312, nil, nil, nil)

var getApplicationTypeInfoList* = Call_GetApplicationTypeInfoList_594301(
    name: "getApplicationTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes",
    validator: validate_GetApplicationTypeInfoList_594302, base: "",
    url: url_GetApplicationTypeInfoList_594303,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionApplicationType_594313 = ref object of OpenApiRestCall_593439
proc url_ProvisionApplicationType_594315(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionApplicationType_594314(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594316 = query.getOrDefault("timeout")
  valid_594316 = validateParameter(valid_594316, JInt, required = false,
                                 default = newJInt(60))
  if valid_594316 != nil:
    section.add "timeout", valid_594316
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594317 = query.getOrDefault("api-version")
  valid_594317 = validateParameter(valid_594317, JString, required = true,
                                 default = newJString("6.2"))
  if valid_594317 != nil:
    section.add "api-version", valid_594317
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594319: Call_ProvisionApplicationType_594313; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  let valid = call_594319.validator(path, query, header, formData, body)
  let scheme = call_594319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594319.url(scheme.get, call_594319.host, call_594319.base,
                         call_594319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594319, url, valid)

proc call*(call_594320: Call_ProvisionApplicationType_594313;
          ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## provisionApplicationType
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  var query_594321 = newJObject()
  var body_594322 = newJObject()
  add(query_594321, "timeout", newJInt(timeout))
  add(query_594321, "api-version", newJString(apiVersion))
  if ProvisionApplicationTypeDescriptionBaseRequiredBodyParam != nil:
    body_594322 = ProvisionApplicationTypeDescriptionBaseRequiredBodyParam
  result = call_594320.call(nil, query_594321, nil, nil, body_594322)

var provisionApplicationType* = Call_ProvisionApplicationType_594313(
    name: "provisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ApplicationTypes/$/Provision",
    validator: validate_ProvisionApplicationType_594314, base: "",
    url: url_ProvisionApplicationType_594315, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoListByName_594323 = ref object of OpenApiRestCall_593439
proc url_GetApplicationTypeInfoListByName_594325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationTypeInfoListByName_594324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594340 = path.getOrDefault("applicationTypeName")
  valid_594340 = validateParameter(valid_594340, JString, required = true,
                                 default = nil)
  if valid_594340 != nil:
    section.add "applicationTypeName", valid_594340
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString
  ##                         : The version of the application type.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594341 = query.getOrDefault("timeout")
  valid_594341 = validateParameter(valid_594341, JInt, required = false,
                                 default = newJInt(60))
  if valid_594341 != nil:
    section.add "timeout", valid_594341
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594342 = query.getOrDefault("api-version")
  valid_594342 = validateParameter(valid_594342, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594342 != nil:
    section.add "api-version", valid_594342
  var valid_594343 = query.getOrDefault("ApplicationTypeVersion")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "ApplicationTypeVersion", valid_594343
  var valid_594344 = query.getOrDefault("ContinuationToken")
  valid_594344 = validateParameter(valid_594344, JString, required = false,
                                 default = nil)
  if valid_594344 != nil:
    section.add "ContinuationToken", valid_594344
  var valid_594345 = query.getOrDefault("MaxResults")
  valid_594345 = validateParameter(valid_594345, JInt, required = false,
                                 default = newJInt(0))
  if valid_594345 != nil:
    section.add "MaxResults", valid_594345
  var valid_594346 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594346 = validateParameter(valid_594346, JBool, required = false,
                                 default = newJBool(false))
  if valid_594346 != nil:
    section.add "ExcludeApplicationParameters", valid_594346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594347: Call_GetApplicationTypeInfoListByName_594323;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_594347.validator(path, query, header, formData, body)
  let scheme = call_594347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594347.url(scheme.get, call_594347.host, call_594347.base,
                         call_594347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594347, url, valid)

proc call*(call_594348: Call_GetApplicationTypeInfoListByName_594323;
          applicationTypeName: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationTypeVersion: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoListByName
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string
  ##                         : The version of the application type.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_594349 = newJObject()
  var query_594350 = newJObject()
  add(query_594350, "timeout", newJInt(timeout))
  add(query_594350, "api-version", newJString(apiVersion))
  add(path_594349, "applicationTypeName", newJString(applicationTypeName))
  add(query_594350, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_594350, "ContinuationToken", newJString(ContinuationToken))
  add(query_594350, "MaxResults", newJInt(MaxResults))
  add(query_594350, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594348.call(path_594349, query_594350, nil, nil, nil)

var getApplicationTypeInfoListByName* = Call_GetApplicationTypeInfoListByName_594323(
    name: "getApplicationTypeInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}",
    validator: validate_GetApplicationTypeInfoListByName_594324, base: "",
    url: url_GetApplicationTypeInfoListByName_594325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationManifest_594351 = ref object of OpenApiRestCall_593439
proc url_GetApplicationManifest_594353(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetApplicationManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationManifest_594352(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response contains the application manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594354 = path.getOrDefault("applicationTypeName")
  valid_594354 = validateParameter(valid_594354, JString, required = true,
                                 default = nil)
  if valid_594354 != nil:
    section.add "applicationTypeName", valid_594354
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_594355 = query.getOrDefault("timeout")
  valid_594355 = validateParameter(valid_594355, JInt, required = false,
                                 default = newJInt(60))
  if valid_594355 != nil:
    section.add "timeout", valid_594355
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594356 = query.getOrDefault("api-version")
  valid_594356 = validateParameter(valid_594356, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594356 != nil:
    section.add "api-version", valid_594356
  var valid_594357 = query.getOrDefault("ApplicationTypeVersion")
  valid_594357 = validateParameter(valid_594357, JString, required = true,
                                 default = nil)
  if valid_594357 != nil:
    section.add "ApplicationTypeVersion", valid_594357
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594358: Call_GetApplicationManifest_594351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response contains the application manifest XML as a string.
  ## 
  let valid = call_594358.validator(path, query, header, formData, body)
  let scheme = call_594358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594358.url(scheme.get, call_594358.host, call_594358.base,
                         call_594358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594358, url, valid)

proc call*(call_594359: Call_GetApplicationManifest_594351;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationManifest
  ## The response contains the application manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_594360 = newJObject()
  var query_594361 = newJObject()
  add(query_594361, "timeout", newJInt(timeout))
  add(query_594361, "api-version", newJString(apiVersion))
  add(path_594360, "applicationTypeName", newJString(applicationTypeName))
  add(query_594361, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_594359.call(path_594360, query_594361, nil, nil, nil)

var getApplicationManifest* = Call_GetApplicationManifest_594351(
    name: "getApplicationManifest", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest",
    validator: validate_GetApplicationManifest_594352, base: "",
    url: url_GetApplicationManifest_594353, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceManifest_594362 = ref object of OpenApiRestCall_593439
proc url_GetServiceManifest_594364(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceManifest_594363(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594365 = path.getOrDefault("applicationTypeName")
  valid_594365 = validateParameter(valid_594365, JString, required = true,
                                 default = nil)
  if valid_594365 != nil:
    section.add "applicationTypeName", valid_594365
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_594366 = query.getOrDefault("timeout")
  valid_594366 = validateParameter(valid_594366, JInt, required = false,
                                 default = newJInt(60))
  if valid_594366 != nil:
    section.add "timeout", valid_594366
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594367 = query.getOrDefault("api-version")
  valid_594367 = validateParameter(valid_594367, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594367 != nil:
    section.add "api-version", valid_594367
  var valid_594368 = query.getOrDefault("ApplicationTypeVersion")
  valid_594368 = validateParameter(valid_594368, JString, required = true,
                                 default = nil)
  if valid_594368 != nil:
    section.add "ApplicationTypeVersion", valid_594368
  var valid_594369 = query.getOrDefault("ServiceManifestName")
  valid_594369 = validateParameter(valid_594369, JString, required = true,
                                 default = nil)
  if valid_594369 != nil:
    section.add "ServiceManifestName", valid_594369
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594370: Call_GetServiceManifest_594362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  let valid = call_594370.validator(path, query, header, formData, body)
  let scheme = call_594370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594370.url(scheme.get, call_594370.host, call_594370.base,
                         call_594370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594370, url, valid)

proc call*(call_594371: Call_GetServiceManifest_594362;
          applicationTypeName: string; ApplicationTypeVersion: string;
          ServiceManifestName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceManifest
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  var path_594372 = newJObject()
  var query_594373 = newJObject()
  add(query_594373, "timeout", newJInt(timeout))
  add(query_594373, "api-version", newJString(apiVersion))
  add(path_594372, "applicationTypeName", newJString(applicationTypeName))
  add(query_594373, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_594373, "ServiceManifestName", newJString(ServiceManifestName))
  result = call_594371.call(path_594372, query_594373, nil, nil, nil)

var getServiceManifest* = Call_GetServiceManifest_594362(
    name: "getServiceManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest",
    validator: validate_GetServiceManifest_594363, base: "",
    url: url_GetServiceManifest_594364, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoList_594374 = ref object of OpenApiRestCall_593439
proc url_GetServiceTypeInfoList_594376(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoList_594375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594377 = path.getOrDefault("applicationTypeName")
  valid_594377 = validateParameter(valid_594377, JString, required = true,
                                 default = nil)
  if valid_594377 != nil:
    section.add "applicationTypeName", valid_594377
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_594378 = query.getOrDefault("timeout")
  valid_594378 = validateParameter(valid_594378, JInt, required = false,
                                 default = newJInt(60))
  if valid_594378 != nil:
    section.add "timeout", valid_594378
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594379 = query.getOrDefault("api-version")
  valid_594379 = validateParameter(valid_594379, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594379 != nil:
    section.add "api-version", valid_594379
  var valid_594380 = query.getOrDefault("ApplicationTypeVersion")
  valid_594380 = validateParameter(valid_594380, JString, required = true,
                                 default = nil)
  if valid_594380 != nil:
    section.add "ApplicationTypeVersion", valid_594380
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594381: Call_GetServiceTypeInfoList_594374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  let valid = call_594381.validator(path, query, header, formData, body)
  let scheme = call_594381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594381.url(scheme.get, call_594381.host, call_594381.base,
                         call_594381.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594381, url, valid)

proc call*(call_594382: Call_GetServiceTypeInfoList_594374;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoList
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_594383 = newJObject()
  var query_594384 = newJObject()
  add(query_594384, "timeout", newJInt(timeout))
  add(query_594384, "api-version", newJString(apiVersion))
  add(path_594383, "applicationTypeName", newJString(applicationTypeName))
  add(query_594384, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_594382.call(path_594383, query_594384, nil, nil, nil)

var getServiceTypeInfoList* = Call_GetServiceTypeInfoList_594374(
    name: "getServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes",
    validator: validate_GetServiceTypeInfoList_594375, base: "",
    url: url_GetServiceTypeInfoList_594376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoByName_594385 = ref object of OpenApiRestCall_593439
proc url_GetServiceTypeInfoByName_594387(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoByName_594386(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_594388 = path.getOrDefault("serviceTypeName")
  valid_594388 = validateParameter(valid_594388, JString, required = true,
                                 default = nil)
  if valid_594388 != nil:
    section.add "serviceTypeName", valid_594388
  var valid_594389 = path.getOrDefault("applicationTypeName")
  valid_594389 = validateParameter(valid_594389, JString, required = true,
                                 default = nil)
  if valid_594389 != nil:
    section.add "applicationTypeName", valid_594389
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_594390 = query.getOrDefault("timeout")
  valid_594390 = validateParameter(valid_594390, JInt, required = false,
                                 default = newJInt(60))
  if valid_594390 != nil:
    section.add "timeout", valid_594390
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594391 = query.getOrDefault("api-version")
  valid_594391 = validateParameter(valid_594391, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594391 != nil:
    section.add "api-version", valid_594391
  var valid_594392 = query.getOrDefault("ApplicationTypeVersion")
  valid_594392 = validateParameter(valid_594392, JString, required = true,
                                 default = nil)
  if valid_594392 != nil:
    section.add "ApplicationTypeVersion", valid_594392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594393: Call_GetServiceTypeInfoByName_594385; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  let valid = call_594393.validator(path, query, header, formData, body)
  let scheme = call_594393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594393.url(scheme.get, call_594393.host, call_594393.base,
                         call_594393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594393, url, valid)

proc call*(call_594394: Call_GetServiceTypeInfoByName_594385;
          serviceTypeName: string; applicationTypeName: string;
          ApplicationTypeVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoByName
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_594395 = newJObject()
  var query_594396 = newJObject()
  add(query_594396, "timeout", newJInt(timeout))
  add(path_594395, "serviceTypeName", newJString(serviceTypeName))
  add(query_594396, "api-version", newJString(apiVersion))
  add(path_594395, "applicationTypeName", newJString(applicationTypeName))
  add(query_594396, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_594394.call(path_594395, query_594396, nil, nil, nil)

var getServiceTypeInfoByName* = Call_GetServiceTypeInfoByName_594385(
    name: "getServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetServiceTypeInfoByName_594386, base: "",
    url: url_GetServiceTypeInfoByName_594387, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionApplicationType_594397 = ref object of OpenApiRestCall_593439
proc url_UnprovisionApplicationType_594399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/Unprovision")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UnprovisionApplicationType_594398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_594400 = path.getOrDefault("applicationTypeName")
  valid_594400 = validateParameter(valid_594400, JString, required = true,
                                 default = nil)
  if valid_594400 != nil:
    section.add "applicationTypeName", valid_594400
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594401 = query.getOrDefault("timeout")
  valid_594401 = validateParameter(valid_594401, JInt, required = false,
                                 default = newJInt(60))
  if valid_594401 != nil:
    section.add "timeout", valid_594401
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594402 = query.getOrDefault("api-version")
  valid_594402 = validateParameter(valid_594402, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594402 != nil:
    section.add "api-version", valid_594402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594404: Call_UnprovisionApplicationType_594397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  let valid = call_594404.validator(path, query, header, formData, body)
  let scheme = call_594404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594404.url(scheme.get, call_594404.host, call_594404.base,
                         call_594404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594404, url, valid)

proc call*(call_594405: Call_UnprovisionApplicationType_594397;
          applicationTypeName: string;
          UnprovisionApplicationTypeDescriptionInfo: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionApplicationType
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  var path_594406 = newJObject()
  var query_594407 = newJObject()
  var body_594408 = newJObject()
  add(query_594407, "timeout", newJInt(timeout))
  add(query_594407, "api-version", newJString(apiVersion))
  add(path_594406, "applicationTypeName", newJString(applicationTypeName))
  if UnprovisionApplicationTypeDescriptionInfo != nil:
    body_594408 = UnprovisionApplicationTypeDescriptionInfo
  result = call_594405.call(path_594406, query_594407, nil, nil, body_594408)

var unprovisionApplicationType* = Call_UnprovisionApplicationType_594397(
    name: "unprovisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/Unprovision",
    validator: validate_UnprovisionApplicationType_594398, base: "",
    url: url_UnprovisionApplicationType_594399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfoList_594409 = ref object of OpenApiRestCall_593439
proc url_GetApplicationInfoList_594411(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationInfoList_594410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: JInt
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: JString
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594412 = query.getOrDefault("timeout")
  valid_594412 = validateParameter(valid_594412, JInt, required = false,
                                 default = newJInt(60))
  if valid_594412 != nil:
    section.add "timeout", valid_594412
  var valid_594413 = query.getOrDefault("ApplicationDefinitionKindFilter")
  valid_594413 = validateParameter(valid_594413, JInt, required = false,
                                 default = newJInt(0))
  if valid_594413 != nil:
    section.add "ApplicationDefinitionKindFilter", valid_594413
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594414 = query.getOrDefault("api-version")
  valid_594414 = validateParameter(valid_594414, JString, required = true,
                                 default = newJString("6.1"))
  if valid_594414 != nil:
    section.add "api-version", valid_594414
  var valid_594415 = query.getOrDefault("ApplicationTypeName")
  valid_594415 = validateParameter(valid_594415, JString, required = false,
                                 default = nil)
  if valid_594415 != nil:
    section.add "ApplicationTypeName", valid_594415
  var valid_594416 = query.getOrDefault("ContinuationToken")
  valid_594416 = validateParameter(valid_594416, JString, required = false,
                                 default = nil)
  if valid_594416 != nil:
    section.add "ContinuationToken", valid_594416
  var valid_594417 = query.getOrDefault("MaxResults")
  valid_594417 = validateParameter(valid_594417, JInt, required = false,
                                 default = newJInt(0))
  if valid_594417 != nil:
    section.add "MaxResults", valid_594417
  var valid_594418 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594418 = validateParameter(valid_594418, JBool, required = false,
                                 default = newJBool(false))
  if valid_594418 != nil:
    section.add "ExcludeApplicationParameters", valid_594418
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594419: Call_GetApplicationInfoList_594409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  let valid = call_594419.validator(path, query, header, formData, body)
  let scheme = call_594419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594419.url(scheme.get, call_594419.host, call_594419.base,
                         call_594419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594419, url, valid)

proc call*(call_594420: Call_GetApplicationInfoList_594409; timeout: int = 60;
          ApplicationDefinitionKindFilter: int = 0; apiVersion: string = "6.1";
          ApplicationTypeName: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfoList
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: int
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: string
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_594421 = newJObject()
  add(query_594421, "timeout", newJInt(timeout))
  add(query_594421, "ApplicationDefinitionKindFilter",
      newJInt(ApplicationDefinitionKindFilter))
  add(query_594421, "api-version", newJString(apiVersion))
  add(query_594421, "ApplicationTypeName", newJString(ApplicationTypeName))
  add(query_594421, "ContinuationToken", newJString(ContinuationToken))
  add(query_594421, "MaxResults", newJInt(MaxResults))
  add(query_594421, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594420.call(nil, query_594421, nil, nil, nil)

var getApplicationInfoList* = Call_GetApplicationInfoList_594409(
    name: "getApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications",
    validator: validate_GetApplicationInfoList_594410, base: "",
    url: url_GetApplicationInfoList_594411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateApplication_594422 = ref object of OpenApiRestCall_593439
proc url_CreateApplication_594424(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateApplication_594423(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a Service Fabric application using the specified description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594425 = query.getOrDefault("timeout")
  valid_594425 = validateParameter(valid_594425, JInt, required = false,
                                 default = newJInt(60))
  if valid_594425 != nil:
    section.add "timeout", valid_594425
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594426 = query.getOrDefault("api-version")
  valid_594426 = validateParameter(valid_594426, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594426 != nil:
    section.add "api-version", valid_594426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594428: Call_CreateApplication_594422; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric application using the specified description.
  ## 
  let valid = call_594428.validator(path, query, header, formData, body)
  let scheme = call_594428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594428.url(scheme.get, call_594428.host, call_594428.base,
                         call_594428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594428, url, valid)

proc call*(call_594429: Call_CreateApplication_594422;
          ApplicationDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## createApplication
  ## Creates a Service Fabric application using the specified description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  var query_594430 = newJObject()
  var body_594431 = newJObject()
  add(query_594430, "timeout", newJInt(timeout))
  add(query_594430, "api-version", newJString(apiVersion))
  if ApplicationDescription != nil:
    body_594431 = ApplicationDescription
  result = call_594429.call(nil, query_594430, nil, nil, body_594431)

var createApplication* = Call_CreateApplication_594422(name: "createApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/$/Create", validator: validate_CreateApplication_594423,
    base: "", url: url_CreateApplication_594424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfo_594432 = ref object of OpenApiRestCall_593439
proc url_GetApplicationInfo_594434(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationInfo_594433(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594435 = path.getOrDefault("applicationId")
  valid_594435 = validateParameter(valid_594435, JString, required = true,
                                 default = nil)
  if valid_594435 != nil:
    section.add "applicationId", valid_594435
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_594436 = query.getOrDefault("timeout")
  valid_594436 = validateParameter(valid_594436, JInt, required = false,
                                 default = newJInt(60))
  if valid_594436 != nil:
    section.add "timeout", valid_594436
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594437 = query.getOrDefault("api-version")
  valid_594437 = validateParameter(valid_594437, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594437 != nil:
    section.add "api-version", valid_594437
  var valid_594438 = query.getOrDefault("ExcludeApplicationParameters")
  valid_594438 = validateParameter(valid_594438, JBool, required = false,
                                 default = newJBool(false))
  if valid_594438 != nil:
    section.add "ExcludeApplicationParameters", valid_594438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594439: Call_GetApplicationInfo_594432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  let valid = call_594439.validator(path, query, header, formData, body)
  let scheme = call_594439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594439.url(scheme.get, call_594439.host, call_594439.base,
                         call_594439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594439, url, valid)

proc call*(call_594440: Call_GetApplicationInfo_594432; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfo
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_594441 = newJObject()
  var query_594442 = newJObject()
  add(query_594442, "timeout", newJInt(timeout))
  add(query_594442, "api-version", newJString(apiVersion))
  add(path_594441, "applicationId", newJString(applicationId))
  add(query_594442, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_594440.call(path_594441, query_594442, nil, nil, nil)

var getApplicationInfo* = Call_GetApplicationInfo_594432(
    name: "getApplicationInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}",
    validator: validate_GetApplicationInfo_594433, base: "",
    url: url_GetApplicationInfo_594434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteApplication_594443 = ref object of OpenApiRestCall_593439
proc url_DeleteApplication_594445(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteApplication_594444(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594446 = path.getOrDefault("applicationId")
  valid_594446 = validateParameter(valid_594446, JString, required = true,
                                 default = nil)
  if valid_594446 != nil:
    section.add "applicationId", valid_594446
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_594447 = query.getOrDefault("timeout")
  valid_594447 = validateParameter(valid_594447, JInt, required = false,
                                 default = newJInt(60))
  if valid_594447 != nil:
    section.add "timeout", valid_594447
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594448 = query.getOrDefault("api-version")
  valid_594448 = validateParameter(valid_594448, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594448 != nil:
    section.add "api-version", valid_594448
  var valid_594449 = query.getOrDefault("ForceRemove")
  valid_594449 = validateParameter(valid_594449, JBool, required = false, default = nil)
  if valid_594449 != nil:
    section.add "ForceRemove", valid_594449
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594450: Call_DeleteApplication_594443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  let valid = call_594450.validator(path, query, header, formData, body)
  let scheme = call_594450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594450.url(scheme.get, call_594450.host, call_594450.base,
                         call_594450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594450, url, valid)

proc call*(call_594451: Call_DeleteApplication_594443; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteApplication
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594452 = newJObject()
  var query_594453 = newJObject()
  add(query_594453, "timeout", newJInt(timeout))
  add(query_594453, "api-version", newJString(apiVersion))
  add(query_594453, "ForceRemove", newJBool(ForceRemove))
  add(path_594452, "applicationId", newJString(applicationId))
  result = call_594451.call(path_594452, query_594453, nil, nil, nil)

var deleteApplication* = Call_DeleteApplication_594443(name: "deleteApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/Delete",
    validator: validate_DeleteApplication_594444, base: "",
    url: url_DeleteApplication_594445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableApplicationBackup_594454 = ref object of OpenApiRestCall_593439
proc url_DisableApplicationBackup_594456(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableApplicationBackup_594455(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594457 = path.getOrDefault("applicationId")
  valid_594457 = validateParameter(valid_594457, JString, required = true,
                                 default = nil)
  if valid_594457 != nil:
    section.add "applicationId", valid_594457
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594458 = query.getOrDefault("timeout")
  valid_594458 = validateParameter(valid_594458, JInt, required = false,
                                 default = newJInt(60))
  if valid_594458 != nil:
    section.add "timeout", valid_594458
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594459 = query.getOrDefault("api-version")
  valid_594459 = validateParameter(valid_594459, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594459 != nil:
    section.add "api-version", valid_594459
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594461: Call_DisableApplicationBackup_594454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  let valid = call_594461.validator(path, query, header, formData, body)
  let scheme = call_594461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594461.url(scheme.get, call_594461.host, call_594461.base,
                         call_594461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594461, url, valid)

proc call*(call_594462: Call_DisableApplicationBackup_594454;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableApplicationBackup
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594463 = newJObject()
  var query_594464 = newJObject()
  var body_594465 = newJObject()
  add(query_594464, "timeout", newJInt(timeout))
  add(query_594464, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_594465 = DisableBackupDescription
  add(path_594463, "applicationId", newJString(applicationId))
  result = call_594462.call(path_594463, query_594464, nil, nil, body_594465)

var disableApplicationBackup* = Call_DisableApplicationBackup_594454(
    name: "disableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/DisableBackup",
    validator: validate_DisableApplicationBackup_594455, base: "",
    url: url_DisableApplicationBackup_594456, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableApplicationBackup_594466 = ref object of OpenApiRestCall_593439
proc url_EnableApplicationBackup_594468(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableApplicationBackup_594467(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594469 = path.getOrDefault("applicationId")
  valid_594469 = validateParameter(valid_594469, JString, required = true,
                                 default = nil)
  if valid_594469 != nil:
    section.add "applicationId", valid_594469
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594470 = query.getOrDefault("timeout")
  valid_594470 = validateParameter(valid_594470, JInt, required = false,
                                 default = newJInt(60))
  if valid_594470 != nil:
    section.add "timeout", valid_594470
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594471 = query.getOrDefault("api-version")
  valid_594471 = validateParameter(valid_594471, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594471 != nil:
    section.add "api-version", valid_594471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594473: Call_EnableApplicationBackup_594466; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_594473.validator(path, query, header, formData, body)
  let scheme = call_594473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594473.url(scheme.get, call_594473.host, call_594473.base,
                         call_594473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594473, url, valid)

proc call*(call_594474: Call_EnableApplicationBackup_594466;
          EnableBackupDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## enableApplicationBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594475 = newJObject()
  var query_594476 = newJObject()
  var body_594477 = newJObject()
  add(query_594476, "timeout", newJInt(timeout))
  add(query_594476, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_594477 = EnableBackupDescription
  add(path_594475, "applicationId", newJString(applicationId))
  result = call_594474.call(path_594475, query_594476, nil, nil, body_594477)

var enableApplicationBackup* = Call_EnableApplicationBackup_594466(
    name: "enableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/EnableBackup",
    validator: validate_EnableApplicationBackup_594467, base: "",
    url: url_EnableApplicationBackup_594468, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupConfigurationInfo_594478 = ref object of OpenApiRestCall_593439
proc url_GetApplicationBackupConfigurationInfo_594480(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupConfigurationInfo_594479(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594481 = path.getOrDefault("applicationId")
  valid_594481 = validateParameter(valid_594481, JString, required = true,
                                 default = nil)
  if valid_594481 != nil:
    section.add "applicationId", valid_594481
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594482 = query.getOrDefault("timeout")
  valid_594482 = validateParameter(valid_594482, JInt, required = false,
                                 default = newJInt(60))
  if valid_594482 != nil:
    section.add "timeout", valid_594482
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594483 = query.getOrDefault("api-version")
  valid_594483 = validateParameter(valid_594483, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594483 != nil:
    section.add "api-version", valid_594483
  var valid_594484 = query.getOrDefault("ContinuationToken")
  valid_594484 = validateParameter(valid_594484, JString, required = false,
                                 default = nil)
  if valid_594484 != nil:
    section.add "ContinuationToken", valid_594484
  var valid_594485 = query.getOrDefault("MaxResults")
  valid_594485 = validateParameter(valid_594485, JInt, required = false,
                                 default = newJInt(0))
  if valid_594485 != nil:
    section.add "MaxResults", valid_594485
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594486: Call_GetApplicationBackupConfigurationInfo_594478;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  let valid = call_594486.validator(path, query, header, formData, body)
  let scheme = call_594486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594486.url(scheme.get, call_594486.host, call_594486.base,
                         call_594486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594486, url, valid)

proc call*(call_594487: Call_GetApplicationBackupConfigurationInfo_594478;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getApplicationBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_594488 = newJObject()
  var query_594489 = newJObject()
  add(query_594489, "timeout", newJInt(timeout))
  add(query_594489, "api-version", newJString(apiVersion))
  add(path_594488, "applicationId", newJString(applicationId))
  add(query_594489, "ContinuationToken", newJString(ContinuationToken))
  add(query_594489, "MaxResults", newJInt(MaxResults))
  result = call_594487.call(path_594488, query_594489, nil, nil, nil)

var getApplicationBackupConfigurationInfo* = Call_GetApplicationBackupConfigurationInfo_594478(
    name: "getApplicationBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackupConfigurationInfo",
    validator: validate_GetApplicationBackupConfigurationInfo_594479, base: "",
    url: url_GetApplicationBackupConfigurationInfo_594480,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupList_594490 = ref object of OpenApiRestCall_593439
proc url_GetApplicationBackupList_594492(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupList_594491(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594493 = path.getOrDefault("applicationId")
  valid_594493 = validateParameter(valid_594493, JString, required = true,
                                 default = nil)
  if valid_594493 != nil:
    section.add "applicationId", valid_594493
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594494 = query.getOrDefault("timeout")
  valid_594494 = validateParameter(valid_594494, JInt, required = false,
                                 default = newJInt(60))
  if valid_594494 != nil:
    section.add "timeout", valid_594494
  var valid_594495 = query.getOrDefault("Latest")
  valid_594495 = validateParameter(valid_594495, JBool, required = false,
                                 default = newJBool(false))
  if valid_594495 != nil:
    section.add "Latest", valid_594495
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594496 = query.getOrDefault("api-version")
  valid_594496 = validateParameter(valid_594496, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594496 != nil:
    section.add "api-version", valid_594496
  var valid_594497 = query.getOrDefault("StartDateTimeFilter")
  valid_594497 = validateParameter(valid_594497, JString, required = false,
                                 default = nil)
  if valid_594497 != nil:
    section.add "StartDateTimeFilter", valid_594497
  var valid_594498 = query.getOrDefault("EndDateTimeFilter")
  valid_594498 = validateParameter(valid_594498, JString, required = false,
                                 default = nil)
  if valid_594498 != nil:
    section.add "EndDateTimeFilter", valid_594498
  var valid_594499 = query.getOrDefault("ContinuationToken")
  valid_594499 = validateParameter(valid_594499, JString, required = false,
                                 default = nil)
  if valid_594499 != nil:
    section.add "ContinuationToken", valid_594499
  var valid_594500 = query.getOrDefault("MaxResults")
  valid_594500 = validateParameter(valid_594500, JInt, required = false,
                                 default = newJInt(0))
  if valid_594500 != nil:
    section.add "MaxResults", valid_594500
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594501: Call_GetApplicationBackupList_594490; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_594501.validator(path, query, header, formData, body)
  let scheme = call_594501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594501.url(scheme.get, call_594501.host, call_594501.base,
                         call_594501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594501, url, valid)

proc call*(call_594502: Call_GetApplicationBackupList_594490;
          applicationId: string; timeout: int = 60; Latest: bool = false;
          apiVersion: string = "6.4"; StartDateTimeFilter: string = "";
          EndDateTimeFilter: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getApplicationBackupList
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_594503 = newJObject()
  var query_594504 = newJObject()
  add(query_594504, "timeout", newJInt(timeout))
  add(query_594504, "Latest", newJBool(Latest))
  add(query_594504, "api-version", newJString(apiVersion))
  add(query_594504, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_594504, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_594503, "applicationId", newJString(applicationId))
  add(query_594504, "ContinuationToken", newJString(ContinuationToken))
  add(query_594504, "MaxResults", newJInt(MaxResults))
  result = call_594502.call(path_594503, query_594504, nil, nil, nil)

var getApplicationBackupList* = Call_GetApplicationBackupList_594490(
    name: "getApplicationBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackups",
    validator: validate_GetApplicationBackupList_594491, base: "",
    url: url_GetApplicationBackupList_594492, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealthUsingPolicy_594519 = ref object of OpenApiRestCall_593439
proc url_GetApplicationHealthUsingPolicy_594521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealthUsingPolicy_594520(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594522 = path.getOrDefault("applicationId")
  valid_594522 = validateParameter(valid_594522, JString, required = true,
                                 default = nil)
  if valid_594522 != nil:
    section.add "applicationId", valid_594522
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594523 = query.getOrDefault("timeout")
  valid_594523 = validateParameter(valid_594523, JInt, required = false,
                                 default = newJInt(60))
  if valid_594523 != nil:
    section.add "timeout", valid_594523
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594524 = query.getOrDefault("api-version")
  valid_594524 = validateParameter(valid_594524, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594524 != nil:
    section.add "api-version", valid_594524
  var valid_594525 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594525 = validateParameter(valid_594525, JBool, required = false,
                                 default = newJBool(false))
  if valid_594525 != nil:
    section.add "ExcludeHealthStatistics", valid_594525
  var valid_594526 = query.getOrDefault("EventsHealthStateFilter")
  valid_594526 = validateParameter(valid_594526, JInt, required = false,
                                 default = newJInt(0))
  if valid_594526 != nil:
    section.add "EventsHealthStateFilter", valid_594526
  var valid_594527 = query.getOrDefault("ServicesHealthStateFilter")
  valid_594527 = validateParameter(valid_594527, JInt, required = false,
                                 default = newJInt(0))
  if valid_594527 != nil:
    section.add "ServicesHealthStateFilter", valid_594527
  var valid_594528 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_594528 = validateParameter(valid_594528, JInt, required = false,
                                 default = newJInt(0))
  if valid_594528 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_594528
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594530: Call_GetApplicationHealthUsingPolicy_594519;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_594530.validator(path, query, header, formData, body)
  let scheme = call_594530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594530.url(scheme.get, call_594530.host, call_594530.base,
                         call_594530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594530, url, valid)

proc call*(call_594531: Call_GetApplicationHealthUsingPolicy_594519;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealthUsingPolicy
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_594532 = newJObject()
  var query_594533 = newJObject()
  var body_594534 = newJObject()
  add(query_594533, "timeout", newJInt(timeout))
  add(query_594533, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_594534 = ApplicationHealthPolicy
  add(query_594533, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594533, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_594532, "applicationId", newJString(applicationId))
  add(query_594533, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_594533, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_594531.call(path_594532, query_594533, nil, nil, body_594534)

var getApplicationHealthUsingPolicy* = Call_GetApplicationHealthUsingPolicy_594519(
    name: "getApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealthUsingPolicy_594520, base: "",
    url: url_GetApplicationHealthUsingPolicy_594521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealth_594505 = ref object of OpenApiRestCall_593439
proc url_GetApplicationHealth_594507(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealth_594506(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594508 = path.getOrDefault("applicationId")
  valid_594508 = validateParameter(valid_594508, JString, required = true,
                                 default = nil)
  if valid_594508 != nil:
    section.add "applicationId", valid_594508
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_594509 = query.getOrDefault("timeout")
  valid_594509 = validateParameter(valid_594509, JInt, required = false,
                                 default = newJInt(60))
  if valid_594509 != nil:
    section.add "timeout", valid_594509
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594510 = query.getOrDefault("api-version")
  valid_594510 = validateParameter(valid_594510, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594510 != nil:
    section.add "api-version", valid_594510
  var valid_594511 = query.getOrDefault("ExcludeHealthStatistics")
  valid_594511 = validateParameter(valid_594511, JBool, required = false,
                                 default = newJBool(false))
  if valid_594511 != nil:
    section.add "ExcludeHealthStatistics", valid_594511
  var valid_594512 = query.getOrDefault("EventsHealthStateFilter")
  valid_594512 = validateParameter(valid_594512, JInt, required = false,
                                 default = newJInt(0))
  if valid_594512 != nil:
    section.add "EventsHealthStateFilter", valid_594512
  var valid_594513 = query.getOrDefault("ServicesHealthStateFilter")
  valid_594513 = validateParameter(valid_594513, JInt, required = false,
                                 default = newJInt(0))
  if valid_594513 != nil:
    section.add "ServicesHealthStateFilter", valid_594513
  var valid_594514 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_594514 = validateParameter(valid_594514, JInt, required = false,
                                 default = newJInt(0))
  if valid_594514 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_594514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594515: Call_GetApplicationHealth_594505; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  let valid = call_594515.validator(path, query, header, formData, body)
  let scheme = call_594515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594515.url(scheme.get, call_594515.host, call_594515.base,
                         call_594515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594515, url, valid)

proc call*(call_594516: Call_GetApplicationHealth_594505; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealth
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_594517 = newJObject()
  var query_594518 = newJObject()
  add(query_594518, "timeout", newJInt(timeout))
  add(query_594518, "api-version", newJString(apiVersion))
  add(query_594518, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_594518, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_594517, "applicationId", newJString(applicationId))
  add(query_594518, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_594518, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_594516.call(path_594517, query_594518, nil, nil, nil)

var getApplicationHealth* = Call_GetApplicationHealth_594505(
    name: "getApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealth_594506, base: "",
    url: url_GetApplicationHealth_594507, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationLoadInfo_594535 = ref object of OpenApiRestCall_593439
proc url_GetApplicationLoadInfo_594537(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationLoadInfo_594536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594538 = path.getOrDefault("applicationId")
  valid_594538 = validateParameter(valid_594538, JString, required = true,
                                 default = nil)
  if valid_594538 != nil:
    section.add "applicationId", valid_594538
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594539 = query.getOrDefault("timeout")
  valid_594539 = validateParameter(valid_594539, JInt, required = false,
                                 default = newJInt(60))
  if valid_594539 != nil:
    section.add "timeout", valid_594539
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594540 = query.getOrDefault("api-version")
  valid_594540 = validateParameter(valid_594540, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594540 != nil:
    section.add "api-version", valid_594540
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594541: Call_GetApplicationLoadInfo_594535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  let valid = call_594541.validator(path, query, header, formData, body)
  let scheme = call_594541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594541.url(scheme.get, call_594541.host, call_594541.base,
                         call_594541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594541, url, valid)

proc call*(call_594542: Call_GetApplicationLoadInfo_594535; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationLoadInfo
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594543 = newJObject()
  var query_594544 = newJObject()
  add(query_594544, "timeout", newJInt(timeout))
  add(query_594544, "api-version", newJString(apiVersion))
  add(path_594543, "applicationId", newJString(applicationId))
  result = call_594542.call(path_594543, query_594544, nil, nil, nil)

var getApplicationLoadInfo* = Call_GetApplicationLoadInfo_594535(
    name: "getApplicationLoadInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetLoadInformation",
    validator: validate_GetApplicationLoadInfo_594536, base: "",
    url: url_GetApplicationLoadInfo_594537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfoList_594545 = ref object of OpenApiRestCall_593439
proc url_GetServiceInfoList_594547(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfoList_594546(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594548 = path.getOrDefault("applicationId")
  valid_594548 = validateParameter(valid_594548, JString, required = true,
                                 default = nil)
  if valid_594548 != nil:
    section.add "applicationId", valid_594548
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: JString
  ##                  : The service type name used to filter the services to query for.
  section = newJObject()
  var valid_594549 = query.getOrDefault("timeout")
  valid_594549 = validateParameter(valid_594549, JInt, required = false,
                                 default = newJInt(60))
  if valid_594549 != nil:
    section.add "timeout", valid_594549
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594550 = query.getOrDefault("api-version")
  valid_594550 = validateParameter(valid_594550, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594550 != nil:
    section.add "api-version", valid_594550
  var valid_594551 = query.getOrDefault("ContinuationToken")
  valid_594551 = validateParameter(valid_594551, JString, required = false,
                                 default = nil)
  if valid_594551 != nil:
    section.add "ContinuationToken", valid_594551
  var valid_594552 = query.getOrDefault("ServiceTypeName")
  valid_594552 = validateParameter(valid_594552, JString, required = false,
                                 default = nil)
  if valid_594552 != nil:
    section.add "ServiceTypeName", valid_594552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594553: Call_GetServiceInfoList_594545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  let valid = call_594553.validator(path, query, header, formData, body)
  let scheme = call_594553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594553.url(scheme.get, call_594553.host, call_594553.base,
                         call_594553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594553, url, valid)

proc call*(call_594554: Call_GetServiceInfoList_594545; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          ServiceTypeName: string = ""): Recallable =
  ## getServiceInfoList
  ## Returns the information about all services belonging to the application specified by the application ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: string
  ##                  : The service type name used to filter the services to query for.
  var path_594555 = newJObject()
  var query_594556 = newJObject()
  add(query_594556, "timeout", newJInt(timeout))
  add(query_594556, "api-version", newJString(apiVersion))
  add(path_594555, "applicationId", newJString(applicationId))
  add(query_594556, "ContinuationToken", newJString(ContinuationToken))
  add(query_594556, "ServiceTypeName", newJString(ServiceTypeName))
  result = call_594554.call(path_594555, query_594556, nil, nil, nil)

var getServiceInfoList* = Call_GetServiceInfoList_594545(
    name: "getServiceInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices",
    validator: validate_GetServiceInfoList_594546, base: "",
    url: url_GetServiceInfoList_594547, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateService_594557 = ref object of OpenApiRestCall_593439
proc url_CreateService_594559(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/$/Create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateService_594558(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594560 = path.getOrDefault("applicationId")
  valid_594560 = validateParameter(valid_594560, JString, required = true,
                                 default = nil)
  if valid_594560 != nil:
    section.add "applicationId", valid_594560
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594561 = query.getOrDefault("timeout")
  valid_594561 = validateParameter(valid_594561, JInt, required = false,
                                 default = newJInt(60))
  if valid_594561 != nil:
    section.add "timeout", valid_594561
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594562 = query.getOrDefault("api-version")
  valid_594562 = validateParameter(valid_594562, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594562 != nil:
    section.add "api-version", valid_594562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594564: Call_CreateService_594557; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  let valid = call_594564.validator(path, query, header, formData, body)
  let scheme = call_594564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594564.url(scheme.get, call_594564.host, call_594564.base,
                         call_594564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594564, url, valid)

proc call*(call_594565: Call_CreateService_594557; applicationId: string;
          ServiceDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createService
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  var path_594566 = newJObject()
  var query_594567 = newJObject()
  var body_594568 = newJObject()
  add(query_594567, "timeout", newJInt(timeout))
  add(query_594567, "api-version", newJString(apiVersion))
  add(path_594566, "applicationId", newJString(applicationId))
  if ServiceDescription != nil:
    body_594568 = ServiceDescription
  result = call_594565.call(path_594566, query_594567, nil, nil, body_594568)

var createService* = Call_CreateService_594557(name: "createService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/Create",
    validator: validate_CreateService_594558, base: "", url: url_CreateService_594559,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateServiceFromTemplate_594569 = ref object of OpenApiRestCall_593439
proc url_CreateServiceFromTemplate_594571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetServices/$/CreateFromTemplate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateServiceFromTemplate_594570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594572 = path.getOrDefault("applicationId")
  valid_594572 = validateParameter(valid_594572, JString, required = true,
                                 default = nil)
  if valid_594572 != nil:
    section.add "applicationId", valid_594572
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594573 = query.getOrDefault("timeout")
  valid_594573 = validateParameter(valid_594573, JInt, required = false,
                                 default = newJInt(60))
  if valid_594573 != nil:
    section.add "timeout", valid_594573
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594574 = query.getOrDefault("api-version")
  valid_594574 = validateParameter(valid_594574, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594574 != nil:
    section.add "api-version", valid_594574
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594576: Call_CreateServiceFromTemplate_594569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  let valid = call_594576.validator(path, query, header, formData, body)
  let scheme = call_594576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594576.url(scheme.get, call_594576.host, call_594576.base,
                         call_594576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594576, url, valid)

proc call*(call_594577: Call_CreateServiceFromTemplate_594569;
          ServiceFromTemplateDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createServiceFromTemplate
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594578 = newJObject()
  var query_594579 = newJObject()
  var body_594580 = newJObject()
  add(query_594579, "timeout", newJInt(timeout))
  add(query_594579, "api-version", newJString(apiVersion))
  if ServiceFromTemplateDescription != nil:
    body_594580 = ServiceFromTemplateDescription
  add(path_594578, "applicationId", newJString(applicationId))
  result = call_594577.call(path_594578, query_594579, nil, nil, body_594580)

var createServiceFromTemplate* = Call_CreateServiceFromTemplate_594569(
    name: "createServiceFromTemplate", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate",
    validator: validate_CreateServiceFromTemplate_594570, base: "",
    url: url_CreateServiceFromTemplate_594571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfo_594581 = ref object of OpenApiRestCall_593439
proc url_GetServiceInfo_594583(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/"),
               (kind: VariableSegment, value: "serviceId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfo_594582(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594584 = path.getOrDefault("applicationId")
  valid_594584 = validateParameter(valid_594584, JString, required = true,
                                 default = nil)
  if valid_594584 != nil:
    section.add "applicationId", valid_594584
  var valid_594585 = path.getOrDefault("serviceId")
  valid_594585 = validateParameter(valid_594585, JString, required = true,
                                 default = nil)
  if valid_594585 != nil:
    section.add "serviceId", valid_594585
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594586 = query.getOrDefault("timeout")
  valid_594586 = validateParameter(valid_594586, JInt, required = false,
                                 default = newJInt(60))
  if valid_594586 != nil:
    section.add "timeout", valid_594586
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594587 = query.getOrDefault("api-version")
  valid_594587 = validateParameter(valid_594587, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594587 != nil:
    section.add "api-version", valid_594587
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594588: Call_GetServiceInfo_594581; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  let valid = call_594588.validator(path, query, header, formData, body)
  let scheme = call_594588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594588.url(scheme.get, call_594588.host, call_594588.base,
                         call_594588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594588, url, valid)

proc call*(call_594589: Call_GetServiceInfo_594581; applicationId: string;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceInfo
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_594590 = newJObject()
  var query_594591 = newJObject()
  add(query_594591, "timeout", newJInt(timeout))
  add(query_594591, "api-version", newJString(apiVersion))
  add(path_594590, "applicationId", newJString(applicationId))
  add(path_594590, "serviceId", newJString(serviceId))
  result = call_594589.call(path_594590, query_594591, nil, nil, nil)

var getServiceInfo* = Call_GetServiceInfo_594581(name: "getServiceInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/{serviceId}",
    validator: validate_GetServiceInfo_594582, base: "", url: url_GetServiceInfo_594583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationUpgrade_594592 = ref object of OpenApiRestCall_593439
proc url_GetApplicationUpgrade_594594(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationUpgrade_594593(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594595 = path.getOrDefault("applicationId")
  valid_594595 = validateParameter(valid_594595, JString, required = true,
                                 default = nil)
  if valid_594595 != nil:
    section.add "applicationId", valid_594595
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594596 = query.getOrDefault("timeout")
  valid_594596 = validateParameter(valid_594596, JInt, required = false,
                                 default = newJInt(60))
  if valid_594596 != nil:
    section.add "timeout", valid_594596
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594597 = query.getOrDefault("api-version")
  valid_594597 = validateParameter(valid_594597, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594597 != nil:
    section.add "api-version", valid_594597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594598: Call_GetApplicationUpgrade_594592; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_594598.validator(path, query, header, formData, body)
  let scheme = call_594598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594598.url(scheme.get, call_594598.host, call_594598.base,
                         call_594598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594598, url, valid)

proc call*(call_594599: Call_GetApplicationUpgrade_594592; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationUpgrade
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594600 = newJObject()
  var query_594601 = newJObject()
  add(query_594601, "timeout", newJInt(timeout))
  add(query_594601, "api-version", newJString(apiVersion))
  add(path_594600, "applicationId", newJString(applicationId))
  result = call_594599.call(path_594600, query_594601, nil, nil, nil)

var getApplicationUpgrade* = Call_GetApplicationUpgrade_594592(
    name: "getApplicationUpgrade", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetUpgradeProgress",
    validator: validate_GetApplicationUpgrade_594593, base: "",
    url: url_GetApplicationUpgrade_594594, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationUpgrade_594602 = ref object of OpenApiRestCall_593439
proc url_ResumeApplicationUpgrade_594604(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/MoveToNextUpgradeDomain")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationUpgrade_594603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594605 = path.getOrDefault("applicationId")
  valid_594605 = validateParameter(valid_594605, JString, required = true,
                                 default = nil)
  if valid_594605 != nil:
    section.add "applicationId", valid_594605
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594606 = query.getOrDefault("timeout")
  valid_594606 = validateParameter(valid_594606, JInt, required = false,
                                 default = newJInt(60))
  if valid_594606 != nil:
    section.add "timeout", valid_594606
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594607 = query.getOrDefault("api-version")
  valid_594607 = validateParameter(valid_594607, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594607 != nil:
    section.add "api-version", valid_594607
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594609: Call_ResumeApplicationUpgrade_594602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  let valid = call_594609.validator(path, query, header, formData, body)
  let scheme = call_594609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594609.url(scheme.get, call_594609.host, call_594609.base,
                         call_594609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594609, url, valid)

proc call*(call_594610: Call_ResumeApplicationUpgrade_594602;
          ResumeApplicationUpgradeDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resumeApplicationUpgrade
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594611 = newJObject()
  var query_594612 = newJObject()
  var body_594613 = newJObject()
  add(query_594612, "timeout", newJInt(timeout))
  if ResumeApplicationUpgradeDescription != nil:
    body_594613 = ResumeApplicationUpgradeDescription
  add(query_594612, "api-version", newJString(apiVersion))
  add(path_594611, "applicationId", newJString(applicationId))
  result = call_594610.call(path_594611, query_594612, nil, nil, body_594613)

var resumeApplicationUpgrade* = Call_ResumeApplicationUpgrade_594602(
    name: "resumeApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeApplicationUpgrade_594603, base: "",
    url: url_ResumeApplicationUpgrade_594604, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportApplicationHealth_594614 = ref object of OpenApiRestCall_593439
proc url_ReportApplicationHealth_594616(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportApplicationHealth_594615(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594617 = path.getOrDefault("applicationId")
  valid_594617 = validateParameter(valid_594617, JString, required = true,
                                 default = nil)
  if valid_594617 != nil:
    section.add "applicationId", valid_594617
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594618 = query.getOrDefault("Immediate")
  valid_594618 = validateParameter(valid_594618, JBool, required = false,
                                 default = newJBool(false))
  if valid_594618 != nil:
    section.add "Immediate", valid_594618
  var valid_594619 = query.getOrDefault("timeout")
  valid_594619 = validateParameter(valid_594619, JInt, required = false,
                                 default = newJInt(60))
  if valid_594619 != nil:
    section.add "timeout", valid_594619
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594620 = query.getOrDefault("api-version")
  valid_594620 = validateParameter(valid_594620, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594620 != nil:
    section.add "api-version", valid_594620
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594622: Call_ReportApplicationHealth_594614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_594622.validator(path, query, header, formData, body)
  let scheme = call_594622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594622.url(scheme.get, call_594622.host, call_594622.base,
                         call_594622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594622, url, valid)

proc call*(call_594623: Call_ReportApplicationHealth_594614;
          HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportApplicationHealth
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594624 = newJObject()
  var query_594625 = newJObject()
  var body_594626 = newJObject()
  add(query_594625, "Immediate", newJBool(Immediate))
  add(query_594625, "timeout", newJInt(timeout))
  add(query_594625, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_594626 = HealthInformation
  add(path_594624, "applicationId", newJString(applicationId))
  result = call_594623.call(path_594624, query_594625, nil, nil, body_594626)

var reportApplicationHealth* = Call_ReportApplicationHealth_594614(
    name: "reportApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ReportHealth",
    validator: validate_ReportApplicationHealth_594615, base: "",
    url: url_ReportApplicationHealth_594616, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationBackup_594627 = ref object of OpenApiRestCall_593439
proc url_ResumeApplicationBackup_594629(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationBackup_594628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594630 = path.getOrDefault("applicationId")
  valid_594630 = validateParameter(valid_594630, JString, required = true,
                                 default = nil)
  if valid_594630 != nil:
    section.add "applicationId", valid_594630
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594631 = query.getOrDefault("timeout")
  valid_594631 = validateParameter(valid_594631, JInt, required = false,
                                 default = newJInt(60))
  if valid_594631 != nil:
    section.add "timeout", valid_594631
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594632 = query.getOrDefault("api-version")
  valid_594632 = validateParameter(valid_594632, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594632 != nil:
    section.add "api-version", valid_594632
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594633: Call_ResumeApplicationBackup_594627; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_594633.validator(path, query, header, formData, body)
  let scheme = call_594633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594633.url(scheme.get, call_594633.host, call_594633.base,
                         call_594633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594633, url, valid)

proc call*(call_594634: Call_ResumeApplicationBackup_594627; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeApplicationBackup
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594635 = newJObject()
  var query_594636 = newJObject()
  add(query_594636, "timeout", newJInt(timeout))
  add(query_594636, "api-version", newJString(apiVersion))
  add(path_594635, "applicationId", newJString(applicationId))
  result = call_594634.call(path_594635, query_594636, nil, nil, nil)

var resumeApplicationBackup* = Call_ResumeApplicationBackup_594627(
    name: "resumeApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ResumeBackup",
    validator: validate_ResumeApplicationBackup_594628, base: "",
    url: url_ResumeApplicationBackup_594629, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackApplicationUpgrade_594637 = ref object of OpenApiRestCall_593439
proc url_RollbackApplicationUpgrade_594639(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RollbackApplicationUpgrade_594638(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594640 = path.getOrDefault("applicationId")
  valid_594640 = validateParameter(valid_594640, JString, required = true,
                                 default = nil)
  if valid_594640 != nil:
    section.add "applicationId", valid_594640
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594641 = query.getOrDefault("timeout")
  valid_594641 = validateParameter(valid_594641, JInt, required = false,
                                 default = newJInt(60))
  if valid_594641 != nil:
    section.add "timeout", valid_594641
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594642 = query.getOrDefault("api-version")
  valid_594642 = validateParameter(valid_594642, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594642 != nil:
    section.add "api-version", valid_594642
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594643: Call_RollbackApplicationUpgrade_594637; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  let valid = call_594643.validator(path, query, header, formData, body)
  let scheme = call_594643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594643.url(scheme.get, call_594643.host, call_594643.base,
                         call_594643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594643, url, valid)

proc call*(call_594644: Call_RollbackApplicationUpgrade_594637;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## rollbackApplicationUpgrade
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594645 = newJObject()
  var query_594646 = newJObject()
  add(query_594646, "timeout", newJInt(timeout))
  add(query_594646, "api-version", newJString(apiVersion))
  add(path_594645, "applicationId", newJString(applicationId))
  result = call_594644.call(path_594645, query_594646, nil, nil, nil)

var rollbackApplicationUpgrade* = Call_RollbackApplicationUpgrade_594637(
    name: "rollbackApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/RollbackUpgrade",
    validator: validate_RollbackApplicationUpgrade_594638, base: "",
    url: url_RollbackApplicationUpgrade_594639,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendApplicationBackup_594647 = ref object of OpenApiRestCall_593439
proc url_SuspendApplicationBackup_594649(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendApplicationBackup_594648(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594650 = path.getOrDefault("applicationId")
  valid_594650 = validateParameter(valid_594650, JString, required = true,
                                 default = nil)
  if valid_594650 != nil:
    section.add "applicationId", valid_594650
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594651 = query.getOrDefault("timeout")
  valid_594651 = validateParameter(valid_594651, JInt, required = false,
                                 default = newJInt(60))
  if valid_594651 != nil:
    section.add "timeout", valid_594651
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594652 = query.getOrDefault("api-version")
  valid_594652 = validateParameter(valid_594652, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594652 != nil:
    section.add "api-version", valid_594652
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594653: Call_SuspendApplicationBackup_594647; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  let valid = call_594653.validator(path, query, header, formData, body)
  let scheme = call_594653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594653.url(scheme.get, call_594653.host, call_594653.base,
                         call_594653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594653, url, valid)

proc call*(call_594654: Call_SuspendApplicationBackup_594647;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendApplicationBackup
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_594655 = newJObject()
  var query_594656 = newJObject()
  add(query_594656, "timeout", newJInt(timeout))
  add(query_594656, "api-version", newJString(apiVersion))
  add(path_594655, "applicationId", newJString(applicationId))
  result = call_594654.call(path_594655, query_594656, nil, nil, nil)

var suspendApplicationBackup* = Call_SuspendApplicationBackup_594647(
    name: "suspendApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/SuspendBackup",
    validator: validate_SuspendApplicationBackup_594648, base: "",
    url: url_SuspendApplicationBackup_594649, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateApplicationUpgrade_594657 = ref object of OpenApiRestCall_593439
proc url_UpdateApplicationUpgrade_594659(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/UpdateUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateApplicationUpgrade_594658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594660 = path.getOrDefault("applicationId")
  valid_594660 = validateParameter(valid_594660, JString, required = true,
                                 default = nil)
  if valid_594660 != nil:
    section.add "applicationId", valid_594660
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594661 = query.getOrDefault("timeout")
  valid_594661 = validateParameter(valid_594661, JInt, required = false,
                                 default = newJInt(60))
  if valid_594661 != nil:
    section.add "timeout", valid_594661
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594662 = query.getOrDefault("api-version")
  valid_594662 = validateParameter(valid_594662, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594662 != nil:
    section.add "api-version", valid_594662
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594664: Call_UpdateApplicationUpgrade_594657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  let valid = call_594664.validator(path, query, header, formData, body)
  let scheme = call_594664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594664.url(scheme.get, call_594664.host, call_594664.base,
                         call_594664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594664, url, valid)

proc call*(call_594665: Call_UpdateApplicationUpgrade_594657;
          applicationId: string; ApplicationUpgradeUpdateDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## updateApplicationUpgrade
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  var path_594666 = newJObject()
  var query_594667 = newJObject()
  var body_594668 = newJObject()
  add(query_594667, "timeout", newJInt(timeout))
  add(query_594667, "api-version", newJString(apiVersion))
  add(path_594666, "applicationId", newJString(applicationId))
  if ApplicationUpgradeUpdateDescription != nil:
    body_594668 = ApplicationUpgradeUpdateDescription
  result = call_594665.call(path_594666, query_594667, nil, nil, body_594668)

var updateApplicationUpgrade* = Call_UpdateApplicationUpgrade_594657(
    name: "updateApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/UpdateUpgrade",
    validator: validate_UpdateApplicationUpgrade_594658, base: "",
    url: url_UpdateApplicationUpgrade_594659, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartApplicationUpgrade_594669 = ref object of OpenApiRestCall_593439
proc url_StartApplicationUpgrade_594671(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartApplicationUpgrade_594670(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594672 = path.getOrDefault("applicationId")
  valid_594672 = validateParameter(valid_594672, JString, required = true,
                                 default = nil)
  if valid_594672 != nil:
    section.add "applicationId", valid_594672
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594673 = query.getOrDefault("timeout")
  valid_594673 = validateParameter(valid_594673, JInt, required = false,
                                 default = newJInt(60))
  if valid_594673 != nil:
    section.add "timeout", valid_594673
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594674 = query.getOrDefault("api-version")
  valid_594674 = validateParameter(valid_594674, JString, required = true,
                                 default = newJString("6.0"))
  if valid_594674 != nil:
    section.add "api-version", valid_594674
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594676: Call_StartApplicationUpgrade_594669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  let valid = call_594676.validator(path, query, header, formData, body)
  let scheme = call_594676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594676.url(scheme.get, call_594676.host, call_594676.base,
                         call_594676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594676, url, valid)

proc call*(call_594677: Call_StartApplicationUpgrade_594669; applicationId: string;
          ApplicationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startApplicationUpgrade
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  var path_594678 = newJObject()
  var query_594679 = newJObject()
  var body_594680 = newJObject()
  add(query_594679, "timeout", newJInt(timeout))
  add(query_594679, "api-version", newJString(apiVersion))
  add(path_594678, "applicationId", newJString(applicationId))
  if ApplicationUpgradeDescription != nil:
    body_594680 = ApplicationUpgradeDescription
  result = call_594677.call(path_594678, query_594679, nil, nil, body_594680)

var startApplicationUpgrade* = Call_StartApplicationUpgrade_594669(
    name: "startApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/Upgrade",
    validator: validate_StartApplicationUpgrade_594670, base: "",
    url: url_StartApplicationUpgrade_594671, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupsFromBackupLocation_594681 = ref object of OpenApiRestCall_593439
proc url_GetBackupsFromBackupLocation_594683(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupsFromBackupLocation_594682(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594684 = query.getOrDefault("timeout")
  valid_594684 = validateParameter(valid_594684, JInt, required = false,
                                 default = newJInt(60))
  if valid_594684 != nil:
    section.add "timeout", valid_594684
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594685 = query.getOrDefault("api-version")
  valid_594685 = validateParameter(valid_594685, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594685 != nil:
    section.add "api-version", valid_594685
  var valid_594686 = query.getOrDefault("ContinuationToken")
  valid_594686 = validateParameter(valid_594686, JString, required = false,
                                 default = nil)
  if valid_594686 != nil:
    section.add "ContinuationToken", valid_594686
  var valid_594687 = query.getOrDefault("MaxResults")
  valid_594687 = validateParameter(valid_594687, JInt, required = false,
                                 default = newJInt(0))
  if valid_594687 != nil:
    section.add "MaxResults", valid_594687
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594689: Call_GetBackupsFromBackupLocation_594681; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  let valid = call_594689.validator(path, query, header, formData, body)
  let scheme = call_594689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594689.url(scheme.get, call_594689.host, call_594689.base,
                         call_594689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594689, url, valid)

proc call*(call_594690: Call_GetBackupsFromBackupLocation_594681;
          GetBackupByStorageQueryDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupsFromBackupLocation
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_594691 = newJObject()
  var body_594692 = newJObject()
  add(query_594691, "timeout", newJInt(timeout))
  add(query_594691, "api-version", newJString(apiVersion))
  if GetBackupByStorageQueryDescription != nil:
    body_594692 = GetBackupByStorageQueryDescription
  add(query_594691, "ContinuationToken", newJString(ContinuationToken))
  add(query_594691, "MaxResults", newJInt(MaxResults))
  result = call_594690.call(nil, query_594691, nil, nil, body_594692)

var getBackupsFromBackupLocation* = Call_GetBackupsFromBackupLocation_594681(
    name: "getBackupsFromBackupLocation", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/$/GetBackups",
    validator: validate_GetBackupsFromBackupLocation_594682, base: "",
    url: url_GetBackupsFromBackupLocation_594683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyList_594693 = ref object of OpenApiRestCall_593439
proc url_GetBackupPolicyList_594695(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupPolicyList_594694(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Get a list of all the backup policies configured.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594696 = query.getOrDefault("timeout")
  valid_594696 = validateParameter(valid_594696, JInt, required = false,
                                 default = newJInt(60))
  if valid_594696 != nil:
    section.add "timeout", valid_594696
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594697 = query.getOrDefault("api-version")
  valid_594697 = validateParameter(valid_594697, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594697 != nil:
    section.add "api-version", valid_594697
  var valid_594698 = query.getOrDefault("ContinuationToken")
  valid_594698 = validateParameter(valid_594698, JString, required = false,
                                 default = nil)
  if valid_594698 != nil:
    section.add "ContinuationToken", valid_594698
  var valid_594699 = query.getOrDefault("MaxResults")
  valid_594699 = validateParameter(valid_594699, JInt, required = false,
                                 default = newJInt(0))
  if valid_594699 != nil:
    section.add "MaxResults", valid_594699
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594700: Call_GetBackupPolicyList_594693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a list of all the backup policies configured.
  ## 
  let valid = call_594700.validator(path, query, header, formData, body)
  let scheme = call_594700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594700.url(scheme.get, call_594700.host, call_594700.base,
                         call_594700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594700, url, valid)

proc call*(call_594701: Call_GetBackupPolicyList_594693; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupPolicyList
  ## Get a list of all the backup policies configured.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_594702 = newJObject()
  add(query_594702, "timeout", newJInt(timeout))
  add(query_594702, "api-version", newJString(apiVersion))
  add(query_594702, "ContinuationToken", newJString(ContinuationToken))
  add(query_594702, "MaxResults", newJInt(MaxResults))
  result = call_594701.call(nil, query_594702, nil, nil, nil)

var getBackupPolicyList* = Call_GetBackupPolicyList_594693(
    name: "getBackupPolicyList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies",
    validator: validate_GetBackupPolicyList_594694, base: "",
    url: url_GetBackupPolicyList_594695, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBackupPolicy_594703 = ref object of OpenApiRestCall_593439
proc url_CreateBackupPolicy_594705(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateBackupPolicy_594704(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594706 = query.getOrDefault("timeout")
  valid_594706 = validateParameter(valid_594706, JInt, required = false,
                                 default = newJInt(60))
  if valid_594706 != nil:
    section.add "timeout", valid_594706
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594707 = query.getOrDefault("api-version")
  valid_594707 = validateParameter(valid_594707, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594707 != nil:
    section.add "api-version", valid_594707
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594709: Call_CreateBackupPolicy_594703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  let valid = call_594709.validator(path, query, header, formData, body)
  let scheme = call_594709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594709.url(scheme.get, call_594709.host, call_594709.base,
                         call_594709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594709, url, valid)

proc call*(call_594710: Call_CreateBackupPolicy_594703;
          BackupPolicyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## createBackupPolicy
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  var query_594711 = newJObject()
  var body_594712 = newJObject()
  add(query_594711, "timeout", newJInt(timeout))
  add(query_594711, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_594712 = BackupPolicyDescription
  result = call_594710.call(nil, query_594711, nil, nil, body_594712)

var createBackupPolicy* = Call_CreateBackupPolicy_594703(
    name: "createBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/$/Create",
    validator: validate_CreateBackupPolicy_594704, base: "",
    url: url_CreateBackupPolicy_594705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyByName_594713 = ref object of OpenApiRestCall_593439
proc url_GetBackupPolicyByName_594715(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetBackupPolicyByName_594714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594716 = path.getOrDefault("backupPolicyName")
  valid_594716 = validateParameter(valid_594716, JString, required = true,
                                 default = nil)
  if valid_594716 != nil:
    section.add "backupPolicyName", valid_594716
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594717 = query.getOrDefault("timeout")
  valid_594717 = validateParameter(valid_594717, JInt, required = false,
                                 default = newJInt(60))
  if valid_594717 != nil:
    section.add "timeout", valid_594717
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594718 = query.getOrDefault("api-version")
  valid_594718 = validateParameter(valid_594718, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594718 != nil:
    section.add "api-version", valid_594718
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594719: Call_GetBackupPolicyByName_594713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  let valid = call_594719.validator(path, query, header, formData, body)
  let scheme = call_594719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594719.url(scheme.get, call_594719.host, call_594719.base,
                         call_594719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594719, url, valid)

proc call*(call_594720: Call_GetBackupPolicyByName_594713;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getBackupPolicyByName
  ## Gets a particular backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_594721 = newJObject()
  var query_594722 = newJObject()
  add(query_594722, "timeout", newJInt(timeout))
  add(query_594722, "api-version", newJString(apiVersion))
  add(path_594721, "backupPolicyName", newJString(backupPolicyName))
  result = call_594720.call(path_594721, query_594722, nil, nil, nil)

var getBackupPolicyByName* = Call_GetBackupPolicyByName_594713(
    name: "getBackupPolicyByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}",
    validator: validate_GetBackupPolicyByName_594714, base: "",
    url: url_GetBackupPolicyByName_594715, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBackupPolicy_594723 = ref object of OpenApiRestCall_593439
proc url_DeleteBackupPolicy_594725(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteBackupPolicy_594724(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594726 = path.getOrDefault("backupPolicyName")
  valid_594726 = validateParameter(valid_594726, JString, required = true,
                                 default = nil)
  if valid_594726 != nil:
    section.add "backupPolicyName", valid_594726
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594727 = query.getOrDefault("timeout")
  valid_594727 = validateParameter(valid_594727, JInt, required = false,
                                 default = newJInt(60))
  if valid_594727 != nil:
    section.add "timeout", valid_594727
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594728 = query.getOrDefault("api-version")
  valid_594728 = validateParameter(valid_594728, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594728 != nil:
    section.add "api-version", valid_594728
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594729: Call_DeleteBackupPolicy_594723; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  let valid = call_594729.validator(path, query, header, formData, body)
  let scheme = call_594729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594729.url(scheme.get, call_594729.host, call_594729.base,
                         call_594729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594729, url, valid)

proc call*(call_594730: Call_DeleteBackupPolicy_594723; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## deleteBackupPolicy
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_594731 = newJObject()
  var query_594732 = newJObject()
  add(query_594732, "timeout", newJInt(timeout))
  add(query_594732, "api-version", newJString(apiVersion))
  add(path_594731, "backupPolicyName", newJString(backupPolicyName))
  result = call_594730.call(path_594731, query_594732, nil, nil, nil)

var deleteBackupPolicy* = Call_DeleteBackupPolicy_594723(
    name: "deleteBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete",
    validator: validate_DeleteBackupPolicy_594724, base: "",
    url: url_DeleteBackupPolicy_594725, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAllEntitiesBackedUpByPolicy_594733 = ref object of OpenApiRestCall_593439
proc url_GetAllEntitiesBackedUpByPolicy_594735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/GetBackupEnabledEntities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetAllEntitiesBackedUpByPolicy_594734(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594736 = path.getOrDefault("backupPolicyName")
  valid_594736 = validateParameter(valid_594736, JString, required = true,
                                 default = nil)
  if valid_594736 != nil:
    section.add "backupPolicyName", valid_594736
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594737 = query.getOrDefault("timeout")
  valid_594737 = validateParameter(valid_594737, JInt, required = false,
                                 default = newJInt(60))
  if valid_594737 != nil:
    section.add "timeout", valid_594737
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594738 = query.getOrDefault("api-version")
  valid_594738 = validateParameter(valid_594738, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594738 != nil:
    section.add "api-version", valid_594738
  var valid_594739 = query.getOrDefault("ContinuationToken")
  valid_594739 = validateParameter(valid_594739, JString, required = false,
                                 default = nil)
  if valid_594739 != nil:
    section.add "ContinuationToken", valid_594739
  var valid_594740 = query.getOrDefault("MaxResults")
  valid_594740 = validateParameter(valid_594740, JInt, required = false,
                                 default = newJInt(0))
  if valid_594740 != nil:
    section.add "MaxResults", valid_594740
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594741: Call_GetAllEntitiesBackedUpByPolicy_594733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  let valid = call_594741.validator(path, query, header, formData, body)
  let scheme = call_594741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594741.url(scheme.get, call_594741.host, call_594741.base,
                         call_594741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594741, url, valid)

proc call*(call_594742: Call_GetAllEntitiesBackedUpByPolicy_594733;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getAllEntitiesBackedUpByPolicy
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_594743 = newJObject()
  var query_594744 = newJObject()
  add(query_594744, "timeout", newJInt(timeout))
  add(query_594744, "api-version", newJString(apiVersion))
  add(path_594743, "backupPolicyName", newJString(backupPolicyName))
  add(query_594744, "ContinuationToken", newJString(ContinuationToken))
  add(query_594744, "MaxResults", newJInt(MaxResults))
  result = call_594742.call(path_594743, query_594744, nil, nil, nil)

var getAllEntitiesBackedUpByPolicy* = Call_GetAllEntitiesBackedUpByPolicy_594733(
    name: "getAllEntitiesBackedUpByPolicy", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities",
    validator: validate_GetAllEntitiesBackedUpByPolicy_594734, base: "",
    url: url_GetAllEntitiesBackedUpByPolicy_594735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBackupPolicy_594745 = ref object of OpenApiRestCall_593439
proc url_UpdateBackupPolicy_594747(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateBackupPolicy_594746(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_594748 = path.getOrDefault("backupPolicyName")
  valid_594748 = validateParameter(valid_594748, JString, required = true,
                                 default = nil)
  if valid_594748 != nil:
    section.add "backupPolicyName", valid_594748
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594749 = query.getOrDefault("timeout")
  valid_594749 = validateParameter(valid_594749, JInt, required = false,
                                 default = newJInt(60))
  if valid_594749 != nil:
    section.add "timeout", valid_594749
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594750 = query.getOrDefault("api-version")
  valid_594750 = validateParameter(valid_594750, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594750 != nil:
    section.add "api-version", valid_594750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594752: Call_UpdateBackupPolicy_594745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  let valid = call_594752.validator(path, query, header, formData, body)
  let scheme = call_594752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594752.url(scheme.get, call_594752.host, call_594752.base,
                         call_594752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594752, url, valid)

proc call*(call_594753: Call_UpdateBackupPolicy_594745;
          BackupPolicyDescription: JsonNode; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## updateBackupPolicy
  ## Updates the backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_594754 = newJObject()
  var query_594755 = newJObject()
  var body_594756 = newJObject()
  add(query_594755, "timeout", newJInt(timeout))
  add(query_594755, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_594756 = BackupPolicyDescription
  add(path_594754, "backupPolicyName", newJString(backupPolicyName))
  result = call_594753.call(path_594754, query_594755, nil, nil, body_594756)

var updateBackupPolicy* = Call_UpdateBackupPolicy_594745(
    name: "updateBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update",
    validator: validate_UpdateBackupPolicy_594746, base: "",
    url: url_UpdateBackupPolicy_594747, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatusList_594757 = ref object of OpenApiRestCall_593439
proc url_GetComposeDeploymentStatusList_594759(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetComposeDeploymentStatusList_594758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_594760 = query.getOrDefault("timeout")
  valid_594760 = validateParameter(valid_594760, JInt, required = false,
                                 default = newJInt(60))
  if valid_594760 != nil:
    section.add "timeout", valid_594760
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594761 = query.getOrDefault("api-version")
  valid_594761 = validateParameter(valid_594761, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594761 != nil:
    section.add "api-version", valid_594761
  var valid_594762 = query.getOrDefault("ContinuationToken")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "ContinuationToken", valid_594762
  var valid_594763 = query.getOrDefault("MaxResults")
  valid_594763 = validateParameter(valid_594763, JInt, required = false,
                                 default = newJInt(0))
  if valid_594763 != nil:
    section.add "MaxResults", valid_594763
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594764: Call_GetComposeDeploymentStatusList_594757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  let valid = call_594764.validator(path, query, header, formData, body)
  let scheme = call_594764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594764.url(scheme.get, call_594764.host, call_594764.base,
                         call_594764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594764, url, valid)

proc call*(call_594765: Call_GetComposeDeploymentStatusList_594757;
          timeout: int = 60; apiVersion: string = "6.0-preview";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getComposeDeploymentStatusList
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_594766 = newJObject()
  add(query_594766, "timeout", newJInt(timeout))
  add(query_594766, "api-version", newJString(apiVersion))
  add(query_594766, "ContinuationToken", newJString(ContinuationToken))
  add(query_594766, "MaxResults", newJInt(MaxResults))
  result = call_594765.call(nil, query_594766, nil, nil, nil)

var getComposeDeploymentStatusList* = Call_GetComposeDeploymentStatusList_594757(
    name: "getComposeDeploymentStatusList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments",
    validator: validate_GetComposeDeploymentStatusList_594758, base: "",
    url: url_GetComposeDeploymentStatusList_594759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateComposeDeployment_594767 = ref object of OpenApiRestCall_593439
proc url_CreateComposeDeployment_594769(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateComposeDeployment_594768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594770 = query.getOrDefault("timeout")
  valid_594770 = validateParameter(valid_594770, JInt, required = false,
                                 default = newJInt(60))
  if valid_594770 != nil:
    section.add "timeout", valid_594770
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594771 = query.getOrDefault("api-version")
  valid_594771 = validateParameter(valid_594771, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594771 != nil:
    section.add "api-version", valid_594771
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594773: Call_CreateComposeDeployment_594767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  let valid = call_594773.validator(path, query, header, formData, body)
  let scheme = call_594773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594773.url(scheme.get, call_594773.host, call_594773.base,
                         call_594773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594773, url, valid)

proc call*(call_594774: Call_CreateComposeDeployment_594767;
          CreateComposeDeploymentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## createComposeDeployment
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  var query_594775 = newJObject()
  var body_594776 = newJObject()
  add(query_594775, "timeout", newJInt(timeout))
  add(query_594775, "api-version", newJString(apiVersion))
  if CreateComposeDeploymentDescription != nil:
    body_594776 = CreateComposeDeploymentDescription
  result = call_594774.call(nil, query_594775, nil, nil, body_594776)

var createComposeDeployment* = Call_CreateComposeDeployment_594767(
    name: "createComposeDeployment", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/ComposeDeployments/$/Create",
    validator: validate_CreateComposeDeployment_594768, base: "",
    url: url_CreateComposeDeployment_594769, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatus_594777 = ref object of OpenApiRestCall_593439
proc url_GetComposeDeploymentStatus_594779(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentStatus_594778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594780 = path.getOrDefault("deploymentName")
  valid_594780 = validateParameter(valid_594780, JString, required = true,
                                 default = nil)
  if valid_594780 != nil:
    section.add "deploymentName", valid_594780
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594781 = query.getOrDefault("timeout")
  valid_594781 = validateParameter(valid_594781, JInt, required = false,
                                 default = newJInt(60))
  if valid_594781 != nil:
    section.add "timeout", valid_594781
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594782 = query.getOrDefault("api-version")
  valid_594782 = validateParameter(valid_594782, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594782 != nil:
    section.add "api-version", valid_594782
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594783: Call_GetComposeDeploymentStatus_594777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  let valid = call_594783.validator(path, query, header, formData, body)
  let scheme = call_594783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594783.url(scheme.get, call_594783.host, call_594783.base,
                         call_594783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594783, url, valid)

proc call*(call_594784: Call_GetComposeDeploymentStatus_594777;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentStatus
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594785 = newJObject()
  var query_594786 = newJObject()
  add(query_594786, "timeout", newJInt(timeout))
  add(query_594786, "api-version", newJString(apiVersion))
  add(path_594785, "deploymentName", newJString(deploymentName))
  result = call_594784.call(path_594785, query_594786, nil, nil, nil)

var getComposeDeploymentStatus* = Call_GetComposeDeploymentStatus_594777(
    name: "getComposeDeploymentStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments/{deploymentName}",
    validator: validate_GetComposeDeploymentStatus_594778, base: "",
    url: url_GetComposeDeploymentStatus_594779,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveComposeDeployment_594787 = ref object of OpenApiRestCall_593439
proc url_RemoveComposeDeployment_594789(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveComposeDeployment_594788(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594790 = path.getOrDefault("deploymentName")
  valid_594790 = validateParameter(valid_594790, JString, required = true,
                                 default = nil)
  if valid_594790 != nil:
    section.add "deploymentName", valid_594790
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594791 = query.getOrDefault("timeout")
  valid_594791 = validateParameter(valid_594791, JInt, required = false,
                                 default = newJInt(60))
  if valid_594791 != nil:
    section.add "timeout", valid_594791
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594792 = query.getOrDefault("api-version")
  valid_594792 = validateParameter(valid_594792, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594792 != nil:
    section.add "api-version", valid_594792
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594793: Call_RemoveComposeDeployment_594787; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  let valid = call_594793.validator(path, query, header, formData, body)
  let scheme = call_594793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594793.url(scheme.get, call_594793.host, call_594793.base,
                         call_594793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594793, url, valid)

proc call*(call_594794: Call_RemoveComposeDeployment_594787;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## removeComposeDeployment
  ## Deletes an existing Service Fabric compose deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594795 = newJObject()
  var query_594796 = newJObject()
  add(query_594796, "timeout", newJInt(timeout))
  add(query_594796, "api-version", newJString(apiVersion))
  add(path_594795, "deploymentName", newJString(deploymentName))
  result = call_594794.call(path_594795, query_594796, nil, nil, nil)

var removeComposeDeployment* = Call_RemoveComposeDeployment_594787(
    name: "removeComposeDeployment", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Delete",
    validator: validate_RemoveComposeDeployment_594788, base: "",
    url: url_RemoveComposeDeployment_594789, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentUpgradeProgress_594797 = ref object of OpenApiRestCall_593439
proc url_GetComposeDeploymentUpgradeProgress_594799(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentUpgradeProgress_594798(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594800 = path.getOrDefault("deploymentName")
  valid_594800 = validateParameter(valid_594800, JString, required = true,
                                 default = nil)
  if valid_594800 != nil:
    section.add "deploymentName", valid_594800
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594801 = query.getOrDefault("timeout")
  valid_594801 = validateParameter(valid_594801, JInt, required = false,
                                 default = newJInt(60))
  if valid_594801 != nil:
    section.add "timeout", valid_594801
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594802 = query.getOrDefault("api-version")
  valid_594802 = validateParameter(valid_594802, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594802 != nil:
    section.add "api-version", valid_594802
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594803: Call_GetComposeDeploymentUpgradeProgress_594797;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_594803.validator(path, query, header, formData, body)
  let scheme = call_594803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594803.url(scheme.get, call_594803.host, call_594803.base,
                         call_594803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594803, url, valid)

proc call*(call_594804: Call_GetComposeDeploymentUpgradeProgress_594797;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentUpgradeProgress
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594805 = newJObject()
  var query_594806 = newJObject()
  add(query_594806, "timeout", newJInt(timeout))
  add(query_594806, "api-version", newJString(apiVersion))
  add(path_594805, "deploymentName", newJString(deploymentName))
  result = call_594804.call(path_594805, query_594806, nil, nil, nil)

var getComposeDeploymentUpgradeProgress* = Call_GetComposeDeploymentUpgradeProgress_594797(
    name: "getComposeDeploymentUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress",
    validator: validate_GetComposeDeploymentUpgradeProgress_594798, base: "",
    url: url_GetComposeDeploymentUpgradeProgress_594799,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartRollbackComposeDeploymentUpgrade_594807 = ref object of OpenApiRestCall_593439
proc url_StartRollbackComposeDeploymentUpgrade_594809(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartRollbackComposeDeploymentUpgrade_594808(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594810 = path.getOrDefault("deploymentName")
  valid_594810 = validateParameter(valid_594810, JString, required = true,
                                 default = nil)
  if valid_594810 != nil:
    section.add "deploymentName", valid_594810
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  var valid_594811 = query.getOrDefault("timeout")
  valid_594811 = validateParameter(valid_594811, JInt, required = false,
                                 default = newJInt(60))
  if valid_594811 != nil:
    section.add "timeout", valid_594811
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594812 = query.getOrDefault("api-version")
  valid_594812 = validateParameter(valid_594812, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_594812 != nil:
    section.add "api-version", valid_594812
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594813: Call_StartRollbackComposeDeploymentUpgrade_594807;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  let valid = call_594813.validator(path, query, header, formData, body)
  let scheme = call_594813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594813.url(scheme.get, call_594813.host, call_594813.base,
                         call_594813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594813, url, valid)

proc call*(call_594814: Call_StartRollbackComposeDeploymentUpgrade_594807;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.4-preview"): Recallable =
  ## startRollbackComposeDeploymentUpgrade
  ## Rollback a service fabric compose deployment upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_594815 = newJObject()
  var query_594816 = newJObject()
  add(query_594816, "timeout", newJInt(timeout))
  add(query_594816, "api-version", newJString(apiVersion))
  add(path_594815, "deploymentName", newJString(deploymentName))
  result = call_594814.call(path_594815, query_594816, nil, nil, nil)

var startRollbackComposeDeploymentUpgrade* = Call_StartRollbackComposeDeploymentUpgrade_594807(
    name: "startRollbackComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade",
    validator: validate_StartRollbackComposeDeploymentUpgrade_594808, base: "",
    url: url_StartRollbackComposeDeploymentUpgrade_594809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartComposeDeploymentUpgrade_594817 = ref object of OpenApiRestCall_593439
proc url_StartComposeDeploymentUpgrade_594819(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartComposeDeploymentUpgrade_594818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_594820 = path.getOrDefault("deploymentName")
  valid_594820 = validateParameter(valid_594820, JString, required = true,
                                 default = nil)
  if valid_594820 != nil:
    section.add "deploymentName", valid_594820
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_594821 = query.getOrDefault("timeout")
  valid_594821 = validateParameter(valid_594821, JInt, required = false,
                                 default = newJInt(60))
  if valid_594821 != nil:
    section.add "timeout", valid_594821
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594822 = query.getOrDefault("api-version")
  valid_594822 = validateParameter(valid_594822, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_594822 != nil:
    section.add "api-version", valid_594822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594824: Call_StartComposeDeploymentUpgrade_594817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  let valid = call_594824.validator(path, query, header, formData, body)
  let scheme = call_594824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594824.url(scheme.get, call_594824.host, call_594824.base,
                         call_594824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594824, url, valid)

proc call*(call_594825: Call_StartComposeDeploymentUpgrade_594817;
          deploymentName: string; ComposeDeploymentUpgradeDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0-preview"): Recallable =
  ## startComposeDeploymentUpgrade
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  var path_594826 = newJObject()
  var query_594827 = newJObject()
  var body_594828 = newJObject()
  add(query_594827, "timeout", newJInt(timeout))
  add(query_594827, "api-version", newJString(apiVersion))
  add(path_594826, "deploymentName", newJString(deploymentName))
  if ComposeDeploymentUpgradeDescription != nil:
    body_594828 = ComposeDeploymentUpgradeDescription
  result = call_594825.call(path_594826, query_594827, nil, nil, body_594828)

var startComposeDeploymentUpgrade* = Call_StartComposeDeploymentUpgrade_594817(
    name: "startComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Upgrade",
    validator: validate_StartComposeDeploymentUpgrade_594818, base: "",
    url: url_StartComposeDeploymentUpgrade_594819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationsEventList_594829 = ref object of OpenApiRestCall_593439
proc url_GetApplicationsEventList_594831(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationsEventList_594830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594832 = query.getOrDefault("timeout")
  valid_594832 = validateParameter(valid_594832, JInt, required = false,
                                 default = newJInt(60))
  if valid_594832 != nil:
    section.add "timeout", valid_594832
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594833 = query.getOrDefault("api-version")
  valid_594833 = validateParameter(valid_594833, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594833 != nil:
    section.add "api-version", valid_594833
  var valid_594834 = query.getOrDefault("SkipCorrelationLookup")
  valid_594834 = validateParameter(valid_594834, JBool, required = false, default = nil)
  if valid_594834 != nil:
    section.add "SkipCorrelationLookup", valid_594834
  var valid_594835 = query.getOrDefault("EventsTypesFilter")
  valid_594835 = validateParameter(valid_594835, JString, required = false,
                                 default = nil)
  if valid_594835 != nil:
    section.add "EventsTypesFilter", valid_594835
  var valid_594836 = query.getOrDefault("EndTimeUtc")
  valid_594836 = validateParameter(valid_594836, JString, required = true,
                                 default = nil)
  if valid_594836 != nil:
    section.add "EndTimeUtc", valid_594836
  var valid_594837 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594837 = validateParameter(valid_594837, JBool, required = false, default = nil)
  if valid_594837 != nil:
    section.add "ExcludeAnalysisEvents", valid_594837
  var valid_594838 = query.getOrDefault("StartTimeUtc")
  valid_594838 = validateParameter(valid_594838, JString, required = true,
                                 default = nil)
  if valid_594838 != nil:
    section.add "StartTimeUtc", valid_594838
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594839: Call_GetApplicationsEventList_594829; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_594839.validator(path, query, header, formData, body)
  let scheme = call_594839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594839.url(scheme.get, call_594839.host, call_594839.base,
                         call_594839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594839, url, valid)

proc call*(call_594840: Call_GetApplicationsEventList_594829; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationsEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594841 = newJObject()
  add(query_594841, "timeout", newJInt(timeout))
  add(query_594841, "api-version", newJString(apiVersion))
  add(query_594841, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594841, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594841, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594841, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594841, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594840.call(nil, query_594841, nil, nil, nil)

var getApplicationsEventList* = Call_GetApplicationsEventList_594829(
    name: "getApplicationsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Applications/Events",
    validator: validate_GetApplicationsEventList_594830, base: "",
    url: url_GetApplicationsEventList_594831, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationEventList_594842 = ref object of OpenApiRestCall_593439
proc url_GetApplicationEventList_594844(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationEventList_594843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_594845 = path.getOrDefault("applicationId")
  valid_594845 = validateParameter(valid_594845, JString, required = true,
                                 default = nil)
  if valid_594845 != nil:
    section.add "applicationId", valid_594845
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594846 = query.getOrDefault("timeout")
  valid_594846 = validateParameter(valid_594846, JInt, required = false,
                                 default = newJInt(60))
  if valid_594846 != nil:
    section.add "timeout", valid_594846
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594847 = query.getOrDefault("api-version")
  valid_594847 = validateParameter(valid_594847, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594847 != nil:
    section.add "api-version", valid_594847
  var valid_594848 = query.getOrDefault("SkipCorrelationLookup")
  valid_594848 = validateParameter(valid_594848, JBool, required = false, default = nil)
  if valid_594848 != nil:
    section.add "SkipCorrelationLookup", valid_594848
  var valid_594849 = query.getOrDefault("EventsTypesFilter")
  valid_594849 = validateParameter(valid_594849, JString, required = false,
                                 default = nil)
  if valid_594849 != nil:
    section.add "EventsTypesFilter", valid_594849
  var valid_594850 = query.getOrDefault("EndTimeUtc")
  valid_594850 = validateParameter(valid_594850, JString, required = true,
                                 default = nil)
  if valid_594850 != nil:
    section.add "EndTimeUtc", valid_594850
  var valid_594851 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594851 = validateParameter(valid_594851, JBool, required = false, default = nil)
  if valid_594851 != nil:
    section.add "ExcludeAnalysisEvents", valid_594851
  var valid_594852 = query.getOrDefault("StartTimeUtc")
  valid_594852 = validateParameter(valid_594852, JString, required = true,
                                 default = nil)
  if valid_594852 != nil:
    section.add "StartTimeUtc", valid_594852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594853: Call_GetApplicationEventList_594842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_594853.validator(path, query, header, formData, body)
  let scheme = call_594853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594853.url(scheme.get, call_594853.host, call_594853.base,
                         call_594853.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594853, url, valid)

proc call*(call_594854: Call_GetApplicationEventList_594842; EndTimeUtc: string;
          applicationId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594855 = newJObject()
  var query_594856 = newJObject()
  add(query_594856, "timeout", newJInt(timeout))
  add(query_594856, "api-version", newJString(apiVersion))
  add(query_594856, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594856, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594856, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594855, "applicationId", newJString(applicationId))
  add(query_594856, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594856, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594854.call(path_594855, query_594856, nil, nil, nil)

var getApplicationEventList* = Call_GetApplicationEventList_594842(
    name: "getApplicationEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Applications/{applicationId}/$/Events",
    validator: validate_GetApplicationEventList_594843, base: "",
    url: url_GetApplicationEventList_594844, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterEventList_594857 = ref object of OpenApiRestCall_593439
proc url_GetClusterEventList_594859(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterEventList_594858(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ClusterEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594860 = query.getOrDefault("timeout")
  valid_594860 = validateParameter(valid_594860, JInt, required = false,
                                 default = newJInt(60))
  if valid_594860 != nil:
    section.add "timeout", valid_594860
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594861 = query.getOrDefault("api-version")
  valid_594861 = validateParameter(valid_594861, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594861 != nil:
    section.add "api-version", valid_594861
  var valid_594862 = query.getOrDefault("SkipCorrelationLookup")
  valid_594862 = validateParameter(valid_594862, JBool, required = false, default = nil)
  if valid_594862 != nil:
    section.add "SkipCorrelationLookup", valid_594862
  var valid_594863 = query.getOrDefault("EventsTypesFilter")
  valid_594863 = validateParameter(valid_594863, JString, required = false,
                                 default = nil)
  if valid_594863 != nil:
    section.add "EventsTypesFilter", valid_594863
  var valid_594864 = query.getOrDefault("EndTimeUtc")
  valid_594864 = validateParameter(valid_594864, JString, required = true,
                                 default = nil)
  if valid_594864 != nil:
    section.add "EndTimeUtc", valid_594864
  var valid_594865 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594865 = validateParameter(valid_594865, JBool, required = false, default = nil)
  if valid_594865 != nil:
    section.add "ExcludeAnalysisEvents", valid_594865
  var valid_594866 = query.getOrDefault("StartTimeUtc")
  valid_594866 = validateParameter(valid_594866, JString, required = true,
                                 default = nil)
  if valid_594866 != nil:
    section.add "StartTimeUtc", valid_594866
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594867: Call_GetClusterEventList_594857; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ClusterEvent objects.
  ## 
  let valid = call_594867.validator(path, query, header, formData, body)
  let scheme = call_594867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594867.url(scheme.get, call_594867.host, call_594867.base,
                         call_594867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594867, url, valid)

proc call*(call_594868: Call_GetClusterEventList_594857; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getClusterEventList
  ## The response is list of ClusterEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594869 = newJObject()
  add(query_594869, "timeout", newJInt(timeout))
  add(query_594869, "api-version", newJString(apiVersion))
  add(query_594869, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594869, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594869, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594869, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594869, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594868.call(nil, query_594869, nil, nil, nil)

var getClusterEventList* = Call_GetClusterEventList_594857(
    name: "getClusterEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Cluster/Events",
    validator: validate_GetClusterEventList_594858, base: "",
    url: url_GetClusterEventList_594859, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainersEventList_594870 = ref object of OpenApiRestCall_593439
proc url_GetContainersEventList_594872(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetContainersEventList_594871(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594873 = query.getOrDefault("timeout")
  valid_594873 = validateParameter(valid_594873, JInt, required = false,
                                 default = newJInt(60))
  if valid_594873 != nil:
    section.add "timeout", valid_594873
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594874 = query.getOrDefault("api-version")
  valid_594874 = validateParameter(valid_594874, JString, required = true,
                                 default = newJString("6.2-preview"))
  if valid_594874 != nil:
    section.add "api-version", valid_594874
  var valid_594875 = query.getOrDefault("SkipCorrelationLookup")
  valid_594875 = validateParameter(valid_594875, JBool, required = false, default = nil)
  if valid_594875 != nil:
    section.add "SkipCorrelationLookup", valid_594875
  var valid_594876 = query.getOrDefault("EventsTypesFilter")
  valid_594876 = validateParameter(valid_594876, JString, required = false,
                                 default = nil)
  if valid_594876 != nil:
    section.add "EventsTypesFilter", valid_594876
  var valid_594877 = query.getOrDefault("EndTimeUtc")
  valid_594877 = validateParameter(valid_594877, JString, required = true,
                                 default = nil)
  if valid_594877 != nil:
    section.add "EndTimeUtc", valid_594877
  var valid_594878 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594878 = validateParameter(valid_594878, JBool, required = false, default = nil)
  if valid_594878 != nil:
    section.add "ExcludeAnalysisEvents", valid_594878
  var valid_594879 = query.getOrDefault("StartTimeUtc")
  valid_594879 = validateParameter(valid_594879, JString, required = true,
                                 default = nil)
  if valid_594879 != nil:
    section.add "StartTimeUtc", valid_594879
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594880: Call_GetContainersEventList_594870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  let valid = call_594880.validator(path, query, header, formData, body)
  let scheme = call_594880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594880.url(scheme.get, call_594880.host, call_594880.base,
                         call_594880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594880, url, valid)

proc call*(call_594881: Call_GetContainersEventList_594870; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.2-preview";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getContainersEventList
  ## The response is list of ContainerInstanceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594882 = newJObject()
  add(query_594882, "timeout", newJInt(timeout))
  add(query_594882, "api-version", newJString(apiVersion))
  add(query_594882, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594882, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594882, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594882, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594882, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594881.call(nil, query_594882, nil, nil, nil)

var getContainersEventList* = Call_GetContainersEventList_594870(
    name: "getContainersEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Containers/Events",
    validator: validate_GetContainersEventList_594871, base: "",
    url: url_GetContainersEventList_594872, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCorrelatedEventList_594883 = ref object of OpenApiRestCall_593439
proc url_GetCorrelatedEventList_594885(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "eventInstanceId" in path, "`eventInstanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/CorrelatedEvents/"),
               (kind: VariableSegment, value: "eventInstanceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetCorrelatedEventList_594884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of FabricEvents.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   eventInstanceId: JString (required)
  ##                  : The EventInstanceId.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `eventInstanceId` field"
  var valid_594886 = path.getOrDefault("eventInstanceId")
  valid_594886 = validateParameter(valid_594886, JString, required = true,
                                 default = nil)
  if valid_594886 != nil:
    section.add "eventInstanceId", valid_594886
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_594887 = query.getOrDefault("timeout")
  valid_594887 = validateParameter(valid_594887, JInt, required = false,
                                 default = newJInt(60))
  if valid_594887 != nil:
    section.add "timeout", valid_594887
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594888 = query.getOrDefault("api-version")
  valid_594888 = validateParameter(valid_594888, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594888 != nil:
    section.add "api-version", valid_594888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594889: Call_GetCorrelatedEventList_594883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of FabricEvents.
  ## 
  let valid = call_594889.validator(path, query, header, formData, body)
  let scheme = call_594889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594889.url(scheme.get, call_594889.host, call_594889.base,
                         call_594889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594889, url, valid)

proc call*(call_594890: Call_GetCorrelatedEventList_594883;
          eventInstanceId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getCorrelatedEventList
  ## The response is list of FabricEvents.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   eventInstanceId: string (required)
  ##                  : The EventInstanceId.
  var path_594891 = newJObject()
  var query_594892 = newJObject()
  add(query_594892, "timeout", newJInt(timeout))
  add(query_594892, "api-version", newJString(apiVersion))
  add(path_594891, "eventInstanceId", newJString(eventInstanceId))
  result = call_594890.call(path_594891, query_594892, nil, nil, nil)

var getCorrelatedEventList* = Call_GetCorrelatedEventList_594883(
    name: "getCorrelatedEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events",
    validator: validate_GetCorrelatedEventList_594884, base: "",
    url: url_GetCorrelatedEventList_594885, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodesEventList_594893 = ref object of OpenApiRestCall_593439
proc url_GetNodesEventList_594895(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodesEventList_594894(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594896 = query.getOrDefault("timeout")
  valid_594896 = validateParameter(valid_594896, JInt, required = false,
                                 default = newJInt(60))
  if valid_594896 != nil:
    section.add "timeout", valid_594896
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594897 = query.getOrDefault("api-version")
  valid_594897 = validateParameter(valid_594897, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594897 != nil:
    section.add "api-version", valid_594897
  var valid_594898 = query.getOrDefault("SkipCorrelationLookup")
  valid_594898 = validateParameter(valid_594898, JBool, required = false, default = nil)
  if valid_594898 != nil:
    section.add "SkipCorrelationLookup", valid_594898
  var valid_594899 = query.getOrDefault("EventsTypesFilter")
  valid_594899 = validateParameter(valid_594899, JString, required = false,
                                 default = nil)
  if valid_594899 != nil:
    section.add "EventsTypesFilter", valid_594899
  var valid_594900 = query.getOrDefault("EndTimeUtc")
  valid_594900 = validateParameter(valid_594900, JString, required = true,
                                 default = nil)
  if valid_594900 != nil:
    section.add "EndTimeUtc", valid_594900
  var valid_594901 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594901 = validateParameter(valid_594901, JBool, required = false, default = nil)
  if valid_594901 != nil:
    section.add "ExcludeAnalysisEvents", valid_594901
  var valid_594902 = query.getOrDefault("StartTimeUtc")
  valid_594902 = validateParameter(valid_594902, JString, required = true,
                                 default = nil)
  if valid_594902 != nil:
    section.add "StartTimeUtc", valid_594902
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594903: Call_GetNodesEventList_594893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_594903.validator(path, query, header, formData, body)
  let scheme = call_594903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594903.url(scheme.get, call_594903.host, call_594903.base,
                         call_594903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594903, url, valid)

proc call*(call_594904: Call_GetNodesEventList_594893; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodesEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594905 = newJObject()
  add(query_594905, "timeout", newJInt(timeout))
  add(query_594905, "api-version", newJString(apiVersion))
  add(query_594905, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594905, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594905, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594905, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594905, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594904.call(nil, query_594905, nil, nil, nil)

var getNodesEventList* = Call_GetNodesEventList_594893(name: "getNodesEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/Events", validator: validate_GetNodesEventList_594894,
    base: "", url: url_GetNodesEventList_594895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeEventList_594906 = ref object of OpenApiRestCall_593439
proc url_GetNodeEventList_594908(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeEventList_594907(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_594909 = path.getOrDefault("nodeName")
  valid_594909 = validateParameter(valid_594909, JString, required = true,
                                 default = nil)
  if valid_594909 != nil:
    section.add "nodeName", valid_594909
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594910 = query.getOrDefault("timeout")
  valid_594910 = validateParameter(valid_594910, JInt, required = false,
                                 default = newJInt(60))
  if valid_594910 != nil:
    section.add "timeout", valid_594910
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594911 = query.getOrDefault("api-version")
  valid_594911 = validateParameter(valid_594911, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594911 != nil:
    section.add "api-version", valid_594911
  var valid_594912 = query.getOrDefault("SkipCorrelationLookup")
  valid_594912 = validateParameter(valid_594912, JBool, required = false, default = nil)
  if valid_594912 != nil:
    section.add "SkipCorrelationLookup", valid_594912
  var valid_594913 = query.getOrDefault("EventsTypesFilter")
  valid_594913 = validateParameter(valid_594913, JString, required = false,
                                 default = nil)
  if valid_594913 != nil:
    section.add "EventsTypesFilter", valid_594913
  var valid_594914 = query.getOrDefault("EndTimeUtc")
  valid_594914 = validateParameter(valid_594914, JString, required = true,
                                 default = nil)
  if valid_594914 != nil:
    section.add "EndTimeUtc", valid_594914
  var valid_594915 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594915 = validateParameter(valid_594915, JBool, required = false, default = nil)
  if valid_594915 != nil:
    section.add "ExcludeAnalysisEvents", valid_594915
  var valid_594916 = query.getOrDefault("StartTimeUtc")
  valid_594916 = validateParameter(valid_594916, JString, required = true,
                                 default = nil)
  if valid_594916 != nil:
    section.add "StartTimeUtc", valid_594916
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594917: Call_GetNodeEventList_594906; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_594917.validator(path, query, header, formData, body)
  let scheme = call_594917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594917.url(scheme.get, call_594917.host, call_594917.base,
                         call_594917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594917, url, valid)

proc call*(call_594918: Call_GetNodeEventList_594906; nodeName: string;
          EndTimeUtc: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodeEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594919 = newJObject()
  var query_594920 = newJObject()
  add(query_594920, "timeout", newJInt(timeout))
  add(query_594920, "api-version", newJString(apiVersion))
  add(path_594919, "nodeName", newJString(nodeName))
  add(query_594920, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594920, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594920, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594920, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594920, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594918.call(path_594919, query_594920, nil, nil, nil)

var getNodeEventList* = Call_GetNodeEventList_594906(name: "getNodeEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/{nodeName}/$/Events",
    validator: validate_GetNodeEventList_594907, base: "",
    url: url_GetNodeEventList_594908, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionsEventList_594921 = ref object of OpenApiRestCall_593439
proc url_GetPartitionsEventList_594923(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPartitionsEventList_594922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594924 = query.getOrDefault("timeout")
  valid_594924 = validateParameter(valid_594924, JInt, required = false,
                                 default = newJInt(60))
  if valid_594924 != nil:
    section.add "timeout", valid_594924
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594925 = query.getOrDefault("api-version")
  valid_594925 = validateParameter(valid_594925, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594925 != nil:
    section.add "api-version", valid_594925
  var valid_594926 = query.getOrDefault("SkipCorrelationLookup")
  valid_594926 = validateParameter(valid_594926, JBool, required = false, default = nil)
  if valid_594926 != nil:
    section.add "SkipCorrelationLookup", valid_594926
  var valid_594927 = query.getOrDefault("EventsTypesFilter")
  valid_594927 = validateParameter(valid_594927, JString, required = false,
                                 default = nil)
  if valid_594927 != nil:
    section.add "EventsTypesFilter", valid_594927
  var valid_594928 = query.getOrDefault("EndTimeUtc")
  valid_594928 = validateParameter(valid_594928, JString, required = true,
                                 default = nil)
  if valid_594928 != nil:
    section.add "EndTimeUtc", valid_594928
  var valid_594929 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594929 = validateParameter(valid_594929, JBool, required = false, default = nil)
  if valid_594929 != nil:
    section.add "ExcludeAnalysisEvents", valid_594929
  var valid_594930 = query.getOrDefault("StartTimeUtc")
  valid_594930 = validateParameter(valid_594930, JString, required = true,
                                 default = nil)
  if valid_594930 != nil:
    section.add "StartTimeUtc", valid_594930
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594931: Call_GetPartitionsEventList_594921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_594931.validator(path, query, header, formData, body)
  let scheme = call_594931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594931.url(scheme.get, call_594931.host, call_594931.base,
                         call_594931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594931, url, valid)

proc call*(call_594932: Call_GetPartitionsEventList_594921; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionsEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594933 = newJObject()
  add(query_594933, "timeout", newJInt(timeout))
  add(query_594933, "api-version", newJString(apiVersion))
  add(query_594933, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594933, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594933, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594933, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594933, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594932.call(nil, query_594933, nil, nil, nil)

var getPartitionsEventList* = Call_GetPartitionsEventList_594921(
    name: "getPartitionsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/Events",
    validator: validate_GetPartitionsEventList_594922, base: "",
    url: url_GetPartitionsEventList_594923, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionEventList_594934 = ref object of OpenApiRestCall_593439
proc url_GetPartitionEventList_594936(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionEventList_594935(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_594937 = path.getOrDefault("partitionId")
  valid_594937 = validateParameter(valid_594937, JString, required = true,
                                 default = nil)
  if valid_594937 != nil:
    section.add "partitionId", valid_594937
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594938 = query.getOrDefault("timeout")
  valid_594938 = validateParameter(valid_594938, JInt, required = false,
                                 default = newJInt(60))
  if valid_594938 != nil:
    section.add "timeout", valid_594938
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594939 = query.getOrDefault("api-version")
  valid_594939 = validateParameter(valid_594939, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594939 != nil:
    section.add "api-version", valid_594939
  var valid_594940 = query.getOrDefault("SkipCorrelationLookup")
  valid_594940 = validateParameter(valid_594940, JBool, required = false, default = nil)
  if valid_594940 != nil:
    section.add "SkipCorrelationLookup", valid_594940
  var valid_594941 = query.getOrDefault("EventsTypesFilter")
  valid_594941 = validateParameter(valid_594941, JString, required = false,
                                 default = nil)
  if valid_594941 != nil:
    section.add "EventsTypesFilter", valid_594941
  var valid_594942 = query.getOrDefault("EndTimeUtc")
  valid_594942 = validateParameter(valid_594942, JString, required = true,
                                 default = nil)
  if valid_594942 != nil:
    section.add "EndTimeUtc", valid_594942
  var valid_594943 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594943 = validateParameter(valid_594943, JBool, required = false, default = nil)
  if valid_594943 != nil:
    section.add "ExcludeAnalysisEvents", valid_594943
  var valid_594944 = query.getOrDefault("StartTimeUtc")
  valid_594944 = validateParameter(valid_594944, JString, required = true,
                                 default = nil)
  if valid_594944 != nil:
    section.add "StartTimeUtc", valid_594944
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594945: Call_GetPartitionEventList_594934; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_594945.validator(path, query, header, formData, body)
  let scheme = call_594945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594945.url(scheme.get, call_594945.host, call_594945.base,
                         call_594945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594945, url, valid)

proc call*(call_594946: Call_GetPartitionEventList_594934; EndTimeUtc: string;
          partitionId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594947 = newJObject()
  var query_594948 = newJObject()
  add(query_594948, "timeout", newJInt(timeout))
  add(query_594948, "api-version", newJString(apiVersion))
  add(query_594948, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594948, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594948, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594947, "partitionId", newJString(partitionId))
  add(query_594948, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594948, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594946.call(path_594947, query_594948, nil, nil, nil)

var getPartitionEventList* = Call_GetPartitionEventList_594934(
    name: "getPartitionEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Events",
    validator: validate_GetPartitionEventList_594935, base: "",
    url: url_GetPartitionEventList_594936, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicasEventList_594949 = ref object of OpenApiRestCall_593439
proc url_GetPartitionReplicasEventList_594951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicasEventList_594950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_594952 = path.getOrDefault("partitionId")
  valid_594952 = validateParameter(valid_594952, JString, required = true,
                                 default = nil)
  if valid_594952 != nil:
    section.add "partitionId", valid_594952
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594953 = query.getOrDefault("timeout")
  valid_594953 = validateParameter(valid_594953, JInt, required = false,
                                 default = newJInt(60))
  if valid_594953 != nil:
    section.add "timeout", valid_594953
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594954 = query.getOrDefault("api-version")
  valid_594954 = validateParameter(valid_594954, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594954 != nil:
    section.add "api-version", valid_594954
  var valid_594955 = query.getOrDefault("SkipCorrelationLookup")
  valid_594955 = validateParameter(valid_594955, JBool, required = false, default = nil)
  if valid_594955 != nil:
    section.add "SkipCorrelationLookup", valid_594955
  var valid_594956 = query.getOrDefault("EventsTypesFilter")
  valid_594956 = validateParameter(valid_594956, JString, required = false,
                                 default = nil)
  if valid_594956 != nil:
    section.add "EventsTypesFilter", valid_594956
  var valid_594957 = query.getOrDefault("EndTimeUtc")
  valid_594957 = validateParameter(valid_594957, JString, required = true,
                                 default = nil)
  if valid_594957 != nil:
    section.add "EndTimeUtc", valid_594957
  var valid_594958 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594958 = validateParameter(valid_594958, JBool, required = false, default = nil)
  if valid_594958 != nil:
    section.add "ExcludeAnalysisEvents", valid_594958
  var valid_594959 = query.getOrDefault("StartTimeUtc")
  valid_594959 = validateParameter(valid_594959, JString, required = true,
                                 default = nil)
  if valid_594959 != nil:
    section.add "StartTimeUtc", valid_594959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594960: Call_GetPartitionReplicasEventList_594949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_594960.validator(path, query, header, formData, body)
  let scheme = call_594960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594960.url(scheme.get, call_594960.host, call_594960.base,
                         call_594960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594960, url, valid)

proc call*(call_594961: Call_GetPartitionReplicasEventList_594949;
          EndTimeUtc: string; partitionId: string; StartTimeUtc: string;
          timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicasEventList
  ## The response is list of ReplicaEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594962 = newJObject()
  var query_594963 = newJObject()
  add(query_594963, "timeout", newJInt(timeout))
  add(query_594963, "api-version", newJString(apiVersion))
  add(query_594963, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594963, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594963, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594962, "partitionId", newJString(partitionId))
  add(query_594963, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594963, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594961.call(path_594962, query_594963, nil, nil, nil)

var getPartitionReplicasEventList* = Call_GetPartitionReplicasEventList_594949(
    name: "getPartitionReplicasEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Replicas/Events",
    validator: validate_GetPartitionReplicasEventList_594950, base: "",
    url: url_GetPartitionReplicasEventList_594951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicaEventList_594964 = ref object of OpenApiRestCall_593439
proc url_GetPartitionReplicaEventList_594966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicaEventList_594965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_594967 = path.getOrDefault("replicaId")
  valid_594967 = validateParameter(valid_594967, JString, required = true,
                                 default = nil)
  if valid_594967 != nil:
    section.add "replicaId", valid_594967
  var valid_594968 = path.getOrDefault("partitionId")
  valid_594968 = validateParameter(valid_594968, JString, required = true,
                                 default = nil)
  if valid_594968 != nil:
    section.add "partitionId", valid_594968
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594969 = query.getOrDefault("timeout")
  valid_594969 = validateParameter(valid_594969, JInt, required = false,
                                 default = newJInt(60))
  if valid_594969 != nil:
    section.add "timeout", valid_594969
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594970 = query.getOrDefault("api-version")
  valid_594970 = validateParameter(valid_594970, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594970 != nil:
    section.add "api-version", valid_594970
  var valid_594971 = query.getOrDefault("SkipCorrelationLookup")
  valid_594971 = validateParameter(valid_594971, JBool, required = false, default = nil)
  if valid_594971 != nil:
    section.add "SkipCorrelationLookup", valid_594971
  var valid_594972 = query.getOrDefault("EventsTypesFilter")
  valid_594972 = validateParameter(valid_594972, JString, required = false,
                                 default = nil)
  if valid_594972 != nil:
    section.add "EventsTypesFilter", valid_594972
  var valid_594973 = query.getOrDefault("EndTimeUtc")
  valid_594973 = validateParameter(valid_594973, JString, required = true,
                                 default = nil)
  if valid_594973 != nil:
    section.add "EndTimeUtc", valid_594973
  var valid_594974 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594974 = validateParameter(valid_594974, JBool, required = false, default = nil)
  if valid_594974 != nil:
    section.add "ExcludeAnalysisEvents", valid_594974
  var valid_594975 = query.getOrDefault("StartTimeUtc")
  valid_594975 = validateParameter(valid_594975, JString, required = true,
                                 default = nil)
  if valid_594975 != nil:
    section.add "StartTimeUtc", valid_594975
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594976: Call_GetPartitionReplicaEventList_594964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_594976.validator(path, query, header, formData, body)
  let scheme = call_594976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594976.url(scheme.get, call_594976.host, call_594976.base,
                         call_594976.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594976, url, valid)

proc call*(call_594977: Call_GetPartitionReplicaEventList_594964;
          replicaId: string; EndTimeUtc: string; partitionId: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicaEventList
  ## The response is list of ReplicaEvent objects.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_594978 = newJObject()
  var query_594979 = newJObject()
  add(path_594978, "replicaId", newJString(replicaId))
  add(query_594979, "timeout", newJInt(timeout))
  add(query_594979, "api-version", newJString(apiVersion))
  add(query_594979, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594979, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594979, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_594978, "partitionId", newJString(partitionId))
  add(query_594979, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594979, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594977.call(path_594978, query_594979, nil, nil, nil)

var getPartitionReplicaEventList* = Call_GetPartitionReplicaEventList_594964(
    name: "getPartitionReplicaEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events",
    validator: validate_GetPartitionReplicaEventList_594965, base: "",
    url: url_GetPartitionReplicaEventList_594966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServicesEventList_594980 = ref object of OpenApiRestCall_593439
proc url_GetServicesEventList_594982(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetServicesEventList_594981(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594983 = query.getOrDefault("timeout")
  valid_594983 = validateParameter(valid_594983, JInt, required = false,
                                 default = newJInt(60))
  if valid_594983 != nil:
    section.add "timeout", valid_594983
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594984 = query.getOrDefault("api-version")
  valid_594984 = validateParameter(valid_594984, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594984 != nil:
    section.add "api-version", valid_594984
  var valid_594985 = query.getOrDefault("SkipCorrelationLookup")
  valid_594985 = validateParameter(valid_594985, JBool, required = false, default = nil)
  if valid_594985 != nil:
    section.add "SkipCorrelationLookup", valid_594985
  var valid_594986 = query.getOrDefault("EventsTypesFilter")
  valid_594986 = validateParameter(valid_594986, JString, required = false,
                                 default = nil)
  if valid_594986 != nil:
    section.add "EventsTypesFilter", valid_594986
  var valid_594987 = query.getOrDefault("EndTimeUtc")
  valid_594987 = validateParameter(valid_594987, JString, required = true,
                                 default = nil)
  if valid_594987 != nil:
    section.add "EndTimeUtc", valid_594987
  var valid_594988 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_594988 = validateParameter(valid_594988, JBool, required = false, default = nil)
  if valid_594988 != nil:
    section.add "ExcludeAnalysisEvents", valid_594988
  var valid_594989 = query.getOrDefault("StartTimeUtc")
  valid_594989 = validateParameter(valid_594989, JString, required = true,
                                 default = nil)
  if valid_594989 != nil:
    section.add "StartTimeUtc", valid_594989
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594990: Call_GetServicesEventList_594980; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_594990.validator(path, query, header, formData, body)
  let scheme = call_594990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594990.url(scheme.get, call_594990.host, call_594990.base,
                         call_594990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594990, url, valid)

proc call*(call_594991: Call_GetServicesEventList_594980; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServicesEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_594992 = newJObject()
  add(query_594992, "timeout", newJInt(timeout))
  add(query_594992, "api-version", newJString(apiVersion))
  add(query_594992, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_594992, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_594992, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_594992, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_594992, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_594991.call(nil, query_594992, nil, nil, nil)

var getServicesEventList* = Call_GetServicesEventList_594980(
    name: "getServicesEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Services/Events",
    validator: validate_GetServicesEventList_594981, base: "",
    url: url_GetServicesEventList_594982, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceEventList_594993 = ref object of OpenApiRestCall_593439
proc url_GetServiceEventList_594995(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceEventList_594994(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_594996 = path.getOrDefault("serviceId")
  valid_594996 = validateParameter(valid_594996, JString, required = true,
                                 default = nil)
  if valid_594996 != nil:
    section.add "serviceId", valid_594996
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_594997 = query.getOrDefault("timeout")
  valid_594997 = validateParameter(valid_594997, JInt, required = false,
                                 default = newJInt(60))
  if valid_594997 != nil:
    section.add "timeout", valid_594997
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594998 = query.getOrDefault("api-version")
  valid_594998 = validateParameter(valid_594998, JString, required = true,
                                 default = newJString("6.4"))
  if valid_594998 != nil:
    section.add "api-version", valid_594998
  var valid_594999 = query.getOrDefault("SkipCorrelationLookup")
  valid_594999 = validateParameter(valid_594999, JBool, required = false, default = nil)
  if valid_594999 != nil:
    section.add "SkipCorrelationLookup", valid_594999
  var valid_595000 = query.getOrDefault("EventsTypesFilter")
  valid_595000 = validateParameter(valid_595000, JString, required = false,
                                 default = nil)
  if valid_595000 != nil:
    section.add "EventsTypesFilter", valid_595000
  var valid_595001 = query.getOrDefault("EndTimeUtc")
  valid_595001 = validateParameter(valid_595001, JString, required = true,
                                 default = nil)
  if valid_595001 != nil:
    section.add "EndTimeUtc", valid_595001
  var valid_595002 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_595002 = validateParameter(valid_595002, JBool, required = false, default = nil)
  if valid_595002 != nil:
    section.add "ExcludeAnalysisEvents", valid_595002
  var valid_595003 = query.getOrDefault("StartTimeUtc")
  valid_595003 = validateParameter(valid_595003, JString, required = true,
                                 default = nil)
  if valid_595003 != nil:
    section.add "StartTimeUtc", valid_595003
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595004: Call_GetServiceEventList_594993; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_595004.validator(path, query, header, formData, body)
  let scheme = call_595004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595004.url(scheme.get, call_595004.host, call_595004.base,
                         call_595004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595004, url, valid)

proc call*(call_595005: Call_GetServiceEventList_594993; EndTimeUtc: string;
          serviceId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServiceEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_595006 = newJObject()
  var query_595007 = newJObject()
  add(query_595007, "timeout", newJInt(timeout))
  add(query_595007, "api-version", newJString(apiVersion))
  add(query_595007, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_595007, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_595007, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_595006, "serviceId", newJString(serviceId))
  add(query_595007, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_595007, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_595005.call(path_595006, query_595007, nil, nil, nil)

var getServiceEventList* = Call_GetServiceEventList_594993(
    name: "getServiceEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Services/{serviceId}/$/Events",
    validator: validate_GetServiceEventList_594994, base: "",
    url: url_GetServiceEventList_594995, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFaultOperationList_595008 = ref object of OpenApiRestCall_593439
proc url_GetFaultOperationList_595010(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFaultOperationList_595009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: JInt (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: JInt (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  section = newJObject()
  var valid_595011 = query.getOrDefault("timeout")
  valid_595011 = validateParameter(valid_595011, JInt, required = false,
                                 default = newJInt(60))
  if valid_595011 != nil:
    section.add "timeout", valid_595011
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595012 = query.getOrDefault("api-version")
  valid_595012 = validateParameter(valid_595012, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595012 != nil:
    section.add "api-version", valid_595012
  var valid_595013 = query.getOrDefault("TypeFilter")
  valid_595013 = validateParameter(valid_595013, JInt, required = true,
                                 default = newJInt(65535))
  if valid_595013 != nil:
    section.add "TypeFilter", valid_595013
  var valid_595014 = query.getOrDefault("StateFilter")
  valid_595014 = validateParameter(valid_595014, JInt, required = true,
                                 default = newJInt(65535))
  if valid_595014 != nil:
    section.add "StateFilter", valid_595014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595015: Call_GetFaultOperationList_595008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  let valid = call_595015.validator(path, query, header, formData, body)
  let scheme = call_595015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595015.url(scheme.get, call_595015.host, call_595015.base,
                         call_595015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595015, url, valid)

proc call*(call_595016: Call_GetFaultOperationList_595008; timeout: int = 60;
          apiVersion: string = "6.0"; TypeFilter: int = 65535; StateFilter: int = 65535): Recallable =
  ## getFaultOperationList
  ## Gets the list of user-induced fault operations filtered by provided input.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: int (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: int (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  var query_595017 = newJObject()
  add(query_595017, "timeout", newJInt(timeout))
  add(query_595017, "api-version", newJString(apiVersion))
  add(query_595017, "TypeFilter", newJInt(TypeFilter))
  add(query_595017, "StateFilter", newJInt(StateFilter))
  result = call_595016.call(nil, query_595017, nil, nil, nil)

var getFaultOperationList* = Call_GetFaultOperationList_595008(
    name: "getFaultOperationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/",
    validator: validate_GetFaultOperationList_595009, base: "",
    url: url_GetFaultOperationList_595010, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelOperation_595018 = ref object of OpenApiRestCall_593439
proc url_CancelOperation_595020(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelOperation_595019(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: JBool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  section = newJObject()
  var valid_595021 = query.getOrDefault("timeout")
  valid_595021 = validateParameter(valid_595021, JInt, required = false,
                                 default = newJInt(60))
  if valid_595021 != nil:
    section.add "timeout", valid_595021
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595022 = query.getOrDefault("api-version")
  valid_595022 = validateParameter(valid_595022, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595022 != nil:
    section.add "api-version", valid_595022
  var valid_595023 = query.getOrDefault("OperationId")
  valid_595023 = validateParameter(valid_595023, JString, required = true,
                                 default = nil)
  if valid_595023 != nil:
    section.add "OperationId", valid_595023
  var valid_595024 = query.getOrDefault("Force")
  valid_595024 = validateParameter(valid_595024, JBool, required = true,
                                 default = newJBool(false))
  if valid_595024 != nil:
    section.add "Force", valid_595024
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595025: Call_CancelOperation_595018; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  let valid = call_595025.validator(path, query, header, formData, body)
  let scheme = call_595025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595025.url(scheme.get, call_595025.host, call_595025.base,
                         call_595025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595025, url, valid)

proc call*(call_595026: Call_CancelOperation_595018; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Force: bool = false): Recallable =
  ## cancelOperation
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: bool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  var query_595027 = newJObject()
  add(query_595027, "timeout", newJInt(timeout))
  add(query_595027, "api-version", newJString(apiVersion))
  add(query_595027, "OperationId", newJString(OperationId))
  add(query_595027, "Force", newJBool(Force))
  result = call_595026.call(nil, query_595027, nil, nil, nil)

var cancelOperation* = Call_CancelOperation_595018(name: "cancelOperation",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/$/Cancel",
    validator: validate_CancelOperation_595019, base: "", url: url_CancelOperation_595020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeTransitionProgress_595028 = ref object of OpenApiRestCall_593439
proc url_GetNodeTransitionProgress_595030(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetTransitionProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeTransitionProgress_595029(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595031 = path.getOrDefault("nodeName")
  valid_595031 = validateParameter(valid_595031, JString, required = true,
                                 default = nil)
  if valid_595031 != nil:
    section.add "nodeName", valid_595031
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595032 = query.getOrDefault("timeout")
  valid_595032 = validateParameter(valid_595032, JInt, required = false,
                                 default = newJInt(60))
  if valid_595032 != nil:
    section.add "timeout", valid_595032
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595033 = query.getOrDefault("api-version")
  valid_595033 = validateParameter(valid_595033, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595033 != nil:
    section.add "api-version", valid_595033
  var valid_595034 = query.getOrDefault("OperationId")
  valid_595034 = validateParameter(valid_595034, JString, required = true,
                                 default = nil)
  if valid_595034 != nil:
    section.add "OperationId", valid_595034
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595035: Call_GetNodeTransitionProgress_595028; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  let valid = call_595035.validator(path, query, header, formData, body)
  let scheme = call_595035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595035.url(scheme.get, call_595035.host, call_595035.base,
                         call_595035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595035, url, valid)

proc call*(call_595036: Call_GetNodeTransitionProgress_595028; nodeName: string;
          OperationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeTransitionProgress
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595037 = newJObject()
  var query_595038 = newJObject()
  add(query_595038, "timeout", newJInt(timeout))
  add(query_595038, "api-version", newJString(apiVersion))
  add(path_595037, "nodeName", newJString(nodeName))
  add(query_595038, "OperationId", newJString(OperationId))
  result = call_595036.call(path_595037, query_595038, nil, nil, nil)

var getNodeTransitionProgress* = Call_GetNodeTransitionProgress_595028(
    name: "getNodeTransitionProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/GetTransitionProgress",
    validator: validate_GetNodeTransitionProgress_595029, base: "",
    url: url_GetNodeTransitionProgress_595030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartNodeTransition_595039 = ref object of OpenApiRestCall_593439
proc url_StartNodeTransition_595041(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/StartTransition/")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartNodeTransition_595040(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595042 = path.getOrDefault("nodeName")
  valid_595042 = validateParameter(valid_595042, JString, required = true,
                                 default = nil)
  if valid_595042 != nil:
    section.add "nodeName", valid_595042
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeInstanceId: JString (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: JInt (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: JString (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595043 = query.getOrDefault("timeout")
  valid_595043 = validateParameter(valid_595043, JInt, required = false,
                                 default = newJInt(60))
  if valid_595043 != nil:
    section.add "timeout", valid_595043
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595044 = query.getOrDefault("api-version")
  valid_595044 = validateParameter(valid_595044, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595044 != nil:
    section.add "api-version", valid_595044
  var valid_595045 = query.getOrDefault("NodeInstanceId")
  valid_595045 = validateParameter(valid_595045, JString, required = true,
                                 default = nil)
  if valid_595045 != nil:
    section.add "NodeInstanceId", valid_595045
  var valid_595046 = query.getOrDefault("StopDurationInSeconds")
  valid_595046 = validateParameter(valid_595046, JInt, required = true, default = nil)
  if valid_595046 != nil:
    section.add "StopDurationInSeconds", valid_595046
  var valid_595047 = query.getOrDefault("NodeTransitionType")
  valid_595047 = validateParameter(valid_595047, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595047 != nil:
    section.add "NodeTransitionType", valid_595047
  var valid_595048 = query.getOrDefault("OperationId")
  valid_595048 = validateParameter(valid_595048, JString, required = true,
                                 default = nil)
  if valid_595048 != nil:
    section.add "OperationId", valid_595048
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595049: Call_StartNodeTransition_595039; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  let valid = call_595049.validator(path, query, header, formData, body)
  let scheme = call_595049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595049.url(scheme.get, call_595049.host, call_595049.base,
                         call_595049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595049, url, valid)

proc call*(call_595050: Call_StartNodeTransition_595039; nodeName: string;
          NodeInstanceId: string; StopDurationInSeconds: int; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          NodeTransitionType: string = "Invalid"): Recallable =
  ## startNodeTransition
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   NodeInstanceId: string (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: int (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: string (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595051 = newJObject()
  var query_595052 = newJObject()
  add(query_595052, "timeout", newJInt(timeout))
  add(query_595052, "api-version", newJString(apiVersion))
  add(path_595051, "nodeName", newJString(nodeName))
  add(query_595052, "NodeInstanceId", newJString(NodeInstanceId))
  add(query_595052, "StopDurationInSeconds", newJInt(StopDurationInSeconds))
  add(query_595052, "NodeTransitionType", newJString(NodeTransitionType))
  add(query_595052, "OperationId", newJString(OperationId))
  result = call_595050.call(path_595051, query_595052, nil, nil, nil)

var startNodeTransition* = Call_StartNodeTransition_595039(
    name: "startNodeTransition", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/StartTransition/",
    validator: validate_StartNodeTransition_595040, base: "",
    url: url_StartNodeTransition_595041, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDataLossProgress_595053 = ref object of OpenApiRestCall_593439
proc url_GetDataLossProgress_595055(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetDataLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDataLossProgress_595054(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595056 = path.getOrDefault("partitionId")
  valid_595056 = validateParameter(valid_595056, JString, required = true,
                                 default = nil)
  if valid_595056 != nil:
    section.add "partitionId", valid_595056
  var valid_595057 = path.getOrDefault("serviceId")
  valid_595057 = validateParameter(valid_595057, JString, required = true,
                                 default = nil)
  if valid_595057 != nil:
    section.add "serviceId", valid_595057
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595058 = query.getOrDefault("timeout")
  valid_595058 = validateParameter(valid_595058, JInt, required = false,
                                 default = newJInt(60))
  if valid_595058 != nil:
    section.add "timeout", valid_595058
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595059 = query.getOrDefault("api-version")
  valid_595059 = validateParameter(valid_595059, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595059 != nil:
    section.add "api-version", valid_595059
  var valid_595060 = query.getOrDefault("OperationId")
  valid_595060 = validateParameter(valid_595060, JString, required = true,
                                 default = nil)
  if valid_595060 != nil:
    section.add "OperationId", valid_595060
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595061: Call_GetDataLossProgress_595053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  let valid = call_595061.validator(path, query, header, formData, body)
  let scheme = call_595061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595061.url(scheme.get, call_595061.host, call_595061.base,
                         call_595061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595061, url, valid)

proc call*(call_595062: Call_GetDataLossProgress_595053; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDataLossProgress
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595063 = newJObject()
  var query_595064 = newJObject()
  add(query_595064, "timeout", newJInt(timeout))
  add(query_595064, "api-version", newJString(apiVersion))
  add(path_595063, "partitionId", newJString(partitionId))
  add(path_595063, "serviceId", newJString(serviceId))
  add(query_595064, "OperationId", newJString(OperationId))
  result = call_595062.call(path_595063, query_595064, nil, nil, nil)

var getDataLossProgress* = Call_GetDataLossProgress_595053(
    name: "getDataLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress",
    validator: validate_GetDataLossProgress_595054, base: "",
    url: url_GetDataLossProgress_595055, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetQuorumLossProgress_595065 = ref object of OpenApiRestCall_593439
proc url_GetQuorumLossProgress_595067(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetQuorumLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetQuorumLossProgress_595066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595068 = path.getOrDefault("partitionId")
  valid_595068 = validateParameter(valid_595068, JString, required = true,
                                 default = nil)
  if valid_595068 != nil:
    section.add "partitionId", valid_595068
  var valid_595069 = path.getOrDefault("serviceId")
  valid_595069 = validateParameter(valid_595069, JString, required = true,
                                 default = nil)
  if valid_595069 != nil:
    section.add "serviceId", valid_595069
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595070 = query.getOrDefault("timeout")
  valid_595070 = validateParameter(valid_595070, JInt, required = false,
                                 default = newJInt(60))
  if valid_595070 != nil:
    section.add "timeout", valid_595070
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595071 = query.getOrDefault("api-version")
  valid_595071 = validateParameter(valid_595071, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595071 != nil:
    section.add "api-version", valid_595071
  var valid_595072 = query.getOrDefault("OperationId")
  valid_595072 = validateParameter(valid_595072, JString, required = true,
                                 default = nil)
  if valid_595072 != nil:
    section.add "OperationId", valid_595072
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595073: Call_GetQuorumLossProgress_595065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  let valid = call_595073.validator(path, query, header, formData, body)
  let scheme = call_595073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595073.url(scheme.get, call_595073.host, call_595073.base,
                         call_595073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595073, url, valid)

proc call*(call_595074: Call_GetQuorumLossProgress_595065; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getQuorumLossProgress
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595075 = newJObject()
  var query_595076 = newJObject()
  add(query_595076, "timeout", newJInt(timeout))
  add(query_595076, "api-version", newJString(apiVersion))
  add(path_595075, "partitionId", newJString(partitionId))
  add(path_595075, "serviceId", newJString(serviceId))
  add(query_595076, "OperationId", newJString(OperationId))
  result = call_595074.call(path_595075, query_595076, nil, nil, nil)

var getQuorumLossProgress* = Call_GetQuorumLossProgress_595065(
    name: "getQuorumLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress",
    validator: validate_GetQuorumLossProgress_595066, base: "",
    url: url_GetQuorumLossProgress_595067, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestartProgress_595077 = ref object of OpenApiRestCall_593439
proc url_GetPartitionRestartProgress_595079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestartProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestartProgress_595078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595080 = path.getOrDefault("partitionId")
  valid_595080 = validateParameter(valid_595080, JString, required = true,
                                 default = nil)
  if valid_595080 != nil:
    section.add "partitionId", valid_595080
  var valid_595081 = path.getOrDefault("serviceId")
  valid_595081 = validateParameter(valid_595081, JString, required = true,
                                 default = nil)
  if valid_595081 != nil:
    section.add "serviceId", valid_595081
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595082 = query.getOrDefault("timeout")
  valid_595082 = validateParameter(valid_595082, JInt, required = false,
                                 default = newJInt(60))
  if valid_595082 != nil:
    section.add "timeout", valid_595082
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595083 = query.getOrDefault("api-version")
  valid_595083 = validateParameter(valid_595083, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595083 != nil:
    section.add "api-version", valid_595083
  var valid_595084 = query.getOrDefault("OperationId")
  valid_595084 = validateParameter(valid_595084, JString, required = true,
                                 default = nil)
  if valid_595084 != nil:
    section.add "OperationId", valid_595084
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595085: Call_GetPartitionRestartProgress_595077; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  let valid = call_595085.validator(path, query, header, formData, body)
  let scheme = call_595085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595085.url(scheme.get, call_595085.host, call_595085.base,
                         call_595085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595085, url, valid)

proc call*(call_595086: Call_GetPartitionRestartProgress_595077;
          partitionId: string; serviceId: string; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionRestartProgress
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595087 = newJObject()
  var query_595088 = newJObject()
  add(query_595088, "timeout", newJInt(timeout))
  add(query_595088, "api-version", newJString(apiVersion))
  add(path_595087, "partitionId", newJString(partitionId))
  add(path_595087, "serviceId", newJString(serviceId))
  add(query_595088, "OperationId", newJString(OperationId))
  result = call_595086.call(path_595087, query_595088, nil, nil, nil)

var getPartitionRestartProgress* = Call_GetPartitionRestartProgress_595077(
    name: "getPartitionRestartProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress",
    validator: validate_GetPartitionRestartProgress_595078, base: "",
    url: url_GetPartitionRestartProgress_595079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartDataLoss_595089 = ref object of OpenApiRestCall_593439
proc url_StartDataLoss_595091(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartDataLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartDataLoss_595090(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595092 = path.getOrDefault("partitionId")
  valid_595092 = validateParameter(valid_595092, JString, required = true,
                                 default = nil)
  if valid_595092 != nil:
    section.add "partitionId", valid_595092
  var valid_595093 = path.getOrDefault("serviceId")
  valid_595093 = validateParameter(valid_595093, JString, required = true,
                                 default = nil)
  if valid_595093 != nil:
    section.add "serviceId", valid_595093
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DataLossMode: JString (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595094 = query.getOrDefault("timeout")
  valid_595094 = validateParameter(valid_595094, JInt, required = false,
                                 default = newJInt(60))
  if valid_595094 != nil:
    section.add "timeout", valid_595094
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595095 = query.getOrDefault("api-version")
  valid_595095 = validateParameter(valid_595095, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595095 != nil:
    section.add "api-version", valid_595095
  var valid_595096 = query.getOrDefault("DataLossMode")
  valid_595096 = validateParameter(valid_595096, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595096 != nil:
    section.add "DataLossMode", valid_595096
  var valid_595097 = query.getOrDefault("OperationId")
  valid_595097 = validateParameter(valid_595097, JString, required = true,
                                 default = nil)
  if valid_595097 != nil:
    section.add "OperationId", valid_595097
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595098: Call_StartDataLoss_595089; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  let valid = call_595098.validator(path, query, header, formData, body)
  let scheme = call_595098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595098.url(scheme.get, call_595098.host, call_595098.base,
                         call_595098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595098, url, valid)

proc call*(call_595099: Call_StartDataLoss_595089; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; DataLossMode: string = "Invalid"): Recallable =
  ## startDataLoss
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   DataLossMode: string (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595100 = newJObject()
  var query_595101 = newJObject()
  add(query_595101, "timeout", newJInt(timeout))
  add(query_595101, "api-version", newJString(apiVersion))
  add(path_595100, "partitionId", newJString(partitionId))
  add(query_595101, "DataLossMode", newJString(DataLossMode))
  add(path_595100, "serviceId", newJString(serviceId))
  add(query_595101, "OperationId", newJString(OperationId))
  result = call_595099.call(path_595100, query_595101, nil, nil, nil)

var startDataLoss* = Call_StartDataLoss_595089(name: "startDataLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss",
    validator: validate_StartDataLoss_595090, base: "", url: url_StartDataLoss_595091,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartQuorumLoss_595102 = ref object of OpenApiRestCall_593439
proc url_StartQuorumLoss_595104(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartQuorumLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartQuorumLoss_595103(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595105 = path.getOrDefault("partitionId")
  valid_595105 = validateParameter(valid_595105, JString, required = true,
                                 default = nil)
  if valid_595105 != nil:
    section.add "partitionId", valid_595105
  var valid_595106 = path.getOrDefault("serviceId")
  valid_595106 = validateParameter(valid_595106, JString, required = true,
                                 default = nil)
  if valid_595106 != nil:
    section.add "serviceId", valid_595106
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: JString (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   QuorumLossDuration: JInt (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595107 = query.getOrDefault("timeout")
  valid_595107 = validateParameter(valid_595107, JInt, required = false,
                                 default = newJInt(60))
  if valid_595107 != nil:
    section.add "timeout", valid_595107
  assert query != nil,
        "query argument is necessary due to required `QuorumLossMode` field"
  var valid_595108 = query.getOrDefault("QuorumLossMode")
  valid_595108 = validateParameter(valid_595108, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595108 != nil:
    section.add "QuorumLossMode", valid_595108
  var valid_595109 = query.getOrDefault("api-version")
  valid_595109 = validateParameter(valid_595109, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595109 != nil:
    section.add "api-version", valid_595109
  var valid_595110 = query.getOrDefault("QuorumLossDuration")
  valid_595110 = validateParameter(valid_595110, JInt, required = true, default = nil)
  if valid_595110 != nil:
    section.add "QuorumLossDuration", valid_595110
  var valid_595111 = query.getOrDefault("OperationId")
  valid_595111 = validateParameter(valid_595111, JString, required = true,
                                 default = nil)
  if valid_595111 != nil:
    section.add "OperationId", valid_595111
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595112: Call_StartQuorumLoss_595102; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  let valid = call_595112.validator(path, query, header, formData, body)
  let scheme = call_595112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595112.url(scheme.get, call_595112.host, call_595112.base,
                         call_595112.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595112, url, valid)

proc call*(call_595113: Call_StartQuorumLoss_595102; partitionId: string;
          QuorumLossDuration: int; serviceId: string; OperationId: string;
          timeout: int = 60; QuorumLossMode: string = "Invalid";
          apiVersion: string = "6.0"): Recallable =
  ## startQuorumLoss
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: string (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   QuorumLossDuration: int (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595114 = newJObject()
  var query_595115 = newJObject()
  add(query_595115, "timeout", newJInt(timeout))
  add(query_595115, "QuorumLossMode", newJString(QuorumLossMode))
  add(query_595115, "api-version", newJString(apiVersion))
  add(path_595114, "partitionId", newJString(partitionId))
  add(query_595115, "QuorumLossDuration", newJInt(QuorumLossDuration))
  add(path_595114, "serviceId", newJString(serviceId))
  add(query_595115, "OperationId", newJString(OperationId))
  result = call_595113.call(path_595114, query_595115, nil, nil, nil)

var startQuorumLoss* = Call_StartQuorumLoss_595102(name: "startQuorumLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss",
    validator: validate_StartQuorumLoss_595103, base: "", url: url_StartQuorumLoss_595104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartPartitionRestart_595116 = ref object of OpenApiRestCall_593439
proc url_StartPartitionRestart_595118(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartRestart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartPartitionRestart_595117(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595119 = path.getOrDefault("partitionId")
  valid_595119 = validateParameter(valid_595119, JString, required = true,
                                 default = nil)
  if valid_595119 != nil:
    section.add "partitionId", valid_595119
  var valid_595120 = path.getOrDefault("serviceId")
  valid_595120 = validateParameter(valid_595120, JString, required = true,
                                 default = nil)
  if valid_595120 != nil:
    section.add "serviceId", valid_595120
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: JString (required)
  ##                       : Describe which partitions to restart.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_595121 = query.getOrDefault("timeout")
  valid_595121 = validateParameter(valid_595121, JInt, required = false,
                                 default = newJInt(60))
  if valid_595121 != nil:
    section.add "timeout", valid_595121
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595122 = query.getOrDefault("api-version")
  valid_595122 = validateParameter(valid_595122, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595122 != nil:
    section.add "api-version", valid_595122
  var valid_595123 = query.getOrDefault("RestartPartitionMode")
  valid_595123 = validateParameter(valid_595123, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_595123 != nil:
    section.add "RestartPartitionMode", valid_595123
  var valid_595124 = query.getOrDefault("OperationId")
  valid_595124 = validateParameter(valid_595124, JString, required = true,
                                 default = nil)
  if valid_595124 != nil:
    section.add "OperationId", valid_595124
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595125: Call_StartPartitionRestart_595116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  let valid = call_595125.validator(path, query, header, formData, body)
  let scheme = call_595125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595125.url(scheme.get, call_595125.host, call_595125.base,
                         call_595125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595125, url, valid)

proc call*(call_595126: Call_StartPartitionRestart_595116; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; RestartPartitionMode: string = "Invalid"): Recallable =
  ## startPartitionRestart
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: string (required)
  ##                       : Describe which partitions to restart.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_595127 = newJObject()
  var query_595128 = newJObject()
  add(query_595128, "timeout", newJInt(timeout))
  add(query_595128, "api-version", newJString(apiVersion))
  add(query_595128, "RestartPartitionMode", newJString(RestartPartitionMode))
  add(path_595127, "partitionId", newJString(partitionId))
  add(path_595127, "serviceId", newJString(serviceId))
  add(query_595128, "OperationId", newJString(OperationId))
  result = call_595126.call(path_595127, query_595128, nil, nil, nil)

var startPartitionRestart* = Call_StartPartitionRestart_595116(
    name: "startPartitionRestart", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart",
    validator: validate_StartPartitionRestart_595117, base: "",
    url: url_StartPartitionRestart_595118, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootContent_595129 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreRootContent_595131(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootContent_595130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595132 = query.getOrDefault("timeout")
  valid_595132 = validateParameter(valid_595132, JInt, required = false,
                                 default = newJInt(60))
  if valid_595132 != nil:
    section.add "timeout", valid_595132
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595133 = query.getOrDefault("api-version")
  valid_595133 = validateParameter(valid_595133, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595133 != nil:
    section.add "api-version", valid_595133
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595134: Call_GetImageStoreRootContent_595129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  let valid = call_595134.validator(path, query, header, formData, body)
  let scheme = call_595134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595134.url(scheme.get, call_595134.host, call_595134.base,
                         call_595134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595134, url, valid)

proc call*(call_595135: Call_GetImageStoreRootContent_595129; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getImageStoreRootContent
  ## Returns the information about the image store content at the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_595136 = newJObject()
  add(query_595136, "timeout", newJInt(timeout))
  add(query_595136, "api-version", newJString(apiVersion))
  result = call_595135.call(nil, query_595136, nil, nil, nil)

var getImageStoreRootContent* = Call_GetImageStoreRootContent_595129(
    name: "getImageStoreRootContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore",
    validator: validate_GetImageStoreRootContent_595130, base: "",
    url: url_GetImageStoreRootContent_595131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CommitImageStoreUploadSession_595137 = ref object of OpenApiRestCall_593439
proc url_CommitImageStoreUploadSession_595139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CommitImageStoreUploadSession_595138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595140 = query.getOrDefault("timeout")
  valid_595140 = validateParameter(valid_595140, JInt, required = false,
                                 default = newJInt(60))
  if valid_595140 != nil:
    section.add "timeout", valid_595140
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595141 = query.getOrDefault("api-version")
  valid_595141 = validateParameter(valid_595141, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595141 != nil:
    section.add "api-version", valid_595141
  var valid_595142 = query.getOrDefault("session-id")
  valid_595142 = validateParameter(valid_595142, JString, required = true,
                                 default = nil)
  if valid_595142 != nil:
    section.add "session-id", valid_595142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595143: Call_CommitImageStoreUploadSession_595137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  let valid = call_595143.validator(path, query, header, formData, body)
  let scheme = call_595143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595143.url(scheme.get, call_595143.host, call_595143.base,
                         call_595143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595143, url, valid)

proc call*(call_595144: Call_CommitImageStoreUploadSession_595137;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## commitImageStoreUploadSession
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_595145 = newJObject()
  add(query_595145, "timeout", newJInt(timeout))
  add(query_595145, "api-version", newJString(apiVersion))
  add(query_595145, "session-id", newJString(sessionId))
  result = call_595144.call(nil, query_595145, nil, nil, nil)

var commitImageStoreUploadSession* = Call_CommitImageStoreUploadSession_595137(
    name: "commitImageStoreUploadSession", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/CommitUploadSession",
    validator: validate_CommitImageStoreUploadSession_595138, base: "",
    url: url_CommitImageStoreUploadSession_595139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CopyImageStoreContent_595146 = ref object of OpenApiRestCall_593439
proc url_CopyImageStoreContent_595148(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CopyImageStoreContent_595147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595149 = query.getOrDefault("timeout")
  valid_595149 = validateParameter(valid_595149, JInt, required = false,
                                 default = newJInt(60))
  if valid_595149 != nil:
    section.add "timeout", valid_595149
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595150 = query.getOrDefault("api-version")
  valid_595150 = validateParameter(valid_595150, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595150 != nil:
    section.add "api-version", valid_595150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595152: Call_CopyImageStoreContent_595146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  let valid = call_595152.validator(path, query, header, formData, body)
  let scheme = call_595152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595152.url(scheme.get, call_595152.host, call_595152.base,
                         call_595152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595152, url, valid)

proc call*(call_595153: Call_CopyImageStoreContent_595146;
          ImageStoreCopyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## copyImageStoreContent
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  var query_595154 = newJObject()
  var body_595155 = newJObject()
  add(query_595154, "timeout", newJInt(timeout))
  add(query_595154, "api-version", newJString(apiVersion))
  if ImageStoreCopyDescription != nil:
    body_595155 = ImageStoreCopyDescription
  result = call_595153.call(nil, query_595154, nil, nil, body_595155)

var copyImageStoreContent* = Call_CopyImageStoreContent_595146(
    name: "copyImageStoreContent", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/Copy",
    validator: validate_CopyImageStoreContent_595147, base: "",
    url: url_CopyImageStoreContent_595148, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreUploadSession_595156 = ref object of OpenApiRestCall_593439
proc url_DeleteImageStoreUploadSession_595158(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteImageStoreUploadSession_595157(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595159 = query.getOrDefault("timeout")
  valid_595159 = validateParameter(valid_595159, JInt, required = false,
                                 default = newJInt(60))
  if valid_595159 != nil:
    section.add "timeout", valid_595159
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595160 = query.getOrDefault("api-version")
  valid_595160 = validateParameter(valid_595160, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595160 != nil:
    section.add "api-version", valid_595160
  var valid_595161 = query.getOrDefault("session-id")
  valid_595161 = validateParameter(valid_595161, JString, required = true,
                                 default = nil)
  if valid_595161 != nil:
    section.add "session-id", valid_595161
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595162: Call_DeleteImageStoreUploadSession_595156; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  let valid = call_595162.validator(path, query, header, formData, body)
  let scheme = call_595162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595162.url(scheme.get, call_595162.host, call_595162.base,
                         call_595162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595162, url, valid)

proc call*(call_595163: Call_DeleteImageStoreUploadSession_595156;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreUploadSession
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_595164 = newJObject()
  add(query_595164, "timeout", newJInt(timeout))
  add(query_595164, "api-version", newJString(apiVersion))
  add(query_595164, "session-id", newJString(sessionId))
  result = call_595163.call(nil, query_595164, nil, nil, nil)

var deleteImageStoreUploadSession* = Call_DeleteImageStoreUploadSession_595156(
    name: "deleteImageStoreUploadSession", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/$/DeleteUploadSession",
    validator: validate_DeleteImageStoreUploadSession_595157, base: "",
    url: url_DeleteImageStoreUploadSession_595158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionById_595165 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreUploadSessionById_595167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreUploadSessionById_595166(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595168 = query.getOrDefault("timeout")
  valid_595168 = validateParameter(valid_595168, JInt, required = false,
                                 default = newJInt(60))
  if valid_595168 != nil:
    section.add "timeout", valid_595168
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595169 = query.getOrDefault("api-version")
  valid_595169 = validateParameter(valid_595169, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595169 != nil:
    section.add "api-version", valid_595169
  var valid_595170 = query.getOrDefault("session-id")
  valid_595170 = validateParameter(valid_595170, JString, required = true,
                                 default = nil)
  if valid_595170 != nil:
    section.add "session-id", valid_595170
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595171: Call_GetImageStoreUploadSessionById_595165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_595171.validator(path, query, header, formData, body)
  let scheme = call_595171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595171.url(scheme.get, call_595171.host, call_595171.base,
                         call_595171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595171, url, valid)

proc call*(call_595172: Call_GetImageStoreUploadSessionById_595165;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionById
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_595173 = newJObject()
  add(query_595173, "timeout", newJInt(timeout))
  add(query_595173, "api-version", newJString(apiVersion))
  add(query_595173, "session-id", newJString(sessionId))
  result = call_595172.call(nil, query_595173, nil, nil, nil)

var getImageStoreUploadSessionById* = Call_GetImageStoreUploadSessionById_595165(
    name: "getImageStoreUploadSessionById", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionById_595166, base: "",
    url: url_GetImageStoreUploadSessionById_595167,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFile_595184 = ref object of OpenApiRestCall_593439
proc url_UploadFile_595186(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFile_595185(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595187 = path.getOrDefault("contentPath")
  valid_595187 = validateParameter(valid_595187, JString, required = true,
                                 default = nil)
  if valid_595187 != nil:
    section.add "contentPath", valid_595187
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595188 = query.getOrDefault("timeout")
  valid_595188 = validateParameter(valid_595188, JInt, required = false,
                                 default = newJInt(60))
  if valid_595188 != nil:
    section.add "timeout", valid_595188
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595189 = query.getOrDefault("api-version")
  valid_595189 = validateParameter(valid_595189, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595189 != nil:
    section.add "api-version", valid_595189
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595190: Call_UploadFile_595184; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  let valid = call_595190.validator(path, query, header, formData, body)
  let scheme = call_595190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595190.url(scheme.get, call_595190.host, call_595190.base,
                         call_595190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595190, url, valid)

proc call*(call_595191: Call_UploadFile_595184; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFile
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595192 = newJObject()
  var query_595193 = newJObject()
  add(query_595193, "timeout", newJInt(timeout))
  add(query_595193, "api-version", newJString(apiVersion))
  add(path_595192, "contentPath", newJString(contentPath))
  result = call_595191.call(path_595192, query_595193, nil, nil, nil)

var uploadFile* = Call_UploadFile_595184(name: "uploadFile",
                                      meth: HttpMethod.HttpPut,
                                      host: "azure.local:19080",
                                      route: "/ImageStore/{contentPath}",
                                      validator: validate_UploadFile_595185,
                                      base: "", url: url_UploadFile_595186,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreContent_595174 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreContent_595176(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreContent_595175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595177 = path.getOrDefault("contentPath")
  valid_595177 = validateParameter(valid_595177, JString, required = true,
                                 default = nil)
  if valid_595177 != nil:
    section.add "contentPath", valid_595177
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595178 = query.getOrDefault("timeout")
  valid_595178 = validateParameter(valid_595178, JInt, required = false,
                                 default = newJInt(60))
  if valid_595178 != nil:
    section.add "timeout", valid_595178
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595179 = query.getOrDefault("api-version")
  valid_595179 = validateParameter(valid_595179, JString, required = true,
                                 default = newJString("6.2"))
  if valid_595179 != nil:
    section.add "api-version", valid_595179
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595180: Call_GetImageStoreContent_595174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_595180.validator(path, query, header, formData, body)
  let scheme = call_595180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595180.url(scheme.get, call_595180.host, call_595180.base,
                         call_595180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595180, url, valid)

proc call*(call_595181: Call_GetImageStoreContent_595174; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## getImageStoreContent
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595182 = newJObject()
  var query_595183 = newJObject()
  add(query_595183, "timeout", newJInt(timeout))
  add(query_595183, "api-version", newJString(apiVersion))
  add(path_595182, "contentPath", newJString(contentPath))
  result = call_595181.call(path_595182, query_595183, nil, nil, nil)

var getImageStoreContent* = Call_GetImageStoreContent_595174(
    name: "getImageStoreContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_GetImageStoreContent_595175, base: "",
    url: url_GetImageStoreContent_595176, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreContent_595194 = ref object of OpenApiRestCall_593439
proc url_DeleteImageStoreContent_595196(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteImageStoreContent_595195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595197 = path.getOrDefault("contentPath")
  valid_595197 = validateParameter(valid_595197, JString, required = true,
                                 default = nil)
  if valid_595197 != nil:
    section.add "contentPath", valid_595197
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595198 = query.getOrDefault("timeout")
  valid_595198 = validateParameter(valid_595198, JInt, required = false,
                                 default = newJInt(60))
  if valid_595198 != nil:
    section.add "timeout", valid_595198
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595199 = query.getOrDefault("api-version")
  valid_595199 = validateParameter(valid_595199, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595199 != nil:
    section.add "api-version", valid_595199
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595200: Call_DeleteImageStoreContent_595194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  let valid = call_595200.validator(path, query, header, formData, body)
  let scheme = call_595200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595200.url(scheme.get, call_595200.host, call_595200.base,
                         call_595200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595200, url, valid)

proc call*(call_595201: Call_DeleteImageStoreContent_595194; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreContent
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595202 = newJObject()
  var query_595203 = newJObject()
  add(query_595203, "timeout", newJInt(timeout))
  add(query_595203, "api-version", newJString(apiVersion))
  add(path_595202, "contentPath", newJString(contentPath))
  result = call_595201.call(path_595202, query_595203, nil, nil, nil)

var deleteImageStoreContent* = Call_DeleteImageStoreContent_595194(
    name: "deleteImageStoreContent", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_DeleteImageStoreContent_595195, base: "",
    url: url_DeleteImageStoreContent_595196, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionByPath_595204 = ref object of OpenApiRestCall_593439
proc url_GetImageStoreUploadSessionByPath_595206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/GetUploadSession")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreUploadSessionByPath_595205(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595207 = path.getOrDefault("contentPath")
  valid_595207 = validateParameter(valid_595207, JString, required = true,
                                 default = nil)
  if valid_595207 != nil:
    section.add "contentPath", valid_595207
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595208 = query.getOrDefault("timeout")
  valid_595208 = validateParameter(valid_595208, JInt, required = false,
                                 default = newJInt(60))
  if valid_595208 != nil:
    section.add "timeout", valid_595208
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595209 = query.getOrDefault("api-version")
  valid_595209 = validateParameter(valid_595209, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595209 != nil:
    section.add "api-version", valid_595209
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595210: Call_GetImageStoreUploadSessionByPath_595204;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_595210.validator(path, query, header, formData, body)
  let scheme = call_595210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595210.url(scheme.get, call_595210.host, call_595210.base,
                         call_595210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595210, url, valid)

proc call*(call_595211: Call_GetImageStoreUploadSessionByPath_595204;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionByPath
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595212 = newJObject()
  var query_595213 = newJObject()
  add(query_595213, "timeout", newJInt(timeout))
  add(query_595213, "api-version", newJString(apiVersion))
  add(path_595212, "contentPath", newJString(contentPath))
  result = call_595211.call(path_595212, query_595213, nil, nil, nil)

var getImageStoreUploadSessionByPath* = Call_GetImageStoreUploadSessionByPath_595204(
    name: "getImageStoreUploadSessionByPath", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionByPath_595205, base: "",
    url: url_GetImageStoreUploadSessionByPath_595206,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFileChunk_595214 = ref object of OpenApiRestCall_593439
proc url_UploadFileChunk_595216(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/UploadChunk")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFileChunk_595215(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_595217 = path.getOrDefault("contentPath")
  valid_595217 = validateParameter(valid_595217, JString, required = true,
                                 default = nil)
  if valid_595217 != nil:
    section.add "contentPath", valid_595217
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_595218 = query.getOrDefault("timeout")
  valid_595218 = validateParameter(valid_595218, JInt, required = false,
                                 default = newJInt(60))
  if valid_595218 != nil:
    section.add "timeout", valid_595218
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595219 = query.getOrDefault("api-version")
  valid_595219 = validateParameter(valid_595219, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595219 != nil:
    section.add "api-version", valid_595219
  var valid_595220 = query.getOrDefault("session-id")
  valid_595220 = validateParameter(valid_595220, JString, required = true,
                                 default = nil)
  if valid_595220 != nil:
    section.add "session-id", valid_595220
  result.add "query", section
  ## parameters in `header` object:
  ##   Content-Range: JString (required)
  ##                : When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
  section = newJObject()
  assert header != nil,
        "header argument is necessary due to required `Content-Range` field"
  var valid_595221 = header.getOrDefault("Content-Range")
  valid_595221 = validateParameter(valid_595221, JString, required = true,
                                 default = nil)
  if valid_595221 != nil:
    section.add "Content-Range", valid_595221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595222: Call_UploadFileChunk_595214; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  let valid = call_595222.validator(path, query, header, formData, body)
  let scheme = call_595222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595222.url(scheme.get, call_595222.host, call_595222.base,
                         call_595222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595222, url, valid)

proc call*(call_595223: Call_UploadFileChunk_595214; sessionId: string;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFileChunk
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_595224 = newJObject()
  var query_595225 = newJObject()
  add(query_595225, "timeout", newJInt(timeout))
  add(query_595225, "api-version", newJString(apiVersion))
  add(query_595225, "session-id", newJString(sessionId))
  add(path_595224, "contentPath", newJString(contentPath))
  result = call_595223.call(path_595224, query_595225, nil, nil, nil)

var uploadFileChunk* = Call_UploadFileChunk_595214(name: "uploadFileChunk",
    meth: HttpMethod.HttpPut, host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/UploadChunk",
    validator: validate_UploadFileChunk_595215, base: "", url: url_UploadFileChunk_595216,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateName_595226 = ref object of OpenApiRestCall_593439
proc url_CreateName_595228(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateName_595227(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates the specified Service Fabric name.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595229 = query.getOrDefault("timeout")
  valid_595229 = validateParameter(valid_595229, JInt, required = false,
                                 default = newJInt(60))
  if valid_595229 != nil:
    section.add "timeout", valid_595229
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595230 = query.getOrDefault("api-version")
  valid_595230 = validateParameter(valid_595230, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595230 != nil:
    section.add "api-version", valid_595230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595232: Call_CreateName_595226; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates the specified Service Fabric name.
  ## 
  let valid = call_595232.validator(path, query, header, formData, body)
  let scheme = call_595232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595232.url(scheme.get, call_595232.host, call_595232.base,
                         call_595232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595232, url, valid)

proc call*(call_595233: Call_CreateName_595226; NameDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createName
  ## Creates the specified Service Fabric name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  var query_595234 = newJObject()
  var body_595235 = newJObject()
  add(query_595234, "timeout", newJInt(timeout))
  add(query_595234, "api-version", newJString(apiVersion))
  if NameDescription != nil:
    body_595235 = NameDescription
  result = call_595233.call(nil, query_595234, nil, nil, body_595235)

var createName* = Call_CreateName_595226(name: "createName",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Names/$/Create",
                                      validator: validate_CreateName_595227,
                                      base: "", url: url_CreateName_595228,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNameExistsInfo_595236 = ref object of OpenApiRestCall_593439
proc url_GetNameExistsInfo_595238(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNameExistsInfo_595237(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595239 = path.getOrDefault("nameId")
  valid_595239 = validateParameter(valid_595239, JString, required = true,
                                 default = nil)
  if valid_595239 != nil:
    section.add "nameId", valid_595239
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595240 = query.getOrDefault("timeout")
  valid_595240 = validateParameter(valid_595240, JInt, required = false,
                                 default = newJInt(60))
  if valid_595240 != nil:
    section.add "timeout", valid_595240
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595241 = query.getOrDefault("api-version")
  valid_595241 = validateParameter(valid_595241, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595241 != nil:
    section.add "api-version", valid_595241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595242: Call_GetNameExistsInfo_595236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  let valid = call_595242.validator(path, query, header, formData, body)
  let scheme = call_595242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595242.url(scheme.get, call_595242.host, call_595242.base,
                         call_595242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595242, url, valid)

proc call*(call_595243: Call_GetNameExistsInfo_595236; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNameExistsInfo
  ## Returns whether the specified Service Fabric name exists.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_595244 = newJObject()
  var query_595245 = newJObject()
  add(query_595245, "timeout", newJInt(timeout))
  add(query_595245, "api-version", newJString(apiVersion))
  add(path_595244, "nameId", newJString(nameId))
  result = call_595243.call(path_595244, query_595245, nil, nil, nil)

var getNameExistsInfo* = Call_GetNameExistsInfo_595236(name: "getNameExistsInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Names/{nameId}",
    validator: validate_GetNameExistsInfo_595237, base: "",
    url: url_GetNameExistsInfo_595238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteName_595246 = ref object of OpenApiRestCall_593439
proc url_DeleteName_595248(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteName_595247(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595249 = path.getOrDefault("nameId")
  valid_595249 = validateParameter(valid_595249, JString, required = true,
                                 default = nil)
  if valid_595249 != nil:
    section.add "nameId", valid_595249
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595250 = query.getOrDefault("timeout")
  valid_595250 = validateParameter(valid_595250, JInt, required = false,
                                 default = newJInt(60))
  if valid_595250 != nil:
    section.add "timeout", valid_595250
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595251 = query.getOrDefault("api-version")
  valid_595251 = validateParameter(valid_595251, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595251 != nil:
    section.add "api-version", valid_595251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595252: Call_DeleteName_595246; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  let valid = call_595252.validator(path, query, header, formData, body)
  let scheme = call_595252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595252.url(scheme.get, call_595252.host, call_595252.base,
                         call_595252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595252, url, valid)

proc call*(call_595253: Call_DeleteName_595246; nameId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deleteName
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_595254 = newJObject()
  var query_595255 = newJObject()
  add(query_595255, "timeout", newJInt(timeout))
  add(query_595255, "api-version", newJString(apiVersion))
  add(path_595254, "nameId", newJString(nameId))
  result = call_595253.call(path_595254, query_595255, nil, nil, nil)

var deleteName* = Call_DeleteName_595246(name: "deleteName",
                                      meth: HttpMethod.HttpDelete,
                                      host: "azure.local:19080",
                                      route: "/Names/{nameId}",
                                      validator: validate_DeleteName_595247,
                                      base: "", url: url_DeleteName_595248,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfoList_595256 = ref object of OpenApiRestCall_593439
proc url_GetPropertyInfoList_595258(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfoList_595257(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595259 = path.getOrDefault("nameId")
  valid_595259 = validateParameter(valid_595259, JString, required = true,
                                 default = nil)
  if valid_595259 != nil:
    section.add "nameId", valid_595259
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: JBool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  section = newJObject()
  var valid_595260 = query.getOrDefault("timeout")
  valid_595260 = validateParameter(valid_595260, JInt, required = false,
                                 default = newJInt(60))
  if valid_595260 != nil:
    section.add "timeout", valid_595260
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595261 = query.getOrDefault("api-version")
  valid_595261 = validateParameter(valid_595261, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595261 != nil:
    section.add "api-version", valid_595261
  var valid_595262 = query.getOrDefault("ContinuationToken")
  valid_595262 = validateParameter(valid_595262, JString, required = false,
                                 default = nil)
  if valid_595262 != nil:
    section.add "ContinuationToken", valid_595262
  var valid_595263 = query.getOrDefault("IncludeValues")
  valid_595263 = validateParameter(valid_595263, JBool, required = false,
                                 default = newJBool(false))
  if valid_595263 != nil:
    section.add "IncludeValues", valid_595263
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595264: Call_GetPropertyInfoList_595256; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  let valid = call_595264.validator(path, query, header, formData, body)
  let scheme = call_595264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595264.url(scheme.get, call_595264.host, call_595264.base,
                         call_595264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595264, url, valid)

proc call*(call_595265: Call_GetPropertyInfoList_595256; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          IncludeValues: bool = false): Recallable =
  ## getPropertyInfoList
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: bool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  var path_595266 = newJObject()
  var query_595267 = newJObject()
  add(query_595267, "timeout", newJInt(timeout))
  add(query_595267, "api-version", newJString(apiVersion))
  add(path_595266, "nameId", newJString(nameId))
  add(query_595267, "ContinuationToken", newJString(ContinuationToken))
  add(query_595267, "IncludeValues", newJBool(IncludeValues))
  result = call_595265.call(path_595266, query_595267, nil, nil, nil)

var getPropertyInfoList* = Call_GetPropertyInfoList_595256(
    name: "getPropertyInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Names/{nameId}/$/GetProperties",
    validator: validate_GetPropertyInfoList_595257, base: "",
    url: url_GetPropertyInfoList_595258, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SubmitPropertyBatch_595268 = ref object of OpenApiRestCall_593439
proc url_SubmitPropertyBatch_595270(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties/$/SubmitBatch")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SubmitPropertyBatch_595269(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595271 = path.getOrDefault("nameId")
  valid_595271 = validateParameter(valid_595271, JString, required = true,
                                 default = nil)
  if valid_595271 != nil:
    section.add "nameId", valid_595271
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595272 = query.getOrDefault("timeout")
  valid_595272 = validateParameter(valid_595272, JInt, required = false,
                                 default = newJInt(60))
  if valid_595272 != nil:
    section.add "timeout", valid_595272
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595273 = query.getOrDefault("api-version")
  valid_595273 = validateParameter(valid_595273, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595273 != nil:
    section.add "api-version", valid_595273
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595275: Call_SubmitPropertyBatch_595268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  let valid = call_595275.validator(path, query, header, formData, body)
  let scheme = call_595275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595275.url(scheme.get, call_595275.host, call_595275.base,
                         call_595275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595275, url, valid)

proc call*(call_595276: Call_SubmitPropertyBatch_595268; nameId: string;
          PropertyBatchDescriptionList: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## submitPropertyBatch
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  var path_595277 = newJObject()
  var query_595278 = newJObject()
  var body_595279 = newJObject()
  add(query_595278, "timeout", newJInt(timeout))
  add(query_595278, "api-version", newJString(apiVersion))
  add(path_595277, "nameId", newJString(nameId))
  if PropertyBatchDescriptionList != nil:
    body_595279 = PropertyBatchDescriptionList
  result = call_595276.call(path_595277, query_595278, nil, nil, body_595279)

var submitPropertyBatch* = Call_SubmitPropertyBatch_595268(
    name: "submitPropertyBatch", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperties/$/SubmitBatch",
    validator: validate_SubmitPropertyBatch_595269, base: "",
    url: url_SubmitPropertyBatch_595270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutProperty_595291 = ref object of OpenApiRestCall_593439
proc url_PutProperty_595293(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_PutProperty_595292(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595294 = path.getOrDefault("nameId")
  valid_595294 = validateParameter(valid_595294, JString, required = true,
                                 default = nil)
  if valid_595294 != nil:
    section.add "nameId", valid_595294
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595295 = query.getOrDefault("timeout")
  valid_595295 = validateParameter(valid_595295, JInt, required = false,
                                 default = newJInt(60))
  if valid_595295 != nil:
    section.add "timeout", valid_595295
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595296 = query.getOrDefault("api-version")
  valid_595296 = validateParameter(valid_595296, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595296 != nil:
    section.add "api-version", valid_595296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595298: Call_PutProperty_595291; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  let valid = call_595298.validator(path, query, header, formData, body)
  let scheme = call_595298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595298.url(scheme.get, call_595298.host, call_595298.base,
                         call_595298.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595298, url, valid)

proc call*(call_595299: Call_PutProperty_595291; nameId: string;
          PropertyDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## putProperty
  ## Creates or updates the specified Service Fabric property under a given name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  var path_595300 = newJObject()
  var query_595301 = newJObject()
  var body_595302 = newJObject()
  add(query_595301, "timeout", newJInt(timeout))
  add(query_595301, "api-version", newJString(apiVersion))
  add(path_595300, "nameId", newJString(nameId))
  if PropertyDescription != nil:
    body_595302 = PropertyDescription
  result = call_595299.call(path_595300, query_595301, nil, nil, body_595302)

var putProperty* = Call_PutProperty_595291(name: "putProperty",
                                        meth: HttpMethod.HttpPut,
                                        host: "azure.local:19080",
                                        route: "/Names/{nameId}/$/GetProperty",
                                        validator: validate_PutProperty_595292,
                                        base: "", url: url_PutProperty_595293,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfo_595280 = ref object of OpenApiRestCall_593439
proc url_GetPropertyInfo_595282(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfo_595281(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595283 = path.getOrDefault("nameId")
  valid_595283 = validateParameter(valid_595283, JString, required = true,
                                 default = nil)
  if valid_595283 != nil:
    section.add "nameId", valid_595283
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_595284 = query.getOrDefault("timeout")
  valid_595284 = validateParameter(valid_595284, JInt, required = false,
                                 default = newJInt(60))
  if valid_595284 != nil:
    section.add "timeout", valid_595284
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595285 = query.getOrDefault("api-version")
  valid_595285 = validateParameter(valid_595285, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595285 != nil:
    section.add "api-version", valid_595285
  var valid_595286 = query.getOrDefault("PropertyName")
  valid_595286 = validateParameter(valid_595286, JString, required = true,
                                 default = nil)
  if valid_595286 != nil:
    section.add "PropertyName", valid_595286
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595287: Call_GetPropertyInfo_595280; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  let valid = call_595287.validator(path, query, header, formData, body)
  let scheme = call_595287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595287.url(scheme.get, call_595287.host, call_595287.base,
                         call_595287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595287, url, valid)

proc call*(call_595288: Call_GetPropertyInfo_595280; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPropertyInfo
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_595289 = newJObject()
  var query_595290 = newJObject()
  add(query_595290, "timeout", newJInt(timeout))
  add(query_595290, "api-version", newJString(apiVersion))
  add(path_595289, "nameId", newJString(nameId))
  add(query_595290, "PropertyName", newJString(PropertyName))
  result = call_595288.call(path_595289, query_595290, nil, nil, nil)

var getPropertyInfo* = Call_GetPropertyInfo_595280(name: "getPropertyInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_GetPropertyInfo_595281,
    base: "", url: url_GetPropertyInfo_595282, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProperty_595303 = ref object of OpenApiRestCall_593439
proc url_DeleteProperty_595305(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteProperty_595304(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595306 = path.getOrDefault("nameId")
  valid_595306 = validateParameter(valid_595306, JString, required = true,
                                 default = nil)
  if valid_595306 != nil:
    section.add "nameId", valid_595306
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_595307 = query.getOrDefault("timeout")
  valid_595307 = validateParameter(valid_595307, JInt, required = false,
                                 default = newJInt(60))
  if valid_595307 != nil:
    section.add "timeout", valid_595307
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595308 = query.getOrDefault("api-version")
  valid_595308 = validateParameter(valid_595308, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595308 != nil:
    section.add "api-version", valid_595308
  var valid_595309 = query.getOrDefault("PropertyName")
  valid_595309 = validateParameter(valid_595309, JString, required = true,
                                 default = nil)
  if valid_595309 != nil:
    section.add "PropertyName", valid_595309
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595310: Call_DeleteProperty_595303; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  let valid = call_595310.validator(path, query, header, formData, body)
  let scheme = call_595310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595310.url(scheme.get, call_595310.host, call_595310.base,
                         call_595310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595310, url, valid)

proc call*(call_595311: Call_DeleteProperty_595303; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteProperty
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_595312 = newJObject()
  var query_595313 = newJObject()
  add(query_595313, "timeout", newJInt(timeout))
  add(query_595313, "api-version", newJString(apiVersion))
  add(path_595312, "nameId", newJString(nameId))
  add(query_595313, "PropertyName", newJString(PropertyName))
  result = call_595311.call(path_595312, query_595313, nil, nil, nil)

var deleteProperty* = Call_DeleteProperty_595303(name: "deleteProperty",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_DeleteProperty_595304,
    base: "", url: url_DeleteProperty_595305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSubNameInfoList_595314 = ref object of OpenApiRestCall_593439
proc url_GetSubNameInfoList_595316(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetSubNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetSubNameInfoList_595315(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_595317 = path.getOrDefault("nameId")
  valid_595317 = validateParameter(valid_595317, JString, required = true,
                                 default = nil)
  if valid_595317 != nil:
    section.add "nameId", valid_595317
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: JBool
  ##            : Allows specifying that the search performed should be recursive.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_595318 = query.getOrDefault("timeout")
  valid_595318 = validateParameter(valid_595318, JInt, required = false,
                                 default = newJInt(60))
  if valid_595318 != nil:
    section.add "timeout", valid_595318
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595319 = query.getOrDefault("api-version")
  valid_595319 = validateParameter(valid_595319, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595319 != nil:
    section.add "api-version", valid_595319
  var valid_595320 = query.getOrDefault("Recursive")
  valid_595320 = validateParameter(valid_595320, JBool, required = false,
                                 default = newJBool(false))
  if valid_595320 != nil:
    section.add "Recursive", valid_595320
  var valid_595321 = query.getOrDefault("ContinuationToken")
  valid_595321 = validateParameter(valid_595321, JString, required = false,
                                 default = nil)
  if valid_595321 != nil:
    section.add "ContinuationToken", valid_595321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595322: Call_GetSubNameInfoList_595314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  let valid = call_595322.validator(path, query, header, formData, body)
  let scheme = call_595322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595322.url(scheme.get, call_595322.host, call_595322.base,
                         call_595322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595322, url, valid)

proc call*(call_595323: Call_GetSubNameInfoList_595314; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Recursive: bool = false;
          ContinuationToken: string = ""): Recallable =
  ## getSubNameInfoList
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: bool
  ##            : Allows specifying that the search performed should be recursive.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_595324 = newJObject()
  var query_595325 = newJObject()
  add(query_595325, "timeout", newJInt(timeout))
  add(query_595325, "api-version", newJString(apiVersion))
  add(query_595325, "Recursive", newJBool(Recursive))
  add(path_595324, "nameId", newJString(nameId))
  add(query_595325, "ContinuationToken", newJString(ContinuationToken))
  result = call_595323.call(path_595324, query_595325, nil, nil, nil)

var getSubNameInfoList* = Call_GetSubNameInfoList_595314(
    name: "getSubNameInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetSubNames",
    validator: validate_GetSubNameInfoList_595315, base: "",
    url: url_GetSubNameInfoList_595316, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfoList_595326 = ref object of OpenApiRestCall_593439
proc url_GetNodeInfoList_595328(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodeInfoList_595327(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: JString
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_595329 = query.getOrDefault("timeout")
  valid_595329 = validateParameter(valid_595329, JInt, required = false,
                                 default = newJInt(60))
  if valid_595329 != nil:
    section.add "timeout", valid_595329
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595330 = query.getOrDefault("api-version")
  valid_595330 = validateParameter(valid_595330, JString, required = true,
                                 default = newJString("6.3"))
  if valid_595330 != nil:
    section.add "api-version", valid_595330
  var valid_595331 = query.getOrDefault("NodeStatusFilter")
  valid_595331 = validateParameter(valid_595331, JString, required = false,
                                 default = newJString("default"))
  if valid_595331 != nil:
    section.add "NodeStatusFilter", valid_595331
  var valid_595332 = query.getOrDefault("ContinuationToken")
  valid_595332 = validateParameter(valid_595332, JString, required = false,
                                 default = nil)
  if valid_595332 != nil:
    section.add "ContinuationToken", valid_595332
  var valid_595333 = query.getOrDefault("MaxResults")
  valid_595333 = validateParameter(valid_595333, JInt, required = false,
                                 default = newJInt(0))
  if valid_595333 != nil:
    section.add "MaxResults", valid_595333
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595334: Call_GetNodeInfoList_595326; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  let valid = call_595334.validator(path, query, header, formData, body)
  let scheme = call_595334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595334.url(scheme.get, call_595334.host, call_595334.base,
                         call_595334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595334, url, valid)

proc call*(call_595335: Call_GetNodeInfoList_595326; timeout: int = 60;
          apiVersion: string = "6.3"; NodeStatusFilter: string = "default";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getNodeInfoList
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: string
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_595336 = newJObject()
  add(query_595336, "timeout", newJInt(timeout))
  add(query_595336, "api-version", newJString(apiVersion))
  add(query_595336, "NodeStatusFilter", newJString(NodeStatusFilter))
  add(query_595336, "ContinuationToken", newJString(ContinuationToken))
  add(query_595336, "MaxResults", newJInt(MaxResults))
  result = call_595335.call(nil, query_595336, nil, nil, nil)

var getNodeInfoList* = Call_GetNodeInfoList_595326(name: "getNodeInfoList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Nodes",
    validator: validate_GetNodeInfoList_595327, base: "", url: url_GetNodeInfoList_595328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfo_595337 = ref object of OpenApiRestCall_593439
proc url_GetNodeInfo_595339(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeInfo_595338(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595340 = path.getOrDefault("nodeName")
  valid_595340 = validateParameter(valid_595340, JString, required = true,
                                 default = nil)
  if valid_595340 != nil:
    section.add "nodeName", valid_595340
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595341 = query.getOrDefault("timeout")
  valid_595341 = validateParameter(valid_595341, JInt, required = false,
                                 default = newJInt(60))
  if valid_595341 != nil:
    section.add "timeout", valid_595341
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595342 = query.getOrDefault("api-version")
  valid_595342 = validateParameter(valid_595342, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595342 != nil:
    section.add "api-version", valid_595342
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595343: Call_GetNodeInfo_595337; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  let valid = call_595343.validator(path, query, header, formData, body)
  let scheme = call_595343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595343.url(scheme.get, call_595343.host, call_595343.base,
                         call_595343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595343, url, valid)

proc call*(call_595344: Call_GetNodeInfo_595337; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getNodeInfo
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595345 = newJObject()
  var query_595346 = newJObject()
  add(query_595346, "timeout", newJInt(timeout))
  add(query_595346, "api-version", newJString(apiVersion))
  add(path_595345, "nodeName", newJString(nodeName))
  result = call_595344.call(path_595345, query_595346, nil, nil, nil)

var getNodeInfo* = Call_GetNodeInfo_595337(name: "getNodeInfo",
                                        meth: HttpMethod.HttpGet,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}",
                                        validator: validate_GetNodeInfo_595338,
                                        base: "", url: url_GetNodeInfo_595339,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableNode_595347 = ref object of OpenApiRestCall_593439
proc url_EnableNode_595349(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Activate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableNode_595348(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595350 = path.getOrDefault("nodeName")
  valid_595350 = validateParameter(valid_595350, JString, required = true,
                                 default = nil)
  if valid_595350 != nil:
    section.add "nodeName", valid_595350
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595351 = query.getOrDefault("timeout")
  valid_595351 = validateParameter(valid_595351, JInt, required = false,
                                 default = newJInt(60))
  if valid_595351 != nil:
    section.add "timeout", valid_595351
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595352 = query.getOrDefault("api-version")
  valid_595352 = validateParameter(valid_595352, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595352 != nil:
    section.add "api-version", valid_595352
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595353: Call_EnableNode_595347; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  let valid = call_595353.validator(path, query, header, formData, body)
  let scheme = call_595353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595353.url(scheme.get, call_595353.host, call_595353.base,
                         call_595353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595353, url, valid)

proc call*(call_595354: Call_EnableNode_595347; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## enableNode
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595355 = newJObject()
  var query_595356 = newJObject()
  add(query_595356, "timeout", newJInt(timeout))
  add(query_595356, "api-version", newJString(apiVersion))
  add(path_595355, "nodeName", newJString(nodeName))
  result = call_595354.call(path_595355, query_595356, nil, nil, nil)

var enableNode* = Call_EnableNode_595347(name: "enableNode",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Nodes/{nodeName}/$/Activate",
                                      validator: validate_EnableNode_595348,
                                      base: "", url: url_EnableNode_595349,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableNode_595357 = ref object of OpenApiRestCall_593439
proc url_DisableNode_595359(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Deactivate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableNode_595358(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595360 = path.getOrDefault("nodeName")
  valid_595360 = validateParameter(valid_595360, JString, required = true,
                                 default = nil)
  if valid_595360 != nil:
    section.add "nodeName", valid_595360
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595361 = query.getOrDefault("timeout")
  valid_595361 = validateParameter(valid_595361, JInt, required = false,
                                 default = newJInt(60))
  if valid_595361 != nil:
    section.add "timeout", valid_595361
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595362 = query.getOrDefault("api-version")
  valid_595362 = validateParameter(valid_595362, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595362 != nil:
    section.add "api-version", valid_595362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595364: Call_DisableNode_595357; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  let valid = call_595364.validator(path, query, header, formData, body)
  let scheme = call_595364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595364.url(scheme.get, call_595364.host, call_595364.base,
                         call_595364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595364, url, valid)

proc call*(call_595365: Call_DisableNode_595357; nodeName: string;
          DeactivationIntentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## disableNode
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  var path_595366 = newJObject()
  var query_595367 = newJObject()
  var body_595368 = newJObject()
  add(query_595367, "timeout", newJInt(timeout))
  add(query_595367, "api-version", newJString(apiVersion))
  add(path_595366, "nodeName", newJString(nodeName))
  if DeactivationIntentDescription != nil:
    body_595368 = DeactivationIntentDescription
  result = call_595365.call(path_595366, query_595367, nil, nil, body_595368)

var disableNode* = Call_DisableNode_595357(name: "disableNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080", route: "/Nodes/{nodeName}/$/Deactivate",
                                        validator: validate_DisableNode_595358,
                                        base: "", url: url_DisableNode_595359,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeployServicePackageToNode_595369 = ref object of OpenApiRestCall_593439
proc url_DeployServicePackageToNode_595371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/DeployServicePackage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeployServicePackageToNode_595370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595372 = path.getOrDefault("nodeName")
  valid_595372 = validateParameter(valid_595372, JString, required = true,
                                 default = nil)
  if valid_595372 != nil:
    section.add "nodeName", valid_595372
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595373 = query.getOrDefault("timeout")
  valid_595373 = validateParameter(valid_595373, JInt, required = false,
                                 default = newJInt(60))
  if valid_595373 != nil:
    section.add "timeout", valid_595373
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595374 = query.getOrDefault("api-version")
  valid_595374 = validateParameter(valid_595374, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595374 != nil:
    section.add "api-version", valid_595374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595376: Call_DeployServicePackageToNode_595369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  let valid = call_595376.validator(path, query, header, formData, body)
  let scheme = call_595376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595376.url(scheme.get, call_595376.host, call_595376.base,
                         call_595376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595376, url, valid)

proc call*(call_595377: Call_DeployServicePackageToNode_595369; nodeName: string;
          DeployServicePackageToNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deployServicePackageToNode
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  var path_595378 = newJObject()
  var query_595379 = newJObject()
  var body_595380 = newJObject()
  add(query_595379, "timeout", newJInt(timeout))
  add(query_595379, "api-version", newJString(apiVersion))
  add(path_595378, "nodeName", newJString(nodeName))
  if DeployServicePackageToNodeDescription != nil:
    body_595380 = DeployServicePackageToNodeDescription
  result = call_595377.call(path_595378, query_595379, nil, nil, body_595380)

var deployServicePackageToNode* = Call_DeployServicePackageToNode_595369(
    name: "deployServicePackageToNode", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/DeployServicePackage",
    validator: validate_DeployServicePackageToNode_595370, base: "",
    url: url_DeployServicePackageToNode_595371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfoList_595381 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationInfoList_595383(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfoList_595382(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595384 = path.getOrDefault("nodeName")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = nil)
  if valid_595384 != nil:
    section.add "nodeName", valid_595384
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_595385 = query.getOrDefault("timeout")
  valid_595385 = validateParameter(valid_595385, JInt, required = false,
                                 default = newJInt(60))
  if valid_595385 != nil:
    section.add "timeout", valid_595385
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595386 = query.getOrDefault("api-version")
  valid_595386 = validateParameter(valid_595386, JString, required = true,
                                 default = newJString("6.1"))
  if valid_595386 != nil:
    section.add "api-version", valid_595386
  var valid_595387 = query.getOrDefault("IncludeHealthState")
  valid_595387 = validateParameter(valid_595387, JBool, required = false,
                                 default = newJBool(false))
  if valid_595387 != nil:
    section.add "IncludeHealthState", valid_595387
  var valid_595388 = query.getOrDefault("ContinuationToken")
  valid_595388 = validateParameter(valid_595388, JString, required = false,
                                 default = nil)
  if valid_595388 != nil:
    section.add "ContinuationToken", valid_595388
  var valid_595389 = query.getOrDefault("MaxResults")
  valid_595389 = validateParameter(valid_595389, JInt, required = false,
                                 default = newJInt(0))
  if valid_595389 != nil:
    section.add "MaxResults", valid_595389
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595390: Call_GetDeployedApplicationInfoList_595381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_595390.validator(path, query, header, formData, body)
  let scheme = call_595390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595390.url(scheme.get, call_595390.host, call_595390.base,
                         call_595390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595390, url, valid)

proc call*(call_595391: Call_GetDeployedApplicationInfoList_595381;
          nodeName: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getDeployedApplicationInfoList
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_595392 = newJObject()
  var query_595393 = newJObject()
  add(query_595393, "timeout", newJInt(timeout))
  add(query_595393, "api-version", newJString(apiVersion))
  add(path_595392, "nodeName", newJString(nodeName))
  add(query_595393, "IncludeHealthState", newJBool(IncludeHealthState))
  add(query_595393, "ContinuationToken", newJString(ContinuationToken))
  add(query_595393, "MaxResults", newJInt(MaxResults))
  result = call_595391.call(path_595392, query_595393, nil, nil, nil)

var getDeployedApplicationInfoList* = Call_GetDeployedApplicationInfoList_595381(
    name: "getDeployedApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications",
    validator: validate_GetDeployedApplicationInfoList_595382, base: "",
    url: url_GetDeployedApplicationInfoList_595383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfo_595394 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationInfo_595396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfo_595395(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595397 = path.getOrDefault("nodeName")
  valid_595397 = validateParameter(valid_595397, JString, required = true,
                                 default = nil)
  if valid_595397 != nil:
    section.add "nodeName", valid_595397
  var valid_595398 = path.getOrDefault("applicationId")
  valid_595398 = validateParameter(valid_595398, JString, required = true,
                                 default = nil)
  if valid_595398 != nil:
    section.add "applicationId", valid_595398
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  section = newJObject()
  var valid_595399 = query.getOrDefault("timeout")
  valid_595399 = validateParameter(valid_595399, JInt, required = false,
                                 default = newJInt(60))
  if valid_595399 != nil:
    section.add "timeout", valid_595399
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595400 = query.getOrDefault("api-version")
  valid_595400 = validateParameter(valid_595400, JString, required = true,
                                 default = newJString("6.1"))
  if valid_595400 != nil:
    section.add "api-version", valid_595400
  var valid_595401 = query.getOrDefault("IncludeHealthState")
  valid_595401 = validateParameter(valid_595401, JBool, required = false,
                                 default = newJBool(false))
  if valid_595401 != nil:
    section.add "IncludeHealthState", valid_595401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595402: Call_GetDeployedApplicationInfo_595394; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_595402.validator(path, query, header, formData, body)
  let scheme = call_595402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595402.url(scheme.get, call_595402.host, call_595402.base,
                         call_595402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595402, url, valid)

proc call*(call_595403: Call_GetDeployedApplicationInfo_595394; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false): Recallable =
  ## getDeployedApplicationInfo
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595404 = newJObject()
  var query_595405 = newJObject()
  add(query_595405, "timeout", newJInt(timeout))
  add(query_595405, "api-version", newJString(apiVersion))
  add(path_595404, "nodeName", newJString(nodeName))
  add(query_595405, "IncludeHealthState", newJBool(IncludeHealthState))
  add(path_595404, "applicationId", newJString(applicationId))
  result = call_595403.call(path_595404, query_595405, nil, nil, nil)

var getDeployedApplicationInfo* = Call_GetDeployedApplicationInfo_595394(
    name: "getDeployedApplicationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}",
    validator: validate_GetDeployedApplicationInfo_595395, base: "",
    url: url_GetDeployedApplicationInfo_595396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedCodePackageInfoList_595406 = ref object of OpenApiRestCall_593439
proc url_GetDeployedCodePackageInfoList_595408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedCodePackageInfoList_595407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595409 = path.getOrDefault("nodeName")
  valid_595409 = validateParameter(valid_595409, JString, required = true,
                                 default = nil)
  if valid_595409 != nil:
    section.add "nodeName", valid_595409
  var valid_595410 = path.getOrDefault("applicationId")
  valid_595410 = validateParameter(valid_595410, JString, required = true,
                                 default = nil)
  if valid_595410 != nil:
    section.add "applicationId", valid_595410
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_595411 = query.getOrDefault("timeout")
  valid_595411 = validateParameter(valid_595411, JInt, required = false,
                                 default = newJInt(60))
  if valid_595411 != nil:
    section.add "timeout", valid_595411
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595412 = query.getOrDefault("api-version")
  valid_595412 = validateParameter(valid_595412, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595412 != nil:
    section.add "api-version", valid_595412
  var valid_595413 = query.getOrDefault("ServiceManifestName")
  valid_595413 = validateParameter(valid_595413, JString, required = false,
                                 default = nil)
  if valid_595413 != nil:
    section.add "ServiceManifestName", valid_595413
  var valid_595414 = query.getOrDefault("CodePackageName")
  valid_595414 = validateParameter(valid_595414, JString, required = false,
                                 default = nil)
  if valid_595414 != nil:
    section.add "CodePackageName", valid_595414
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595415: Call_GetDeployedCodePackageInfoList_595406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_595415.validator(path, query, header, formData, body)
  let scheme = call_595415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595415.url(scheme.get, call_595415.host, call_595415.base,
                         call_595415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595415, url, valid)

proc call*(call_595416: Call_GetDeployedCodePackageInfoList_595406;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          CodePackageName: string = ""): Recallable =
  ## getDeployedCodePackageInfoList
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   CodePackageName: string
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_595417 = newJObject()
  var query_595418 = newJObject()
  add(query_595418, "timeout", newJInt(timeout))
  add(query_595418, "api-version", newJString(apiVersion))
  add(path_595417, "nodeName", newJString(nodeName))
  add(query_595418, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595417, "applicationId", newJString(applicationId))
  add(query_595418, "CodePackageName", newJString(CodePackageName))
  result = call_595416.call(path_595417, query_595418, nil, nil, nil)

var getDeployedCodePackageInfoList* = Call_GetDeployedCodePackageInfoList_595406(
    name: "getDeployedCodePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages",
    validator: validate_GetDeployedCodePackageInfoList_595407, base: "",
    url: url_GetDeployedCodePackageInfoList_595408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeContainerApi_595419 = ref object of OpenApiRestCall_593439
proc url_InvokeContainerApi_595421(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerApi")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_InvokeContainerApi_595420(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595422 = path.getOrDefault("nodeName")
  valid_595422 = validateParameter(valid_595422, JString, required = true,
                                 default = nil)
  if valid_595422 != nil:
    section.add "nodeName", valid_595422
  var valid_595423 = path.getOrDefault("applicationId")
  valid_595423 = validateParameter(valid_595423, JString, required = true,
                                 default = nil)
  if valid_595423 != nil:
    section.add "applicationId", valid_595423
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: JString (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  section = newJObject()
  var valid_595424 = query.getOrDefault("timeout")
  valid_595424 = validateParameter(valid_595424, JInt, required = false,
                                 default = newJInt(60))
  if valid_595424 != nil:
    section.add "timeout", valid_595424
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595425 = query.getOrDefault("api-version")
  valid_595425 = validateParameter(valid_595425, JString, required = true,
                                 default = newJString("6.2"))
  if valid_595425 != nil:
    section.add "api-version", valid_595425
  var valid_595426 = query.getOrDefault("ServiceManifestName")
  valid_595426 = validateParameter(valid_595426, JString, required = true,
                                 default = nil)
  if valid_595426 != nil:
    section.add "ServiceManifestName", valid_595426
  var valid_595427 = query.getOrDefault("CodePackageName")
  valid_595427 = validateParameter(valid_595427, JString, required = true,
                                 default = nil)
  if valid_595427 != nil:
    section.add "CodePackageName", valid_595427
  var valid_595428 = query.getOrDefault("CodePackageInstanceId")
  valid_595428 = validateParameter(valid_595428, JString, required = true,
                                 default = nil)
  if valid_595428 != nil:
    section.add "CodePackageInstanceId", valid_595428
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595430: Call_InvokeContainerApi_595419; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_595430.validator(path, query, header, formData, body)
  let scheme = call_595430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595430.url(scheme.get, call_595430.host, call_595430.base,
                         call_595430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595430, url, valid)

proc call*(call_595431: Call_InvokeContainerApi_595419; nodeName: string;
          ServiceManifestName: string; applicationId: string;
          ContainerApiRequestBody: JsonNode; CodePackageName: string;
          CodePackageInstanceId: string; timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## invokeContainerApi
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: string (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  var path_595432 = newJObject()
  var query_595433 = newJObject()
  var body_595434 = newJObject()
  add(query_595433, "timeout", newJInt(timeout))
  add(query_595433, "api-version", newJString(apiVersion))
  add(path_595432, "nodeName", newJString(nodeName))
  add(query_595433, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595432, "applicationId", newJString(applicationId))
  if ContainerApiRequestBody != nil:
    body_595434 = ContainerApiRequestBody
  add(query_595433, "CodePackageName", newJString(CodePackageName))
  add(query_595433, "CodePackageInstanceId", newJString(CodePackageInstanceId))
  result = call_595431.call(path_595432, query_595433, nil, nil, body_595434)

var invokeContainerApi* = Call_InvokeContainerApi_595419(
    name: "invokeContainerApi", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi",
    validator: validate_InvokeContainerApi_595420, base: "",
    url: url_InvokeContainerApi_595421, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainerLogsDeployedOnNode_595435 = ref object of OpenApiRestCall_593439
proc url_GetContainerLogsDeployedOnNode_595437(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetContainerLogsDeployedOnNode_595436(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595438 = path.getOrDefault("nodeName")
  valid_595438 = validateParameter(valid_595438, JString, required = true,
                                 default = nil)
  if valid_595438 != nil:
    section.add "nodeName", valid_595438
  var valid_595439 = path.getOrDefault("applicationId")
  valid_595439 = validateParameter(valid_595439, JString, required = true,
                                 default = nil)
  if valid_595439 != nil:
    section.add "applicationId", valid_595439
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   Previous: JBool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_595440 = query.getOrDefault("timeout")
  valid_595440 = validateParameter(valid_595440, JInt, required = false,
                                 default = newJInt(60))
  if valid_595440 != nil:
    section.add "timeout", valid_595440
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595441 = query.getOrDefault("api-version")
  valid_595441 = validateParameter(valid_595441, JString, required = true,
                                 default = newJString("6.2"))
  if valid_595441 != nil:
    section.add "api-version", valid_595441
  var valid_595442 = query.getOrDefault("ServiceManifestName")
  valid_595442 = validateParameter(valid_595442, JString, required = true,
                                 default = nil)
  if valid_595442 != nil:
    section.add "ServiceManifestName", valid_595442
  var valid_595443 = query.getOrDefault("Tail")
  valid_595443 = validateParameter(valid_595443, JString, required = false,
                                 default = nil)
  if valid_595443 != nil:
    section.add "Tail", valid_595443
  var valid_595444 = query.getOrDefault("Previous")
  valid_595444 = validateParameter(valid_595444, JBool, required = false,
                                 default = newJBool(false))
  if valid_595444 != nil:
    section.add "Previous", valid_595444
  var valid_595445 = query.getOrDefault("CodePackageName")
  valid_595445 = validateParameter(valid_595445, JString, required = true,
                                 default = nil)
  if valid_595445 != nil:
    section.add "CodePackageName", valid_595445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595446: Call_GetContainerLogsDeployedOnNode_595435; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_595446.validator(path, query, header, formData, body)
  let scheme = call_595446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595446.url(scheme.get, call_595446.host, call_595446.base,
                         call_595446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595446, url, valid)

proc call*(call_595447: Call_GetContainerLogsDeployedOnNode_595435;
          nodeName: string; ServiceManifestName: string; applicationId: string;
          CodePackageName: string; timeout: int = 60; apiVersion: string = "6.2";
          Tail: string = ""; Previous: bool = false): Recallable =
  ## getContainerLogsDeployedOnNode
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   Previous: bool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_595448 = newJObject()
  var query_595449 = newJObject()
  add(query_595449, "timeout", newJInt(timeout))
  add(query_595449, "api-version", newJString(apiVersion))
  add(path_595448, "nodeName", newJString(nodeName))
  add(query_595449, "ServiceManifestName", newJString(ServiceManifestName))
  add(query_595449, "Tail", newJString(Tail))
  add(path_595448, "applicationId", newJString(applicationId))
  add(query_595449, "Previous", newJBool(Previous))
  add(query_595449, "CodePackageName", newJString(CodePackageName))
  result = call_595447.call(path_595448, query_595449, nil, nil, nil)

var getContainerLogsDeployedOnNode* = Call_GetContainerLogsDeployedOnNode_595435(
    name: "getContainerLogsDeployedOnNode", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs",
    validator: validate_GetContainerLogsDeployedOnNode_595436, base: "",
    url: url_GetContainerLogsDeployedOnNode_595437,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartDeployedCodePackage_595450 = ref object of OpenApiRestCall_593439
proc url_RestartDeployedCodePackage_595452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartDeployedCodePackage_595451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595453 = path.getOrDefault("nodeName")
  valid_595453 = validateParameter(valid_595453, JString, required = true,
                                 default = nil)
  if valid_595453 != nil:
    section.add "nodeName", valid_595453
  var valid_595454 = path.getOrDefault("applicationId")
  valid_595454 = validateParameter(valid_595454, JString, required = true,
                                 default = nil)
  if valid_595454 != nil:
    section.add "applicationId", valid_595454
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595455 = query.getOrDefault("timeout")
  valid_595455 = validateParameter(valid_595455, JInt, required = false,
                                 default = newJInt(60))
  if valid_595455 != nil:
    section.add "timeout", valid_595455
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595456 = query.getOrDefault("api-version")
  valid_595456 = validateParameter(valid_595456, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595456 != nil:
    section.add "api-version", valid_595456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595458: Call_RestartDeployedCodePackage_595450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  let valid = call_595458.validator(path, query, header, formData, body)
  let scheme = call_595458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595458.url(scheme.get, call_595458.host, call_595458.base,
                         call_595458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595458, url, valid)

proc call*(call_595459: Call_RestartDeployedCodePackage_595450; nodeName: string;
          applicationId: string; RestartDeployedCodePackageDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## restartDeployedCodePackage
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  var path_595460 = newJObject()
  var query_595461 = newJObject()
  var body_595462 = newJObject()
  add(query_595461, "timeout", newJInt(timeout))
  add(query_595461, "api-version", newJString(apiVersion))
  add(path_595460, "nodeName", newJString(nodeName))
  add(path_595460, "applicationId", newJString(applicationId))
  if RestartDeployedCodePackageDescription != nil:
    body_595462 = RestartDeployedCodePackageDescription
  result = call_595459.call(path_595460, query_595461, nil, nil, body_595462)

var restartDeployedCodePackage* = Call_RestartDeployedCodePackage_595450(
    name: "restartDeployedCodePackage", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart",
    validator: validate_RestartDeployedCodePackage_595451, base: "",
    url: url_RestartDeployedCodePackage_595452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealthUsingPolicy_595477 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationHealthUsingPolicy_595479(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealthUsingPolicy_595478(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595480 = path.getOrDefault("nodeName")
  valid_595480 = validateParameter(valid_595480, JString, required = true,
                                 default = nil)
  if valid_595480 != nil:
    section.add "nodeName", valid_595480
  var valid_595481 = path.getOrDefault("applicationId")
  valid_595481 = validateParameter(valid_595481, JString, required = true,
                                 default = nil)
  if valid_595481 != nil:
    section.add "applicationId", valid_595481
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595482 = query.getOrDefault("timeout")
  valid_595482 = validateParameter(valid_595482, JInt, required = false,
                                 default = newJInt(60))
  if valid_595482 != nil:
    section.add "timeout", valid_595482
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595483 = query.getOrDefault("api-version")
  valid_595483 = validateParameter(valid_595483, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595483 != nil:
    section.add "api-version", valid_595483
  var valid_595484 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_595484 = validateParameter(valid_595484, JInt, required = false,
                                 default = newJInt(0))
  if valid_595484 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_595484
  var valid_595485 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595485 = validateParameter(valid_595485, JBool, required = false,
                                 default = newJBool(false))
  if valid_595485 != nil:
    section.add "ExcludeHealthStatistics", valid_595485
  var valid_595486 = query.getOrDefault("EventsHealthStateFilter")
  valid_595486 = validateParameter(valid_595486, JInt, required = false,
                                 default = newJInt(0))
  if valid_595486 != nil:
    section.add "EventsHealthStateFilter", valid_595486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595488: Call_GetDeployedApplicationHealthUsingPolicy_595477;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  let valid = call_595488.validator(path, query, header, formData, body)
  let scheme = call_595488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595488.url(scheme.get, call_595488.host, call_595488.base,
                         call_595488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595488, url, valid)

proc call*(call_595489: Call_GetDeployedApplicationHealthUsingPolicy_595477;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationHealthPolicy: JsonNode = nil;
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealthUsingPolicy
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595490 = newJObject()
  var query_595491 = newJObject()
  var body_595492 = newJObject()
  add(query_595491, "timeout", newJInt(timeout))
  add(query_595491, "api-version", newJString(apiVersion))
  add(path_595490, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_595492 = ApplicationHealthPolicy
  add(query_595491, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_595491, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595491, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595490, "applicationId", newJString(applicationId))
  result = call_595489.call(path_595490, query_595491, nil, nil, body_595492)

var getDeployedApplicationHealthUsingPolicy* = Call_GetDeployedApplicationHealthUsingPolicy_595477(
    name: "getDeployedApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealthUsingPolicy_595478, base: "",
    url: url_GetDeployedApplicationHealthUsingPolicy_595479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealth_595463 = ref object of OpenApiRestCall_593439
proc url_GetDeployedApplicationHealth_595465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealth_595464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595466 = path.getOrDefault("nodeName")
  valid_595466 = validateParameter(valid_595466, JString, required = true,
                                 default = nil)
  if valid_595466 != nil:
    section.add "nodeName", valid_595466
  var valid_595467 = path.getOrDefault("applicationId")
  valid_595467 = validateParameter(valid_595467, JString, required = true,
                                 default = nil)
  if valid_595467 != nil:
    section.add "applicationId", valid_595467
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595468 = query.getOrDefault("timeout")
  valid_595468 = validateParameter(valid_595468, JInt, required = false,
                                 default = newJInt(60))
  if valid_595468 != nil:
    section.add "timeout", valid_595468
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595469 = query.getOrDefault("api-version")
  valid_595469 = validateParameter(valid_595469, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595469 != nil:
    section.add "api-version", valid_595469
  var valid_595470 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_595470 = validateParameter(valid_595470, JInt, required = false,
                                 default = newJInt(0))
  if valid_595470 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_595470
  var valid_595471 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595471 = validateParameter(valid_595471, JBool, required = false,
                                 default = newJBool(false))
  if valid_595471 != nil:
    section.add "ExcludeHealthStatistics", valid_595471
  var valid_595472 = query.getOrDefault("EventsHealthStateFilter")
  valid_595472 = validateParameter(valid_595472, JInt, required = false,
                                 default = newJInt(0))
  if valid_595472 != nil:
    section.add "EventsHealthStateFilter", valid_595472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595473: Call_GetDeployedApplicationHealth_595463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  let valid = call_595473.validator(path, query, header, formData, body)
  let scheme = call_595473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595473.url(scheme.get, call_595473.host, call_595473.base,
                         call_595473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595473, url, valid)

proc call*(call_595474: Call_GetDeployedApplicationHealth_595463; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealth
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595475 = newJObject()
  var query_595476 = newJObject()
  add(query_595476, "timeout", newJInt(timeout))
  add(query_595476, "api-version", newJString(apiVersion))
  add(path_595475, "nodeName", newJString(nodeName))
  add(query_595476, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_595476, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595476, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595475, "applicationId", newJString(applicationId))
  result = call_595474.call(path_595475, query_595476, nil, nil, nil)

var getDeployedApplicationHealth* = Call_GetDeployedApplicationHealth_595463(
    name: "getDeployedApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealth_595464, base: "",
    url: url_GetDeployedApplicationHealth_595465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaInfoList_595493 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceReplicaInfoList_595495(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaInfoList_595494(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595496 = path.getOrDefault("nodeName")
  valid_595496 = validateParameter(valid_595496, JString, required = true,
                                 default = nil)
  if valid_595496 != nil:
    section.add "nodeName", valid_595496
  var valid_595497 = path.getOrDefault("applicationId")
  valid_595497 = validateParameter(valid_595497, JString, required = true,
                                 default = nil)
  if valid_595497 != nil:
    section.add "applicationId", valid_595497
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   PartitionId: JString
  ##              : The identity of the partition.
  section = newJObject()
  var valid_595498 = query.getOrDefault("timeout")
  valid_595498 = validateParameter(valid_595498, JInt, required = false,
                                 default = newJInt(60))
  if valid_595498 != nil:
    section.add "timeout", valid_595498
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595499 = query.getOrDefault("api-version")
  valid_595499 = validateParameter(valid_595499, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595499 != nil:
    section.add "api-version", valid_595499
  var valid_595500 = query.getOrDefault("ServiceManifestName")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "ServiceManifestName", valid_595500
  var valid_595501 = query.getOrDefault("PartitionId")
  valid_595501 = validateParameter(valid_595501, JString, required = false,
                                 default = nil)
  if valid_595501 != nil:
    section.add "PartitionId", valid_595501
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595502: Call_GetDeployedServiceReplicaInfoList_595493;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  let valid = call_595502.validator(path, query, header, formData, body)
  let scheme = call_595502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595502.url(scheme.get, call_595502.host, call_595502.base,
                         call_595502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595502, url, valid)

proc call*(call_595503: Call_GetDeployedServiceReplicaInfoList_595493;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          PartitionId: string = ""): Recallable =
  ## getDeployedServiceReplicaInfoList
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   PartitionId: string
  ##              : The identity of the partition.
  var path_595504 = newJObject()
  var query_595505 = newJObject()
  add(query_595505, "timeout", newJInt(timeout))
  add(query_595505, "api-version", newJString(apiVersion))
  add(path_595504, "nodeName", newJString(nodeName))
  add(query_595505, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595504, "applicationId", newJString(applicationId))
  add(query_595505, "PartitionId", newJString(PartitionId))
  result = call_595503.call(path_595504, query_595505, nil, nil, nil)

var getDeployedServiceReplicaInfoList* = Call_GetDeployedServiceReplicaInfoList_595493(
    name: "getDeployedServiceReplicaInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaInfoList_595494, base: "",
    url: url_GetDeployedServiceReplicaInfoList_595495,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoList_595506 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageInfoList_595508(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoList_595507(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595509 = path.getOrDefault("nodeName")
  valid_595509 = validateParameter(valid_595509, JString, required = true,
                                 default = nil)
  if valid_595509 != nil:
    section.add "nodeName", valid_595509
  var valid_595510 = path.getOrDefault("applicationId")
  valid_595510 = validateParameter(valid_595510, JString, required = true,
                                 default = nil)
  if valid_595510 != nil:
    section.add "applicationId", valid_595510
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595511 = query.getOrDefault("timeout")
  valid_595511 = validateParameter(valid_595511, JInt, required = false,
                                 default = newJInt(60))
  if valid_595511 != nil:
    section.add "timeout", valid_595511
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595512 = query.getOrDefault("api-version")
  valid_595512 = validateParameter(valid_595512, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595512 != nil:
    section.add "api-version", valid_595512
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595513: Call_GetDeployedServicePackageInfoList_595506;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_595513.validator(path, query, header, formData, body)
  let scheme = call_595513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595513.url(scheme.get, call_595513.host, call_595513.base,
                         call_595513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595513, url, valid)

proc call*(call_595514: Call_GetDeployedServicePackageInfoList_595506;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoList
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595515 = newJObject()
  var query_595516 = newJObject()
  add(query_595516, "timeout", newJInt(timeout))
  add(query_595516, "api-version", newJString(apiVersion))
  add(path_595515, "nodeName", newJString(nodeName))
  add(path_595515, "applicationId", newJString(applicationId))
  result = call_595514.call(path_595515, query_595516, nil, nil, nil)

var getDeployedServicePackageInfoList* = Call_GetDeployedServicePackageInfoList_595506(
    name: "getDeployedServicePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages",
    validator: validate_GetDeployedServicePackageInfoList_595507, base: "",
    url: url_GetDeployedServicePackageInfoList_595508,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoListByName_595517 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageInfoListByName_595519(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoListByName_595518(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595520 = path.getOrDefault("nodeName")
  valid_595520 = validateParameter(valid_595520, JString, required = true,
                                 default = nil)
  if valid_595520 != nil:
    section.add "nodeName", valid_595520
  var valid_595521 = path.getOrDefault("applicationId")
  valid_595521 = validateParameter(valid_595521, JString, required = true,
                                 default = nil)
  if valid_595521 != nil:
    section.add "applicationId", valid_595521
  var valid_595522 = path.getOrDefault("servicePackageName")
  valid_595522 = validateParameter(valid_595522, JString, required = true,
                                 default = nil)
  if valid_595522 != nil:
    section.add "servicePackageName", valid_595522
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595523 = query.getOrDefault("timeout")
  valid_595523 = validateParameter(valid_595523, JInt, required = false,
                                 default = newJInt(60))
  if valid_595523 != nil:
    section.add "timeout", valid_595523
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595524 = query.getOrDefault("api-version")
  valid_595524 = validateParameter(valid_595524, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595524 != nil:
    section.add "api-version", valid_595524
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595525: Call_GetDeployedServicePackageInfoListByName_595517;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  let valid = call_595525.validator(path, query, header, formData, body)
  let scheme = call_595525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595525.url(scheme.get, call_595525.host, call_595525.base,
                         call_595525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595525, url, valid)

proc call*(call_595526: Call_GetDeployedServicePackageInfoListByName_595517;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoListByName
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595527 = newJObject()
  var query_595528 = newJObject()
  add(query_595528, "timeout", newJInt(timeout))
  add(query_595528, "api-version", newJString(apiVersion))
  add(path_595527, "nodeName", newJString(nodeName))
  add(path_595527, "applicationId", newJString(applicationId))
  add(path_595527, "servicePackageName", newJString(servicePackageName))
  result = call_595526.call(path_595527, query_595528, nil, nil, nil)

var getDeployedServicePackageInfoListByName* = Call_GetDeployedServicePackageInfoListByName_595517(
    name: "getDeployedServicePackageInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}",
    validator: validate_GetDeployedServicePackageInfoListByName_595518, base: "",
    url: url_GetDeployedServicePackageInfoListByName_595519,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealthUsingPolicy_595542 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageHealthUsingPolicy_595544(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealthUsingPolicy_595543(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595545 = path.getOrDefault("nodeName")
  valid_595545 = validateParameter(valid_595545, JString, required = true,
                                 default = nil)
  if valid_595545 != nil:
    section.add "nodeName", valid_595545
  var valid_595546 = path.getOrDefault("applicationId")
  valid_595546 = validateParameter(valid_595546, JString, required = true,
                                 default = nil)
  if valid_595546 != nil:
    section.add "applicationId", valid_595546
  var valid_595547 = path.getOrDefault("servicePackageName")
  valid_595547 = validateParameter(valid_595547, JString, required = true,
                                 default = nil)
  if valid_595547 != nil:
    section.add "servicePackageName", valid_595547
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595548 = query.getOrDefault("timeout")
  valid_595548 = validateParameter(valid_595548, JInt, required = false,
                                 default = newJInt(60))
  if valid_595548 != nil:
    section.add "timeout", valid_595548
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595549 = query.getOrDefault("api-version")
  valid_595549 = validateParameter(valid_595549, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595549 != nil:
    section.add "api-version", valid_595549
  var valid_595550 = query.getOrDefault("EventsHealthStateFilter")
  valid_595550 = validateParameter(valid_595550, JInt, required = false,
                                 default = newJInt(0))
  if valid_595550 != nil:
    section.add "EventsHealthStateFilter", valid_595550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595552: Call_GetDeployedServicePackageHealthUsingPolicy_595542;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  let valid = call_595552.validator(path, query, header, formData, body)
  let scheme = call_595552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595552.url(scheme.get, call_595552.host, call_595552.base,
                         call_595552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595552, url, valid)

proc call*(call_595553: Call_GetDeployedServicePackageHealthUsingPolicy_595542;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealthUsingPolicy
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595554 = newJObject()
  var query_595555 = newJObject()
  var body_595556 = newJObject()
  add(query_595555, "timeout", newJInt(timeout))
  add(query_595555, "api-version", newJString(apiVersion))
  add(path_595554, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_595556 = ApplicationHealthPolicy
  add(query_595555, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595554, "applicationId", newJString(applicationId))
  add(path_595554, "servicePackageName", newJString(servicePackageName))
  result = call_595553.call(path_595554, query_595555, nil, nil, body_595556)

var getDeployedServicePackageHealthUsingPolicy* = Call_GetDeployedServicePackageHealthUsingPolicy_595542(
    name: "getDeployedServicePackageHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealthUsingPolicy_595543,
    base: "", url: url_GetDeployedServicePackageHealthUsingPolicy_595544,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealth_595529 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServicePackageHealth_595531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealth_595530(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595532 = path.getOrDefault("nodeName")
  valid_595532 = validateParameter(valid_595532, JString, required = true,
                                 default = nil)
  if valid_595532 != nil:
    section.add "nodeName", valid_595532
  var valid_595533 = path.getOrDefault("applicationId")
  valid_595533 = validateParameter(valid_595533, JString, required = true,
                                 default = nil)
  if valid_595533 != nil:
    section.add "applicationId", valid_595533
  var valid_595534 = path.getOrDefault("servicePackageName")
  valid_595534 = validateParameter(valid_595534, JString, required = true,
                                 default = nil)
  if valid_595534 != nil:
    section.add "servicePackageName", valid_595534
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595535 = query.getOrDefault("timeout")
  valid_595535 = validateParameter(valid_595535, JInt, required = false,
                                 default = newJInt(60))
  if valid_595535 != nil:
    section.add "timeout", valid_595535
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595536 = query.getOrDefault("api-version")
  valid_595536 = validateParameter(valid_595536, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595536 != nil:
    section.add "api-version", valid_595536
  var valid_595537 = query.getOrDefault("EventsHealthStateFilter")
  valid_595537 = validateParameter(valid_595537, JInt, required = false,
                                 default = newJInt(0))
  if valid_595537 != nil:
    section.add "EventsHealthStateFilter", valid_595537
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595538: Call_GetDeployedServicePackageHealth_595529;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  let valid = call_595538.validator(path, query, header, formData, body)
  let scheme = call_595538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595538.url(scheme.get, call_595538.host, call_595538.base,
                         call_595538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595538, url, valid)

proc call*(call_595539: Call_GetDeployedServicePackageHealth_595529;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealth
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595540 = newJObject()
  var query_595541 = newJObject()
  add(query_595541, "timeout", newJInt(timeout))
  add(query_595541, "api-version", newJString(apiVersion))
  add(path_595540, "nodeName", newJString(nodeName))
  add(query_595541, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595540, "applicationId", newJString(applicationId))
  add(path_595540, "servicePackageName", newJString(servicePackageName))
  result = call_595539.call(path_595540, query_595541, nil, nil, nil)

var getDeployedServicePackageHealth* = Call_GetDeployedServicePackageHealth_595529(
    name: "getDeployedServicePackageHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealth_595530, base: "",
    url: url_GetDeployedServicePackageHealth_595531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedServicePackageHealth_595557 = ref object of OpenApiRestCall_593439
proc url_ReportDeployedServicePackageHealth_595559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedServicePackageHealth_595558(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595560 = path.getOrDefault("nodeName")
  valid_595560 = validateParameter(valid_595560, JString, required = true,
                                 default = nil)
  if valid_595560 != nil:
    section.add "nodeName", valid_595560
  var valid_595561 = path.getOrDefault("applicationId")
  valid_595561 = validateParameter(valid_595561, JString, required = true,
                                 default = nil)
  if valid_595561 != nil:
    section.add "applicationId", valid_595561
  var valid_595562 = path.getOrDefault("servicePackageName")
  valid_595562 = validateParameter(valid_595562, JString, required = true,
                                 default = nil)
  if valid_595562 != nil:
    section.add "servicePackageName", valid_595562
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595563 = query.getOrDefault("Immediate")
  valid_595563 = validateParameter(valid_595563, JBool, required = false,
                                 default = newJBool(false))
  if valid_595563 != nil:
    section.add "Immediate", valid_595563
  var valid_595564 = query.getOrDefault("timeout")
  valid_595564 = validateParameter(valid_595564, JInt, required = false,
                                 default = newJInt(60))
  if valid_595564 != nil:
    section.add "timeout", valid_595564
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595565 = query.getOrDefault("api-version")
  valid_595565 = validateParameter(valid_595565, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595565 != nil:
    section.add "api-version", valid_595565
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595567: Call_ReportDeployedServicePackageHealth_595557;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595567.validator(path, query, header, formData, body)
  let scheme = call_595567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595567.url(scheme.get, call_595567.host, call_595567.base,
                         call_595567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595567, url, valid)

proc call*(call_595568: Call_ReportDeployedServicePackageHealth_595557;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          servicePackageName: string; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportDeployedServicePackageHealth
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_595569 = newJObject()
  var query_595570 = newJObject()
  var body_595571 = newJObject()
  add(query_595570, "Immediate", newJBool(Immediate))
  add(query_595570, "timeout", newJInt(timeout))
  add(query_595570, "api-version", newJString(apiVersion))
  add(path_595569, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_595571 = HealthInformation
  add(path_595569, "applicationId", newJString(applicationId))
  add(path_595569, "servicePackageName", newJString(servicePackageName))
  result = call_595568.call(path_595569, query_595570, nil, nil, body_595571)

var reportDeployedServicePackageHealth* = Call_ReportDeployedServicePackageHealth_595557(
    name: "reportDeployedServicePackageHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth",
    validator: validate_ReportDeployedServicePackageHealth_595558, base: "",
    url: url_ReportDeployedServicePackageHealth_595559,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoList_595572 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceTypeInfoList_595574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoList_595573(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595575 = path.getOrDefault("nodeName")
  valid_595575 = validateParameter(valid_595575, JString, required = true,
                                 default = nil)
  if valid_595575 != nil:
    section.add "nodeName", valid_595575
  var valid_595576 = path.getOrDefault("applicationId")
  valid_595576 = validateParameter(valid_595576, JString, required = true,
                                 default = nil)
  if valid_595576 != nil:
    section.add "applicationId", valid_595576
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_595577 = query.getOrDefault("timeout")
  valid_595577 = validateParameter(valid_595577, JInt, required = false,
                                 default = newJInt(60))
  if valid_595577 != nil:
    section.add "timeout", valid_595577
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595578 = query.getOrDefault("api-version")
  valid_595578 = validateParameter(valid_595578, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595578 != nil:
    section.add "api-version", valid_595578
  var valid_595579 = query.getOrDefault("ServiceManifestName")
  valid_595579 = validateParameter(valid_595579, JString, required = false,
                                 default = nil)
  if valid_595579 != nil:
    section.add "ServiceManifestName", valid_595579
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595580: Call_GetDeployedServiceTypeInfoList_595572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  let valid = call_595580.validator(path, query, header, formData, body)
  let scheme = call_595580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595580.url(scheme.get, call_595580.host, call_595580.base,
                         call_595580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595580, url, valid)

proc call*(call_595581: Call_GetDeployedServiceTypeInfoList_595572;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoList
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595582 = newJObject()
  var query_595583 = newJObject()
  add(query_595583, "timeout", newJInt(timeout))
  add(query_595583, "api-version", newJString(apiVersion))
  add(path_595582, "nodeName", newJString(nodeName))
  add(query_595583, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595582, "applicationId", newJString(applicationId))
  result = call_595581.call(path_595582, query_595583, nil, nil, nil)

var getDeployedServiceTypeInfoList* = Call_GetDeployedServiceTypeInfoList_595572(
    name: "getDeployedServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes",
    validator: validate_GetDeployedServiceTypeInfoList_595573, base: "",
    url: url_GetDeployedServiceTypeInfoList_595574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoByName_595584 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceTypeInfoByName_595586(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoByName_595585(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_595587 = path.getOrDefault("serviceTypeName")
  valid_595587 = validateParameter(valid_595587, JString, required = true,
                                 default = nil)
  if valid_595587 != nil:
    section.add "serviceTypeName", valid_595587
  var valid_595588 = path.getOrDefault("nodeName")
  valid_595588 = validateParameter(valid_595588, JString, required = true,
                                 default = nil)
  if valid_595588 != nil:
    section.add "nodeName", valid_595588
  var valid_595589 = path.getOrDefault("applicationId")
  valid_595589 = validateParameter(valid_595589, JString, required = true,
                                 default = nil)
  if valid_595589 != nil:
    section.add "applicationId", valid_595589
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_595590 = query.getOrDefault("timeout")
  valid_595590 = validateParameter(valid_595590, JInt, required = false,
                                 default = newJInt(60))
  if valid_595590 != nil:
    section.add "timeout", valid_595590
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595591 = query.getOrDefault("api-version")
  valid_595591 = validateParameter(valid_595591, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595591 != nil:
    section.add "api-version", valid_595591
  var valid_595592 = query.getOrDefault("ServiceManifestName")
  valid_595592 = validateParameter(valid_595592, JString, required = false,
                                 default = nil)
  if valid_595592 != nil:
    section.add "ServiceManifestName", valid_595592
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595593: Call_GetDeployedServiceTypeInfoByName_595584;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  let valid = call_595593.validator(path, query, header, formData, body)
  let scheme = call_595593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595593.url(scheme.get, call_595593.host, call_595593.base,
                         call_595593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595593, url, valid)

proc call*(call_595594: Call_GetDeployedServiceTypeInfoByName_595584;
          serviceTypeName: string; nodeName: string; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoByName
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595595 = newJObject()
  var query_595596 = newJObject()
  add(query_595596, "timeout", newJInt(timeout))
  add(path_595595, "serviceTypeName", newJString(serviceTypeName))
  add(query_595596, "api-version", newJString(apiVersion))
  add(path_595595, "nodeName", newJString(nodeName))
  add(query_595596, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_595595, "applicationId", newJString(applicationId))
  result = call_595594.call(path_595595, query_595596, nil, nil, nil)

var getDeployedServiceTypeInfoByName* = Call_GetDeployedServiceTypeInfoByName_595584(
    name: "getDeployedServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetDeployedServiceTypeInfoByName_595585, base: "",
    url: url_GetDeployedServiceTypeInfoByName_595586,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedApplicationHealth_595597 = ref object of OpenApiRestCall_593439
proc url_ReportDeployedApplicationHealth_595599(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedApplicationHealth_595598(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595600 = path.getOrDefault("nodeName")
  valid_595600 = validateParameter(valid_595600, JString, required = true,
                                 default = nil)
  if valid_595600 != nil:
    section.add "nodeName", valid_595600
  var valid_595601 = path.getOrDefault("applicationId")
  valid_595601 = validateParameter(valid_595601, JString, required = true,
                                 default = nil)
  if valid_595601 != nil:
    section.add "applicationId", valid_595601
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595602 = query.getOrDefault("Immediate")
  valid_595602 = validateParameter(valid_595602, JBool, required = false,
                                 default = newJBool(false))
  if valid_595602 != nil:
    section.add "Immediate", valid_595602
  var valid_595603 = query.getOrDefault("timeout")
  valid_595603 = validateParameter(valid_595603, JInt, required = false,
                                 default = newJInt(60))
  if valid_595603 != nil:
    section.add "timeout", valid_595603
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595604 = query.getOrDefault("api-version")
  valid_595604 = validateParameter(valid_595604, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595604 != nil:
    section.add "api-version", valid_595604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595606: Call_ReportDeployedApplicationHealth_595597;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595606.validator(path, query, header, formData, body)
  let scheme = call_595606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595606.url(scheme.get, call_595606.host, call_595606.base,
                         call_595606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595606, url, valid)

proc call*(call_595607: Call_ReportDeployedApplicationHealth_595597;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportDeployedApplicationHealth
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_595608 = newJObject()
  var query_595609 = newJObject()
  var body_595610 = newJObject()
  add(query_595609, "Immediate", newJBool(Immediate))
  add(query_595609, "timeout", newJInt(timeout))
  add(query_595609, "api-version", newJString(apiVersion))
  add(path_595608, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_595610 = HealthInformation
  add(path_595608, "applicationId", newJString(applicationId))
  result = call_595607.call(path_595608, query_595609, nil, nil, body_595610)

var reportDeployedApplicationHealth* = Call_ReportDeployedApplicationHealth_595597(
    name: "reportDeployedApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth",
    validator: validate_ReportDeployedApplicationHealth_595598, base: "",
    url: url_ReportDeployedApplicationHealth_595599,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealthUsingPolicy_595622 = ref object of OpenApiRestCall_593439
proc url_GetNodeHealthUsingPolicy_595624(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealthUsingPolicy_595623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595625 = path.getOrDefault("nodeName")
  valid_595625 = validateParameter(valid_595625, JString, required = true,
                                 default = nil)
  if valid_595625 != nil:
    section.add "nodeName", valid_595625
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595626 = query.getOrDefault("timeout")
  valid_595626 = validateParameter(valid_595626, JInt, required = false,
                                 default = newJInt(60))
  if valid_595626 != nil:
    section.add "timeout", valid_595626
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595627 = query.getOrDefault("api-version")
  valid_595627 = validateParameter(valid_595627, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595627 != nil:
    section.add "api-version", valid_595627
  var valid_595628 = query.getOrDefault("EventsHealthStateFilter")
  valid_595628 = validateParameter(valid_595628, JInt, required = false,
                                 default = newJInt(0))
  if valid_595628 != nil:
    section.add "EventsHealthStateFilter", valid_595628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595630: Call_GetNodeHealthUsingPolicy_595622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_595630.validator(path, query, header, formData, body)
  let scheme = call_595630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595630.url(scheme.get, call_595630.host, call_595630.base,
                         call_595630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595630, url, valid)

proc call*(call_595631: Call_GetNodeHealthUsingPolicy_595622; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0; ClusterHealthPolicy: JsonNode = nil): Recallable =
  ## getNodeHealthUsingPolicy
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  var path_595632 = newJObject()
  var query_595633 = newJObject()
  var body_595634 = newJObject()
  add(query_595633, "timeout", newJInt(timeout))
  add(query_595633, "api-version", newJString(apiVersion))
  add(path_595632, "nodeName", newJString(nodeName))
  add(query_595633, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  if ClusterHealthPolicy != nil:
    body_595634 = ClusterHealthPolicy
  result = call_595631.call(path_595632, query_595633, nil, nil, body_595634)

var getNodeHealthUsingPolicy* = Call_GetNodeHealthUsingPolicy_595622(
    name: "getNodeHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetHealth",
    validator: validate_GetNodeHealthUsingPolicy_595623, base: "",
    url: url_GetNodeHealthUsingPolicy_595624, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealth_595611 = ref object of OpenApiRestCall_593439
proc url_GetNodeHealth_595613(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealth_595612(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595614 = path.getOrDefault("nodeName")
  valid_595614 = validateParameter(valid_595614, JString, required = true,
                                 default = nil)
  if valid_595614 != nil:
    section.add "nodeName", valid_595614
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595615 = query.getOrDefault("timeout")
  valid_595615 = validateParameter(valid_595615, JInt, required = false,
                                 default = newJInt(60))
  if valid_595615 != nil:
    section.add "timeout", valid_595615
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595616 = query.getOrDefault("api-version")
  valid_595616 = validateParameter(valid_595616, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595616 != nil:
    section.add "api-version", valid_595616
  var valid_595617 = query.getOrDefault("EventsHealthStateFilter")
  valid_595617 = validateParameter(valid_595617, JInt, required = false,
                                 default = newJInt(0))
  if valid_595617 != nil:
    section.add "EventsHealthStateFilter", valid_595617
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595618: Call_GetNodeHealth_595611; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_595618.validator(path, query, header, formData, body)
  let scheme = call_595618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595618.url(scheme.get, call_595618.host, call_595618.base,
                         call_595618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595618, url, valid)

proc call*(call_595619: Call_GetNodeHealth_595611; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getNodeHealth
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_595620 = newJObject()
  var query_595621 = newJObject()
  add(query_595621, "timeout", newJInt(timeout))
  add(query_595621, "api-version", newJString(apiVersion))
  add(path_595620, "nodeName", newJString(nodeName))
  add(query_595621, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_595619.call(path_595620, query_595621, nil, nil, nil)

var getNodeHealth* = Call_GetNodeHealth_595611(name: "getNodeHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetHealth", validator: validate_GetNodeHealth_595612,
    base: "", url: url_GetNodeHealth_595613, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeLoadInfo_595635 = ref object of OpenApiRestCall_593439
proc url_GetNodeLoadInfo_595637(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeLoadInfo_595636(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595638 = path.getOrDefault("nodeName")
  valid_595638 = validateParameter(valid_595638, JString, required = true,
                                 default = nil)
  if valid_595638 != nil:
    section.add "nodeName", valid_595638
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595639 = query.getOrDefault("timeout")
  valid_595639 = validateParameter(valid_595639, JInt, required = false,
                                 default = newJInt(60))
  if valid_595639 != nil:
    section.add "timeout", valid_595639
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595640 = query.getOrDefault("api-version")
  valid_595640 = validateParameter(valid_595640, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595640 != nil:
    section.add "api-version", valid_595640
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595641: Call_GetNodeLoadInfo_595635; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  let valid = call_595641.validator(path, query, header, formData, body)
  let scheme = call_595641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595641.url(scheme.get, call_595641.host, call_595641.base,
                         call_595641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595641, url, valid)

proc call*(call_595642: Call_GetNodeLoadInfo_595635; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeLoadInfo
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595643 = newJObject()
  var query_595644 = newJObject()
  add(query_595644, "timeout", newJInt(timeout))
  add(query_595644, "api-version", newJString(apiVersion))
  add(path_595643, "nodeName", newJString(nodeName))
  result = call_595642.call(path_595643, query_595644, nil, nil, nil)

var getNodeLoadInfo* = Call_GetNodeLoadInfo_595635(name: "getNodeLoadInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetLoadInformation",
    validator: validate_GetNodeLoadInfo_595636, base: "", url: url_GetNodeLoadInfo_595637,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595645 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceReplicaDetailInfoByPartitionId_595647(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfoByPartitionId_595646(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595648 = path.getOrDefault("nodeName")
  valid_595648 = validateParameter(valid_595648, JString, required = true,
                                 default = nil)
  if valid_595648 != nil:
    section.add "nodeName", valid_595648
  var valid_595649 = path.getOrDefault("partitionId")
  valid_595649 = validateParameter(valid_595649, JString, required = true,
                                 default = nil)
  if valid_595649 != nil:
    section.add "partitionId", valid_595649
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595650 = query.getOrDefault("timeout")
  valid_595650 = validateParameter(valid_595650, JInt, required = false,
                                 default = newJInt(60))
  if valid_595650 != nil:
    section.add "timeout", valid_595650
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595651 = query.getOrDefault("api-version")
  valid_595651 = validateParameter(valid_595651, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595651 != nil:
    section.add "api-version", valid_595651
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595652: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595645;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_595652.validator(path, query, header, formData, body)
  let scheme = call_595652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595652.url(scheme.get, call_595652.host, call_595652.base,
                         call_595652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595652, url, valid)

proc call*(call_595653: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595645;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfoByPartitionId
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595654 = newJObject()
  var query_595655 = newJObject()
  add(query_595655, "timeout", newJInt(timeout))
  add(query_595655, "api-version", newJString(apiVersion))
  add(path_595654, "nodeName", newJString(nodeName))
  add(path_595654, "partitionId", newJString(partitionId))
  result = call_595653.call(path_595654, query_595655, nil, nil, nil)

var getDeployedServiceReplicaDetailInfoByPartitionId* = Call_GetDeployedServiceReplicaDetailInfoByPartitionId_595645(
    name: "getDeployedServiceReplicaDetailInfoByPartitionId",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaDetailInfoByPartitionId_595646,
    base: "", url: url_GetDeployedServiceReplicaDetailInfoByPartitionId_595647,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveReplica_595656 = ref object of OpenApiRestCall_593439
proc url_RemoveReplica_595658(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveReplica_595657(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595659 = path.getOrDefault("replicaId")
  valid_595659 = validateParameter(valid_595659, JString, required = true,
                                 default = nil)
  if valid_595659 != nil:
    section.add "replicaId", valid_595659
  var valid_595660 = path.getOrDefault("nodeName")
  valid_595660 = validateParameter(valid_595660, JString, required = true,
                                 default = nil)
  if valid_595660 != nil:
    section.add "nodeName", valid_595660
  var valid_595661 = path.getOrDefault("partitionId")
  valid_595661 = validateParameter(valid_595661, JString, required = true,
                                 default = nil)
  if valid_595661 != nil:
    section.add "partitionId", valid_595661
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_595662 = query.getOrDefault("timeout")
  valid_595662 = validateParameter(valid_595662, JInt, required = false,
                                 default = newJInt(60))
  if valid_595662 != nil:
    section.add "timeout", valid_595662
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595663 = query.getOrDefault("api-version")
  valid_595663 = validateParameter(valid_595663, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595663 != nil:
    section.add "api-version", valid_595663
  var valid_595664 = query.getOrDefault("ForceRemove")
  valid_595664 = validateParameter(valid_595664, JBool, required = false, default = nil)
  if valid_595664 != nil:
    section.add "ForceRemove", valid_595664
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595665: Call_RemoveReplica_595656; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  let valid = call_595665.validator(path, query, header, formData, body)
  let scheme = call_595665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595665.url(scheme.get, call_595665.host, call_595665.base,
                         call_595665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595665, url, valid)

proc call*(call_595666: Call_RemoveReplica_595656; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## removeReplica
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595667 = newJObject()
  var query_595668 = newJObject()
  add(path_595667, "replicaId", newJString(replicaId))
  add(query_595668, "timeout", newJInt(timeout))
  add(query_595668, "api-version", newJString(apiVersion))
  add(query_595668, "ForceRemove", newJBool(ForceRemove))
  add(path_595667, "nodeName", newJString(nodeName))
  add(path_595667, "partitionId", newJString(partitionId))
  result = call_595666.call(path_595667, query_595668, nil, nil, nil)

var removeReplica* = Call_RemoveReplica_595656(name: "removeReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete",
    validator: validate_RemoveReplica_595657, base: "", url: url_RemoveReplica_595658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfo_595669 = ref object of OpenApiRestCall_593439
proc url_GetDeployedServiceReplicaDetailInfo_595671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetDetail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfo_595670(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595672 = path.getOrDefault("replicaId")
  valid_595672 = validateParameter(valid_595672, JString, required = true,
                                 default = nil)
  if valid_595672 != nil:
    section.add "replicaId", valid_595672
  var valid_595673 = path.getOrDefault("nodeName")
  valid_595673 = validateParameter(valid_595673, JString, required = true,
                                 default = nil)
  if valid_595673 != nil:
    section.add "nodeName", valid_595673
  var valid_595674 = path.getOrDefault("partitionId")
  valid_595674 = validateParameter(valid_595674, JString, required = true,
                                 default = nil)
  if valid_595674 != nil:
    section.add "partitionId", valid_595674
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595675 = query.getOrDefault("timeout")
  valid_595675 = validateParameter(valid_595675, JInt, required = false,
                                 default = newJInt(60))
  if valid_595675 != nil:
    section.add "timeout", valid_595675
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595676 = query.getOrDefault("api-version")
  valid_595676 = validateParameter(valid_595676, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595676 != nil:
    section.add "api-version", valid_595676
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595677: Call_GetDeployedServiceReplicaDetailInfo_595669;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_595677.validator(path, query, header, formData, body)
  let scheme = call_595677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595677.url(scheme.get, call_595677.host, call_595677.base,
                         call_595677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595677, url, valid)

proc call*(call_595678: Call_GetDeployedServiceReplicaDetailInfo_595669;
          replicaId: string; nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfo
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595679 = newJObject()
  var query_595680 = newJObject()
  add(path_595679, "replicaId", newJString(replicaId))
  add(query_595680, "timeout", newJInt(timeout))
  add(query_595680, "api-version", newJString(apiVersion))
  add(path_595679, "nodeName", newJString(nodeName))
  add(path_595679, "partitionId", newJString(partitionId))
  result = call_595678.call(path_595679, query_595680, nil, nil, nil)

var getDeployedServiceReplicaDetailInfo* = Call_GetDeployedServiceReplicaDetailInfo_595669(
    name: "getDeployedServiceReplicaDetailInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail",
    validator: validate_GetDeployedServiceReplicaDetailInfo_595670, base: "",
    url: url_GetDeployedServiceReplicaDetailInfo_595671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartReplica_595681 = ref object of OpenApiRestCall_593439
proc url_RestartReplica_595683(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartReplica_595682(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595684 = path.getOrDefault("replicaId")
  valid_595684 = validateParameter(valid_595684, JString, required = true,
                                 default = nil)
  if valid_595684 != nil:
    section.add "replicaId", valid_595684
  var valid_595685 = path.getOrDefault("nodeName")
  valid_595685 = validateParameter(valid_595685, JString, required = true,
                                 default = nil)
  if valid_595685 != nil:
    section.add "nodeName", valid_595685
  var valid_595686 = path.getOrDefault("partitionId")
  valid_595686 = validateParameter(valid_595686, JString, required = true,
                                 default = nil)
  if valid_595686 != nil:
    section.add "partitionId", valid_595686
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595687 = query.getOrDefault("timeout")
  valid_595687 = validateParameter(valid_595687, JInt, required = false,
                                 default = newJInt(60))
  if valid_595687 != nil:
    section.add "timeout", valid_595687
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595688 = query.getOrDefault("api-version")
  valid_595688 = validateParameter(valid_595688, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595688 != nil:
    section.add "api-version", valid_595688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595689: Call_RestartReplica_595681; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  let valid = call_595689.validator(path, query, header, formData, body)
  let scheme = call_595689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595689.url(scheme.get, call_595689.host, call_595689.base,
                         call_595689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595689, url, valid)

proc call*(call_595690: Call_RestartReplica_595681; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartReplica
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595691 = newJObject()
  var query_595692 = newJObject()
  add(path_595691, "replicaId", newJString(replicaId))
  add(query_595692, "timeout", newJInt(timeout))
  add(query_595692, "api-version", newJString(apiVersion))
  add(path_595691, "nodeName", newJString(nodeName))
  add(path_595691, "partitionId", newJString(partitionId))
  result = call_595690.call(path_595691, query_595692, nil, nil, nil)

var restartReplica* = Call_RestartReplica_595681(name: "restartReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart",
    validator: validate_RestartReplica_595682, base: "", url: url_RestartReplica_595683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveNodeState_595693 = ref object of OpenApiRestCall_593439
proc url_RemoveNodeState_595695(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/RemoveNodeState")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveNodeState_595694(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595696 = path.getOrDefault("nodeName")
  valid_595696 = validateParameter(valid_595696, JString, required = true,
                                 default = nil)
  if valid_595696 != nil:
    section.add "nodeName", valid_595696
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595697 = query.getOrDefault("timeout")
  valid_595697 = validateParameter(valid_595697, JInt, required = false,
                                 default = newJInt(60))
  if valid_595697 != nil:
    section.add "timeout", valid_595697
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595698 = query.getOrDefault("api-version")
  valid_595698 = validateParameter(valid_595698, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595698 != nil:
    section.add "api-version", valid_595698
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595699: Call_RemoveNodeState_595693; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ## 
  let valid = call_595699.validator(path, query, header, formData, body)
  let scheme = call_595699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595699.url(scheme.get, call_595699.host, call_595699.base,
                         call_595699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595699, url, valid)

proc call*(call_595700: Call_RemoveNodeState_595693; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## removeNodeState
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_595701 = newJObject()
  var query_595702 = newJObject()
  add(query_595702, "timeout", newJInt(timeout))
  add(query_595702, "api-version", newJString(apiVersion))
  add(path_595701, "nodeName", newJString(nodeName))
  result = call_595700.call(path_595701, query_595702, nil, nil, nil)

var removeNodeState* = Call_RemoveNodeState_595693(name: "removeNodeState",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/RemoveNodeState",
    validator: validate_RemoveNodeState_595694, base: "", url: url_RemoveNodeState_595695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportNodeHealth_595703 = ref object of OpenApiRestCall_593439
proc url_ReportNodeHealth_595705(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportNodeHealth_595704(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595706 = path.getOrDefault("nodeName")
  valid_595706 = validateParameter(valid_595706, JString, required = true,
                                 default = nil)
  if valid_595706 != nil:
    section.add "nodeName", valid_595706
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595707 = query.getOrDefault("Immediate")
  valid_595707 = validateParameter(valid_595707, JBool, required = false,
                                 default = newJBool(false))
  if valid_595707 != nil:
    section.add "Immediate", valid_595707
  var valid_595708 = query.getOrDefault("timeout")
  valid_595708 = validateParameter(valid_595708, JInt, required = false,
                                 default = newJInt(60))
  if valid_595708 != nil:
    section.add "timeout", valid_595708
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595709 = query.getOrDefault("api-version")
  valid_595709 = validateParameter(valid_595709, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595709 != nil:
    section.add "api-version", valid_595709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595711: Call_ReportNodeHealth_595703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595711.validator(path, query, header, formData, body)
  let scheme = call_595711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595711.url(scheme.get, call_595711.host, call_595711.base,
                         call_595711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595711, url, valid)

proc call*(call_595712: Call_ReportNodeHealth_595703; nodeName: string;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportNodeHealth
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var path_595713 = newJObject()
  var query_595714 = newJObject()
  var body_595715 = newJObject()
  add(query_595714, "Immediate", newJBool(Immediate))
  add(query_595714, "timeout", newJInt(timeout))
  add(query_595714, "api-version", newJString(apiVersion))
  add(path_595713, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_595715 = HealthInformation
  result = call_595712.call(path_595713, query_595714, nil, nil, body_595715)

var reportNodeHealth* = Call_ReportNodeHealth_595703(name: "reportNodeHealth",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/ReportHealth",
    validator: validate_ReportNodeHealth_595704, base: "",
    url: url_ReportNodeHealth_595705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartNode_595716 = ref object of OpenApiRestCall_593439
proc url_RestartNode_595718(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartNode_595717(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_595719 = path.getOrDefault("nodeName")
  valid_595719 = validateParameter(valid_595719, JString, required = true,
                                 default = nil)
  if valid_595719 != nil:
    section.add "nodeName", valid_595719
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595720 = query.getOrDefault("timeout")
  valid_595720 = validateParameter(valid_595720, JInt, required = false,
                                 default = newJInt(60))
  if valid_595720 != nil:
    section.add "timeout", valid_595720
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595721 = query.getOrDefault("api-version")
  valid_595721 = validateParameter(valid_595721, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595721 != nil:
    section.add "api-version", valid_595721
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595723: Call_RestartNode_595716; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  let valid = call_595723.validator(path, query, header, formData, body)
  let scheme = call_595723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595723.url(scheme.get, call_595723.host, call_595723.base,
                         call_595723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595723, url, valid)

proc call*(call_595724: Call_RestartNode_595716; nodeName: string;
          RestartNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartNode
  ## Restarts a Service Fabric cluster node that is already started.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  var path_595725 = newJObject()
  var query_595726 = newJObject()
  var body_595727 = newJObject()
  add(query_595726, "timeout", newJInt(timeout))
  add(query_595726, "api-version", newJString(apiVersion))
  add(path_595725, "nodeName", newJString(nodeName))
  if RestartNodeDescription != nil:
    body_595727 = RestartNodeDescription
  result = call_595724.call(path_595725, query_595726, nil, nil, body_595727)

var restartNode* = Call_RestartNode_595716(name: "restartNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}/$/Restart",
                                        validator: validate_RestartNode_595717,
                                        base: "", url: url_RestartNode_595718,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfo_595728 = ref object of OpenApiRestCall_593439
proc url_GetPartitionInfo_595730(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfo_595729(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595731 = path.getOrDefault("partitionId")
  valid_595731 = validateParameter(valid_595731, JString, required = true,
                                 default = nil)
  if valid_595731 != nil:
    section.add "partitionId", valid_595731
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595732 = query.getOrDefault("timeout")
  valid_595732 = validateParameter(valid_595732, JInt, required = false,
                                 default = newJInt(60))
  if valid_595732 != nil:
    section.add "timeout", valid_595732
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595733 = query.getOrDefault("api-version")
  valid_595733 = validateParameter(valid_595733, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595733 != nil:
    section.add "api-version", valid_595733
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595734: Call_GetPartitionInfo_595728; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_595734.validator(path, query, header, formData, body)
  let scheme = call_595734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595734.url(scheme.get, call_595734.host, call_595734.base,
                         call_595734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595734, url, valid)

proc call*(call_595735: Call_GetPartitionInfo_595728; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionInfo
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595736 = newJObject()
  var query_595737 = newJObject()
  add(query_595737, "timeout", newJInt(timeout))
  add(query_595737, "api-version", newJString(apiVersion))
  add(path_595736, "partitionId", newJString(partitionId))
  result = call_595735.call(path_595736, query_595737, nil, nil, nil)

var getPartitionInfo* = Call_GetPartitionInfo_595728(name: "getPartitionInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}", validator: validate_GetPartitionInfo_595729,
    base: "", url: url_GetPartitionInfo_595730, schemes: {Scheme.Https, Scheme.Http})
type
  Call_BackupPartition_595738 = ref object of OpenApiRestCall_593439
proc url_BackupPartition_595740(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_BackupPartition_595739(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595741 = path.getOrDefault("partitionId")
  valid_595741 = validateParameter(valid_595741, JString, required = true,
                                 default = nil)
  if valid_595741 != nil:
    section.add "partitionId", valid_595741
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: JInt
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  section = newJObject()
  var valid_595742 = query.getOrDefault("timeout")
  valid_595742 = validateParameter(valid_595742, JInt, required = false,
                                 default = newJInt(60))
  if valid_595742 != nil:
    section.add "timeout", valid_595742
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595743 = query.getOrDefault("api-version")
  valid_595743 = validateParameter(valid_595743, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595743 != nil:
    section.add "api-version", valid_595743
  var valid_595744 = query.getOrDefault("BackupTimeout")
  valid_595744 = validateParameter(valid_595744, JInt, required = false,
                                 default = newJInt(10))
  if valid_595744 != nil:
    section.add "BackupTimeout", valid_595744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595746: Call_BackupPartition_595738; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  let valid = call_595746.validator(path, query, header, formData, body)
  let scheme = call_595746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595746.url(scheme.get, call_595746.host, call_595746.base,
                         call_595746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595746, url, valid)

proc call*(call_595747: Call_BackupPartition_595738; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; BackupTimeout: int = 10;
          BackupPartitionDescription: JsonNode = nil): Recallable =
  ## backupPartition
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: int
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  var path_595748 = newJObject()
  var query_595749 = newJObject()
  var body_595750 = newJObject()
  add(query_595749, "timeout", newJInt(timeout))
  add(query_595749, "api-version", newJString(apiVersion))
  add(query_595749, "BackupTimeout", newJInt(BackupTimeout))
  add(path_595748, "partitionId", newJString(partitionId))
  if BackupPartitionDescription != nil:
    body_595750 = BackupPartitionDescription
  result = call_595747.call(path_595748, query_595749, nil, nil, body_595750)

var backupPartition* = Call_BackupPartition_595738(name: "backupPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Backup",
    validator: validate_BackupPartition_595739, base: "", url: url_BackupPartition_595740,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisablePartitionBackup_595751 = ref object of OpenApiRestCall_593439
proc url_DisablePartitionBackup_595753(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisablePartitionBackup_595752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595754 = path.getOrDefault("partitionId")
  valid_595754 = validateParameter(valid_595754, JString, required = true,
                                 default = nil)
  if valid_595754 != nil:
    section.add "partitionId", valid_595754
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595755 = query.getOrDefault("timeout")
  valid_595755 = validateParameter(valid_595755, JInt, required = false,
                                 default = newJInt(60))
  if valid_595755 != nil:
    section.add "timeout", valid_595755
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595756 = query.getOrDefault("api-version")
  valid_595756 = validateParameter(valid_595756, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595756 != nil:
    section.add "api-version", valid_595756
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595758: Call_DisablePartitionBackup_595751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  let valid = call_595758.validator(path, query, header, formData, body)
  let scheme = call_595758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595758.url(scheme.get, call_595758.host, call_595758.base,
                         call_595758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595758, url, valid)

proc call*(call_595759: Call_DisablePartitionBackup_595751; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disablePartitionBackup
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595760 = newJObject()
  var query_595761 = newJObject()
  var body_595762 = newJObject()
  add(query_595761, "timeout", newJInt(timeout))
  add(query_595761, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_595762 = DisableBackupDescription
  add(path_595760, "partitionId", newJString(partitionId))
  result = call_595759.call(path_595760, query_595761, nil, nil, body_595762)

var disablePartitionBackup* = Call_DisablePartitionBackup_595751(
    name: "disablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/DisableBackup",
    validator: validate_DisablePartitionBackup_595752, base: "",
    url: url_DisablePartitionBackup_595753, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnablePartitionBackup_595763 = ref object of OpenApiRestCall_593439
proc url_EnablePartitionBackup_595765(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnablePartitionBackup_595764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595766 = path.getOrDefault("partitionId")
  valid_595766 = validateParameter(valid_595766, JString, required = true,
                                 default = nil)
  if valid_595766 != nil:
    section.add "partitionId", valid_595766
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595767 = query.getOrDefault("timeout")
  valid_595767 = validateParameter(valid_595767, JInt, required = false,
                                 default = newJInt(60))
  if valid_595767 != nil:
    section.add "timeout", valid_595767
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595768 = query.getOrDefault("api-version")
  valid_595768 = validateParameter(valid_595768, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595768 != nil:
    section.add "api-version", valid_595768
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595770: Call_EnablePartitionBackup_595763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_595770.validator(path, query, header, formData, body)
  let scheme = call_595770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595770.url(scheme.get, call_595770.host, call_595770.base,
                         call_595770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595770, url, valid)

proc call*(call_595771: Call_EnablePartitionBackup_595763;
          EnableBackupDescription: JsonNode; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enablePartitionBackup
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595772 = newJObject()
  var query_595773 = newJObject()
  var body_595774 = newJObject()
  add(query_595773, "timeout", newJInt(timeout))
  add(query_595773, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_595774 = EnableBackupDescription
  add(path_595772, "partitionId", newJString(partitionId))
  result = call_595771.call(path_595772, query_595773, nil, nil, body_595774)

var enablePartitionBackup* = Call_EnablePartitionBackup_595763(
    name: "enablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/EnableBackup",
    validator: validate_EnablePartitionBackup_595764, base: "",
    url: url_EnablePartitionBackup_595765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupConfigurationInfo_595775 = ref object of OpenApiRestCall_593439
proc url_GetPartitionBackupConfigurationInfo_595777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupConfigurationInfo_595776(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595778 = path.getOrDefault("partitionId")
  valid_595778 = validateParameter(valid_595778, JString, required = true,
                                 default = nil)
  if valid_595778 != nil:
    section.add "partitionId", valid_595778
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595779 = query.getOrDefault("timeout")
  valid_595779 = validateParameter(valid_595779, JInt, required = false,
                                 default = newJInt(60))
  if valid_595779 != nil:
    section.add "timeout", valid_595779
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595780 = query.getOrDefault("api-version")
  valid_595780 = validateParameter(valid_595780, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595780 != nil:
    section.add "api-version", valid_595780
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595781: Call_GetPartitionBackupConfigurationInfo_595775;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  let valid = call_595781.validator(path, query, header, formData, body)
  let scheme = call_595781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595781.url(scheme.get, call_595781.host, call_595781.base,
                         call_595781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595781, url, valid)

proc call*(call_595782: Call_GetPartitionBackupConfigurationInfo_595775;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupConfigurationInfo
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595783 = newJObject()
  var query_595784 = newJObject()
  add(query_595784, "timeout", newJInt(timeout))
  add(query_595784, "api-version", newJString(apiVersion))
  add(path_595783, "partitionId", newJString(partitionId))
  result = call_595782.call(path_595783, query_595784, nil, nil, nil)

var getPartitionBackupConfigurationInfo* = Call_GetPartitionBackupConfigurationInfo_595775(
    name: "getPartitionBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupConfigurationInfo",
    validator: validate_GetPartitionBackupConfigurationInfo_595776, base: "",
    url: url_GetPartitionBackupConfigurationInfo_595777,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupProgress_595785 = ref object of OpenApiRestCall_593439
proc url_GetPartitionBackupProgress_595787(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupProgress_595786(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595788 = path.getOrDefault("partitionId")
  valid_595788 = validateParameter(valid_595788, JString, required = true,
                                 default = nil)
  if valid_595788 != nil:
    section.add "partitionId", valid_595788
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595789 = query.getOrDefault("timeout")
  valid_595789 = validateParameter(valid_595789, JInt, required = false,
                                 default = newJInt(60))
  if valid_595789 != nil:
    section.add "timeout", valid_595789
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595790 = query.getOrDefault("api-version")
  valid_595790 = validateParameter(valid_595790, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595790 != nil:
    section.add "api-version", valid_595790
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595791: Call_GetPartitionBackupProgress_595785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  let valid = call_595791.validator(path, query, header, formData, body)
  let scheme = call_595791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595791.url(scheme.get, call_595791.host, call_595791.base,
                         call_595791.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595791, url, valid)

proc call*(call_595792: Call_GetPartitionBackupProgress_595785;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupProgress
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595793 = newJObject()
  var query_595794 = newJObject()
  add(query_595794, "timeout", newJInt(timeout))
  add(query_595794, "api-version", newJString(apiVersion))
  add(path_595793, "partitionId", newJString(partitionId))
  result = call_595792.call(path_595793, query_595794, nil, nil, nil)

var getPartitionBackupProgress* = Call_GetPartitionBackupProgress_595785(
    name: "getPartitionBackupProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupProgress",
    validator: validate_GetPartitionBackupProgress_595786, base: "",
    url: url_GetPartitionBackupProgress_595787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupList_595795 = ref object of OpenApiRestCall_593439
proc url_GetPartitionBackupList_595797(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupList_595796(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595798 = path.getOrDefault("partitionId")
  valid_595798 = validateParameter(valid_595798, JString, required = true,
                                 default = nil)
  if valid_595798 != nil:
    section.add "partitionId", valid_595798
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_595799 = query.getOrDefault("timeout")
  valid_595799 = validateParameter(valid_595799, JInt, required = false,
                                 default = newJInt(60))
  if valid_595799 != nil:
    section.add "timeout", valid_595799
  var valid_595800 = query.getOrDefault("Latest")
  valid_595800 = validateParameter(valid_595800, JBool, required = false,
                                 default = newJBool(false))
  if valid_595800 != nil:
    section.add "Latest", valid_595800
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595801 = query.getOrDefault("api-version")
  valid_595801 = validateParameter(valid_595801, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595801 != nil:
    section.add "api-version", valid_595801
  var valid_595802 = query.getOrDefault("StartDateTimeFilter")
  valid_595802 = validateParameter(valid_595802, JString, required = false,
                                 default = nil)
  if valid_595802 != nil:
    section.add "StartDateTimeFilter", valid_595802
  var valid_595803 = query.getOrDefault("EndDateTimeFilter")
  valid_595803 = validateParameter(valid_595803, JString, required = false,
                                 default = nil)
  if valid_595803 != nil:
    section.add "EndDateTimeFilter", valid_595803
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595804: Call_GetPartitionBackupList_595795; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  let valid = call_595804.validator(path, query, header, formData, body)
  let scheme = call_595804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595804.url(scheme.get, call_595804.host, call_595804.base,
                         call_595804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595804, url, valid)

proc call*(call_595805: Call_GetPartitionBackupList_595795; partitionId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = ""): Recallable =
  ## getPartitionBackupList
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595806 = newJObject()
  var query_595807 = newJObject()
  add(query_595807, "timeout", newJInt(timeout))
  add(query_595807, "Latest", newJBool(Latest))
  add(query_595807, "api-version", newJString(apiVersion))
  add(query_595807, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_595807, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_595806, "partitionId", newJString(partitionId))
  result = call_595805.call(path_595806, query_595807, nil, nil, nil)

var getPartitionBackupList* = Call_GetPartitionBackupList_595795(
    name: "getPartitionBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetBackups",
    validator: validate_GetPartitionBackupList_595796, base: "",
    url: url_GetPartitionBackupList_595797, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealthUsingPolicy_595821 = ref object of OpenApiRestCall_593439
proc url_GetPartitionHealthUsingPolicy_595823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealthUsingPolicy_595822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595824 = path.getOrDefault("partitionId")
  valid_595824 = validateParameter(valid_595824, JString, required = true,
                                 default = nil)
  if valid_595824 != nil:
    section.add "partitionId", valid_595824
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595825 = query.getOrDefault("timeout")
  valid_595825 = validateParameter(valid_595825, JInt, required = false,
                                 default = newJInt(60))
  if valid_595825 != nil:
    section.add "timeout", valid_595825
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595826 = query.getOrDefault("api-version")
  valid_595826 = validateParameter(valid_595826, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595826 != nil:
    section.add "api-version", valid_595826
  var valid_595827 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_595827 = validateParameter(valid_595827, JInt, required = false,
                                 default = newJInt(0))
  if valid_595827 != nil:
    section.add "ReplicasHealthStateFilter", valid_595827
  var valid_595828 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595828 = validateParameter(valid_595828, JBool, required = false,
                                 default = newJBool(false))
  if valid_595828 != nil:
    section.add "ExcludeHealthStatistics", valid_595828
  var valid_595829 = query.getOrDefault("EventsHealthStateFilter")
  valid_595829 = validateParameter(valid_595829, JInt, required = false,
                                 default = newJInt(0))
  if valid_595829 != nil:
    section.add "EventsHealthStateFilter", valid_595829
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595831: Call_GetPartitionHealthUsingPolicy_595821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_595831.validator(path, query, header, formData, body)
  let scheme = call_595831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595831.url(scheme.get, call_595831.host, call_595831.base,
                         call_595831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595831, url, valid)

proc call*(call_595832: Call_GetPartitionHealthUsingPolicy_595821;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0;
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealthUsingPolicy
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595833 = newJObject()
  var query_595834 = newJObject()
  var body_595835 = newJObject()
  add(query_595834, "timeout", newJInt(timeout))
  add(query_595834, "api-version", newJString(apiVersion))
  add(query_595834, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  if ApplicationHealthPolicy != nil:
    body_595835 = ApplicationHealthPolicy
  add(query_595834, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595834, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595833, "partitionId", newJString(partitionId))
  result = call_595832.call(path_595833, query_595834, nil, nil, body_595835)

var getPartitionHealthUsingPolicy* = Call_GetPartitionHealthUsingPolicy_595821(
    name: "getPartitionHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealthUsingPolicy_595822, base: "",
    url: url_GetPartitionHealthUsingPolicy_595823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealth_595808 = ref object of OpenApiRestCall_593439
proc url_GetPartitionHealth_595810(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealth_595809(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595811 = path.getOrDefault("partitionId")
  valid_595811 = validateParameter(valid_595811, JString, required = true,
                                 default = nil)
  if valid_595811 != nil:
    section.add "partitionId", valid_595811
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595812 = query.getOrDefault("timeout")
  valid_595812 = validateParameter(valid_595812, JInt, required = false,
                                 default = newJInt(60))
  if valid_595812 != nil:
    section.add "timeout", valid_595812
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595813 = query.getOrDefault("api-version")
  valid_595813 = validateParameter(valid_595813, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595813 != nil:
    section.add "api-version", valid_595813
  var valid_595814 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_595814 = validateParameter(valid_595814, JInt, required = false,
                                 default = newJInt(0))
  if valid_595814 != nil:
    section.add "ReplicasHealthStateFilter", valid_595814
  var valid_595815 = query.getOrDefault("ExcludeHealthStatistics")
  valid_595815 = validateParameter(valid_595815, JBool, required = false,
                                 default = newJBool(false))
  if valid_595815 != nil:
    section.add "ExcludeHealthStatistics", valid_595815
  var valid_595816 = query.getOrDefault("EventsHealthStateFilter")
  valid_595816 = validateParameter(valid_595816, JInt, required = false,
                                 default = newJInt(0))
  if valid_595816 != nil:
    section.add "EventsHealthStateFilter", valid_595816
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595817: Call_GetPartitionHealth_595808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_595817.validator(path, query, header, formData, body)
  let scheme = call_595817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595817.url(scheme.get, call_595817.host, call_595817.base,
                         call_595817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595817, url, valid)

proc call*(call_595818: Call_GetPartitionHealth_595808; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0; ExcludeHealthStatistics: bool = false;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595819 = newJObject()
  var query_595820 = newJObject()
  add(query_595820, "timeout", newJInt(timeout))
  add(query_595820, "api-version", newJString(apiVersion))
  add(query_595820, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  add(query_595820, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_595820, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595819, "partitionId", newJString(partitionId))
  result = call_595818.call(path_595819, query_595820, nil, nil, nil)

var getPartitionHealth* = Call_GetPartitionHealth_595808(
    name: "getPartitionHealth", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealth_595809, base: "",
    url: url_GetPartitionHealth_595810, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionLoadInformation_595836 = ref object of OpenApiRestCall_593439
proc url_GetPartitionLoadInformation_595838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionLoadInformation_595837(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595839 = path.getOrDefault("partitionId")
  valid_595839 = validateParameter(valid_595839, JString, required = true,
                                 default = nil)
  if valid_595839 != nil:
    section.add "partitionId", valid_595839
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595840 = query.getOrDefault("timeout")
  valid_595840 = validateParameter(valid_595840, JInt, required = false,
                                 default = newJInt(60))
  if valid_595840 != nil:
    section.add "timeout", valid_595840
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595841 = query.getOrDefault("api-version")
  valid_595841 = validateParameter(valid_595841, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595841 != nil:
    section.add "api-version", valid_595841
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595842: Call_GetPartitionLoadInformation_595836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  let valid = call_595842.validator(path, query, header, formData, body)
  let scheme = call_595842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595842.url(scheme.get, call_595842.host, call_595842.base,
                         call_595842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595842, url, valid)

proc call*(call_595843: Call_GetPartitionLoadInformation_595836;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionLoadInformation
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595844 = newJObject()
  var query_595845 = newJObject()
  add(query_595845, "timeout", newJInt(timeout))
  add(query_595845, "api-version", newJString(apiVersion))
  add(path_595844, "partitionId", newJString(partitionId))
  result = call_595843.call(path_595844, query_595845, nil, nil, nil)

var getPartitionLoadInformation* = Call_GetPartitionLoadInformation_595836(
    name: "getPartitionLoadInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetLoadInformation",
    validator: validate_GetPartitionLoadInformation_595837, base: "",
    url: url_GetPartitionLoadInformation_595838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfoList_595846 = ref object of OpenApiRestCall_593439
proc url_GetReplicaInfoList_595848(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfoList_595847(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595849 = path.getOrDefault("partitionId")
  valid_595849 = validateParameter(valid_595849, JString, required = true,
                                 default = nil)
  if valid_595849 != nil:
    section.add "partitionId", valid_595849
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_595850 = query.getOrDefault("timeout")
  valid_595850 = validateParameter(valid_595850, JInt, required = false,
                                 default = newJInt(60))
  if valid_595850 != nil:
    section.add "timeout", valid_595850
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595851 = query.getOrDefault("api-version")
  valid_595851 = validateParameter(valid_595851, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595851 != nil:
    section.add "api-version", valid_595851
  var valid_595852 = query.getOrDefault("ContinuationToken")
  valid_595852 = validateParameter(valid_595852, JString, required = false,
                                 default = nil)
  if valid_595852 != nil:
    section.add "ContinuationToken", valid_595852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595853: Call_GetReplicaInfoList_595846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_595853.validator(path, query, header, formData, body)
  let scheme = call_595853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595853.url(scheme.get, call_595853.host, call_595853.base,
                         call_595853.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595853, url, valid)

proc call*(call_595854: Call_GetReplicaInfoList_595846; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = ""): Recallable =
  ## getReplicaInfoList
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_595855 = newJObject()
  var query_595856 = newJObject()
  add(query_595856, "timeout", newJInt(timeout))
  add(query_595856, "api-version", newJString(apiVersion))
  add(path_595855, "partitionId", newJString(partitionId))
  add(query_595856, "ContinuationToken", newJString(ContinuationToken))
  result = call_595854.call(path_595855, query_595856, nil, nil, nil)

var getReplicaInfoList* = Call_GetReplicaInfoList_595846(
    name: "getReplicaInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas",
    validator: validate_GetReplicaInfoList_595847, base: "",
    url: url_GetReplicaInfoList_595848, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfo_595857 = ref object of OpenApiRestCall_593439
proc url_GetReplicaInfo_595859(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfo_595858(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595860 = path.getOrDefault("replicaId")
  valid_595860 = validateParameter(valid_595860, JString, required = true,
                                 default = nil)
  if valid_595860 != nil:
    section.add "replicaId", valid_595860
  var valid_595861 = path.getOrDefault("partitionId")
  valid_595861 = validateParameter(valid_595861, JString, required = true,
                                 default = nil)
  if valid_595861 != nil:
    section.add "partitionId", valid_595861
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595862 = query.getOrDefault("timeout")
  valid_595862 = validateParameter(valid_595862, JInt, required = false,
                                 default = newJInt(60))
  if valid_595862 != nil:
    section.add "timeout", valid_595862
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595863 = query.getOrDefault("api-version")
  valid_595863 = validateParameter(valid_595863, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595863 != nil:
    section.add "api-version", valid_595863
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595864: Call_GetReplicaInfo_595857; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_595864.validator(path, query, header, formData, body)
  let scheme = call_595864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595864.url(scheme.get, call_595864.host, call_595864.base,
                         call_595864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595864, url, valid)

proc call*(call_595865: Call_GetReplicaInfo_595857; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getReplicaInfo
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595866 = newJObject()
  var query_595867 = newJObject()
  add(path_595866, "replicaId", newJString(replicaId))
  add(query_595867, "timeout", newJInt(timeout))
  add(query_595867, "api-version", newJString(apiVersion))
  add(path_595866, "partitionId", newJString(partitionId))
  result = call_595865.call(path_595866, query_595867, nil, nil, nil)

var getReplicaInfo* = Call_GetReplicaInfo_595857(name: "getReplicaInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}",
    validator: validate_GetReplicaInfo_595858, base: "", url: url_GetReplicaInfo_595859,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealthUsingPolicy_595880 = ref object of OpenApiRestCall_593439
proc url_GetReplicaHealthUsingPolicy_595882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealthUsingPolicy_595881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595883 = path.getOrDefault("replicaId")
  valid_595883 = validateParameter(valid_595883, JString, required = true,
                                 default = nil)
  if valid_595883 != nil:
    section.add "replicaId", valid_595883
  var valid_595884 = path.getOrDefault("partitionId")
  valid_595884 = validateParameter(valid_595884, JString, required = true,
                                 default = nil)
  if valid_595884 != nil:
    section.add "partitionId", valid_595884
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595885 = query.getOrDefault("timeout")
  valid_595885 = validateParameter(valid_595885, JInt, required = false,
                                 default = newJInt(60))
  if valid_595885 != nil:
    section.add "timeout", valid_595885
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595886 = query.getOrDefault("api-version")
  valid_595886 = validateParameter(valid_595886, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595886 != nil:
    section.add "api-version", valid_595886
  var valid_595887 = query.getOrDefault("EventsHealthStateFilter")
  valid_595887 = validateParameter(valid_595887, JInt, required = false,
                                 default = newJInt(0))
  if valid_595887 != nil:
    section.add "EventsHealthStateFilter", valid_595887
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595889: Call_GetReplicaHealthUsingPolicy_595880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  let valid = call_595889.validator(path, query, header, formData, body)
  let scheme = call_595889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595889.url(scheme.get, call_595889.host, call_595889.base,
                         call_595889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595889, url, valid)

proc call*(call_595890: Call_GetReplicaHealthUsingPolicy_595880; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealthUsingPolicy
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595891 = newJObject()
  var query_595892 = newJObject()
  var body_595893 = newJObject()
  add(path_595891, "replicaId", newJString(replicaId))
  add(query_595892, "timeout", newJInt(timeout))
  add(query_595892, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_595893 = ApplicationHealthPolicy
  add(query_595892, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595891, "partitionId", newJString(partitionId))
  result = call_595890.call(path_595891, query_595892, nil, nil, body_595893)

var getReplicaHealthUsingPolicy* = Call_GetReplicaHealthUsingPolicy_595880(
    name: "getReplicaHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealthUsingPolicy_595881, base: "",
    url: url_GetReplicaHealthUsingPolicy_595882,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealth_595868 = ref object of OpenApiRestCall_593439
proc url_GetReplicaHealth_595870(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealth_595869(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595871 = path.getOrDefault("replicaId")
  valid_595871 = validateParameter(valid_595871, JString, required = true,
                                 default = nil)
  if valid_595871 != nil:
    section.add "replicaId", valid_595871
  var valid_595872 = path.getOrDefault("partitionId")
  valid_595872 = validateParameter(valid_595872, JString, required = true,
                                 default = nil)
  if valid_595872 != nil:
    section.add "partitionId", valid_595872
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_595873 = query.getOrDefault("timeout")
  valid_595873 = validateParameter(valid_595873, JInt, required = false,
                                 default = newJInt(60))
  if valid_595873 != nil:
    section.add "timeout", valid_595873
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595874 = query.getOrDefault("api-version")
  valid_595874 = validateParameter(valid_595874, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595874 != nil:
    section.add "api-version", valid_595874
  var valid_595875 = query.getOrDefault("EventsHealthStateFilter")
  valid_595875 = validateParameter(valid_595875, JInt, required = false,
                                 default = newJInt(0))
  if valid_595875 != nil:
    section.add "EventsHealthStateFilter", valid_595875
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595876: Call_GetReplicaHealth_595868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  let valid = call_595876.validator(path, query, header, formData, body)
  let scheme = call_595876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595876.url(scheme.get, call_595876.host, call_595876.base,
                         call_595876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595876, url, valid)

proc call*(call_595877: Call_GetReplicaHealth_595868; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealth
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595878 = newJObject()
  var query_595879 = newJObject()
  add(path_595878, "replicaId", newJString(replicaId))
  add(query_595879, "timeout", newJInt(timeout))
  add(query_595879, "api-version", newJString(apiVersion))
  add(query_595879, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_595878, "partitionId", newJString(partitionId))
  result = call_595877.call(path_595878, query_595879, nil, nil, nil)

var getReplicaHealth* = Call_GetReplicaHealth_595868(name: "getReplicaHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealth_595869, base: "",
    url: url_GetReplicaHealth_595870, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportReplicaHealth_595894 = ref object of OpenApiRestCall_593439
proc url_ReportReplicaHealth_595896(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportReplicaHealth_595895(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_595897 = path.getOrDefault("replicaId")
  valid_595897 = validateParameter(valid_595897, JString, required = true,
                                 default = nil)
  if valid_595897 != nil:
    section.add "replicaId", valid_595897
  var valid_595898 = path.getOrDefault("partitionId")
  valid_595898 = validateParameter(valid_595898, JString, required = true,
                                 default = nil)
  if valid_595898 != nil:
    section.add "partitionId", valid_595898
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicaHealthReportServiceKind: JString (required)
  ##                                 : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  section = newJObject()
  var valid_595899 = query.getOrDefault("Immediate")
  valid_595899 = validateParameter(valid_595899, JBool, required = false,
                                 default = newJBool(false))
  if valid_595899 != nil:
    section.add "Immediate", valid_595899
  var valid_595900 = query.getOrDefault("timeout")
  valid_595900 = validateParameter(valid_595900, JInt, required = false,
                                 default = newJInt(60))
  if valid_595900 != nil:
    section.add "timeout", valid_595900
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595901 = query.getOrDefault("api-version")
  valid_595901 = validateParameter(valid_595901, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595901 != nil:
    section.add "api-version", valid_595901
  var valid_595902 = query.getOrDefault("ReplicaHealthReportServiceKind")
  valid_595902 = validateParameter(valid_595902, JString, required = true,
                                 default = newJString("Stateful"))
  if valid_595902 != nil:
    section.add "ReplicaHealthReportServiceKind", valid_595902
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595904: Call_ReportReplicaHealth_595894; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595904.validator(path, query, header, formData, body)
  let scheme = call_595904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595904.url(scheme.get, call_595904.host, call_595904.base,
                         call_595904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595904, url, valid)

proc call*(call_595905: Call_ReportReplicaHealth_595894; replicaId: string;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0";
          ReplicaHealthReportServiceKind: string = "Stateful"): Recallable =
  ## reportReplicaHealth
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   ReplicaHealthReportServiceKind: string (required)
  ##                                 : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595906 = newJObject()
  var query_595907 = newJObject()
  var body_595908 = newJObject()
  add(path_595906, "replicaId", newJString(replicaId))
  add(query_595907, "Immediate", newJBool(Immediate))
  add(query_595907, "timeout", newJInt(timeout))
  add(query_595907, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_595908 = HealthInformation
  add(query_595907, "ReplicaHealthReportServiceKind",
      newJString(ReplicaHealthReportServiceKind))
  add(path_595906, "partitionId", newJString(partitionId))
  result = call_595905.call(path_595906, query_595907, nil, nil, body_595908)

var reportReplicaHealth* = Call_ReportReplicaHealth_595894(
    name: "reportReplicaHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth",
    validator: validate_ReportReplicaHealth_595895, base: "",
    url: url_ReportReplicaHealth_595896, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestoreProgress_595909 = ref object of OpenApiRestCall_593439
proc url_GetPartitionRestoreProgress_595911(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestoreProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestoreProgress_595910(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595912 = path.getOrDefault("partitionId")
  valid_595912 = validateParameter(valid_595912, JString, required = true,
                                 default = nil)
  if valid_595912 != nil:
    section.add "partitionId", valid_595912
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595913 = query.getOrDefault("timeout")
  valid_595913 = validateParameter(valid_595913, JInt, required = false,
                                 default = newJInt(60))
  if valid_595913 != nil:
    section.add "timeout", valid_595913
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595914 = query.getOrDefault("api-version")
  valid_595914 = validateParameter(valid_595914, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595914 != nil:
    section.add "api-version", valid_595914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595915: Call_GetPartitionRestoreProgress_595909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  let valid = call_595915.validator(path, query, header, formData, body)
  let scheme = call_595915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595915.url(scheme.get, call_595915.host, call_595915.base,
                         call_595915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595915, url, valid)

proc call*(call_595916: Call_GetPartitionRestoreProgress_595909;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionRestoreProgress
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595917 = newJObject()
  var query_595918 = newJObject()
  add(query_595918, "timeout", newJInt(timeout))
  add(query_595918, "api-version", newJString(apiVersion))
  add(path_595917, "partitionId", newJString(partitionId))
  result = call_595916.call(path_595917, query_595918, nil, nil, nil)

var getPartitionRestoreProgress* = Call_GetPartitionRestoreProgress_595909(
    name: "getPartitionRestoreProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetRestoreProgress",
    validator: validate_GetPartitionRestoreProgress_595910, base: "",
    url: url_GetPartitionRestoreProgress_595911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceNameInfo_595919 = ref object of OpenApiRestCall_593439
proc url_GetServiceNameInfo_595921(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetServiceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceNameInfo_595920(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595922 = path.getOrDefault("partitionId")
  valid_595922 = validateParameter(valid_595922, JString, required = true,
                                 default = nil)
  if valid_595922 != nil:
    section.add "partitionId", valid_595922
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595923 = query.getOrDefault("timeout")
  valid_595923 = validateParameter(valid_595923, JInt, required = false,
                                 default = newJInt(60))
  if valid_595923 != nil:
    section.add "timeout", valid_595923
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595924 = query.getOrDefault("api-version")
  valid_595924 = validateParameter(valid_595924, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595924 != nil:
    section.add "api-version", valid_595924
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595925: Call_GetServiceNameInfo_595919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  let valid = call_595925.validator(path, query, header, formData, body)
  let scheme = call_595925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595925.url(scheme.get, call_595925.host, call_595925.base,
                         call_595925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595925, url, valid)

proc call*(call_595926: Call_GetServiceNameInfo_595919; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceNameInfo
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595927 = newJObject()
  var query_595928 = newJObject()
  add(query_595928, "timeout", newJInt(timeout))
  add(query_595928, "api-version", newJString(apiVersion))
  add(path_595927, "partitionId", newJString(partitionId))
  result = call_595926.call(path_595927, query_595928, nil, nil, nil)

var getServiceNameInfo* = Call_GetServiceNameInfo_595919(
    name: "getServiceNameInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetServiceName",
    validator: validate_GetServiceNameInfo_595920, base: "",
    url: url_GetServiceNameInfo_595921, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverPartition_595929 = ref object of OpenApiRestCall_593439
proc url_RecoverPartition_595931(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverPartition_595930(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595932 = path.getOrDefault("partitionId")
  valid_595932 = validateParameter(valid_595932, JString, required = true,
                                 default = nil)
  if valid_595932 != nil:
    section.add "partitionId", valid_595932
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595933 = query.getOrDefault("timeout")
  valid_595933 = validateParameter(valid_595933, JInt, required = false,
                                 default = newJInt(60))
  if valid_595933 != nil:
    section.add "timeout", valid_595933
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595934 = query.getOrDefault("api-version")
  valid_595934 = validateParameter(valid_595934, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595934 != nil:
    section.add "api-version", valid_595934
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595935: Call_RecoverPartition_595929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_595935.validator(path, query, header, formData, body)
  let scheme = call_595935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595935.url(scheme.get, call_595935.host, call_595935.base,
                         call_595935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595935, url, valid)

proc call*(call_595936: Call_RecoverPartition_595929; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverPartition
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595937 = newJObject()
  var query_595938 = newJObject()
  add(query_595938, "timeout", newJInt(timeout))
  add(query_595938, "api-version", newJString(apiVersion))
  add(path_595937, "partitionId", newJString(partitionId))
  result = call_595936.call(path_595937, query_595938, nil, nil, nil)

var recoverPartition* = Call_RecoverPartition_595929(name: "recoverPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Recover",
    validator: validate_RecoverPartition_595930, base: "",
    url: url_RecoverPartition_595931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportPartitionHealth_595939 = ref object of OpenApiRestCall_593439
proc url_ReportPartitionHealth_595941(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportPartitionHealth_595940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595942 = path.getOrDefault("partitionId")
  valid_595942 = validateParameter(valid_595942, JString, required = true,
                                 default = nil)
  if valid_595942 != nil:
    section.add "partitionId", valid_595942
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595943 = query.getOrDefault("Immediate")
  valid_595943 = validateParameter(valid_595943, JBool, required = false,
                                 default = newJBool(false))
  if valid_595943 != nil:
    section.add "Immediate", valid_595943
  var valid_595944 = query.getOrDefault("timeout")
  valid_595944 = validateParameter(valid_595944, JInt, required = false,
                                 default = newJInt(60))
  if valid_595944 != nil:
    section.add "timeout", valid_595944
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595945 = query.getOrDefault("api-version")
  valid_595945 = validateParameter(valid_595945, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595945 != nil:
    section.add "api-version", valid_595945
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595947: Call_ReportPartitionHealth_595939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_595947.validator(path, query, header, formData, body)
  let scheme = call_595947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595947.url(scheme.get, call_595947.host, call_595947.base,
                         call_595947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595947, url, valid)

proc call*(call_595948: Call_ReportPartitionHealth_595939;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportPartitionHealth
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595949 = newJObject()
  var query_595950 = newJObject()
  var body_595951 = newJObject()
  add(query_595950, "Immediate", newJBool(Immediate))
  add(query_595950, "timeout", newJInt(timeout))
  add(query_595950, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_595951 = HealthInformation
  add(path_595949, "partitionId", newJString(partitionId))
  result = call_595948.call(path_595949, query_595950, nil, nil, body_595951)

var reportPartitionHealth* = Call_ReportPartitionHealth_595939(
    name: "reportPartitionHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ReportHealth",
    validator: validate_ReportPartitionHealth_595940, base: "",
    url: url_ReportPartitionHealth_595941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResetPartitionLoad_595952 = ref object of OpenApiRestCall_593439
proc url_ResetPartitionLoad_595954(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResetLoad")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResetPartitionLoad_595953(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595955 = path.getOrDefault("partitionId")
  valid_595955 = validateParameter(valid_595955, JString, required = true,
                                 default = nil)
  if valid_595955 != nil:
    section.add "partitionId", valid_595955
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595956 = query.getOrDefault("timeout")
  valid_595956 = validateParameter(valid_595956, JInt, required = false,
                                 default = newJInt(60))
  if valid_595956 != nil:
    section.add "timeout", valid_595956
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595957 = query.getOrDefault("api-version")
  valid_595957 = validateParameter(valid_595957, JString, required = true,
                                 default = newJString("6.0"))
  if valid_595957 != nil:
    section.add "api-version", valid_595957
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595958: Call_ResetPartitionLoad_595952; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  let valid = call_595958.validator(path, query, header, formData, body)
  let scheme = call_595958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595958.url(scheme.get, call_595958.host, call_595958.base,
                         call_595958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595958, url, valid)

proc call*(call_595959: Call_ResetPartitionLoad_595952; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resetPartitionLoad
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595960 = newJObject()
  var query_595961 = newJObject()
  add(query_595961, "timeout", newJInt(timeout))
  add(query_595961, "api-version", newJString(apiVersion))
  add(path_595960, "partitionId", newJString(partitionId))
  result = call_595959.call(path_595960, query_595961, nil, nil, nil)

var resetPartitionLoad* = Call_ResetPartitionLoad_595952(
    name: "resetPartitionLoad", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResetLoad",
    validator: validate_ResetPartitionLoad_595953, base: "",
    url: url_ResetPartitionLoad_595954, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestorePartition_595962 = ref object of OpenApiRestCall_593439
proc url_RestorePartition_595964(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestorePartition_595963(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595965 = path.getOrDefault("partitionId")
  valid_595965 = validateParameter(valid_595965, JString, required = true,
                                 default = nil)
  if valid_595965 != nil:
    section.add "partitionId", valid_595965
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestoreTimeout: JInt
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  section = newJObject()
  var valid_595966 = query.getOrDefault("timeout")
  valid_595966 = validateParameter(valid_595966, JInt, required = false,
                                 default = newJInt(60))
  if valid_595966 != nil:
    section.add "timeout", valid_595966
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595967 = query.getOrDefault("api-version")
  valid_595967 = validateParameter(valid_595967, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595967 != nil:
    section.add "api-version", valid_595967
  var valid_595968 = query.getOrDefault("RestoreTimeout")
  valid_595968 = validateParameter(valid_595968, JInt, required = false,
                                 default = newJInt(10))
  if valid_595968 != nil:
    section.add "RestoreTimeout", valid_595968
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595970: Call_RestorePartition_595962; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  let valid = call_595970.validator(path, query, header, formData, body)
  let scheme = call_595970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595970.url(scheme.get, call_595970.host, call_595970.base,
                         call_595970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595970, url, valid)

proc call*(call_595971: Call_RestorePartition_595962;
          RestorePartitionDescription: JsonNode; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; RestoreTimeout: int = 10): Recallable =
  ## restorePartition
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   RestoreTimeout: int
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  var path_595972 = newJObject()
  var query_595973 = newJObject()
  var body_595974 = newJObject()
  add(query_595973, "timeout", newJInt(timeout))
  if RestorePartitionDescription != nil:
    body_595974 = RestorePartitionDescription
  add(query_595973, "api-version", newJString(apiVersion))
  add(path_595972, "partitionId", newJString(partitionId))
  add(query_595973, "RestoreTimeout", newJInt(RestoreTimeout))
  result = call_595971.call(path_595972, query_595973, nil, nil, body_595974)

var restorePartition* = Call_RestorePartition_595962(name: "restorePartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Restore",
    validator: validate_RestorePartition_595963, base: "",
    url: url_RestorePartition_595964, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumePartitionBackup_595975 = ref object of OpenApiRestCall_593439
proc url_ResumePartitionBackup_595977(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumePartitionBackup_595976(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595978 = path.getOrDefault("partitionId")
  valid_595978 = validateParameter(valid_595978, JString, required = true,
                                 default = nil)
  if valid_595978 != nil:
    section.add "partitionId", valid_595978
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595979 = query.getOrDefault("timeout")
  valid_595979 = validateParameter(valid_595979, JInt, required = false,
                                 default = newJInt(60))
  if valid_595979 != nil:
    section.add "timeout", valid_595979
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595980 = query.getOrDefault("api-version")
  valid_595980 = validateParameter(valid_595980, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595980 != nil:
    section.add "api-version", valid_595980
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595981: Call_ResumePartitionBackup_595975; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_595981.validator(path, query, header, formData, body)
  let scheme = call_595981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595981.url(scheme.get, call_595981.host, call_595981.base,
                         call_595981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595981, url, valid)

proc call*(call_595982: Call_ResumePartitionBackup_595975; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumePartitionBackup
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595983 = newJObject()
  var query_595984 = newJObject()
  add(query_595984, "timeout", newJInt(timeout))
  add(query_595984, "api-version", newJString(apiVersion))
  add(path_595983, "partitionId", newJString(partitionId))
  result = call_595982.call(path_595983, query_595984, nil, nil, nil)

var resumePartitionBackup* = Call_ResumePartitionBackup_595975(
    name: "resumePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResumeBackup",
    validator: validate_ResumePartitionBackup_595976, base: "",
    url: url_ResumePartitionBackup_595977, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendPartitionBackup_595985 = ref object of OpenApiRestCall_593439
proc url_SuspendPartitionBackup_595987(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendPartitionBackup_595986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_595988 = path.getOrDefault("partitionId")
  valid_595988 = validateParameter(valid_595988, JString, required = true,
                                 default = nil)
  if valid_595988 != nil:
    section.add "partitionId", valid_595988
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_595989 = query.getOrDefault("timeout")
  valid_595989 = validateParameter(valid_595989, JInt, required = false,
                                 default = newJInt(60))
  if valid_595989 != nil:
    section.add "timeout", valid_595989
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595990 = query.getOrDefault("api-version")
  valid_595990 = validateParameter(valid_595990, JString, required = true,
                                 default = newJString("6.4"))
  if valid_595990 != nil:
    section.add "api-version", valid_595990
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595991: Call_SuspendPartitionBackup_595985; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  let valid = call_595991.validator(path, query, header, formData, body)
  let scheme = call_595991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595991.url(scheme.get, call_595991.host, call_595991.base,
                         call_595991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595991, url, valid)

proc call*(call_595992: Call_SuspendPartitionBackup_595985; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendPartitionBackup
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_595993 = newJObject()
  var query_595994 = newJObject()
  add(query_595994, "timeout", newJInt(timeout))
  add(query_595994, "api-version", newJString(apiVersion))
  add(path_595993, "partitionId", newJString(partitionId))
  result = call_595992.call(path_595993, query_595994, nil, nil, nil)

var suspendPartitionBackup* = Call_SuspendPartitionBackup_595985(
    name: "suspendPartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/SuspendBackup",
    validator: validate_SuspendPartitionBackup_595986, base: "",
    url: url_SuspendPartitionBackup_595987, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationList_595995 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationList_595997(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshApplicationList_595996(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595998 = query.getOrDefault("api-version")
  valid_595998 = validateParameter(valid_595998, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_595998 != nil:
    section.add "api-version", valid_595998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595999: Call_MeshApplicationList_595995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  let valid = call_595999.validator(path, query, header, formData, body)
  let scheme = call_595999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595999.url(scheme.get, call_595999.host, call_595999.base,
                         call_595999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595999, url, valid)

proc call*(call_596000: Call_MeshApplicationList_595995;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationList
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596001 = newJObject()
  add(query_596001, "api-version", newJString(apiVersion))
  result = call_596000.call(nil, query_596001, nil, nil, nil)

var meshApplicationList* = Call_MeshApplicationList_595995(
    name: "meshApplicationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications",
    validator: validate_MeshApplicationList_595996, base: "",
    url: url_MeshApplicationList_595997, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationCreateOrUpdate_596011 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationCreateOrUpdate_596013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationCreateOrUpdate_596012(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596014 = path.getOrDefault("applicationResourceName")
  valid_596014 = validateParameter(valid_596014, JString, required = true,
                                 default = nil)
  if valid_596014 != nil:
    section.add "applicationResourceName", valid_596014
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596015 = query.getOrDefault("api-version")
  valid_596015 = validateParameter(valid_596015, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596015 != nil:
    section.add "api-version", valid_596015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596017: Call_MeshApplicationCreateOrUpdate_596011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_596017.validator(path, query, header, formData, body)
  let scheme = call_596017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596017.url(scheme.get, call_596017.host, call_596017.base,
                         call_596017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596017, url, valid)

proc call*(call_596018: Call_MeshApplicationCreateOrUpdate_596011;
          applicationResourceDescription: JsonNode;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationCreateOrUpdate
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596019 = newJObject()
  var query_596020 = newJObject()
  var body_596021 = newJObject()
  if applicationResourceDescription != nil:
    body_596021 = applicationResourceDescription
  add(query_596020, "api-version", newJString(apiVersion))
  add(path_596019, "applicationResourceName", newJString(applicationResourceName))
  result = call_596018.call(path_596019, query_596020, nil, nil, body_596021)

var meshApplicationCreateOrUpdate* = Call_MeshApplicationCreateOrUpdate_596011(
    name: "meshApplicationCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationCreateOrUpdate_596012, base: "",
    url: url_MeshApplicationCreateOrUpdate_596013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationGet_596002 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationGet_596004(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationGet_596003(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596005 = path.getOrDefault("applicationResourceName")
  valid_596005 = validateParameter(valid_596005, JString, required = true,
                                 default = nil)
  if valid_596005 != nil:
    section.add "applicationResourceName", valid_596005
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596006 = query.getOrDefault("api-version")
  valid_596006 = validateParameter(valid_596006, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596006 != nil:
    section.add "api-version", valid_596006
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596007: Call_MeshApplicationGet_596002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  let valid = call_596007.validator(path, query, header, formData, body)
  let scheme = call_596007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596007.url(scheme.get, call_596007.host, call_596007.base,
                         call_596007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596007, url, valid)

proc call*(call_596008: Call_MeshApplicationGet_596002;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationGet
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596009 = newJObject()
  var query_596010 = newJObject()
  add(query_596010, "api-version", newJString(apiVersion))
  add(path_596009, "applicationResourceName", newJString(applicationResourceName))
  result = call_596008.call(path_596009, query_596010, nil, nil, nil)

var meshApplicationGet* = Call_MeshApplicationGet_596002(
    name: "meshApplicationGet", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationGet_596003, base: "",
    url: url_MeshApplicationGet_596004, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationDelete_596022 = ref object of OpenApiRestCall_593439
proc url_MeshApplicationDelete_596024(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationDelete_596023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the Application resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596025 = path.getOrDefault("applicationResourceName")
  valid_596025 = validateParameter(valid_596025, JString, required = true,
                                 default = nil)
  if valid_596025 != nil:
    section.add "applicationResourceName", valid_596025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596026 = query.getOrDefault("api-version")
  valid_596026 = validateParameter(valid_596026, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596026 != nil:
    section.add "api-version", valid_596026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596027: Call_MeshApplicationDelete_596022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Application resource identified by the name.
  ## 
  let valid = call_596027.validator(path, query, header, formData, body)
  let scheme = call_596027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596027.url(scheme.get, call_596027.host, call_596027.base,
                         call_596027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596027, url, valid)

proc call*(call_596028: Call_MeshApplicationDelete_596022;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationDelete
  ## Deletes the Application resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596029 = newJObject()
  var query_596030 = newJObject()
  add(query_596030, "api-version", newJString(apiVersion))
  add(path_596029, "applicationResourceName", newJString(applicationResourceName))
  result = call_596028.call(path_596029, query_596030, nil, nil, nil)

var meshApplicationDelete* = Call_MeshApplicationDelete_596022(
    name: "meshApplicationDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationDelete_596023, base: "",
    url: url_MeshApplicationDelete_596024, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceList_596031 = ref object of OpenApiRestCall_593439
proc url_MeshServiceList_596033(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceList_596032(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596034 = path.getOrDefault("applicationResourceName")
  valid_596034 = validateParameter(valid_596034, JString, required = true,
                                 default = nil)
  if valid_596034 != nil:
    section.add "applicationResourceName", valid_596034
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596035 = query.getOrDefault("api-version")
  valid_596035 = validateParameter(valid_596035, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596035 != nil:
    section.add "api-version", valid_596035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596036: Call_MeshServiceList_596031; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  let valid = call_596036.validator(path, query, header, formData, body)
  let scheme = call_596036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596036.url(scheme.get, call_596036.host, call_596036.base,
                         call_596036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596036, url, valid)

proc call*(call_596037: Call_MeshServiceList_596031;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceList
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_596038 = newJObject()
  var query_596039 = newJObject()
  add(query_596039, "api-version", newJString(apiVersion))
  add(path_596038, "applicationResourceName", newJString(applicationResourceName))
  result = call_596037.call(path_596038, query_596039, nil, nil, nil)

var meshServiceList* = Call_MeshServiceList_596031(name: "meshServiceList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}/Services",
    validator: validate_MeshServiceList_596032, base: "", url: url_MeshServiceList_596033,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceGet_596040 = ref object of OpenApiRestCall_593439
proc url_MeshServiceGet_596042(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceGet_596041(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596043 = path.getOrDefault("applicationResourceName")
  valid_596043 = validateParameter(valid_596043, JString, required = true,
                                 default = nil)
  if valid_596043 != nil:
    section.add "applicationResourceName", valid_596043
  var valid_596044 = path.getOrDefault("serviceResourceName")
  valid_596044 = validateParameter(valid_596044, JString, required = true,
                                 default = nil)
  if valid_596044 != nil:
    section.add "serviceResourceName", valid_596044
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596045 = query.getOrDefault("api-version")
  valid_596045 = validateParameter(valid_596045, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596045 != nil:
    section.add "api-version", valid_596045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596046: Call_MeshServiceGet_596040; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  let valid = call_596046.validator(path, query, header, formData, body)
  let scheme = call_596046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596046.url(scheme.get, call_596046.host, call_596046.base,
                         call_596046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596046, url, valid)

proc call*(call_596047: Call_MeshServiceGet_596040;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceGet
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_596048 = newJObject()
  var query_596049 = newJObject()
  add(query_596049, "api-version", newJString(apiVersion))
  add(path_596048, "applicationResourceName", newJString(applicationResourceName))
  add(path_596048, "serviceResourceName", newJString(serviceResourceName))
  result = call_596047.call(path_596048, query_596049, nil, nil, nil)

var meshServiceGet* = Call_MeshServiceGet_596040(name: "meshServiceGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}",
    validator: validate_MeshServiceGet_596041, base: "", url: url_MeshServiceGet_596042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaList_596050 = ref object of OpenApiRestCall_593439
proc url_MeshServiceReplicaList_596052(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaList_596051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596053 = path.getOrDefault("applicationResourceName")
  valid_596053 = validateParameter(valid_596053, JString, required = true,
                                 default = nil)
  if valid_596053 != nil:
    section.add "applicationResourceName", valid_596053
  var valid_596054 = path.getOrDefault("serviceResourceName")
  valid_596054 = validateParameter(valid_596054, JString, required = true,
                                 default = nil)
  if valid_596054 != nil:
    section.add "serviceResourceName", valid_596054
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596055 = query.getOrDefault("api-version")
  valid_596055 = validateParameter(valid_596055, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596055 != nil:
    section.add "api-version", valid_596055
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596056: Call_MeshServiceReplicaList_596050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  let valid = call_596056.validator(path, query, header, formData, body)
  let scheme = call_596056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596056.url(scheme.get, call_596056.host, call_596056.base,
                         call_596056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596056, url, valid)

proc call*(call_596057: Call_MeshServiceReplicaList_596050;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaList
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_596058 = newJObject()
  var query_596059 = newJObject()
  add(query_596059, "api-version", newJString(apiVersion))
  add(path_596058, "applicationResourceName", newJString(applicationResourceName))
  add(path_596058, "serviceResourceName", newJString(serviceResourceName))
  result = call_596057.call(path_596058, query_596059, nil, nil, nil)

var meshServiceReplicaList* = Call_MeshServiceReplicaList_596050(
    name: "meshServiceReplicaList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas",
    validator: validate_MeshServiceReplicaList_596051, base: "",
    url: url_MeshServiceReplicaList_596052, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaGet_596060 = ref object of OpenApiRestCall_593439
proc url_MeshServiceReplicaGet_596062(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaGet_596061(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596063 = path.getOrDefault("applicationResourceName")
  valid_596063 = validateParameter(valid_596063, JString, required = true,
                                 default = nil)
  if valid_596063 != nil:
    section.add "applicationResourceName", valid_596063
  var valid_596064 = path.getOrDefault("serviceResourceName")
  valid_596064 = validateParameter(valid_596064, JString, required = true,
                                 default = nil)
  if valid_596064 != nil:
    section.add "serviceResourceName", valid_596064
  var valid_596065 = path.getOrDefault("replicaName")
  valid_596065 = validateParameter(valid_596065, JString, required = true,
                                 default = nil)
  if valid_596065 != nil:
    section.add "replicaName", valid_596065
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596066 = query.getOrDefault("api-version")
  valid_596066 = validateParameter(valid_596066, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596066 != nil:
    section.add "api-version", valid_596066
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596067: Call_MeshServiceReplicaGet_596060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  let valid = call_596067.validator(path, query, header, formData, body)
  let scheme = call_596067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596067.url(scheme.get, call_596067.host, call_596067.base,
                         call_596067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596067, url, valid)

proc call*(call_596068: Call_MeshServiceReplicaGet_596060;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaGet
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  var path_596069 = newJObject()
  var query_596070 = newJObject()
  add(query_596070, "api-version", newJString(apiVersion))
  add(path_596069, "applicationResourceName", newJString(applicationResourceName))
  add(path_596069, "serviceResourceName", newJString(serviceResourceName))
  add(path_596069, "replicaName", newJString(replicaName))
  result = call_596068.call(path_596069, query_596070, nil, nil, nil)

var meshServiceReplicaGet* = Call_MeshServiceReplicaGet_596060(
    name: "meshServiceReplicaGet", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}",
    validator: validate_MeshServiceReplicaGet_596061, base: "",
    url: url_MeshServiceReplicaGet_596062, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshCodePackageGetContainerLogs_596071 = ref object of OpenApiRestCall_593439
proc url_MeshCodePackageGetContainerLogs_596073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  assert "codePackageName" in path, "`codePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName"),
               (kind: ConstantSegment, value: "/CodePackages/"),
               (kind: VariableSegment, value: "codePackageName"),
               (kind: ConstantSegment, value: "/Logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshCodePackageGetContainerLogs_596072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: JString (required)
  ##                  : The name of code package of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_596074 = path.getOrDefault("applicationResourceName")
  valid_596074 = validateParameter(valid_596074, JString, required = true,
                                 default = nil)
  if valid_596074 != nil:
    section.add "applicationResourceName", valid_596074
  var valid_596075 = path.getOrDefault("serviceResourceName")
  valid_596075 = validateParameter(valid_596075, JString, required = true,
                                 default = nil)
  if valid_596075 != nil:
    section.add "serviceResourceName", valid_596075
  var valid_596076 = path.getOrDefault("replicaName")
  valid_596076 = validateParameter(valid_596076, JString, required = true,
                                 default = nil)
  if valid_596076 != nil:
    section.add "replicaName", valid_596076
  var valid_596077 = path.getOrDefault("codePackageName")
  valid_596077 = validateParameter(valid_596077, JString, required = true,
                                 default = nil)
  if valid_596077 != nil:
    section.add "codePackageName", valid_596077
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596078 = query.getOrDefault("api-version")
  valid_596078 = validateParameter(valid_596078, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596078 != nil:
    section.add "api-version", valid_596078
  var valid_596079 = query.getOrDefault("Tail")
  valid_596079 = validateParameter(valid_596079, JString, required = false,
                                 default = nil)
  if valid_596079 != nil:
    section.add "Tail", valid_596079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596080: Call_MeshCodePackageGetContainerLogs_596071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  let valid = call_596080.validator(path, query, header, formData, body)
  let scheme = call_596080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596080.url(scheme.get, call_596080.host, call_596080.base,
                         call_596080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596080, url, valid)

proc call*(call_596081: Call_MeshCodePackageGetContainerLogs_596071;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; codePackageName: string;
          apiVersion: string = "6.4-preview"; Tail: string = ""): Recallable =
  ## meshCodePackageGetContainerLogs
  ## Gets the logs for the container of the specified code package of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: string (required)
  ##                  : The name of code package of the service.
  var path_596082 = newJObject()
  var query_596083 = newJObject()
  add(query_596083, "api-version", newJString(apiVersion))
  add(path_596082, "applicationResourceName", newJString(applicationResourceName))
  add(path_596082, "serviceResourceName", newJString(serviceResourceName))
  add(query_596083, "Tail", newJString(Tail))
  add(path_596082, "replicaName", newJString(replicaName))
  add(path_596082, "codePackageName", newJString(codePackageName))
  result = call_596081.call(path_596082, query_596083, nil, nil, nil)

var meshCodePackageGetContainerLogs* = Call_MeshCodePackageGetContainerLogs_596071(
    name: "meshCodePackageGetContainerLogs", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs",
    validator: validate_MeshCodePackageGetContainerLogs_596072, base: "",
    url: url_MeshCodePackageGetContainerLogs_596073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayList_596084 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayList_596086(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshGatewayList_596085(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596087 = query.getOrDefault("api-version")
  valid_596087 = validateParameter(valid_596087, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596087 != nil:
    section.add "api-version", valid_596087
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596088: Call_MeshGatewayList_596084; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_596088.validator(path, query, header, formData, body)
  let scheme = call_596088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596088.url(scheme.get, call_596088.host, call_596088.base,
                         call_596088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596088, url, valid)

proc call*(call_596089: Call_MeshGatewayList_596084;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayList
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596090 = newJObject()
  add(query_596090, "api-version", newJString(apiVersion))
  result = call_596089.call(nil, query_596090, nil, nil, nil)

var meshGatewayList* = Call_MeshGatewayList_596084(name: "meshGatewayList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways", validator: validate_MeshGatewayList_596085,
    base: "", url: url_MeshGatewayList_596086, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayCreateOrUpdate_596100 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayCreateOrUpdate_596102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayCreateOrUpdate_596101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_596103 = path.getOrDefault("gatewayResourceName")
  valid_596103 = validateParameter(valid_596103, JString, required = true,
                                 default = nil)
  if valid_596103 != nil:
    section.add "gatewayResourceName", valid_596103
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596104 = query.getOrDefault("api-version")
  valid_596104 = validateParameter(valid_596104, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596104 != nil:
    section.add "api-version", valid_596104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596106: Call_MeshGatewayCreateOrUpdate_596100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  let valid = call_596106.validator(path, query, header, formData, body)
  let scheme = call_596106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596106.url(scheme.get, call_596106.host, call_596106.base,
                         call_596106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596106, url, valid)

proc call*(call_596107: Call_MeshGatewayCreateOrUpdate_596100;
          gatewayResourceDescription: JsonNode; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayCreateOrUpdate
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_596108 = newJObject()
  var query_596109 = newJObject()
  var body_596110 = newJObject()
  add(query_596109, "api-version", newJString(apiVersion))
  if gatewayResourceDescription != nil:
    body_596110 = gatewayResourceDescription
  add(path_596108, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_596107.call(path_596108, query_596109, nil, nil, body_596110)

var meshGatewayCreateOrUpdate* = Call_MeshGatewayCreateOrUpdate_596100(
    name: "meshGatewayCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayCreateOrUpdate_596101, base: "",
    url: url_MeshGatewayCreateOrUpdate_596102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayGet_596091 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayGet_596093(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayGet_596092(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_596094 = path.getOrDefault("gatewayResourceName")
  valid_596094 = validateParameter(valid_596094, JString, required = true,
                                 default = nil)
  if valid_596094 != nil:
    section.add "gatewayResourceName", valid_596094
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596095 = query.getOrDefault("api-version")
  valid_596095 = validateParameter(valid_596095, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596095 != nil:
    section.add "api-version", valid_596095
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596096: Call_MeshGatewayGet_596091; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_596096.validator(path, query, header, formData, body)
  let scheme = call_596096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596096.url(scheme.get, call_596096.host, call_596096.base,
                         call_596096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596096, url, valid)

proc call*(call_596097: Call_MeshGatewayGet_596091; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayGet
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_596098 = newJObject()
  var query_596099 = newJObject()
  add(query_596099, "api-version", newJString(apiVersion))
  add(path_596098, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_596097.call(path_596098, query_596099, nil, nil, nil)

var meshGatewayGet* = Call_MeshGatewayGet_596091(name: "meshGatewayGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayGet_596092, base: "", url: url_MeshGatewayGet_596093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayDelete_596111 = ref object of OpenApiRestCall_593439
proc url_MeshGatewayDelete_596113(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayDelete_596112(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Gateway resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_596114 = path.getOrDefault("gatewayResourceName")
  valid_596114 = validateParameter(valid_596114, JString, required = true,
                                 default = nil)
  if valid_596114 != nil:
    section.add "gatewayResourceName", valid_596114
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596115 = query.getOrDefault("api-version")
  valid_596115 = validateParameter(valid_596115, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596115 != nil:
    section.add "api-version", valid_596115
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596116: Call_MeshGatewayDelete_596111; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Gateway resource identified by the name.
  ## 
  let valid = call_596116.validator(path, query, header, formData, body)
  let scheme = call_596116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596116.url(scheme.get, call_596116.host, call_596116.base,
                         call_596116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596116, url, valid)

proc call*(call_596117: Call_MeshGatewayDelete_596111; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayDelete
  ## Deletes the Gateway resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_596118 = newJObject()
  var query_596119 = newJObject()
  add(query_596119, "api-version", newJString(apiVersion))
  add(path_596118, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_596117.call(path_596118, query_596119, nil, nil, nil)

var meshGatewayDelete* = Call_MeshGatewayDelete_596111(name: "meshGatewayDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayDelete_596112, base: "",
    url: url_MeshGatewayDelete_596113, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkList_596120 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkList_596122(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshNetworkList_596121(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596123 = query.getOrDefault("api-version")
  valid_596123 = validateParameter(valid_596123, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596123 != nil:
    section.add "api-version", valid_596123
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596124: Call_MeshNetworkList_596120; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  let valid = call_596124.validator(path, query, header, formData, body)
  let scheme = call_596124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596124.url(scheme.get, call_596124.host, call_596124.base,
                         call_596124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596124, url, valid)

proc call*(call_596125: Call_MeshNetworkList_596120;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkList
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596126 = newJObject()
  add(query_596126, "api-version", newJString(apiVersion))
  result = call_596125.call(nil, query_596126, nil, nil, nil)

var meshNetworkList* = Call_MeshNetworkList_596120(name: "meshNetworkList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks", validator: validate_MeshNetworkList_596121,
    base: "", url: url_MeshNetworkList_596122, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkCreateOrUpdate_596136 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkCreateOrUpdate_596138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkCreateOrUpdate_596137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_596139 = path.getOrDefault("networkResourceName")
  valid_596139 = validateParameter(valid_596139, JString, required = true,
                                 default = nil)
  if valid_596139 != nil:
    section.add "networkResourceName", valid_596139
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596140 = query.getOrDefault("api-version")
  valid_596140 = validateParameter(valid_596140, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596140 != nil:
    section.add "api-version", valid_596140
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596142: Call_MeshNetworkCreateOrUpdate_596136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  let valid = call_596142.validator(path, query, header, formData, body)
  let scheme = call_596142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596142.url(scheme.get, call_596142.host, call_596142.base,
                         call_596142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596142, url, valid)

proc call*(call_596143: Call_MeshNetworkCreateOrUpdate_596136;
          networkResourceDescription: JsonNode; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkCreateOrUpdate
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_596144 = newJObject()
  var query_596145 = newJObject()
  var body_596146 = newJObject()
  add(query_596145, "api-version", newJString(apiVersion))
  if networkResourceDescription != nil:
    body_596146 = networkResourceDescription
  add(path_596144, "networkResourceName", newJString(networkResourceName))
  result = call_596143.call(path_596144, query_596145, nil, nil, body_596146)

var meshNetworkCreateOrUpdate* = Call_MeshNetworkCreateOrUpdate_596136(
    name: "meshNetworkCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkCreateOrUpdate_596137, base: "",
    url: url_MeshNetworkCreateOrUpdate_596138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkGet_596127 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkGet_596129(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkGet_596128(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_596130 = path.getOrDefault("networkResourceName")
  valid_596130 = validateParameter(valid_596130, JString, required = true,
                                 default = nil)
  if valid_596130 != nil:
    section.add "networkResourceName", valid_596130
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596131 = query.getOrDefault("api-version")
  valid_596131 = validateParameter(valid_596131, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596131 != nil:
    section.add "api-version", valid_596131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596132: Call_MeshNetworkGet_596127; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  let valid = call_596132.validator(path, query, header, formData, body)
  let scheme = call_596132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596132.url(scheme.get, call_596132.host, call_596132.base,
                         call_596132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596132, url, valid)

proc call*(call_596133: Call_MeshNetworkGet_596127; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkGet
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_596134 = newJObject()
  var query_596135 = newJObject()
  add(query_596135, "api-version", newJString(apiVersion))
  add(path_596134, "networkResourceName", newJString(networkResourceName))
  result = call_596133.call(path_596134, query_596135, nil, nil, nil)

var meshNetworkGet* = Call_MeshNetworkGet_596127(name: "meshNetworkGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkGet_596128, base: "", url: url_MeshNetworkGet_596129,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkDelete_596147 = ref object of OpenApiRestCall_593439
proc url_MeshNetworkDelete_596149(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkDelete_596148(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Network resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_596150 = path.getOrDefault("networkResourceName")
  valid_596150 = validateParameter(valid_596150, JString, required = true,
                                 default = nil)
  if valid_596150 != nil:
    section.add "networkResourceName", valid_596150
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596151 = query.getOrDefault("api-version")
  valid_596151 = validateParameter(valid_596151, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596151 != nil:
    section.add "api-version", valid_596151
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596152: Call_MeshNetworkDelete_596147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Network resource identified by the name.
  ## 
  let valid = call_596152.validator(path, query, header, formData, body)
  let scheme = call_596152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596152.url(scheme.get, call_596152.host, call_596152.base,
                         call_596152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596152, url, valid)

proc call*(call_596153: Call_MeshNetworkDelete_596147; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkDelete
  ## Deletes the Network resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_596154 = newJObject()
  var query_596155 = newJObject()
  add(query_596155, "api-version", newJString(apiVersion))
  add(path_596154, "networkResourceName", newJString(networkResourceName))
  result = call_596153.call(path_596154, query_596155, nil, nil, nil)

var meshNetworkDelete* = Call_MeshNetworkDelete_596147(name: "meshNetworkDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkDelete_596148, base: "",
    url: url_MeshNetworkDelete_596149, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretList_596156 = ref object of OpenApiRestCall_593439
proc url_MeshSecretList_596158(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshSecretList_596157(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596159 = query.getOrDefault("api-version")
  valid_596159 = validateParameter(valid_596159, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596159 != nil:
    section.add "api-version", valid_596159
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596160: Call_MeshSecretList_596156; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  let valid = call_596160.validator(path, query, header, formData, body)
  let scheme = call_596160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596160.url(scheme.get, call_596160.host, call_596160.base,
                         call_596160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596160, url, valid)

proc call*(call_596161: Call_MeshSecretList_596156;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretList
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596162 = newJObject()
  add(query_596162, "api-version", newJString(apiVersion))
  result = call_596161.call(nil, query_596162, nil, nil, nil)

var meshSecretList* = Call_MeshSecretList_596156(name: "meshSecretList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets", validator: validate_MeshSecretList_596157,
    base: "", url: url_MeshSecretList_596158, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretCreateOrUpdate_596172 = ref object of OpenApiRestCall_593439
proc url_MeshSecretCreateOrUpdate_596174(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretCreateOrUpdate_596173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596175 = path.getOrDefault("secretResourceName")
  valid_596175 = validateParameter(valid_596175, JString, required = true,
                                 default = nil)
  if valid_596175 != nil:
    section.add "secretResourceName", valid_596175
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596176 = query.getOrDefault("api-version")
  valid_596176 = validateParameter(valid_596176, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596176 != nil:
    section.add "api-version", valid_596176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596178: Call_MeshSecretCreateOrUpdate_596172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  let valid = call_596178.validator(path, query, header, formData, body)
  let scheme = call_596178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596178.url(scheme.get, call_596178.host, call_596178.base,
                         call_596178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596178, url, valid)

proc call*(call_596179: Call_MeshSecretCreateOrUpdate_596172;
          secretResourceDescription: JsonNode; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretCreateOrUpdate
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596180 = newJObject()
  var query_596181 = newJObject()
  var body_596182 = newJObject()
  add(query_596181, "api-version", newJString(apiVersion))
  if secretResourceDescription != nil:
    body_596182 = secretResourceDescription
  add(path_596180, "secretResourceName", newJString(secretResourceName))
  result = call_596179.call(path_596180, query_596181, nil, nil, body_596182)

var meshSecretCreateOrUpdate* = Call_MeshSecretCreateOrUpdate_596172(
    name: "meshSecretCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretCreateOrUpdate_596173, base: "",
    url: url_MeshSecretCreateOrUpdate_596174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretGet_596163 = ref object of OpenApiRestCall_593439
proc url_MeshSecretGet_596165(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretGet_596164(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596166 = path.getOrDefault("secretResourceName")
  valid_596166 = validateParameter(valid_596166, JString, required = true,
                                 default = nil)
  if valid_596166 != nil:
    section.add "secretResourceName", valid_596166
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596167 = query.getOrDefault("api-version")
  valid_596167 = validateParameter(valid_596167, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596167 != nil:
    section.add "api-version", valid_596167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596168: Call_MeshSecretGet_596163; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  let valid = call_596168.validator(path, query, header, formData, body)
  let scheme = call_596168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596168.url(scheme.get, call_596168.host, call_596168.base,
                         call_596168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596168, url, valid)

proc call*(call_596169: Call_MeshSecretGet_596163; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretGet
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596170 = newJObject()
  var query_596171 = newJObject()
  add(query_596171, "api-version", newJString(apiVersion))
  add(path_596170, "secretResourceName", newJString(secretResourceName))
  result = call_596169.call(path_596170, query_596171, nil, nil, nil)

var meshSecretGet* = Call_MeshSecretGet_596163(name: "meshSecretGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretGet_596164, base: "", url: url_MeshSecretGet_596165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretDelete_596183 = ref object of OpenApiRestCall_593439
proc url_MeshSecretDelete_596185(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretDelete_596184(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596186 = path.getOrDefault("secretResourceName")
  valid_596186 = validateParameter(valid_596186, JString, required = true,
                                 default = nil)
  if valid_596186 != nil:
    section.add "secretResourceName", valid_596186
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596187 = query.getOrDefault("api-version")
  valid_596187 = validateParameter(valid_596187, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596187 != nil:
    section.add "api-version", valid_596187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596188: Call_MeshSecretDelete_596183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  let valid = call_596188.validator(path, query, header, formData, body)
  let scheme = call_596188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596188.url(scheme.get, call_596188.host, call_596188.base,
                         call_596188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596188, url, valid)

proc call*(call_596189: Call_MeshSecretDelete_596183; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretDelete
  ## Deletes the specified Secret resource and all of its named values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596190 = newJObject()
  var query_596191 = newJObject()
  add(query_596191, "api-version", newJString(apiVersion))
  add(path_596190, "secretResourceName", newJString(secretResourceName))
  result = call_596189.call(path_596190, query_596191, nil, nil, nil)

var meshSecretDelete* = Call_MeshSecretDelete_596183(name: "meshSecretDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretDelete_596184, base: "",
    url: url_MeshSecretDelete_596185, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueList_596192 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueList_596194(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueList_596193(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_596195 = path.getOrDefault("secretResourceName")
  valid_596195 = validateParameter(valid_596195, JString, required = true,
                                 default = nil)
  if valid_596195 != nil:
    section.add "secretResourceName", valid_596195
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596196 = query.getOrDefault("api-version")
  valid_596196 = validateParameter(valid_596196, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596196 != nil:
    section.add "api-version", valid_596196
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596197: Call_MeshSecretValueList_596192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  let valid = call_596197.validator(path, query, header, formData, body)
  let scheme = call_596197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596197.url(scheme.get, call_596197.host, call_596197.base,
                         call_596197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596197, url, valid)

proc call*(call_596198: Call_MeshSecretValueList_596192;
          secretResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueList
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596199 = newJObject()
  var query_596200 = newJObject()
  add(query_596200, "api-version", newJString(apiVersion))
  add(path_596199, "secretResourceName", newJString(secretResourceName))
  result = call_596198.call(path_596199, query_596200, nil, nil, nil)

var meshSecretValueList* = Call_MeshSecretValueList_596192(
    name: "meshSecretValueList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}/values",
    validator: validate_MeshSecretValueList_596193, base: "",
    url: url_MeshSecretValueList_596194, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueAddValue_596211 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueAddValue_596213(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueAddValue_596212(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596214 = path.getOrDefault("secretValueResourceName")
  valid_596214 = validateParameter(valid_596214, JString, required = true,
                                 default = nil)
  if valid_596214 != nil:
    section.add "secretValueResourceName", valid_596214
  var valid_596215 = path.getOrDefault("secretResourceName")
  valid_596215 = validateParameter(valid_596215, JString, required = true,
                                 default = nil)
  if valid_596215 != nil:
    section.add "secretResourceName", valid_596215
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596216 = query.getOrDefault("api-version")
  valid_596216 = validateParameter(valid_596216, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596216 != nil:
    section.add "api-version", valid_596216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596218: Call_MeshSecretValueAddValue_596211; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  let valid = call_596218.validator(path, query, header, formData, body)
  let scheme = call_596218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596218.url(scheme.get, call_596218.host, call_596218.base,
                         call_596218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596218, url, valid)

proc call*(call_596219: Call_MeshSecretValueAddValue_596211;
          secretValueResourceName: string; secretResourceName: string;
          secretValueResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueAddValue
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  var path_596220 = newJObject()
  var query_596221 = newJObject()
  var body_596222 = newJObject()
  add(query_596221, "api-version", newJString(apiVersion))
  add(path_596220, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596220, "secretResourceName", newJString(secretResourceName))
  if secretValueResourceDescription != nil:
    body_596222 = secretValueResourceDescription
  result = call_596219.call(path_596220, query_596221, nil, nil, body_596222)

var meshSecretValueAddValue* = Call_MeshSecretValueAddValue_596211(
    name: "meshSecretValueAddValue", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueAddValue_596212, base: "",
    url: url_MeshSecretValueAddValue_596213, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueGet_596201 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueGet_596203(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueGet_596202(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596204 = path.getOrDefault("secretValueResourceName")
  valid_596204 = validateParameter(valid_596204, JString, required = true,
                                 default = nil)
  if valid_596204 != nil:
    section.add "secretValueResourceName", valid_596204
  var valid_596205 = path.getOrDefault("secretResourceName")
  valid_596205 = validateParameter(valid_596205, JString, required = true,
                                 default = nil)
  if valid_596205 != nil:
    section.add "secretResourceName", valid_596205
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596206 = query.getOrDefault("api-version")
  valid_596206 = validateParameter(valid_596206, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596206 != nil:
    section.add "api-version", valid_596206
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596207: Call_MeshSecretValueGet_596201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  let valid = call_596207.validator(path, query, header, formData, body)
  let scheme = call_596207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596207.url(scheme.get, call_596207.host, call_596207.base,
                         call_596207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596207, url, valid)

proc call*(call_596208: Call_MeshSecretValueGet_596201;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueGet
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596209 = newJObject()
  var query_596210 = newJObject()
  add(query_596210, "api-version", newJString(apiVersion))
  add(path_596209, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596209, "secretResourceName", newJString(secretResourceName))
  result = call_596208.call(path_596209, query_596210, nil, nil, nil)

var meshSecretValueGet* = Call_MeshSecretValueGet_596201(
    name: "meshSecretValueGet", meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueGet_596202, base: "",
    url: url_MeshSecretValueGet_596203, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueDelete_596223 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueDelete_596225(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueDelete_596224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596226 = path.getOrDefault("secretValueResourceName")
  valid_596226 = validateParameter(valid_596226, JString, required = true,
                                 default = nil)
  if valid_596226 != nil:
    section.add "secretValueResourceName", valid_596226
  var valid_596227 = path.getOrDefault("secretResourceName")
  valid_596227 = validateParameter(valid_596227, JString, required = true,
                                 default = nil)
  if valid_596227 != nil:
    section.add "secretResourceName", valid_596227
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596228 = query.getOrDefault("api-version")
  valid_596228 = validateParameter(valid_596228, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596228 != nil:
    section.add "api-version", valid_596228
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596229: Call_MeshSecretValueDelete_596223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  let valid = call_596229.validator(path, query, header, formData, body)
  let scheme = call_596229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596229.url(scheme.get, call_596229.host, call_596229.base,
                         call_596229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596229, url, valid)

proc call*(call_596230: Call_MeshSecretValueDelete_596223;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueDelete
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596231 = newJObject()
  var query_596232 = newJObject()
  add(query_596232, "api-version", newJString(apiVersion))
  add(path_596231, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596231, "secretResourceName", newJString(secretResourceName))
  result = call_596230.call(path_596231, query_596232, nil, nil, nil)

var meshSecretValueDelete* = Call_MeshSecretValueDelete_596223(
    name: "meshSecretValueDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueDelete_596224, base: "",
    url: url_MeshSecretValueDelete_596225, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueShow_596233 = ref object of OpenApiRestCall_593439
proc url_MeshSecretValueShow_596235(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName"),
               (kind: ConstantSegment, value: "/list_value")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueShow_596234(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_596236 = path.getOrDefault("secretValueResourceName")
  valid_596236 = validateParameter(valid_596236, JString, required = true,
                                 default = nil)
  if valid_596236 != nil:
    section.add "secretValueResourceName", valid_596236
  var valid_596237 = path.getOrDefault("secretResourceName")
  valid_596237 = validateParameter(valid_596237, JString, required = true,
                                 default = nil)
  if valid_596237 != nil:
    section.add "secretResourceName", valid_596237
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596238 = query.getOrDefault("api-version")
  valid_596238 = validateParameter(valid_596238, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596238 != nil:
    section.add "api-version", valid_596238
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596239: Call_MeshSecretValueShow_596233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  let valid = call_596239.validator(path, query, header, formData, body)
  let scheme = call_596239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596239.url(scheme.get, call_596239.host, call_596239.base,
                         call_596239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596239, url, valid)

proc call*(call_596240: Call_MeshSecretValueShow_596233;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueShow
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_596241 = newJObject()
  var query_596242 = newJObject()
  add(query_596242, "api-version", newJString(apiVersion))
  add(path_596241, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_596241, "secretResourceName", newJString(secretResourceName))
  result = call_596240.call(path_596241, query_596242, nil, nil, nil)

var meshSecretValueShow* = Call_MeshSecretValueShow_596233(
    name: "meshSecretValueShow", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value",
    validator: validate_MeshSecretValueShow_596234, base: "",
    url: url_MeshSecretValueShow_596235, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeList_596243 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeList_596245(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshVolumeList_596244(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596246 = query.getOrDefault("api-version")
  valid_596246 = validateParameter(valid_596246, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596246 != nil:
    section.add "api-version", valid_596246
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596247: Call_MeshVolumeList_596243; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  let valid = call_596247.validator(path, query, header, formData, body)
  let scheme = call_596247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596247.url(scheme.get, call_596247.host, call_596247.base,
                         call_596247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596247, url, valid)

proc call*(call_596248: Call_MeshVolumeList_596243;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeList
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_596249 = newJObject()
  add(query_596249, "api-version", newJString(apiVersion))
  result = call_596248.call(nil, query_596249, nil, nil, nil)

var meshVolumeList* = Call_MeshVolumeList_596243(name: "meshVolumeList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes", validator: validate_MeshVolumeList_596244,
    base: "", url: url_MeshVolumeList_596245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeCreateOrUpdate_596259 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeCreateOrUpdate_596261(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeCreateOrUpdate_596260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_596262 = path.getOrDefault("volumeResourceName")
  valid_596262 = validateParameter(valid_596262, JString, required = true,
                                 default = nil)
  if valid_596262 != nil:
    section.add "volumeResourceName", valid_596262
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596263 = query.getOrDefault("api-version")
  valid_596263 = validateParameter(valid_596263, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596263 != nil:
    section.add "api-version", valid_596263
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596265: Call_MeshVolumeCreateOrUpdate_596259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_596265.validator(path, query, header, formData, body)
  let scheme = call_596265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596265.url(scheme.get, call_596265.host, call_596265.base,
                         call_596265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596265, url, valid)

proc call*(call_596266: Call_MeshVolumeCreateOrUpdate_596259;
          volumeResourceName: string; volumeResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeCreateOrUpdate
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  var path_596267 = newJObject()
  var query_596268 = newJObject()
  var body_596269 = newJObject()
  add(query_596268, "api-version", newJString(apiVersion))
  add(path_596267, "volumeResourceName", newJString(volumeResourceName))
  if volumeResourceDescription != nil:
    body_596269 = volumeResourceDescription
  result = call_596266.call(path_596267, query_596268, nil, nil, body_596269)

var meshVolumeCreateOrUpdate* = Call_MeshVolumeCreateOrUpdate_596259(
    name: "meshVolumeCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeCreateOrUpdate_596260, base: "",
    url: url_MeshVolumeCreateOrUpdate_596261, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeGet_596250 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeGet_596252(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeGet_596251(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_596253 = path.getOrDefault("volumeResourceName")
  valid_596253 = validateParameter(valid_596253, JString, required = true,
                                 default = nil)
  if valid_596253 != nil:
    section.add "volumeResourceName", valid_596253
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596254 = query.getOrDefault("api-version")
  valid_596254 = validateParameter(valid_596254, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596254 != nil:
    section.add "api-version", valid_596254
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596255: Call_MeshVolumeGet_596250; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  let valid = call_596255.validator(path, query, header, formData, body)
  let scheme = call_596255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596255.url(scheme.get, call_596255.host, call_596255.base,
                         call_596255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596255, url, valid)

proc call*(call_596256: Call_MeshVolumeGet_596250; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeGet
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_596257 = newJObject()
  var query_596258 = newJObject()
  add(query_596258, "api-version", newJString(apiVersion))
  add(path_596257, "volumeResourceName", newJString(volumeResourceName))
  result = call_596256.call(path_596257, query_596258, nil, nil, nil)

var meshVolumeGet* = Call_MeshVolumeGet_596250(name: "meshVolumeGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeGet_596251, base: "", url: url_MeshVolumeGet_596252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeDelete_596270 = ref object of OpenApiRestCall_593439
proc url_MeshVolumeDelete_596272(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeDelete_596271(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the Volume resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_596273 = path.getOrDefault("volumeResourceName")
  valid_596273 = validateParameter(valid_596273, JString, required = true,
                                 default = nil)
  if valid_596273 != nil:
    section.add "volumeResourceName", valid_596273
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596274 = query.getOrDefault("api-version")
  valid_596274 = validateParameter(valid_596274, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_596274 != nil:
    section.add "api-version", valid_596274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596275: Call_MeshVolumeDelete_596270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Volume resource identified by the name.
  ## 
  let valid = call_596275.validator(path, query, header, formData, body)
  let scheme = call_596275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596275.url(scheme.get, call_596275.host, call_596275.base,
                         call_596275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596275, url, valid)

proc call*(call_596276: Call_MeshVolumeDelete_596270; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeDelete
  ## Deletes the Volume resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_596277 = newJObject()
  var query_596278 = newJObject()
  add(query_596278, "api-version", newJString(apiVersion))
  add(path_596277, "volumeResourceName", newJString(volumeResourceName))
  result = call_596276.call(path_596277, query_596278, nil, nil, nil)

var meshVolumeDelete* = Call_MeshVolumeDelete_596270(name: "meshVolumeDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeDelete_596271, base: "",
    url: url_MeshVolumeDelete_596272, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverServicePartitions_596279 = ref object of OpenApiRestCall_593439
proc url_RecoverServicePartitions_596281(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/$/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverServicePartitions_596280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596282 = path.getOrDefault("serviceId")
  valid_596282 = validateParameter(valid_596282, JString, required = true,
                                 default = nil)
  if valid_596282 != nil:
    section.add "serviceId", valid_596282
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596283 = query.getOrDefault("timeout")
  valid_596283 = validateParameter(valid_596283, JInt, required = false,
                                 default = newJInt(60))
  if valid_596283 != nil:
    section.add "timeout", valid_596283
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596284 = query.getOrDefault("api-version")
  valid_596284 = validateParameter(valid_596284, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596284 != nil:
    section.add "api-version", valid_596284
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596285: Call_RecoverServicePartitions_596279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_596285.validator(path, query, header, formData, body)
  let scheme = call_596285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596285.url(scheme.get, call_596285.host, call_596285.base,
                         call_596285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596285, url, valid)

proc call*(call_596286: Call_RecoverServicePartitions_596279; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverServicePartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596287 = newJObject()
  var query_596288 = newJObject()
  add(query_596288, "timeout", newJInt(timeout))
  add(query_596288, "api-version", newJString(apiVersion))
  add(path_596287, "serviceId", newJString(serviceId))
  result = call_596286.call(path_596287, query_596288, nil, nil, nil)

var recoverServicePartitions* = Call_RecoverServicePartitions_596279(
    name: "recoverServicePartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Services/$/{serviceId}/$/GetPartitions/$/Recover",
    validator: validate_RecoverServicePartitions_596280, base: "",
    url: url_RecoverServicePartitions_596281, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteService_596289 = ref object of OpenApiRestCall_593439
proc url_DeleteService_596291(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteService_596290(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596292 = path.getOrDefault("serviceId")
  valid_596292 = validateParameter(valid_596292, JString, required = true,
                                 default = nil)
  if valid_596292 != nil:
    section.add "serviceId", valid_596292
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_596293 = query.getOrDefault("timeout")
  valid_596293 = validateParameter(valid_596293, JInt, required = false,
                                 default = newJInt(60))
  if valid_596293 != nil:
    section.add "timeout", valid_596293
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596294 = query.getOrDefault("api-version")
  valid_596294 = validateParameter(valid_596294, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596294 != nil:
    section.add "api-version", valid_596294
  var valid_596295 = query.getOrDefault("ForceRemove")
  valid_596295 = validateParameter(valid_596295, JBool, required = false, default = nil)
  if valid_596295 != nil:
    section.add "ForceRemove", valid_596295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596296: Call_DeleteService_596289; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  let valid = call_596296.validator(path, query, header, formData, body)
  let scheme = call_596296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596296.url(scheme.get, call_596296.host, call_596296.base,
                         call_596296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596296, url, valid)

proc call*(call_596297: Call_DeleteService_596289; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteService
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596298 = newJObject()
  var query_596299 = newJObject()
  add(query_596299, "timeout", newJInt(timeout))
  add(query_596299, "api-version", newJString(apiVersion))
  add(query_596299, "ForceRemove", newJBool(ForceRemove))
  add(path_596298, "serviceId", newJString(serviceId))
  result = call_596297.call(path_596298, query_596299, nil, nil, nil)

var deleteService* = Call_DeleteService_596289(name: "deleteService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Delete", validator: validate_DeleteService_596290,
    base: "", url: url_DeleteService_596291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableServiceBackup_596300 = ref object of OpenApiRestCall_593439
proc url_DisableServiceBackup_596302(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableServiceBackup_596301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596303 = path.getOrDefault("serviceId")
  valid_596303 = validateParameter(valid_596303, JString, required = true,
                                 default = nil)
  if valid_596303 != nil:
    section.add "serviceId", valid_596303
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596304 = query.getOrDefault("timeout")
  valid_596304 = validateParameter(valid_596304, JInt, required = false,
                                 default = newJInt(60))
  if valid_596304 != nil:
    section.add "timeout", valid_596304
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596305 = query.getOrDefault("api-version")
  valid_596305 = validateParameter(valid_596305, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596305 != nil:
    section.add "api-version", valid_596305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596307: Call_DisableServiceBackup_596300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  let valid = call_596307.validator(path, query, header, formData, body)
  let scheme = call_596307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596307.url(scheme.get, call_596307.host, call_596307.base,
                         call_596307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596307, url, valid)

proc call*(call_596308: Call_DisableServiceBackup_596300; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableServiceBackup
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596309 = newJObject()
  var query_596310 = newJObject()
  var body_596311 = newJObject()
  add(query_596310, "timeout", newJInt(timeout))
  add(query_596310, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_596311 = DisableBackupDescription
  add(path_596309, "serviceId", newJString(serviceId))
  result = call_596308.call(path_596309, query_596310, nil, nil, body_596311)

var disableServiceBackup* = Call_DisableServiceBackup_596300(
    name: "disableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/DisableBackup",
    validator: validate_DisableServiceBackup_596301, base: "",
    url: url_DisableServiceBackup_596302, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableServiceBackup_596312 = ref object of OpenApiRestCall_593439
proc url_EnableServiceBackup_596314(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableServiceBackup_596313(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596315 = path.getOrDefault("serviceId")
  valid_596315 = validateParameter(valid_596315, JString, required = true,
                                 default = nil)
  if valid_596315 != nil:
    section.add "serviceId", valid_596315
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596316 = query.getOrDefault("timeout")
  valid_596316 = validateParameter(valid_596316, JInt, required = false,
                                 default = newJInt(60))
  if valid_596316 != nil:
    section.add "timeout", valid_596316
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596317 = query.getOrDefault("api-version")
  valid_596317 = validateParameter(valid_596317, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596317 != nil:
    section.add "api-version", valid_596317
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596319: Call_EnableServiceBackup_596312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_596319.validator(path, query, header, formData, body)
  let scheme = call_596319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596319.url(scheme.get, call_596319.host, call_596319.base,
                         call_596319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596319, url, valid)

proc call*(call_596320: Call_EnableServiceBackup_596312;
          EnableBackupDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enableServiceBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596321 = newJObject()
  var query_596322 = newJObject()
  var body_596323 = newJObject()
  add(query_596322, "timeout", newJInt(timeout))
  add(query_596322, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_596323 = EnableBackupDescription
  add(path_596321, "serviceId", newJString(serviceId))
  result = call_596320.call(path_596321, query_596322, nil, nil, body_596323)

var enableServiceBackup* = Call_EnableServiceBackup_596312(
    name: "enableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/EnableBackup",
    validator: validate_EnableServiceBackup_596313, base: "",
    url: url_EnableServiceBackup_596314, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationNameInfo_596324 = ref object of OpenApiRestCall_593439
proc url_GetApplicationNameInfo_596326(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetApplicationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationNameInfo_596325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596327 = path.getOrDefault("serviceId")
  valid_596327 = validateParameter(valid_596327, JString, required = true,
                                 default = nil)
  if valid_596327 != nil:
    section.add "serviceId", valid_596327
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596328 = query.getOrDefault("timeout")
  valid_596328 = validateParameter(valid_596328, JInt, required = false,
                                 default = newJInt(60))
  if valid_596328 != nil:
    section.add "timeout", valid_596328
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596329 = query.getOrDefault("api-version")
  valid_596329 = validateParameter(valid_596329, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596329 != nil:
    section.add "api-version", valid_596329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596330: Call_GetApplicationNameInfo_596324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  let valid = call_596330.validator(path, query, header, formData, body)
  let scheme = call_596330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596330.url(scheme.get, call_596330.host, call_596330.base,
                         call_596330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596330, url, valid)

proc call*(call_596331: Call_GetApplicationNameInfo_596324; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationNameInfo
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596332 = newJObject()
  var query_596333 = newJObject()
  add(query_596333, "timeout", newJInt(timeout))
  add(query_596333, "api-version", newJString(apiVersion))
  add(path_596332, "serviceId", newJString(serviceId))
  result = call_596331.call(path_596332, query_596333, nil, nil, nil)

var getApplicationNameInfo* = Call_GetApplicationNameInfo_596324(
    name: "getApplicationNameInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetApplicationName",
    validator: validate_GetApplicationNameInfo_596325, base: "",
    url: url_GetApplicationNameInfo_596326, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupConfigurationInfo_596334 = ref object of OpenApiRestCall_593439
proc url_GetServiceBackupConfigurationInfo_596336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupConfigurationInfo_596335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596337 = path.getOrDefault("serviceId")
  valid_596337 = validateParameter(valid_596337, JString, required = true,
                                 default = nil)
  if valid_596337 != nil:
    section.add "serviceId", valid_596337
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_596338 = query.getOrDefault("timeout")
  valid_596338 = validateParameter(valid_596338, JInt, required = false,
                                 default = newJInt(60))
  if valid_596338 != nil:
    section.add "timeout", valid_596338
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596339 = query.getOrDefault("api-version")
  valid_596339 = validateParameter(valid_596339, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596339 != nil:
    section.add "api-version", valid_596339
  var valid_596340 = query.getOrDefault("ContinuationToken")
  valid_596340 = validateParameter(valid_596340, JString, required = false,
                                 default = nil)
  if valid_596340 != nil:
    section.add "ContinuationToken", valid_596340
  var valid_596341 = query.getOrDefault("MaxResults")
  valid_596341 = validateParameter(valid_596341, JInt, required = false,
                                 default = newJInt(0))
  if valid_596341 != nil:
    section.add "MaxResults", valid_596341
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596342: Call_GetServiceBackupConfigurationInfo_596334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  let valid = call_596342.validator(path, query, header, formData, body)
  let scheme = call_596342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596342.url(scheme.get, call_596342.host, call_596342.base,
                         call_596342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596342, url, valid)

proc call*(call_596343: Call_GetServiceBackupConfigurationInfo_596334;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_596344 = newJObject()
  var query_596345 = newJObject()
  add(query_596345, "timeout", newJInt(timeout))
  add(query_596345, "api-version", newJString(apiVersion))
  add(path_596344, "serviceId", newJString(serviceId))
  add(query_596345, "ContinuationToken", newJString(ContinuationToken))
  add(query_596345, "MaxResults", newJInt(MaxResults))
  result = call_596343.call(path_596344, query_596345, nil, nil, nil)

var getServiceBackupConfigurationInfo* = Call_GetServiceBackupConfigurationInfo_596334(
    name: "getServiceBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetBackupConfigurationInfo",
    validator: validate_GetServiceBackupConfigurationInfo_596335, base: "",
    url: url_GetServiceBackupConfigurationInfo_596336,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupList_596346 = ref object of OpenApiRestCall_593439
proc url_GetServiceBackupList_596348(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupList_596347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596349 = path.getOrDefault("serviceId")
  valid_596349 = validateParameter(valid_596349, JString, required = true,
                                 default = nil)
  if valid_596349 != nil:
    section.add "serviceId", valid_596349
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_596350 = query.getOrDefault("timeout")
  valid_596350 = validateParameter(valid_596350, JInt, required = false,
                                 default = newJInt(60))
  if valid_596350 != nil:
    section.add "timeout", valid_596350
  var valid_596351 = query.getOrDefault("Latest")
  valid_596351 = validateParameter(valid_596351, JBool, required = false,
                                 default = newJBool(false))
  if valid_596351 != nil:
    section.add "Latest", valid_596351
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596352 = query.getOrDefault("api-version")
  valid_596352 = validateParameter(valid_596352, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596352 != nil:
    section.add "api-version", valid_596352
  var valid_596353 = query.getOrDefault("StartDateTimeFilter")
  valid_596353 = validateParameter(valid_596353, JString, required = false,
                                 default = nil)
  if valid_596353 != nil:
    section.add "StartDateTimeFilter", valid_596353
  var valid_596354 = query.getOrDefault("EndDateTimeFilter")
  valid_596354 = validateParameter(valid_596354, JString, required = false,
                                 default = nil)
  if valid_596354 != nil:
    section.add "EndDateTimeFilter", valid_596354
  var valid_596355 = query.getOrDefault("ContinuationToken")
  valid_596355 = validateParameter(valid_596355, JString, required = false,
                                 default = nil)
  if valid_596355 != nil:
    section.add "ContinuationToken", valid_596355
  var valid_596356 = query.getOrDefault("MaxResults")
  valid_596356 = validateParameter(valid_596356, JInt, required = false,
                                 default = newJInt(0))
  if valid_596356 != nil:
    section.add "MaxResults", valid_596356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596357: Call_GetServiceBackupList_596346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_596357.validator(path, query, header, formData, body)
  let scheme = call_596357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596357.url(scheme.get, call_596357.host, call_596357.base,
                         call_596357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596357, url, valid)

proc call*(call_596358: Call_GetServiceBackupList_596346; serviceId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupList
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_596359 = newJObject()
  var query_596360 = newJObject()
  add(query_596360, "timeout", newJInt(timeout))
  add(query_596360, "Latest", newJBool(Latest))
  add(query_596360, "api-version", newJString(apiVersion))
  add(query_596360, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_596360, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_596359, "serviceId", newJString(serviceId))
  add(query_596360, "ContinuationToken", newJString(ContinuationToken))
  add(query_596360, "MaxResults", newJInt(MaxResults))
  result = call_596358.call(path_596359, query_596360, nil, nil, nil)

var getServiceBackupList* = Call_GetServiceBackupList_596346(
    name: "getServiceBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetBackups",
    validator: validate_GetServiceBackupList_596347, base: "",
    url: url_GetServiceBackupList_596348, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceDescription_596361 = ref object of OpenApiRestCall_593439
proc url_GetServiceDescription_596363(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetDescription")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceDescription_596362(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596364 = path.getOrDefault("serviceId")
  valid_596364 = validateParameter(valid_596364, JString, required = true,
                                 default = nil)
  if valid_596364 != nil:
    section.add "serviceId", valid_596364
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596365 = query.getOrDefault("timeout")
  valid_596365 = validateParameter(valid_596365, JInt, required = false,
                                 default = newJInt(60))
  if valid_596365 != nil:
    section.add "timeout", valid_596365
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596366 = query.getOrDefault("api-version")
  valid_596366 = validateParameter(valid_596366, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596366 != nil:
    section.add "api-version", valid_596366
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596367: Call_GetServiceDescription_596361; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  let valid = call_596367.validator(path, query, header, formData, body)
  let scheme = call_596367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596367.url(scheme.get, call_596367.host, call_596367.base,
                         call_596367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596367, url, valid)

proc call*(call_596368: Call_GetServiceDescription_596361; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceDescription
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596369 = newJObject()
  var query_596370 = newJObject()
  add(query_596370, "timeout", newJInt(timeout))
  add(query_596370, "api-version", newJString(apiVersion))
  add(path_596369, "serviceId", newJString(serviceId))
  result = call_596368.call(path_596369, query_596370, nil, nil, nil)

var getServiceDescription* = Call_GetServiceDescription_596361(
    name: "getServiceDescription", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetDescription",
    validator: validate_GetServiceDescription_596362, base: "",
    url: url_GetServiceDescription_596363, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealthUsingPolicy_596384 = ref object of OpenApiRestCall_593439
proc url_GetServiceHealthUsingPolicy_596386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealthUsingPolicy_596385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596387 = path.getOrDefault("serviceId")
  valid_596387 = validateParameter(valid_596387, JString, required = true,
                                 default = nil)
  if valid_596387 != nil:
    section.add "serviceId", valid_596387
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_596388 = query.getOrDefault("timeout")
  valid_596388 = validateParameter(valid_596388, JInt, required = false,
                                 default = newJInt(60))
  if valid_596388 != nil:
    section.add "timeout", valid_596388
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596389 = query.getOrDefault("api-version")
  valid_596389 = validateParameter(valid_596389, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596389 != nil:
    section.add "api-version", valid_596389
  var valid_596390 = query.getOrDefault("ExcludeHealthStatistics")
  valid_596390 = validateParameter(valid_596390, JBool, required = false,
                                 default = newJBool(false))
  if valid_596390 != nil:
    section.add "ExcludeHealthStatistics", valid_596390
  var valid_596391 = query.getOrDefault("EventsHealthStateFilter")
  valid_596391 = validateParameter(valid_596391, JInt, required = false,
                                 default = newJInt(0))
  if valid_596391 != nil:
    section.add "EventsHealthStateFilter", valid_596391
  var valid_596392 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_596392 = validateParameter(valid_596392, JInt, required = false,
                                 default = newJInt(0))
  if valid_596392 != nil:
    section.add "PartitionsHealthStateFilter", valid_596392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596394: Call_GetServiceHealthUsingPolicy_596384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_596394.validator(path, query, header, formData, body)
  let scheme = call_596394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596394.url(scheme.get, call_596394.host, call_596394.base,
                         call_596394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596394, url, valid)

proc call*(call_596395: Call_GetServiceHealthUsingPolicy_596384; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealthUsingPolicy
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_596396 = newJObject()
  var query_596397 = newJObject()
  var body_596398 = newJObject()
  add(query_596397, "timeout", newJInt(timeout))
  add(query_596397, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_596398 = ApplicationHealthPolicy
  add(query_596397, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_596397, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_596396, "serviceId", newJString(serviceId))
  add(query_596397, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_596395.call(path_596396, query_596397, nil, nil, body_596398)

var getServiceHealthUsingPolicy* = Call_GetServiceHealthUsingPolicy_596384(
    name: "getServiceHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealthUsingPolicy_596385, base: "",
    url: url_GetServiceHealthUsingPolicy_596386,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealth_596371 = ref object of OpenApiRestCall_593439
proc url_GetServiceHealth_596373(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealth_596372(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596374 = path.getOrDefault("serviceId")
  valid_596374 = validateParameter(valid_596374, JString, required = true,
                                 default = nil)
  if valid_596374 != nil:
    section.add "serviceId", valid_596374
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_596375 = query.getOrDefault("timeout")
  valid_596375 = validateParameter(valid_596375, JInt, required = false,
                                 default = newJInt(60))
  if valid_596375 != nil:
    section.add "timeout", valid_596375
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596376 = query.getOrDefault("api-version")
  valid_596376 = validateParameter(valid_596376, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596376 != nil:
    section.add "api-version", valid_596376
  var valid_596377 = query.getOrDefault("ExcludeHealthStatistics")
  valid_596377 = validateParameter(valid_596377, JBool, required = false,
                                 default = newJBool(false))
  if valid_596377 != nil:
    section.add "ExcludeHealthStatistics", valid_596377
  var valid_596378 = query.getOrDefault("EventsHealthStateFilter")
  valid_596378 = validateParameter(valid_596378, JInt, required = false,
                                 default = newJInt(0))
  if valid_596378 != nil:
    section.add "EventsHealthStateFilter", valid_596378
  var valid_596379 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_596379 = validateParameter(valid_596379, JInt, required = false,
                                 default = newJInt(0))
  if valid_596379 != nil:
    section.add "PartitionsHealthStateFilter", valid_596379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596380: Call_GetServiceHealth_596371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_596380.validator(path, query, header, formData, body)
  let scheme = call_596380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596380.url(scheme.get, call_596380.host, call_596380.base,
                         call_596380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596380, url, valid)

proc call*(call_596381: Call_GetServiceHealth_596371; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealth
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_596382 = newJObject()
  var query_596383 = newJObject()
  add(query_596383, "timeout", newJInt(timeout))
  add(query_596383, "api-version", newJString(apiVersion))
  add(query_596383, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_596383, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_596382, "serviceId", newJString(serviceId))
  add(query_596383, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_596381.call(path_596382, query_596383, nil, nil, nil)

var getServiceHealth* = Call_GetServiceHealth_596371(name: "getServiceHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealth_596372, base: "",
    url: url_GetServiceHealth_596373, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfoList_596399 = ref object of OpenApiRestCall_593439
proc url_GetPartitionInfoList_596401(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfoList_596400(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596402 = path.getOrDefault("serviceId")
  valid_596402 = validateParameter(valid_596402, JString, required = true,
                                 default = nil)
  if valid_596402 != nil:
    section.add "serviceId", valid_596402
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_596403 = query.getOrDefault("timeout")
  valid_596403 = validateParameter(valid_596403, JInt, required = false,
                                 default = newJInt(60))
  if valid_596403 != nil:
    section.add "timeout", valid_596403
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596404 = query.getOrDefault("api-version")
  valid_596404 = validateParameter(valid_596404, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596404 != nil:
    section.add "api-version", valid_596404
  var valid_596405 = query.getOrDefault("ContinuationToken")
  valid_596405 = validateParameter(valid_596405, JString, required = false,
                                 default = nil)
  if valid_596405 != nil:
    section.add "ContinuationToken", valid_596405
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596406: Call_GetPartitionInfoList_596399; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_596406.validator(path, query, header, formData, body)
  let scheme = call_596406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596406.url(scheme.get, call_596406.host, call_596406.base,
                         call_596406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596406, url, valid)

proc call*(call_596407: Call_GetPartitionInfoList_596399; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"; ContinuationToken: string = ""): Recallable =
  ## getPartitionInfoList
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_596408 = newJObject()
  var query_596409 = newJObject()
  add(query_596409, "timeout", newJInt(timeout))
  add(query_596409, "api-version", newJString(apiVersion))
  add(path_596408, "serviceId", newJString(serviceId))
  add(query_596409, "ContinuationToken", newJString(ContinuationToken))
  result = call_596407.call(path_596408, query_596409, nil, nil, nil)

var getPartitionInfoList* = Call_GetPartitionInfoList_596399(
    name: "getPartitionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetPartitions",
    validator: validate_GetPartitionInfoList_596400, base: "",
    url: url_GetPartitionInfoList_596401, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportServiceHealth_596410 = ref object of OpenApiRestCall_593439
proc url_ReportServiceHealth_596412(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportServiceHealth_596411(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596413 = path.getOrDefault("serviceId")
  valid_596413 = validateParameter(valid_596413, JString, required = true,
                                 default = nil)
  if valid_596413 != nil:
    section.add "serviceId", valid_596413
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596414 = query.getOrDefault("Immediate")
  valid_596414 = validateParameter(valid_596414, JBool, required = false,
                                 default = newJBool(false))
  if valid_596414 != nil:
    section.add "Immediate", valid_596414
  var valid_596415 = query.getOrDefault("timeout")
  valid_596415 = validateParameter(valid_596415, JInt, required = false,
                                 default = newJInt(60))
  if valid_596415 != nil:
    section.add "timeout", valid_596415
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596416 = query.getOrDefault("api-version")
  valid_596416 = validateParameter(valid_596416, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596416 != nil:
    section.add "api-version", valid_596416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596418: Call_ReportServiceHealth_596410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_596418.validator(path, query, header, formData, body)
  let scheme = call_596418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596418.url(scheme.get, call_596418.host, call_596418.base,
                         call_596418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596418, url, valid)

proc call*(call_596419: Call_ReportServiceHealth_596410;
          HealthInformation: JsonNode; serviceId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportServiceHealth
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596420 = newJObject()
  var query_596421 = newJObject()
  var body_596422 = newJObject()
  add(query_596421, "Immediate", newJBool(Immediate))
  add(query_596421, "timeout", newJInt(timeout))
  add(query_596421, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_596422 = HealthInformation
  add(path_596420, "serviceId", newJString(serviceId))
  result = call_596419.call(path_596420, query_596421, nil, nil, body_596422)

var reportServiceHealth* = Call_ReportServiceHealth_596410(
    name: "reportServiceHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ReportHealth",
    validator: validate_ReportServiceHealth_596411, base: "",
    url: url_ReportServiceHealth_596412, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResolveService_596423 = ref object of OpenApiRestCall_593439
proc url_ResolveService_596425(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResolvePartition")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResolveService_596424(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596426 = path.getOrDefault("serviceId")
  valid_596426 = validateParameter(valid_596426, JString, required = true,
                                 default = nil)
  if valid_596426 != nil:
    section.add "serviceId", valid_596426
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: JString
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: JInt
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   PreviousRspVersion: JString
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  section = newJObject()
  var valid_596427 = query.getOrDefault("timeout")
  valid_596427 = validateParameter(valid_596427, JInt, required = false,
                                 default = newJInt(60))
  if valid_596427 != nil:
    section.add "timeout", valid_596427
  var valid_596428 = query.getOrDefault("PartitionKeyValue")
  valid_596428 = validateParameter(valid_596428, JString, required = false,
                                 default = nil)
  if valid_596428 != nil:
    section.add "PartitionKeyValue", valid_596428
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596429 = query.getOrDefault("api-version")
  valid_596429 = validateParameter(valid_596429, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596429 != nil:
    section.add "api-version", valid_596429
  var valid_596430 = query.getOrDefault("PartitionKeyType")
  valid_596430 = validateParameter(valid_596430, JInt, required = false, default = nil)
  if valid_596430 != nil:
    section.add "PartitionKeyType", valid_596430
  var valid_596431 = query.getOrDefault("PreviousRspVersion")
  valid_596431 = validateParameter(valid_596431, JString, required = false,
                                 default = nil)
  if valid_596431 != nil:
    section.add "PreviousRspVersion", valid_596431
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596432: Call_ResolveService_596423; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  let valid = call_596432.validator(path, query, header, formData, body)
  let scheme = call_596432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596432.url(scheme.get, call_596432.host, call_596432.base,
                         call_596432.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596432, url, valid)

proc call*(call_596433: Call_ResolveService_596423; serviceId: string;
          timeout: int = 60; PartitionKeyValue: string = ""; apiVersion: string = "6.0";
          PartitionKeyType: int = 0; PreviousRspVersion: string = ""): Recallable =
  ## resolveService
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: string
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: int
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PreviousRspVersion: string
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  var path_596434 = newJObject()
  var query_596435 = newJObject()
  add(query_596435, "timeout", newJInt(timeout))
  add(query_596435, "PartitionKeyValue", newJString(PartitionKeyValue))
  add(query_596435, "api-version", newJString(apiVersion))
  add(query_596435, "PartitionKeyType", newJInt(PartitionKeyType))
  add(path_596434, "serviceId", newJString(serviceId))
  add(query_596435, "PreviousRspVersion", newJString(PreviousRspVersion))
  result = call_596433.call(path_596434, query_596435, nil, nil, nil)

var resolveService* = Call_ResolveService_596423(name: "resolveService",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/ResolvePartition",
    validator: validate_ResolveService_596424, base: "", url: url_ResolveService_596425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeServiceBackup_596436 = ref object of OpenApiRestCall_593439
proc url_ResumeServiceBackup_596438(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeServiceBackup_596437(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596439 = path.getOrDefault("serviceId")
  valid_596439 = validateParameter(valid_596439, JString, required = true,
                                 default = nil)
  if valid_596439 != nil:
    section.add "serviceId", valid_596439
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596440 = query.getOrDefault("timeout")
  valid_596440 = validateParameter(valid_596440, JInt, required = false,
                                 default = newJInt(60))
  if valid_596440 != nil:
    section.add "timeout", valid_596440
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596441 = query.getOrDefault("api-version")
  valid_596441 = validateParameter(valid_596441, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596441 != nil:
    section.add "api-version", valid_596441
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596442: Call_ResumeServiceBackup_596436; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_596442.validator(path, query, header, formData, body)
  let scheme = call_596442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596442.url(scheme.get, call_596442.host, call_596442.base,
                         call_596442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596442, url, valid)

proc call*(call_596443: Call_ResumeServiceBackup_596436; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeServiceBackup
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596444 = newJObject()
  var query_596445 = newJObject()
  add(query_596445, "timeout", newJInt(timeout))
  add(query_596445, "api-version", newJString(apiVersion))
  add(path_596444, "serviceId", newJString(serviceId))
  result = call_596443.call(path_596444, query_596445, nil, nil, nil)

var resumeServiceBackup* = Call_ResumeServiceBackup_596436(
    name: "resumeServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ResumeBackup",
    validator: validate_ResumeServiceBackup_596437, base: "",
    url: url_ResumeServiceBackup_596438, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendServiceBackup_596446 = ref object of OpenApiRestCall_593439
proc url_SuspendServiceBackup_596448(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendServiceBackup_596447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596449 = path.getOrDefault("serviceId")
  valid_596449 = validateParameter(valid_596449, JString, required = true,
                                 default = nil)
  if valid_596449 != nil:
    section.add "serviceId", valid_596449
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596450 = query.getOrDefault("timeout")
  valid_596450 = validateParameter(valid_596450, JInt, required = false,
                                 default = newJInt(60))
  if valid_596450 != nil:
    section.add "timeout", valid_596450
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596451 = query.getOrDefault("api-version")
  valid_596451 = validateParameter(valid_596451, JString, required = true,
                                 default = newJString("6.4"))
  if valid_596451 != nil:
    section.add "api-version", valid_596451
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596452: Call_SuspendServiceBackup_596446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  let valid = call_596452.validator(path, query, header, formData, body)
  let scheme = call_596452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596452.url(scheme.get, call_596452.host, call_596452.base,
                         call_596452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596452, url, valid)

proc call*(call_596453: Call_SuspendServiceBackup_596446; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendServiceBackup
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596454 = newJObject()
  var query_596455 = newJObject()
  add(query_596455, "timeout", newJInt(timeout))
  add(query_596455, "api-version", newJString(apiVersion))
  add(path_596454, "serviceId", newJString(serviceId))
  result = call_596453.call(path_596454, query_596455, nil, nil, nil)

var suspendServiceBackup* = Call_SuspendServiceBackup_596446(
    name: "suspendServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/SuspendBackup",
    validator: validate_SuspendServiceBackup_596447, base: "",
    url: url_SuspendServiceBackup_596448, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateService_596456 = ref object of OpenApiRestCall_593439
proc url_UpdateService_596458(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateService_596457(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_596459 = path.getOrDefault("serviceId")
  valid_596459 = validateParameter(valid_596459, JString, required = true,
                                 default = nil)
  if valid_596459 != nil:
    section.add "serviceId", valid_596459
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596460 = query.getOrDefault("timeout")
  valid_596460 = validateParameter(valid_596460, JInt, required = false,
                                 default = newJInt(60))
  if valid_596460 != nil:
    section.add "timeout", valid_596460
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596461 = query.getOrDefault("api-version")
  valid_596461 = validateParameter(valid_596461, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596461 != nil:
    section.add "api-version", valid_596461
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596463: Call_UpdateService_596456; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  let valid = call_596463.validator(path, query, header, formData, body)
  let scheme = call_596463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596463.url(scheme.get, call_596463.host, call_596463.base,
                         call_596463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596463, url, valid)

proc call*(call_596464: Call_UpdateService_596456;
          ServiceUpdateDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateService
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_596465 = newJObject()
  var query_596466 = newJObject()
  var body_596467 = newJObject()
  add(query_596466, "timeout", newJInt(timeout))
  add(query_596466, "api-version", newJString(apiVersion))
  if ServiceUpdateDescription != nil:
    body_596467 = ServiceUpdateDescription
  add(path_596465, "serviceId", newJString(serviceId))
  result = call_596464.call(path_596465, query_596466, nil, nil, body_596467)

var updateService* = Call_UpdateService_596456(name: "updateService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Update", validator: validate_UpdateService_596457,
    base: "", url: url_UpdateService_596458, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaos_596468 = ref object of OpenApiRestCall_593439
proc url_GetChaos_596470(protocol: Scheme; host: string; base: string; route: string;
                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaos_596469(path: JsonNode; query: JsonNode; header: JsonNode;
                             formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596471 = query.getOrDefault("timeout")
  valid_596471 = validateParameter(valid_596471, JInt, required = false,
                                 default = newJInt(60))
  if valid_596471 != nil:
    section.add "timeout", valid_596471
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596472 = query.getOrDefault("api-version")
  valid_596472 = validateParameter(valid_596472, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596472 != nil:
    section.add "api-version", valid_596472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596473: Call_GetChaos_596468; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  let valid = call_596473.validator(path, query, header, formData, body)
  let scheme = call_596473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596473.url(scheme.get, call_596473.host, call_596473.base,
                         call_596473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596473, url, valid)

proc call*(call_596474: Call_GetChaos_596468; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaos
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_596475 = newJObject()
  add(query_596475, "timeout", newJInt(timeout))
  add(query_596475, "api-version", newJString(apiVersion))
  result = call_596474.call(nil, query_596475, nil, nil, nil)

var getChaos* = Call_GetChaos_596468(name: "getChaos", meth: HttpMethod.HttpGet,
                                  host: "azure.local:19080",
                                  route: "/Tools/Chaos",
                                  validator: validate_GetChaos_596469, base: "",
                                  url: url_GetChaos_596470,
                                  schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartChaos_596476 = ref object of OpenApiRestCall_593439
proc url_StartChaos_596478(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartChaos_596477(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596479 = query.getOrDefault("timeout")
  valid_596479 = validateParameter(valid_596479, JInt, required = false,
                                 default = newJInt(60))
  if valid_596479 != nil:
    section.add "timeout", valid_596479
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596480 = query.getOrDefault("api-version")
  valid_596480 = validateParameter(valid_596480, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596480 != nil:
    section.add "api-version", valid_596480
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596482: Call_StartChaos_596476; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  let valid = call_596482.validator(path, query, header, formData, body)
  let scheme = call_596482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596482.url(scheme.get, call_596482.host, call_596482.base,
                         call_596482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596482, url, valid)

proc call*(call_596483: Call_StartChaos_596476; ChaosParameters: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## startChaos
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  var query_596484 = newJObject()
  var body_596485 = newJObject()
  add(query_596484, "timeout", newJInt(timeout))
  add(query_596484, "api-version", newJString(apiVersion))
  if ChaosParameters != nil:
    body_596485 = ChaosParameters
  result = call_596483.call(nil, query_596484, nil, nil, body_596485)

var startChaos* = Call_StartChaos_596476(name: "startChaos",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Tools/Chaos/$/Start",
                                      validator: validate_StartChaos_596477,
                                      base: "", url: url_StartChaos_596478,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopChaos_596486 = ref object of OpenApiRestCall_593439
proc url_StopChaos_596488(protocol: Scheme; host: string; base: string; route: string;
                         path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StopChaos_596487(path: JsonNode; query: JsonNode; header: JsonNode;
                              formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596489 = query.getOrDefault("timeout")
  valid_596489 = validateParameter(valid_596489, JInt, required = false,
                                 default = newJInt(60))
  if valid_596489 != nil:
    section.add "timeout", valid_596489
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596490 = query.getOrDefault("api-version")
  valid_596490 = validateParameter(valid_596490, JString, required = true,
                                 default = newJString("6.0"))
  if valid_596490 != nil:
    section.add "api-version", valid_596490
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596491: Call_StopChaos_596486; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  let valid = call_596491.validator(path, query, header, formData, body)
  let scheme = call_596491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596491.url(scheme.get, call_596491.host, call_596491.base,
                         call_596491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596491, url, valid)

proc call*(call_596492: Call_StopChaos_596486; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## stopChaos
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_596493 = newJObject()
  add(query_596493, "timeout", newJInt(timeout))
  add(query_596493, "api-version", newJString(apiVersion))
  result = call_596492.call(nil, query_596493, nil, nil, nil)

var stopChaos* = Call_StopChaos_596486(name: "stopChaos", meth: HttpMethod.HttpPost,
                                    host: "azure.local:19080",
                                    route: "/Tools/Chaos/$/Stop",
                                    validator: validate_StopChaos_596487,
                                    base: "", url: url_StopChaos_596488,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosEvents_596494 = ref object of OpenApiRestCall_593439
proc url_GetChaosEvents_596496(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosEvents_596495(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: JString
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: JString
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  section = newJObject()
  var valid_596497 = query.getOrDefault("timeout")
  valid_596497 = validateParameter(valid_596497, JInt, required = false,
                                 default = newJInt(60))
  if valid_596497 != nil:
    section.add "timeout", valid_596497
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596498 = query.getOrDefault("api-version")
  valid_596498 = validateParameter(valid_596498, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596498 != nil:
    section.add "api-version", valid_596498
  var valid_596499 = query.getOrDefault("EndTimeUtc")
  valid_596499 = validateParameter(valid_596499, JString, required = false,
                                 default = nil)
  if valid_596499 != nil:
    section.add "EndTimeUtc", valid_596499
  var valid_596500 = query.getOrDefault("ContinuationToken")
  valid_596500 = validateParameter(valid_596500, JString, required = false,
                                 default = nil)
  if valid_596500 != nil:
    section.add "ContinuationToken", valid_596500
  var valid_596501 = query.getOrDefault("MaxResults")
  valid_596501 = validateParameter(valid_596501, JInt, required = false,
                                 default = newJInt(0))
  if valid_596501 != nil:
    section.add "MaxResults", valid_596501
  var valid_596502 = query.getOrDefault("StartTimeUtc")
  valid_596502 = validateParameter(valid_596502, JString, required = false,
                                 default = nil)
  if valid_596502 != nil:
    section.add "StartTimeUtc", valid_596502
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596503: Call_GetChaosEvents_596494; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  let valid = call_596503.validator(path, query, header, formData, body)
  let scheme = call_596503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596503.url(scheme.get, call_596503.host, call_596503.base,
                         call_596503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596503, url, valid)

proc call*(call_596504: Call_GetChaosEvents_596494; timeout: int = 60;
          apiVersion: string = "6.2"; EndTimeUtc: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0; StartTimeUtc: string = ""): Recallable =
  ## getChaosEvents
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: string
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: string
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  var query_596505 = newJObject()
  add(query_596505, "timeout", newJInt(timeout))
  add(query_596505, "api-version", newJString(apiVersion))
  add(query_596505, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_596505, "ContinuationToken", newJString(ContinuationToken))
  add(query_596505, "MaxResults", newJInt(MaxResults))
  add(query_596505, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_596504.call(nil, query_596505, nil, nil, nil)

var getChaosEvents* = Call_GetChaosEvents_596494(name: "getChaosEvents",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Events", validator: validate_GetChaosEvents_596495,
    base: "", url: url_GetChaosEvents_596496, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChaosSchedule_596514 = ref object of OpenApiRestCall_593439
proc url_PostChaosSchedule_596516(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostChaosSchedule_596515(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596517 = query.getOrDefault("timeout")
  valid_596517 = validateParameter(valid_596517, JInt, required = false,
                                 default = newJInt(60))
  if valid_596517 != nil:
    section.add "timeout", valid_596517
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596518 = query.getOrDefault("api-version")
  valid_596518 = validateParameter(valid_596518, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596518 != nil:
    section.add "api-version", valid_596518
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596520: Call_PostChaosSchedule_596514; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  let valid = call_596520.validator(path, query, header, formData, body)
  let scheme = call_596520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596520.url(scheme.get, call_596520.host, call_596520.base,
                         call_596520.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596520, url, valid)

proc call*(call_596521: Call_PostChaosSchedule_596514; ChaosSchedule: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## postChaosSchedule
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  var query_596522 = newJObject()
  var body_596523 = newJObject()
  add(query_596522, "timeout", newJInt(timeout))
  add(query_596522, "api-version", newJString(apiVersion))
  if ChaosSchedule != nil:
    body_596523 = ChaosSchedule
  result = call_596521.call(nil, query_596522, nil, nil, body_596523)

var postChaosSchedule* = Call_PostChaosSchedule_596514(name: "postChaosSchedule",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_PostChaosSchedule_596515,
    base: "", url: url_PostChaosSchedule_596516,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosSchedule_596506 = ref object of OpenApiRestCall_593439
proc url_GetChaosSchedule_596508(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosSchedule_596507(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_596509 = query.getOrDefault("timeout")
  valid_596509 = validateParameter(valid_596509, JInt, required = false,
                                 default = newJInt(60))
  if valid_596509 != nil:
    section.add "timeout", valid_596509
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596510 = query.getOrDefault("api-version")
  valid_596510 = validateParameter(valid_596510, JString, required = true,
                                 default = newJString("6.2"))
  if valid_596510 != nil:
    section.add "api-version", valid_596510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596511: Call_GetChaosSchedule_596506; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  let valid = call_596511.validator(path, query, header, formData, body)
  let scheme = call_596511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596511.url(scheme.get, call_596511.host, call_596511.base,
                         call_596511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596511, url, valid)

proc call*(call_596512: Call_GetChaosSchedule_596506; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaosSchedule
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_596513 = newJObject()
  add(query_596513, "timeout", newJInt(timeout))
  add(query_596513, "api-version", newJString(apiVersion))
  result = call_596512.call(nil, query_596513, nil, nil, nil)

var getChaosSchedule* = Call_GetChaosSchedule_596506(name: "getChaosSchedule",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_GetChaosSchedule_596507,
    base: "", url: url_GetChaosSchedule_596508, schemes: {Scheme.Https, Scheme.Http})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
