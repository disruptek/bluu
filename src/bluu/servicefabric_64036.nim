
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: Service Fabric Client APIs
## version: 6.4.0.36
## termsOfService: (not provided)
## license: (not provided)
## 
## Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567668 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567668](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567668): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "servicefabric"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_CancelRepairTask_567890 = ref object of OpenApiRestCall_567668
proc url_CancelRepairTask_567892(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelRepairTask_567891(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568081 = query.getOrDefault("api-version")
  valid_568081 = validateParameter(valid_568081, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568081 != nil:
    section.add "api-version", valid_568081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568105: Call_CancelRepairTask_567890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568105.validator(path, query, header, formData, body)
  let scheme = call_568105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568105.url(scheme.get, call_568105.host, call_568105.base,
                         call_568105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568105, url, valid)

proc call*(call_568176: Call_CancelRepairTask_567890;
          RepairTaskCancelDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## cancelRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  var query_568177 = newJObject()
  var body_568179 = newJObject()
  add(query_568177, "api-version", newJString(apiVersion))
  if RepairTaskCancelDescription != nil:
    body_568179 = RepairTaskCancelDescription
  result = call_568176.call(nil, query_568177, nil, nil, body_568179)

var cancelRepairTask* = Call_CancelRepairTask_567890(name: "cancelRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CancelRepairTask", validator: validate_CancelRepairTask_567891,
    base: "", url: url_CancelRepairTask_567892, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRepairTask_568218 = ref object of OpenApiRestCall_567668
proc url_CreateRepairTask_568220(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateRepairTask_568219(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568221 = query.getOrDefault("api-version")
  valid_568221 = validateParameter(valid_568221, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568221 != nil:
    section.add "api-version", valid_568221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568223: Call_CreateRepairTask_568218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568223.validator(path, query, header, formData, body)
  let scheme = call_568223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568223.url(scheme.get, call_568223.host, call_568223.base,
                         call_568223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568223, url, valid)

proc call*(call_568224: Call_CreateRepairTask_568218; RepairTask: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## createRepairTask
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568225 = newJObject()
  var body_568226 = newJObject()
  if RepairTask != nil:
    body_568226 = RepairTask
  add(query_568225, "api-version", newJString(apiVersion))
  result = call_568224.call(nil, query_568225, nil, nil, body_568226)

var createRepairTask* = Call_CreateRepairTask_568218(name: "createRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CreateRepairTask", validator: validate_CreateRepairTask_568219,
    base: "", url: url_CreateRepairTask_568220, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRepairTask_568227 = ref object of OpenApiRestCall_567668
proc url_DeleteRepairTask_568229(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteRepairTask_568228(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568230 = query.getOrDefault("api-version")
  valid_568230 = validateParameter(valid_568230, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568230 != nil:
    section.add "api-version", valid_568230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568232: Call_DeleteRepairTask_568227; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568232.validator(path, query, header, formData, body)
  let scheme = call_568232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568232.url(scheme.get, call_568232.host, call_568232.base,
                         call_568232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568232, url, valid)

proc call*(call_568233: Call_DeleteRepairTask_568227;
          RepairTaskDeleteDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## deleteRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  var query_568234 = newJObject()
  var body_568235 = newJObject()
  add(query_568234, "api-version", newJString(apiVersion))
  if RepairTaskDeleteDescription != nil:
    body_568235 = RepairTaskDeleteDescription
  result = call_568233.call(nil, query_568234, nil, nil, body_568235)

var deleteRepairTask* = Call_DeleteRepairTask_568227(name: "deleteRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/DeleteRepairTask", validator: validate_DeleteRepairTask_568228,
    base: "", url: url_DeleteRepairTask_568229, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ForceApproveRepairTask_568236 = ref object of OpenApiRestCall_567668
proc url_ForceApproveRepairTask_568238(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ForceApproveRepairTask_568237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568239 = query.getOrDefault("api-version")
  valid_568239 = validateParameter(valid_568239, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568239 != nil:
    section.add "api-version", valid_568239
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568241: Call_ForceApproveRepairTask_568236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568241.validator(path, query, header, formData, body)
  let scheme = call_568241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568241.url(scheme.get, call_568241.host, call_568241.base,
                         call_568241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568241, url, valid)

proc call*(call_568242: Call_ForceApproveRepairTask_568236;
          RepairTaskApproveDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## forceApproveRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  var query_568243 = newJObject()
  var body_568244 = newJObject()
  add(query_568243, "api-version", newJString(apiVersion))
  if RepairTaskApproveDescription != nil:
    body_568244 = RepairTaskApproveDescription
  result = call_568242.call(nil, query_568243, nil, nil, body_568244)

var forceApproveRepairTask* = Call_ForceApproveRepairTask_568236(
    name: "forceApproveRepairTask", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ForceApproveRepairTask",
    validator: validate_ForceApproveRepairTask_568237, base: "",
    url: url_ForceApproveRepairTask_568238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAadMetadata_568245 = ref object of OpenApiRestCall_567668
proc url_GetAadMetadata_568247(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAadMetadata_568246(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568249 = query.getOrDefault("timeout")
  valid_568249 = validateParameter(valid_568249, JInt, required = false,
                                 default = newJInt(60))
  if valid_568249 != nil:
    section.add "timeout", valid_568249
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568250 = query.getOrDefault("api-version")
  valid_568250 = validateParameter(valid_568250, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568250 != nil:
    section.add "api-version", valid_568250
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568251: Call_GetAadMetadata_568245; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  let valid = call_568251.validator(path, query, header, formData, body)
  let scheme = call_568251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568251.url(scheme.get, call_568251.host, call_568251.base,
                         call_568251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568251, url, valid)

proc call*(call_568252: Call_GetAadMetadata_568245; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getAadMetadata
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568253 = newJObject()
  add(query_568253, "timeout", newJInt(timeout))
  add(query_568253, "api-version", newJString(apiVersion))
  result = call_568252.call(nil, query_568253, nil, nil, nil)

var getAadMetadata* = Call_GetAadMetadata_568245(name: "getAadMetadata",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/$/GetAadMetadata",
    validator: validate_GetAadMetadata_568246, base: "", url: url_GetAadMetadata_568247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfiguration_568254 = ref object of OpenApiRestCall_567668
proc url_GetClusterConfiguration_568256(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfiguration_568255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: JString (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568257 = query.getOrDefault("timeout")
  valid_568257 = validateParameter(valid_568257, JInt, required = false,
                                 default = newJInt(60))
  if valid_568257 != nil:
    section.add "timeout", valid_568257
  assert query != nil, "query argument is necessary due to required `ConfigurationApiVersion` field"
  var valid_568258 = query.getOrDefault("ConfigurationApiVersion")
  valid_568258 = validateParameter(valid_568258, JString, required = true,
                                 default = nil)
  if valid_568258 != nil:
    section.add "ConfigurationApiVersion", valid_568258
  var valid_568259 = query.getOrDefault("api-version")
  valid_568259 = validateParameter(valid_568259, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568259 != nil:
    section.add "api-version", valid_568259
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568260: Call_GetClusterConfiguration_568254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  let valid = call_568260.validator(path, query, header, formData, body)
  let scheme = call_568260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568260.url(scheme.get, call_568260.host, call_568260.base,
                         call_568260.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568260, url, valid)

proc call*(call_568261: Call_GetClusterConfiguration_568254;
          ConfigurationApiVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterConfiguration
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ConfigurationApiVersion: string (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568262 = newJObject()
  add(query_568262, "timeout", newJInt(timeout))
  add(query_568262, "ConfigurationApiVersion", newJString(ConfigurationApiVersion))
  add(query_568262, "api-version", newJString(apiVersion))
  result = call_568261.call(nil, query_568262, nil, nil, nil)

var getClusterConfiguration* = Call_GetClusterConfiguration_568254(
    name: "getClusterConfiguration", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfiguration",
    validator: validate_GetClusterConfiguration_568255, base: "",
    url: url_GetClusterConfiguration_568256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfigurationUpgradeStatus_568263 = ref object of OpenApiRestCall_567668
proc url_GetClusterConfigurationUpgradeStatus_568265(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfigurationUpgradeStatus_568264(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568266 = query.getOrDefault("timeout")
  valid_568266 = validateParameter(valid_568266, JInt, required = false,
                                 default = newJInt(60))
  if valid_568266 != nil:
    section.add "timeout", valid_568266
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568267 = query.getOrDefault("api-version")
  valid_568267 = validateParameter(valid_568267, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568267 != nil:
    section.add "api-version", valid_568267
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568268: Call_GetClusterConfigurationUpgradeStatus_568263;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  let valid = call_568268.validator(path, query, header, formData, body)
  let scheme = call_568268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568268.url(scheme.get, call_568268.host, call_568268.base,
                         call_568268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568268, url, valid)

proc call*(call_568269: Call_GetClusterConfigurationUpgradeStatus_568263;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getClusterConfigurationUpgradeStatus
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568270 = newJObject()
  add(query_568270, "timeout", newJInt(timeout))
  add(query_568270, "api-version", newJString(apiVersion))
  result = call_568269.call(nil, query_568270, nil, nil, nil)

var getClusterConfigurationUpgradeStatus* = Call_GetClusterConfigurationUpgradeStatus_568263(
    name: "getClusterConfigurationUpgradeStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfigurationUpgradeStatus",
    validator: validate_GetClusterConfigurationUpgradeStatus_568264, base: "",
    url: url_GetClusterConfigurationUpgradeStatus_568265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthUsingPolicy_568284 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealthUsingPolicy_568286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthUsingPolicy_568285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568287 = query.getOrDefault("timeout")
  valid_568287 = validateParameter(valid_568287, JInt, required = false,
                                 default = newJInt(60))
  if valid_568287 != nil:
    section.add "timeout", valid_568287
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568288 = query.getOrDefault("api-version")
  valid_568288 = validateParameter(valid_568288, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568288 != nil:
    section.add "api-version", valid_568288
  var valid_568289 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_568289 = validateParameter(valid_568289, JInt, required = false,
                                 default = newJInt(0))
  if valid_568289 != nil:
    section.add "ApplicationsHealthStateFilter", valid_568289
  var valid_568290 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_568290 = validateParameter(valid_568290, JBool, required = false,
                                 default = newJBool(false))
  if valid_568290 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_568290
  var valid_568291 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568291 = validateParameter(valid_568291, JBool, required = false,
                                 default = newJBool(false))
  if valid_568291 != nil:
    section.add "ExcludeHealthStatistics", valid_568291
  var valid_568292 = query.getOrDefault("EventsHealthStateFilter")
  valid_568292 = validateParameter(valid_568292, JInt, required = false,
                                 default = newJInt(0))
  if valid_568292 != nil:
    section.add "EventsHealthStateFilter", valid_568292
  var valid_568293 = query.getOrDefault("NodesHealthStateFilter")
  valid_568293 = validateParameter(valid_568293, JInt, required = false,
                                 default = newJInt(0))
  if valid_568293 != nil:
    section.add "NodesHealthStateFilter", valid_568293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568295: Call_GetClusterHealthUsingPolicy_568284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_568295.validator(path, query, header, formData, body)
  let scheme = call_568295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568295.url(scheme.get, call_568295.host, call_568295.base,
                         call_568295.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568295, url, valid)

proc call*(call_568296: Call_GetClusterHealthUsingPolicy_568284; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ClusterHealthPolicies: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealthUsingPolicy
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_568297 = newJObject()
  var body_568298 = newJObject()
  add(query_568297, "timeout", newJInt(timeout))
  add(query_568297, "api-version", newJString(apiVersion))
  add(query_568297, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_568297, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  if ClusterHealthPolicies != nil:
    body_568298 = ClusterHealthPolicies
  add(query_568297, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568297, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_568297, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_568296.call(nil, query_568297, nil, nil, body_568298)

var getClusterHealthUsingPolicy* = Call_GetClusterHealthUsingPolicy_568284(
    name: "getClusterHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/GetClusterHealth",
    validator: validate_GetClusterHealthUsingPolicy_568285, base: "",
    url: url_GetClusterHealthUsingPolicy_568286,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealth_568271 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealth_568273(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealth_568272(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568274 = query.getOrDefault("timeout")
  valid_568274 = validateParameter(valid_568274, JInt, required = false,
                                 default = newJInt(60))
  if valid_568274 != nil:
    section.add "timeout", valid_568274
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568275 = query.getOrDefault("api-version")
  valid_568275 = validateParameter(valid_568275, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568275 != nil:
    section.add "api-version", valid_568275
  var valid_568276 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_568276 = validateParameter(valid_568276, JInt, required = false,
                                 default = newJInt(0))
  if valid_568276 != nil:
    section.add "ApplicationsHealthStateFilter", valid_568276
  var valid_568277 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_568277 = validateParameter(valid_568277, JBool, required = false,
                                 default = newJBool(false))
  if valid_568277 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_568277
  var valid_568278 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568278 = validateParameter(valid_568278, JBool, required = false,
                                 default = newJBool(false))
  if valid_568278 != nil:
    section.add "ExcludeHealthStatistics", valid_568278
  var valid_568279 = query.getOrDefault("EventsHealthStateFilter")
  valid_568279 = validateParameter(valid_568279, JInt, required = false,
                                 default = newJInt(0))
  if valid_568279 != nil:
    section.add "EventsHealthStateFilter", valid_568279
  var valid_568280 = query.getOrDefault("NodesHealthStateFilter")
  valid_568280 = validateParameter(valid_568280, JInt, required = false,
                                 default = newJInt(0))
  if valid_568280 != nil:
    section.add "NodesHealthStateFilter", valid_568280
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568281: Call_GetClusterHealth_568271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  let valid = call_568281.validator(path, query, header, formData, body)
  let scheme = call_568281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568281.url(scheme.get, call_568281.host, call_568281.base,
                         call_568281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568281, url, valid)

proc call*(call_568282: Call_GetClusterHealth_568271; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          IncludeSystemApplicationHealthStatistics: bool = false;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_568283 = newJObject()
  add(query_568283, "timeout", newJInt(timeout))
  add(query_568283, "api-version", newJString(apiVersion))
  add(query_568283, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_568283, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  add(query_568283, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568283, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_568283, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_568282.call(nil, query_568283, nil, nil, nil)

var getClusterHealth* = Call_GetClusterHealth_568271(name: "getClusterHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterHealth", validator: validate_GetClusterHealth_568272,
    base: "", url: url_GetClusterHealth_568273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568309(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568308(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568310 = query.getOrDefault("timeout")
  valid_568310 = validateParameter(valid_568310, JInt, required = false,
                                 default = newJInt(60))
  if valid_568310 != nil:
    section.add "timeout", valid_568310
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568311 = query.getOrDefault("api-version")
  valid_568311 = validateParameter(valid_568311, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568311 != nil:
    section.add "api-version", valid_568311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568313: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  let valid = call_568313.validator(path, query, header, formData, body)
  let scheme = call_568313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568313.url(scheme.get, call_568313.host, call_568313.base,
                         call_568313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568313, url, valid)

proc call*(call_568314: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307;
          timeout: int = 60; apiVersion: string = "6.0";
          ClusterHealthChunkQueryDescription: JsonNode = nil): Recallable =
  ## getClusterHealthChunkUsingPolicyAndAdvancedFilters
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  var query_568315 = newJObject()
  var body_568316 = newJObject()
  add(query_568315, "timeout", newJInt(timeout))
  add(query_568315, "api-version", newJString(apiVersion))
  if ClusterHealthChunkQueryDescription != nil:
    body_568316 = ClusterHealthChunkQueryDescription
  result = call_568314.call(nil, query_568315, nil, nil, body_568316)

var getClusterHealthChunkUsingPolicyAndAdvancedFilters* = Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568307(
    name: "getClusterHealthChunkUsingPolicyAndAdvancedFilters",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568308,
    base: "", url: url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_568309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunk_568299 = ref object of OpenApiRestCall_567668
proc url_GetClusterHealthChunk_568301(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunk_568300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568302 = query.getOrDefault("timeout")
  valid_568302 = validateParameter(valid_568302, JInt, required = false,
                                 default = newJInt(60))
  if valid_568302 != nil:
    section.add "timeout", valid_568302
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568303 = query.getOrDefault("api-version")
  valid_568303 = validateParameter(valid_568303, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568303 != nil:
    section.add "api-version", valid_568303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568304: Call_GetClusterHealthChunk_568299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  let valid = call_568304.validator(path, query, header, formData, body)
  let scheme = call_568304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568304.url(scheme.get, call_568304.host, call_568304.base,
                         call_568304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568304, url, valid)

proc call*(call_568305: Call_GetClusterHealthChunk_568299; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterHealthChunk
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568306 = newJObject()
  add(query_568306, "timeout", newJInt(timeout))
  add(query_568306, "api-version", newJString(apiVersion))
  result = call_568305.call(nil, query_568306, nil, nil, nil)

var getClusterHealthChunk* = Call_GetClusterHealthChunk_568299(
    name: "getClusterHealthChunk", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunk_568300, base: "",
    url: url_GetClusterHealthChunk_568301, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterManifest_568317 = ref object of OpenApiRestCall_567668
proc url_GetClusterManifest_568319(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterManifest_568318(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568320 = query.getOrDefault("timeout")
  valid_568320 = validateParameter(valid_568320, JInt, required = false,
                                 default = newJInt(60))
  if valid_568320 != nil:
    section.add "timeout", valid_568320
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568321 = query.getOrDefault("api-version")
  valid_568321 = validateParameter(valid_568321, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568321 != nil:
    section.add "api-version", valid_568321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568322: Call_GetClusterManifest_568317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  let valid = call_568322.validator(path, query, header, formData, body)
  let scheme = call_568322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568322.url(scheme.get, call_568322.host, call_568322.base,
                         call_568322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568322, url, valid)

proc call*(call_568323: Call_GetClusterManifest_568317; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterManifest
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568324 = newJObject()
  add(query_568324, "timeout", newJInt(timeout))
  add(query_568324, "api-version", newJString(apiVersion))
  result = call_568323.call(nil, query_568324, nil, nil, nil)

var getClusterManifest* = Call_GetClusterManifest_568317(
    name: "getClusterManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterManifest", validator: validate_GetClusterManifest_568318,
    base: "", url: url_GetClusterManifest_568319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterVersion_568325 = ref object of OpenApiRestCall_567668
proc url_GetClusterVersion_568327(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterVersion_568326(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568328 = query.getOrDefault("timeout")
  valid_568328 = validateParameter(valid_568328, JInt, required = false,
                                 default = newJInt(60))
  if valid_568328 != nil:
    section.add "timeout", valid_568328
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568329 = query.getOrDefault("api-version")
  valid_568329 = validateParameter(valid_568329, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568329 != nil:
    section.add "api-version", valid_568329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568330: Call_GetClusterVersion_568325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  let valid = call_568330.validator(path, query, header, formData, body)
  let scheme = call_568330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568330.url(scheme.get, call_568330.host, call_568330.base,
                         call_568330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568330, url, valid)

proc call*(call_568331: Call_GetClusterVersion_568325; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## getClusterVersion
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568332 = newJObject()
  add(query_568332, "timeout", newJInt(timeout))
  add(query_568332, "api-version", newJString(apiVersion))
  result = call_568331.call(nil, query_568332, nil, nil, nil)

var getClusterVersion* = Call_GetClusterVersion_568325(name: "getClusterVersion",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterVersion", validator: validate_GetClusterVersion_568326,
    base: "", url: url_GetClusterVersion_568327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricCodeVersionInfoList_568333 = ref object of OpenApiRestCall_567668
proc url_GetProvisionedFabricCodeVersionInfoList_568335(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricCodeVersionInfoList_568334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: JString
  ##              : The product version of Service Fabric.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568336 = query.getOrDefault("timeout")
  valid_568336 = validateParameter(valid_568336, JInt, required = false,
                                 default = newJInt(60))
  if valid_568336 != nil:
    section.add "timeout", valid_568336
  var valid_568337 = query.getOrDefault("CodeVersion")
  valid_568337 = validateParameter(valid_568337, JString, required = false,
                                 default = nil)
  if valid_568337 != nil:
    section.add "CodeVersion", valid_568337
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568338 = query.getOrDefault("api-version")
  valid_568338 = validateParameter(valid_568338, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568338 != nil:
    section.add "api-version", valid_568338
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568339: Call_GetProvisionedFabricCodeVersionInfoList_568333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_568339.validator(path, query, header, formData, body)
  let scheme = call_568339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568339.url(scheme.get, call_568339.host, call_568339.base,
                         call_568339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568339, url, valid)

proc call*(call_568340: Call_GetProvisionedFabricCodeVersionInfoList_568333;
          timeout: int = 60; CodeVersion: string = ""; apiVersion: string = "6.0"): Recallable =
  ## getProvisionedFabricCodeVersionInfoList
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: string
  ##              : The product version of Service Fabric.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568341 = newJObject()
  add(query_568341, "timeout", newJInt(timeout))
  add(query_568341, "CodeVersion", newJString(CodeVersion))
  add(query_568341, "api-version", newJString(apiVersion))
  result = call_568340.call(nil, query_568341, nil, nil, nil)

var getProvisionedFabricCodeVersionInfoList* = Call_GetProvisionedFabricCodeVersionInfoList_568333(
    name: "getProvisionedFabricCodeVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedCodeVersions",
    validator: validate_GetProvisionedFabricCodeVersionInfoList_568334, base: "",
    url: url_GetProvisionedFabricCodeVersionInfoList_568335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricConfigVersionInfoList_568342 = ref object of OpenApiRestCall_567668
proc url_GetProvisionedFabricConfigVersionInfoList_568344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricConfigVersionInfoList_568343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: JString
  ##                : The config version of Service Fabric.
  section = newJObject()
  var valid_568345 = query.getOrDefault("timeout")
  valid_568345 = validateParameter(valid_568345, JInt, required = false,
                                 default = newJInt(60))
  if valid_568345 != nil:
    section.add "timeout", valid_568345
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568346 = query.getOrDefault("api-version")
  valid_568346 = validateParameter(valid_568346, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568346 != nil:
    section.add "api-version", valid_568346
  var valid_568347 = query.getOrDefault("ConfigVersion")
  valid_568347 = validateParameter(valid_568347, JString, required = false,
                                 default = nil)
  if valid_568347 != nil:
    section.add "ConfigVersion", valid_568347
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568348: Call_GetProvisionedFabricConfigVersionInfoList_568342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_568348.validator(path, query, header, formData, body)
  let scheme = call_568348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568348.url(scheme.get, call_568348.host, call_568348.base,
                         call_568348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568348, url, valid)

proc call*(call_568349: Call_GetProvisionedFabricConfigVersionInfoList_568342;
          timeout: int = 60; apiVersion: string = "6.0"; ConfigVersion: string = ""): Recallable =
  ## getProvisionedFabricConfigVersionInfoList
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: string
  ##                : The config version of Service Fabric.
  var query_568350 = newJObject()
  add(query_568350, "timeout", newJInt(timeout))
  add(query_568350, "api-version", newJString(apiVersion))
  add(query_568350, "ConfigVersion", newJString(ConfigVersion))
  result = call_568349.call(nil, query_568350, nil, nil, nil)

var getProvisionedFabricConfigVersionInfoList* = Call_GetProvisionedFabricConfigVersionInfoList_568342(
    name: "getProvisionedFabricConfigVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedConfigVersions",
    validator: validate_GetProvisionedFabricConfigVersionInfoList_568343,
    base: "", url: url_GetProvisionedFabricConfigVersionInfoList_568344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRepairTaskList_568351 = ref object of OpenApiRestCall_567668
proc url_GetRepairTaskList_568353(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRepairTaskList_568352(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: JString
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: JString
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: JInt
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568354 = query.getOrDefault("api-version")
  valid_568354 = validateParameter(valid_568354, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568354 != nil:
    section.add "api-version", valid_568354
  var valid_568355 = query.getOrDefault("TaskIdFilter")
  valid_568355 = validateParameter(valid_568355, JString, required = false,
                                 default = nil)
  if valid_568355 != nil:
    section.add "TaskIdFilter", valid_568355
  var valid_568356 = query.getOrDefault("ExecutorFilter")
  valid_568356 = validateParameter(valid_568356, JString, required = false,
                                 default = nil)
  if valid_568356 != nil:
    section.add "ExecutorFilter", valid_568356
  var valid_568357 = query.getOrDefault("StateFilter")
  valid_568357 = validateParameter(valid_568357, JInt, required = false, default = nil)
  if valid_568357 != nil:
    section.add "StateFilter", valid_568357
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568358: Call_GetRepairTaskList_568351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568358.validator(path, query, header, formData, body)
  let scheme = call_568358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568358.url(scheme.get, call_568358.host, call_568358.base,
                         call_568358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568358, url, valid)

proc call*(call_568359: Call_GetRepairTaskList_568351; apiVersion: string = "6.0";
          TaskIdFilter: string = ""; ExecutorFilter: string = ""; StateFilter: int = 0): Recallable =
  ## getRepairTaskList
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TaskIdFilter: string
  ##               : The repair task ID prefix to be matched.
  ##   ExecutorFilter: string
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   StateFilter: int
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  var query_568360 = newJObject()
  add(query_568360, "api-version", newJString(apiVersion))
  add(query_568360, "TaskIdFilter", newJString(TaskIdFilter))
  add(query_568360, "ExecutorFilter", newJString(ExecutorFilter))
  add(query_568360, "StateFilter", newJInt(StateFilter))
  result = call_568359.call(nil, query_568360, nil, nil, nil)

var getRepairTaskList* = Call_GetRepairTaskList_568351(name: "getRepairTaskList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetRepairTaskList", validator: validate_GetRepairTaskList_568352,
    base: "", url: url_GetRepairTaskList_568353,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpgradeOrchestrationServiceState_568361 = ref object of OpenApiRestCall_567668
proc url_GetUpgradeOrchestrationServiceState_568363(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpgradeOrchestrationServiceState_568362(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568364 = query.getOrDefault("timeout")
  valid_568364 = validateParameter(valid_568364, JInt, required = false,
                                 default = newJInt(60))
  if valid_568364 != nil:
    section.add "timeout", valid_568364
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568365 = query.getOrDefault("api-version")
  valid_568365 = validateParameter(valid_568365, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568365 != nil:
    section.add "api-version", valid_568365
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568366: Call_GetUpgradeOrchestrationServiceState_568361;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_568366.validator(path, query, header, formData, body)
  let scheme = call_568366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568366.url(scheme.get, call_568366.host, call_568366.base,
                         call_568366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568366, url, valid)

proc call*(call_568367: Call_GetUpgradeOrchestrationServiceState_568361;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getUpgradeOrchestrationServiceState
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568368 = newJObject()
  add(query_568368, "timeout", newJInt(timeout))
  add(query_568368, "api-version", newJString(apiVersion))
  result = call_568367.call(nil, query_568368, nil, nil, nil)

var getUpgradeOrchestrationServiceState* = Call_GetUpgradeOrchestrationServiceState_568361(
    name: "getUpgradeOrchestrationServiceState", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeOrchestrationServiceState",
    validator: validate_GetUpgradeOrchestrationServiceState_568362, base: "",
    url: url_GetUpgradeOrchestrationServiceState_568363,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterUpgradeProgress_568369 = ref object of OpenApiRestCall_567668
proc url_GetClusterUpgradeProgress_568371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterUpgradeProgress_568370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568372 = query.getOrDefault("timeout")
  valid_568372 = validateParameter(valid_568372, JInt, required = false,
                                 default = newJInt(60))
  if valid_568372 != nil:
    section.add "timeout", valid_568372
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568373 = query.getOrDefault("api-version")
  valid_568373 = validateParameter(valid_568373, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568373 != nil:
    section.add "api-version", valid_568373
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568374: Call_GetClusterUpgradeProgress_568369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  let valid = call_568374.validator(path, query, header, formData, body)
  let scheme = call_568374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568374.url(scheme.get, call_568374.host, call_568374.base,
                         call_568374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568374, url, valid)

proc call*(call_568375: Call_GetClusterUpgradeProgress_568369; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getClusterUpgradeProgress
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568376 = newJObject()
  add(query_568376, "timeout", newJInt(timeout))
  add(query_568376, "api-version", newJString(apiVersion))
  result = call_568375.call(nil, query_568376, nil, nil, nil)

var getClusterUpgradeProgress* = Call_GetClusterUpgradeProgress_568369(
    name: "getClusterUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeProgress",
    validator: validate_GetClusterUpgradeProgress_568370, base: "",
    url: url_GetClusterUpgradeProgress_568371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureCommand_568377 = ref object of OpenApiRestCall_567668
proc url_InvokeInfrastructureCommand_568379(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureCommand_568378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_568380 = query.getOrDefault("timeout")
  valid_568380 = validateParameter(valid_568380, JInt, required = false,
                                 default = newJInt(60))
  if valid_568380 != nil:
    section.add "timeout", valid_568380
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568381 = query.getOrDefault("api-version")
  valid_568381 = validateParameter(valid_568381, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568381 != nil:
    section.add "api-version", valid_568381
  var valid_568382 = query.getOrDefault("ServiceId")
  valid_568382 = validateParameter(valid_568382, JString, required = false,
                                 default = nil)
  if valid_568382 != nil:
    section.add "ServiceId", valid_568382
  var valid_568383 = query.getOrDefault("Command")
  valid_568383 = validateParameter(valid_568383, JString, required = true,
                                 default = nil)
  if valid_568383 != nil:
    section.add "Command", valid_568383
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568384: Call_InvokeInfrastructureCommand_568377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568384.validator(path, query, header, formData, body)
  let scheme = call_568384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568384.url(scheme.get, call_568384.host, call_568384.base,
                         call_568384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568384, url, valid)

proc call*(call_568385: Call_InvokeInfrastructureCommand_568377; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureCommand
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_568386 = newJObject()
  add(query_568386, "timeout", newJInt(timeout))
  add(query_568386, "api-version", newJString(apiVersion))
  add(query_568386, "ServiceId", newJString(ServiceId))
  add(query_568386, "Command", newJString(Command))
  result = call_568385.call(nil, query_568386, nil, nil, nil)

var invokeInfrastructureCommand* = Call_InvokeInfrastructureCommand_568377(
    name: "invokeInfrastructureCommand", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureCommand",
    validator: validate_InvokeInfrastructureCommand_568378, base: "",
    url: url_InvokeInfrastructureCommand_568379,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureQuery_568387 = ref object of OpenApiRestCall_567668
proc url_InvokeInfrastructureQuery_568389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureQuery_568388(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  var valid_568390 = query.getOrDefault("timeout")
  valid_568390 = validateParameter(valid_568390, JInt, required = false,
                                 default = newJInt(60))
  if valid_568390 != nil:
    section.add "timeout", valid_568390
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568391 = query.getOrDefault("api-version")
  valid_568391 = validateParameter(valid_568391, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568391 != nil:
    section.add "api-version", valid_568391
  var valid_568392 = query.getOrDefault("ServiceId")
  valid_568392 = validateParameter(valid_568392, JString, required = false,
                                 default = nil)
  if valid_568392 != nil:
    section.add "ServiceId", valid_568392
  var valid_568393 = query.getOrDefault("Command")
  valid_568393 = validateParameter(valid_568393, JString, required = true,
                                 default = nil)
  if valid_568393 != nil:
    section.add "Command", valid_568393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568394: Call_InvokeInfrastructureQuery_568387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568394.validator(path, query, header, formData, body)
  let scheme = call_568394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568394.url(scheme.get, call_568394.host, call_568394.base,
                         call_568394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568394, url, valid)

proc call*(call_568395: Call_InvokeInfrastructureQuery_568387; Command: string;
          timeout: int = 60; apiVersion: string = "6.0"; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureQuery
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_568396 = newJObject()
  add(query_568396, "timeout", newJInt(timeout))
  add(query_568396, "api-version", newJString(apiVersion))
  add(query_568396, "ServiceId", newJString(ServiceId))
  add(query_568396, "Command", newJString(Command))
  result = call_568395.call(nil, query_568396, nil, nil, nil)

var invokeInfrastructureQuery* = Call_InvokeInfrastructureQuery_568387(
    name: "invokeInfrastructureQuery", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureQuery",
    validator: validate_InvokeInfrastructureQuery_568388, base: "",
    url: url_InvokeInfrastructureQuery_568389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeClusterUpgrade_568397 = ref object of OpenApiRestCall_567668
proc url_ResumeClusterUpgrade_568399(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ResumeClusterUpgrade_568398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568400 = query.getOrDefault("timeout")
  valid_568400 = validateParameter(valid_568400, JInt, required = false,
                                 default = newJInt(60))
  if valid_568400 != nil:
    section.add "timeout", valid_568400
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568401 = query.getOrDefault("api-version")
  valid_568401 = validateParameter(valid_568401, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568401 != nil:
    section.add "api-version", valid_568401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568403: Call_ResumeClusterUpgrade_568397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  let valid = call_568403.validator(path, query, header, formData, body)
  let scheme = call_568403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568403.url(scheme.get, call_568403.host, call_568403.base,
                         call_568403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568403, url, valid)

proc call*(call_568404: Call_ResumeClusterUpgrade_568397;
          ResumeClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## resumeClusterUpgrade
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  var query_568405 = newJObject()
  var body_568406 = newJObject()
  add(query_568405, "timeout", newJInt(timeout))
  add(query_568405, "api-version", newJString(apiVersion))
  if ResumeClusterUpgradeDescription != nil:
    body_568406 = ResumeClusterUpgradeDescription
  result = call_568404.call(nil, query_568405, nil, nil, body_568406)

var resumeClusterUpgrade* = Call_ResumeClusterUpgrade_568397(
    name: "resumeClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeClusterUpgrade_568398, base: "",
    url: url_ResumeClusterUpgrade_568399, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionCluster_568407 = ref object of OpenApiRestCall_567668
proc url_ProvisionCluster_568409(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionCluster_568408(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568410 = query.getOrDefault("timeout")
  valid_568410 = validateParameter(valid_568410, JInt, required = false,
                                 default = newJInt(60))
  if valid_568410 != nil:
    section.add "timeout", valid_568410
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568411 = query.getOrDefault("api-version")
  valid_568411 = validateParameter(valid_568411, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568411 != nil:
    section.add "api-version", valid_568411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568413: Call_ProvisionCluster_568407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  let valid = call_568413.validator(path, query, header, formData, body)
  let scheme = call_568413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568413.url(scheme.get, call_568413.host, call_568413.base,
                         call_568413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568413, url, valid)

proc call*(call_568414: Call_ProvisionCluster_568407;
          ProvisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## provisionCluster
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  var query_568415 = newJObject()
  var body_568416 = newJObject()
  add(query_568415, "timeout", newJInt(timeout))
  add(query_568415, "api-version", newJString(apiVersion))
  if ProvisionFabricDescription != nil:
    body_568416 = ProvisionFabricDescription
  result = call_568414.call(nil, query_568415, nil, nil, body_568416)

var provisionCluster* = Call_ProvisionCluster_568407(name: "provisionCluster",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/$/Provision",
    validator: validate_ProvisionCluster_568408, base: "",
    url: url_ProvisionCluster_568409, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverAllPartitions_568417 = ref object of OpenApiRestCall_567668
proc url_RecoverAllPartitions_568419(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverAllPartitions_568418(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568420 = query.getOrDefault("timeout")
  valid_568420 = validateParameter(valid_568420, JInt, required = false,
                                 default = newJInt(60))
  if valid_568420 != nil:
    section.add "timeout", valid_568420
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568421 = query.getOrDefault("api-version")
  valid_568421 = validateParameter(valid_568421, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568421 != nil:
    section.add "api-version", valid_568421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568422: Call_RecoverAllPartitions_568417; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_568422.validator(path, query, header, formData, body)
  let scheme = call_568422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568422.url(scheme.get, call_568422.host, call_568422.base,
                         call_568422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568422, url, valid)

proc call*(call_568423: Call_RecoverAllPartitions_568417; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverAllPartitions
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568424 = newJObject()
  add(query_568424, "timeout", newJInt(timeout))
  add(query_568424, "api-version", newJString(apiVersion))
  result = call_568423.call(nil, query_568424, nil, nil, nil)

var recoverAllPartitions* = Call_RecoverAllPartitions_568417(
    name: "recoverAllPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverAllPartitions",
    validator: validate_RecoverAllPartitions_568418, base: "",
    url: url_RecoverAllPartitions_568419, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverSystemPartitions_568425 = ref object of OpenApiRestCall_567668
proc url_RecoverSystemPartitions_568427(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverSystemPartitions_568426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568428 = query.getOrDefault("timeout")
  valid_568428 = validateParameter(valid_568428, JInt, required = false,
                                 default = newJInt(60))
  if valid_568428 != nil:
    section.add "timeout", valid_568428
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568429 = query.getOrDefault("api-version")
  valid_568429 = validateParameter(valid_568429, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568429 != nil:
    section.add "api-version", valid_568429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568430: Call_RecoverSystemPartitions_568425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_568430.validator(path, query, header, formData, body)
  let scheme = call_568430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568430.url(scheme.get, call_568430.host, call_568430.base,
                         call_568430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568430, url, valid)

proc call*(call_568431: Call_RecoverSystemPartitions_568425; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## recoverSystemPartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568432 = newJObject()
  add(query_568432, "timeout", newJInt(timeout))
  add(query_568432, "api-version", newJString(apiVersion))
  result = call_568431.call(nil, query_568432, nil, nil, nil)

var recoverSystemPartitions* = Call_RecoverSystemPartitions_568425(
    name: "recoverSystemPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverSystemPartitions",
    validator: validate_RecoverSystemPartitions_568426, base: "",
    url: url_RecoverSystemPartitions_568427, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportClusterHealth_568433 = ref object of OpenApiRestCall_567668
proc url_ReportClusterHealth_568435(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ReportClusterHealth_568434(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568436 = query.getOrDefault("Immediate")
  valid_568436 = validateParameter(valid_568436, JBool, required = false,
                                 default = newJBool(false))
  if valid_568436 != nil:
    section.add "Immediate", valid_568436
  var valid_568437 = query.getOrDefault("timeout")
  valid_568437 = validateParameter(valid_568437, JInt, required = false,
                                 default = newJInt(60))
  if valid_568437 != nil:
    section.add "timeout", valid_568437
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568438 = query.getOrDefault("api-version")
  valid_568438 = validateParameter(valid_568438, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568438 != nil:
    section.add "api-version", valid_568438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568440: Call_ReportClusterHealth_568433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_568440.validator(path, query, header, formData, body)
  let scheme = call_568440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568440.url(scheme.get, call_568440.host, call_568440.base,
                         call_568440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568440, url, valid)

proc call*(call_568441: Call_ReportClusterHealth_568433;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportClusterHealth
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var query_568442 = newJObject()
  var body_568443 = newJObject()
  add(query_568442, "Immediate", newJBool(Immediate))
  add(query_568442, "timeout", newJInt(timeout))
  add(query_568442, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_568443 = HealthInformation
  result = call_568441.call(nil, query_568442, nil, nil, body_568443)

var reportClusterHealth* = Call_ReportClusterHealth_568433(
    name: "reportClusterHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ReportClusterHealth",
    validator: validate_ReportClusterHealth_568434, base: "",
    url: url_ReportClusterHealth_568435, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackClusterUpgrade_568444 = ref object of OpenApiRestCall_567668
proc url_RollbackClusterUpgrade_568446(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RollbackClusterUpgrade_568445(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568447 = query.getOrDefault("timeout")
  valid_568447 = validateParameter(valid_568447, JInt, required = false,
                                 default = newJInt(60))
  if valid_568447 != nil:
    section.add "timeout", valid_568447
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568448 = query.getOrDefault("api-version")
  valid_568448 = validateParameter(valid_568448, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568448 != nil:
    section.add "api-version", valid_568448
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568449: Call_RollbackClusterUpgrade_568444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  let valid = call_568449.validator(path, query, header, formData, body)
  let scheme = call_568449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568449.url(scheme.get, call_568449.host, call_568449.base,
                         call_568449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568449, url, valid)

proc call*(call_568450: Call_RollbackClusterUpgrade_568444; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## rollbackClusterUpgrade
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568451 = newJObject()
  add(query_568451, "timeout", newJInt(timeout))
  add(query_568451, "api-version", newJString(apiVersion))
  result = call_568450.call(nil, query_568451, nil, nil, nil)

var rollbackClusterUpgrade* = Call_RollbackClusterUpgrade_568444(
    name: "rollbackClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RollbackUpgrade",
    validator: validate_RollbackClusterUpgrade_568445, base: "",
    url: url_RollbackClusterUpgrade_568446, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetUpgradeOrchestrationServiceState_568452 = ref object of OpenApiRestCall_567668
proc url_SetUpgradeOrchestrationServiceState_568454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_SetUpgradeOrchestrationServiceState_568453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568455 = query.getOrDefault("timeout")
  valid_568455 = validateParameter(valid_568455, JInt, required = false,
                                 default = newJInt(60))
  if valid_568455 != nil:
    section.add "timeout", valid_568455
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568456 = query.getOrDefault("api-version")
  valid_568456 = validateParameter(valid_568456, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568456 != nil:
    section.add "api-version", valid_568456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568458: Call_SetUpgradeOrchestrationServiceState_568452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_568458.validator(path, query, header, formData, body)
  let scheme = call_568458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568458.url(scheme.get, call_568458.host, call_568458.base,
                         call_568458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568458, url, valid)

proc call*(call_568459: Call_SetUpgradeOrchestrationServiceState_568452;
          UpgradeOrchestrationServiceState: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## setUpgradeOrchestrationServiceState
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  var query_568460 = newJObject()
  var body_568461 = newJObject()
  add(query_568460, "timeout", newJInt(timeout))
  add(query_568460, "api-version", newJString(apiVersion))
  if UpgradeOrchestrationServiceState != nil:
    body_568461 = UpgradeOrchestrationServiceState
  result = call_568459.call(nil, query_568460, nil, nil, body_568461)

var setUpgradeOrchestrationServiceState* = Call_SetUpgradeOrchestrationServiceState_568452(
    name: "setUpgradeOrchestrationServiceState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/SetUpgradeOrchestrationServiceState",
    validator: validate_SetUpgradeOrchestrationServiceState_568453, base: "",
    url: url_SetUpgradeOrchestrationServiceState_568454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterConfigurationUpgrade_568462 = ref object of OpenApiRestCall_567668
proc url_StartClusterConfigurationUpgrade_568464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterConfigurationUpgrade_568463(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568475 = query.getOrDefault("timeout")
  valid_568475 = validateParameter(valid_568475, JInt, required = false,
                                 default = newJInt(60))
  if valid_568475 != nil:
    section.add "timeout", valid_568475
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568476 = query.getOrDefault("api-version")
  valid_568476 = validateParameter(valid_568476, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568476 != nil:
    section.add "api-version", valid_568476
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568478: Call_StartClusterConfigurationUpgrade_568462;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  let valid = call_568478.validator(path, query, header, formData, body)
  let scheme = call_568478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568478.url(scheme.get, call_568478.host, call_568478.base,
                         call_568478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568478, url, valid)

proc call*(call_568479: Call_StartClusterConfigurationUpgrade_568462;
          ClusterConfigurationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterConfigurationUpgrade
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  var query_568480 = newJObject()
  var body_568481 = newJObject()
  add(query_568480, "timeout", newJInt(timeout))
  add(query_568480, "api-version", newJString(apiVersion))
  if ClusterConfigurationUpgradeDescription != nil:
    body_568481 = ClusterConfigurationUpgradeDescription
  result = call_568479.call(nil, query_568480, nil, nil, body_568481)

var startClusterConfigurationUpgrade* = Call_StartClusterConfigurationUpgrade_568462(
    name: "startClusterConfigurationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/StartClusterConfigurationUpgrade",
    validator: validate_StartClusterConfigurationUpgrade_568463, base: "",
    url: url_StartClusterConfigurationUpgrade_568464,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionCluster_568482 = ref object of OpenApiRestCall_567668
proc url_UnprovisionCluster_568484(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UnprovisionCluster_568483(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## It is supported to unprovision code and configuration separately.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568485 = query.getOrDefault("timeout")
  valid_568485 = validateParameter(valid_568485, JInt, required = false,
                                 default = newJInt(60))
  if valid_568485 != nil:
    section.add "timeout", valid_568485
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568486 = query.getOrDefault("api-version")
  valid_568486 = validateParameter(valid_568486, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568486 != nil:
    section.add "api-version", valid_568486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568488: Call_UnprovisionCluster_568482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## It is supported to unprovision code and configuration separately.
  ## 
  let valid = call_568488.validator(path, query, header, formData, body)
  let scheme = call_568488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568488.url(scheme.get, call_568488.host, call_568488.base,
                         call_568488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568488, url, valid)

proc call*(call_568489: Call_UnprovisionCluster_568482;
          UnprovisionFabricDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionCluster
  ## It is supported to unprovision code and configuration separately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  var query_568490 = newJObject()
  var body_568491 = newJObject()
  add(query_568490, "timeout", newJInt(timeout))
  add(query_568490, "api-version", newJString(apiVersion))
  if UnprovisionFabricDescription != nil:
    body_568491 = UnprovisionFabricDescription
  result = call_568489.call(nil, query_568490, nil, nil, body_568491)

var unprovisionCluster* = Call_UnprovisionCluster_568482(
    name: "unprovisionCluster", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Unprovision",
    validator: validate_UnprovisionCluster_568483, base: "",
    url: url_UnprovisionCluster_568484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairExecutionState_568492 = ref object of OpenApiRestCall_567668
proc url_UpdateRepairExecutionState_568494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairExecutionState_568493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568495 = query.getOrDefault("api-version")
  valid_568495 = validateParameter(valid_568495, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568495 != nil:
    section.add "api-version", valid_568495
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568497: Call_UpdateRepairExecutionState_568492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568497.validator(path, query, header, formData, body)
  let scheme = call_568497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568497.url(scheme.get, call_568497.host, call_568497.base,
                         call_568497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568497, url, valid)

proc call*(call_568498: Call_UpdateRepairExecutionState_568492;
          RepairTask: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## updateRepairExecutionState
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_568499 = newJObject()
  var body_568500 = newJObject()
  if RepairTask != nil:
    body_568500 = RepairTask
  add(query_568499, "api-version", newJString(apiVersion))
  result = call_568498.call(nil, query_568499, nil, nil, body_568500)

var updateRepairExecutionState* = Call_UpdateRepairExecutionState_568492(
    name: "updateRepairExecutionState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairExecutionState",
    validator: validate_UpdateRepairExecutionState_568493, base: "",
    url: url_UpdateRepairExecutionState_568494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairTaskHealthPolicy_568501 = ref object of OpenApiRestCall_567668
proc url_UpdateRepairTaskHealthPolicy_568503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairTaskHealthPolicy_568502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568504 = query.getOrDefault("api-version")
  valid_568504 = validateParameter(valid_568504, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568504 != nil:
    section.add "api-version", valid_568504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568506: Call_UpdateRepairTaskHealthPolicy_568501; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_568506.validator(path, query, header, formData, body)
  let scheme = call_568506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568506.url(scheme.get, call_568506.host, call_568506.base,
                         call_568506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568506, url, valid)

proc call*(call_568507: Call_UpdateRepairTaskHealthPolicy_568501;
          RepairTaskUpdateHealthPolicyDescription: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## updateRepairTaskHealthPolicy
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  var query_568508 = newJObject()
  var body_568509 = newJObject()
  add(query_568508, "api-version", newJString(apiVersion))
  if RepairTaskUpdateHealthPolicyDescription != nil:
    body_568509 = RepairTaskUpdateHealthPolicyDescription
  result = call_568507.call(nil, query_568508, nil, nil, body_568509)

var updateRepairTaskHealthPolicy* = Call_UpdateRepairTaskHealthPolicy_568501(
    name: "updateRepairTaskHealthPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairTaskHealthPolicy",
    validator: validate_UpdateRepairTaskHealthPolicy_568502, base: "",
    url: url_UpdateRepairTaskHealthPolicy_568503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateClusterUpgrade_568510 = ref object of OpenApiRestCall_567668
proc url_UpdateClusterUpgrade_568512(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateClusterUpgrade_568511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568513 = query.getOrDefault("timeout")
  valid_568513 = validateParameter(valid_568513, JInt, required = false,
                                 default = newJInt(60))
  if valid_568513 != nil:
    section.add "timeout", valid_568513
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568514 = query.getOrDefault("api-version")
  valid_568514 = validateParameter(valid_568514, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568514 != nil:
    section.add "api-version", valid_568514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568516: Call_UpdateClusterUpgrade_568510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  let valid = call_568516.validator(path, query, header, formData, body)
  let scheme = call_568516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568516.url(scheme.get, call_568516.host, call_568516.base,
                         call_568516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568516, url, valid)

proc call*(call_568517: Call_UpdateClusterUpgrade_568510;
          UpdateClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateClusterUpgrade
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  var query_568518 = newJObject()
  var body_568519 = newJObject()
  add(query_568518, "timeout", newJInt(timeout))
  add(query_568518, "api-version", newJString(apiVersion))
  if UpdateClusterUpgradeDescription != nil:
    body_568519 = UpdateClusterUpgradeDescription
  result = call_568517.call(nil, query_568518, nil, nil, body_568519)

var updateClusterUpgrade* = Call_UpdateClusterUpgrade_568510(
    name: "updateClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateUpgrade",
    validator: validate_UpdateClusterUpgrade_568511, base: "",
    url: url_UpdateClusterUpgrade_568512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterUpgrade_568520 = ref object of OpenApiRestCall_567668
proc url_StartClusterUpgrade_568522(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterUpgrade_568521(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568523 = query.getOrDefault("timeout")
  valid_568523 = validateParameter(valid_568523, JInt, required = false,
                                 default = newJInt(60))
  if valid_568523 != nil:
    section.add "timeout", valid_568523
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568524 = query.getOrDefault("api-version")
  valid_568524 = validateParameter(valid_568524, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568524 != nil:
    section.add "api-version", valid_568524
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568526: Call_StartClusterUpgrade_568520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  let valid = call_568526.validator(path, query, header, formData, body)
  let scheme = call_568526.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568526.url(scheme.get, call_568526.host, call_568526.base,
                         call_568526.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568526, url, valid)

proc call*(call_568527: Call_StartClusterUpgrade_568520;
          StartClusterUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startClusterUpgrade
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  var query_568528 = newJObject()
  var body_568529 = newJObject()
  add(query_568528, "timeout", newJInt(timeout))
  add(query_568528, "api-version", newJString(apiVersion))
  if StartClusterUpgradeDescription != nil:
    body_568529 = StartClusterUpgradeDescription
  result = call_568527.call(nil, query_568528, nil, nil, body_568529)

var startClusterUpgrade* = Call_StartClusterUpgrade_568520(
    name: "startClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Upgrade",
    validator: validate_StartClusterUpgrade_568521, base: "",
    url: url_StartClusterUpgrade_568522, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoList_568530 = ref object of OpenApiRestCall_567668
proc url_GetApplicationTypeInfoList_568532(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationTypeInfoList_568531(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: JInt
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568533 = query.getOrDefault("timeout")
  valid_568533 = validateParameter(valid_568533, JInt, required = false,
                                 default = newJInt(60))
  if valid_568533 != nil:
    section.add "timeout", valid_568533
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568534 = query.getOrDefault("api-version")
  valid_568534 = validateParameter(valid_568534, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568534 != nil:
    section.add "api-version", valid_568534
  var valid_568535 = query.getOrDefault("ApplicationTypeDefinitionKindFilter")
  valid_568535 = validateParameter(valid_568535, JInt, required = false,
                                 default = newJInt(0))
  if valid_568535 != nil:
    section.add "ApplicationTypeDefinitionKindFilter", valid_568535
  var valid_568536 = query.getOrDefault("ContinuationToken")
  valid_568536 = validateParameter(valid_568536, JString, required = false,
                                 default = nil)
  if valid_568536 != nil:
    section.add "ContinuationToken", valid_568536
  var valid_568537 = query.getOrDefault("MaxResults")
  valid_568537 = validateParameter(valid_568537, JInt, required = false,
                                 default = newJInt(0))
  if valid_568537 != nil:
    section.add "MaxResults", valid_568537
  var valid_568538 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568538 = validateParameter(valid_568538, JBool, required = false,
                                 default = newJBool(false))
  if valid_568538 != nil:
    section.add "ExcludeApplicationParameters", valid_568538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568539: Call_GetApplicationTypeInfoList_568530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_568539.validator(path, query, header, formData, body)
  let scheme = call_568539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568539.url(scheme.get, call_568539.host, call_568539.base,
                         call_568539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568539, url, valid)

proc call*(call_568540: Call_GetApplicationTypeInfoList_568530; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationTypeDefinitionKindFilter: int = 0;
          ContinuationToken: string = ""; MaxResults: int = 0;
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoList
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeDefinitionKindFilter: int
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_568541 = newJObject()
  add(query_568541, "timeout", newJInt(timeout))
  add(query_568541, "api-version", newJString(apiVersion))
  add(query_568541, "ApplicationTypeDefinitionKindFilter",
      newJInt(ApplicationTypeDefinitionKindFilter))
  add(query_568541, "ContinuationToken", newJString(ContinuationToken))
  add(query_568541, "MaxResults", newJInt(MaxResults))
  add(query_568541, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568540.call(nil, query_568541, nil, nil, nil)

var getApplicationTypeInfoList* = Call_GetApplicationTypeInfoList_568530(
    name: "getApplicationTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes",
    validator: validate_GetApplicationTypeInfoList_568531, base: "",
    url: url_GetApplicationTypeInfoList_568532,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionApplicationType_568542 = ref object of OpenApiRestCall_567668
proc url_ProvisionApplicationType_568544(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionApplicationType_568543(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568545 = query.getOrDefault("timeout")
  valid_568545 = validateParameter(valid_568545, JInt, required = false,
                                 default = newJInt(60))
  if valid_568545 != nil:
    section.add "timeout", valid_568545
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568546 = query.getOrDefault("api-version")
  valid_568546 = validateParameter(valid_568546, JString, required = true,
                                 default = newJString("6.2"))
  if valid_568546 != nil:
    section.add "api-version", valid_568546
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568548: Call_ProvisionApplicationType_568542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  let valid = call_568548.validator(path, query, header, formData, body)
  let scheme = call_568548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568548.url(scheme.get, call_568548.host, call_568548.base,
                         call_568548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568548, url, valid)

proc call*(call_568549: Call_ProvisionApplicationType_568542;
          ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## provisionApplicationType
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  var query_568550 = newJObject()
  var body_568551 = newJObject()
  add(query_568550, "timeout", newJInt(timeout))
  add(query_568550, "api-version", newJString(apiVersion))
  if ProvisionApplicationTypeDescriptionBaseRequiredBodyParam != nil:
    body_568551 = ProvisionApplicationTypeDescriptionBaseRequiredBodyParam
  result = call_568549.call(nil, query_568550, nil, nil, body_568551)

var provisionApplicationType* = Call_ProvisionApplicationType_568542(
    name: "provisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ApplicationTypes/$/Provision",
    validator: validate_ProvisionApplicationType_568543, base: "",
    url: url_ProvisionApplicationType_568544, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoListByName_568552 = ref object of OpenApiRestCall_567668
proc url_GetApplicationTypeInfoListByName_568554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationTypeInfoListByName_568553(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568569 = path.getOrDefault("applicationTypeName")
  valid_568569 = validateParameter(valid_568569, JString, required = true,
                                 default = nil)
  if valid_568569 != nil:
    section.add "applicationTypeName", valid_568569
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString
  ##                         : The version of the application type.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568570 = query.getOrDefault("timeout")
  valid_568570 = validateParameter(valid_568570, JInt, required = false,
                                 default = newJInt(60))
  if valid_568570 != nil:
    section.add "timeout", valid_568570
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568571 = query.getOrDefault("api-version")
  valid_568571 = validateParameter(valid_568571, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568571 != nil:
    section.add "api-version", valid_568571
  var valid_568572 = query.getOrDefault("ApplicationTypeVersion")
  valid_568572 = validateParameter(valid_568572, JString, required = false,
                                 default = nil)
  if valid_568572 != nil:
    section.add "ApplicationTypeVersion", valid_568572
  var valid_568573 = query.getOrDefault("ContinuationToken")
  valid_568573 = validateParameter(valid_568573, JString, required = false,
                                 default = nil)
  if valid_568573 != nil:
    section.add "ContinuationToken", valid_568573
  var valid_568574 = query.getOrDefault("MaxResults")
  valid_568574 = validateParameter(valid_568574, JInt, required = false,
                                 default = newJInt(0))
  if valid_568574 != nil:
    section.add "MaxResults", valid_568574
  var valid_568575 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568575 = validateParameter(valid_568575, JBool, required = false,
                                 default = newJBool(false))
  if valid_568575 != nil:
    section.add "ExcludeApplicationParameters", valid_568575
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568576: Call_GetApplicationTypeInfoListByName_568552;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_568576.validator(path, query, header, formData, body)
  let scheme = call_568576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568576.url(scheme.get, call_568576.host, call_568576.base,
                         call_568576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568576, url, valid)

proc call*(call_568577: Call_GetApplicationTypeInfoListByName_568552;
          applicationTypeName: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationTypeVersion: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoListByName
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string
  ##                         : The version of the application type.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_568578 = newJObject()
  var query_568579 = newJObject()
  add(query_568579, "timeout", newJInt(timeout))
  add(query_568579, "api-version", newJString(apiVersion))
  add(path_568578, "applicationTypeName", newJString(applicationTypeName))
  add(query_568579, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_568579, "ContinuationToken", newJString(ContinuationToken))
  add(query_568579, "MaxResults", newJInt(MaxResults))
  add(query_568579, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568577.call(path_568578, query_568579, nil, nil, nil)

var getApplicationTypeInfoListByName* = Call_GetApplicationTypeInfoListByName_568552(
    name: "getApplicationTypeInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}",
    validator: validate_GetApplicationTypeInfoListByName_568553, base: "",
    url: url_GetApplicationTypeInfoListByName_568554,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationManifest_568580 = ref object of OpenApiRestCall_567668
proc url_GetApplicationManifest_568582(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetApplicationManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationManifest_568581(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response contains the application manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568583 = path.getOrDefault("applicationTypeName")
  valid_568583 = validateParameter(valid_568583, JString, required = true,
                                 default = nil)
  if valid_568583 != nil:
    section.add "applicationTypeName", valid_568583
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_568584 = query.getOrDefault("timeout")
  valid_568584 = validateParameter(valid_568584, JInt, required = false,
                                 default = newJInt(60))
  if valid_568584 != nil:
    section.add "timeout", valid_568584
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568585 = query.getOrDefault("api-version")
  valid_568585 = validateParameter(valid_568585, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568585 != nil:
    section.add "api-version", valid_568585
  var valid_568586 = query.getOrDefault("ApplicationTypeVersion")
  valid_568586 = validateParameter(valid_568586, JString, required = true,
                                 default = nil)
  if valid_568586 != nil:
    section.add "ApplicationTypeVersion", valid_568586
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568587: Call_GetApplicationManifest_568580; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response contains the application manifest XML as a string.
  ## 
  let valid = call_568587.validator(path, query, header, formData, body)
  let scheme = call_568587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568587.url(scheme.get, call_568587.host, call_568587.base,
                         call_568587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568587, url, valid)

proc call*(call_568588: Call_GetApplicationManifest_568580;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationManifest
  ## The response contains the application manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_568589 = newJObject()
  var query_568590 = newJObject()
  add(query_568590, "timeout", newJInt(timeout))
  add(query_568590, "api-version", newJString(apiVersion))
  add(path_568589, "applicationTypeName", newJString(applicationTypeName))
  add(query_568590, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_568588.call(path_568589, query_568590, nil, nil, nil)

var getApplicationManifest* = Call_GetApplicationManifest_568580(
    name: "getApplicationManifest", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest",
    validator: validate_GetApplicationManifest_568581, base: "",
    url: url_GetApplicationManifest_568582, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceManifest_568591 = ref object of OpenApiRestCall_567668
proc url_GetServiceManifest_568593(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceManifest_568592(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568594 = path.getOrDefault("applicationTypeName")
  valid_568594 = validateParameter(valid_568594, JString, required = true,
                                 default = nil)
  if valid_568594 != nil:
    section.add "applicationTypeName", valid_568594
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_568595 = query.getOrDefault("timeout")
  valid_568595 = validateParameter(valid_568595, JInt, required = false,
                                 default = newJInt(60))
  if valid_568595 != nil:
    section.add "timeout", valid_568595
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568596 = query.getOrDefault("api-version")
  valid_568596 = validateParameter(valid_568596, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568596 != nil:
    section.add "api-version", valid_568596
  var valid_568597 = query.getOrDefault("ApplicationTypeVersion")
  valid_568597 = validateParameter(valid_568597, JString, required = true,
                                 default = nil)
  if valid_568597 != nil:
    section.add "ApplicationTypeVersion", valid_568597
  var valid_568598 = query.getOrDefault("ServiceManifestName")
  valid_568598 = validateParameter(valid_568598, JString, required = true,
                                 default = nil)
  if valid_568598 != nil:
    section.add "ServiceManifestName", valid_568598
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568599: Call_GetServiceManifest_568591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  let valid = call_568599.validator(path, query, header, formData, body)
  let scheme = call_568599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568599.url(scheme.get, call_568599.host, call_568599.base,
                         call_568599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568599, url, valid)

proc call*(call_568600: Call_GetServiceManifest_568591;
          applicationTypeName: string; ApplicationTypeVersion: string;
          ServiceManifestName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceManifest
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  var path_568601 = newJObject()
  var query_568602 = newJObject()
  add(query_568602, "timeout", newJInt(timeout))
  add(query_568602, "api-version", newJString(apiVersion))
  add(path_568601, "applicationTypeName", newJString(applicationTypeName))
  add(query_568602, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_568602, "ServiceManifestName", newJString(ServiceManifestName))
  result = call_568600.call(path_568601, query_568602, nil, nil, nil)

var getServiceManifest* = Call_GetServiceManifest_568591(
    name: "getServiceManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest",
    validator: validate_GetServiceManifest_568592, base: "",
    url: url_GetServiceManifest_568593, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoList_568603 = ref object of OpenApiRestCall_567668
proc url_GetServiceTypeInfoList_568605(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoList_568604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568606 = path.getOrDefault("applicationTypeName")
  valid_568606 = validateParameter(valid_568606, JString, required = true,
                                 default = nil)
  if valid_568606 != nil:
    section.add "applicationTypeName", valid_568606
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_568607 = query.getOrDefault("timeout")
  valid_568607 = validateParameter(valid_568607, JInt, required = false,
                                 default = newJInt(60))
  if valid_568607 != nil:
    section.add "timeout", valid_568607
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568608 = query.getOrDefault("api-version")
  valid_568608 = validateParameter(valid_568608, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568608 != nil:
    section.add "api-version", valid_568608
  var valid_568609 = query.getOrDefault("ApplicationTypeVersion")
  valid_568609 = validateParameter(valid_568609, JString, required = true,
                                 default = nil)
  if valid_568609 != nil:
    section.add "ApplicationTypeVersion", valid_568609
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568610: Call_GetServiceTypeInfoList_568603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  let valid = call_568610.validator(path, query, header, formData, body)
  let scheme = call_568610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568610.url(scheme.get, call_568610.host, call_568610.base,
                         call_568610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568610, url, valid)

proc call*(call_568611: Call_GetServiceTypeInfoList_568603;
          applicationTypeName: string; ApplicationTypeVersion: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoList
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_568612 = newJObject()
  var query_568613 = newJObject()
  add(query_568613, "timeout", newJInt(timeout))
  add(query_568613, "api-version", newJString(apiVersion))
  add(path_568612, "applicationTypeName", newJString(applicationTypeName))
  add(query_568613, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_568611.call(path_568612, query_568613, nil, nil, nil)

var getServiceTypeInfoList* = Call_GetServiceTypeInfoList_568603(
    name: "getServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes",
    validator: validate_GetServiceTypeInfoList_568604, base: "",
    url: url_GetServiceTypeInfoList_568605, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoByName_568614 = ref object of OpenApiRestCall_567668
proc url_GetServiceTypeInfoByName_568616(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoByName_568615(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_568617 = path.getOrDefault("serviceTypeName")
  valid_568617 = validateParameter(valid_568617, JString, required = true,
                                 default = nil)
  if valid_568617 != nil:
    section.add "serviceTypeName", valid_568617
  var valid_568618 = path.getOrDefault("applicationTypeName")
  valid_568618 = validateParameter(valid_568618, JString, required = true,
                                 default = nil)
  if valid_568618 != nil:
    section.add "applicationTypeName", valid_568618
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  section = newJObject()
  var valid_568619 = query.getOrDefault("timeout")
  valid_568619 = validateParameter(valid_568619, JInt, required = false,
                                 default = newJInt(60))
  if valid_568619 != nil:
    section.add "timeout", valid_568619
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568620 = query.getOrDefault("api-version")
  valid_568620 = validateParameter(valid_568620, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568620 != nil:
    section.add "api-version", valid_568620
  var valid_568621 = query.getOrDefault("ApplicationTypeVersion")
  valid_568621 = validateParameter(valid_568621, JString, required = true,
                                 default = nil)
  if valid_568621 != nil:
    section.add "ApplicationTypeVersion", valid_568621
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568622: Call_GetServiceTypeInfoByName_568614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  let valid = call_568622.validator(path, query, header, formData, body)
  let scheme = call_568622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568622.url(scheme.get, call_568622.host, call_568622.base,
                         call_568622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568622, url, valid)

proc call*(call_568623: Call_GetServiceTypeInfoByName_568614;
          serviceTypeName: string; applicationTypeName: string;
          ApplicationTypeVersion: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getServiceTypeInfoByName
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  var path_568624 = newJObject()
  var query_568625 = newJObject()
  add(query_568625, "timeout", newJInt(timeout))
  add(path_568624, "serviceTypeName", newJString(serviceTypeName))
  add(query_568625, "api-version", newJString(apiVersion))
  add(path_568624, "applicationTypeName", newJString(applicationTypeName))
  add(query_568625, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  result = call_568623.call(path_568624, query_568625, nil, nil, nil)

var getServiceTypeInfoByName* = Call_GetServiceTypeInfoByName_568614(
    name: "getServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetServiceTypeInfoByName_568615, base: "",
    url: url_GetServiceTypeInfoByName_568616, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionApplicationType_568626 = ref object of OpenApiRestCall_567668
proc url_UnprovisionApplicationType_568628(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/Unprovision")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UnprovisionApplicationType_568627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_568629 = path.getOrDefault("applicationTypeName")
  valid_568629 = validateParameter(valid_568629, JString, required = true,
                                 default = nil)
  if valid_568629 != nil:
    section.add "applicationTypeName", valid_568629
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568630 = query.getOrDefault("timeout")
  valid_568630 = validateParameter(valid_568630, JInt, required = false,
                                 default = newJInt(60))
  if valid_568630 != nil:
    section.add "timeout", valid_568630
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568631 = query.getOrDefault("api-version")
  valid_568631 = validateParameter(valid_568631, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568631 != nil:
    section.add "api-version", valid_568631
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568633: Call_UnprovisionApplicationType_568626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  let valid = call_568633.validator(path, query, header, formData, body)
  let scheme = call_568633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568633.url(scheme.get, call_568633.host, call_568633.base,
                         call_568633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568633, url, valid)

proc call*(call_568634: Call_UnprovisionApplicationType_568626;
          applicationTypeName: string;
          UnprovisionApplicationTypeDescriptionInfo: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## unprovisionApplicationType
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  var path_568635 = newJObject()
  var query_568636 = newJObject()
  var body_568637 = newJObject()
  add(query_568636, "timeout", newJInt(timeout))
  add(query_568636, "api-version", newJString(apiVersion))
  add(path_568635, "applicationTypeName", newJString(applicationTypeName))
  if UnprovisionApplicationTypeDescriptionInfo != nil:
    body_568637 = UnprovisionApplicationTypeDescriptionInfo
  result = call_568634.call(path_568635, query_568636, nil, nil, body_568637)

var unprovisionApplicationType* = Call_UnprovisionApplicationType_568626(
    name: "unprovisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/Unprovision",
    validator: validate_UnprovisionApplicationType_568627, base: "",
    url: url_UnprovisionApplicationType_568628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfoList_568638 = ref object of OpenApiRestCall_567668
proc url_GetApplicationInfoList_568640(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationInfoList_568639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: JInt
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: JString
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568641 = query.getOrDefault("timeout")
  valid_568641 = validateParameter(valid_568641, JInt, required = false,
                                 default = newJInt(60))
  if valid_568641 != nil:
    section.add "timeout", valid_568641
  var valid_568642 = query.getOrDefault("ApplicationDefinitionKindFilter")
  valid_568642 = validateParameter(valid_568642, JInt, required = false,
                                 default = newJInt(0))
  if valid_568642 != nil:
    section.add "ApplicationDefinitionKindFilter", valid_568642
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568643 = query.getOrDefault("api-version")
  valid_568643 = validateParameter(valid_568643, JString, required = true,
                                 default = newJString("6.1"))
  if valid_568643 != nil:
    section.add "api-version", valid_568643
  var valid_568644 = query.getOrDefault("ApplicationTypeName")
  valid_568644 = validateParameter(valid_568644, JString, required = false,
                                 default = nil)
  if valid_568644 != nil:
    section.add "ApplicationTypeName", valid_568644
  var valid_568645 = query.getOrDefault("ContinuationToken")
  valid_568645 = validateParameter(valid_568645, JString, required = false,
                                 default = nil)
  if valid_568645 != nil:
    section.add "ContinuationToken", valid_568645
  var valid_568646 = query.getOrDefault("MaxResults")
  valid_568646 = validateParameter(valid_568646, JInt, required = false,
                                 default = newJInt(0))
  if valid_568646 != nil:
    section.add "MaxResults", valid_568646
  var valid_568647 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568647 = validateParameter(valid_568647, JBool, required = false,
                                 default = newJBool(false))
  if valid_568647 != nil:
    section.add "ExcludeApplicationParameters", valid_568647
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568648: Call_GetApplicationInfoList_568638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  let valid = call_568648.validator(path, query, header, formData, body)
  let scheme = call_568648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568648.url(scheme.get, call_568648.host, call_568648.base,
                         call_568648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568648, url, valid)

proc call*(call_568649: Call_GetApplicationInfoList_568638; timeout: int = 60;
          ApplicationDefinitionKindFilter: int = 0; apiVersion: string = "6.1";
          ApplicationTypeName: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfoList
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationDefinitionKindFilter: int
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeName: string
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_568650 = newJObject()
  add(query_568650, "timeout", newJInt(timeout))
  add(query_568650, "ApplicationDefinitionKindFilter",
      newJInt(ApplicationDefinitionKindFilter))
  add(query_568650, "api-version", newJString(apiVersion))
  add(query_568650, "ApplicationTypeName", newJString(ApplicationTypeName))
  add(query_568650, "ContinuationToken", newJString(ContinuationToken))
  add(query_568650, "MaxResults", newJInt(MaxResults))
  add(query_568650, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568649.call(nil, query_568650, nil, nil, nil)

var getApplicationInfoList* = Call_GetApplicationInfoList_568638(
    name: "getApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications",
    validator: validate_GetApplicationInfoList_568639, base: "",
    url: url_GetApplicationInfoList_568640, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateApplication_568651 = ref object of OpenApiRestCall_567668
proc url_CreateApplication_568653(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateApplication_568652(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a Service Fabric application using the specified description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568654 = query.getOrDefault("timeout")
  valid_568654 = validateParameter(valid_568654, JInt, required = false,
                                 default = newJInt(60))
  if valid_568654 != nil:
    section.add "timeout", valid_568654
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568655 = query.getOrDefault("api-version")
  valid_568655 = validateParameter(valid_568655, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568655 != nil:
    section.add "api-version", valid_568655
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568657: Call_CreateApplication_568651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric application using the specified description.
  ## 
  let valid = call_568657.validator(path, query, header, formData, body)
  let scheme = call_568657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568657.url(scheme.get, call_568657.host, call_568657.base,
                         call_568657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568657, url, valid)

proc call*(call_568658: Call_CreateApplication_568651;
          ApplicationDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## createApplication
  ## Creates a Service Fabric application using the specified description.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  var query_568659 = newJObject()
  var body_568660 = newJObject()
  add(query_568659, "timeout", newJInt(timeout))
  add(query_568659, "api-version", newJString(apiVersion))
  if ApplicationDescription != nil:
    body_568660 = ApplicationDescription
  result = call_568658.call(nil, query_568659, nil, nil, body_568660)

var createApplication* = Call_CreateApplication_568651(name: "createApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/$/Create", validator: validate_CreateApplication_568652,
    base: "", url: url_CreateApplication_568653,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfo_568661 = ref object of OpenApiRestCall_567668
proc url_GetApplicationInfo_568663(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationInfo_568662(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568664 = path.getOrDefault("applicationId")
  valid_568664 = validateParameter(valid_568664, JString, required = true,
                                 default = nil)
  if valid_568664 != nil:
    section.add "applicationId", valid_568664
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_568665 = query.getOrDefault("timeout")
  valid_568665 = validateParameter(valid_568665, JInt, required = false,
                                 default = newJInt(60))
  if valid_568665 != nil:
    section.add "timeout", valid_568665
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568666 = query.getOrDefault("api-version")
  valid_568666 = validateParameter(valid_568666, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568666 != nil:
    section.add "api-version", valid_568666
  var valid_568667 = query.getOrDefault("ExcludeApplicationParameters")
  valid_568667 = validateParameter(valid_568667, JBool, required = false,
                                 default = newJBool(false))
  if valid_568667 != nil:
    section.add "ExcludeApplicationParameters", valid_568667
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568668: Call_GetApplicationInfo_568661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  let valid = call_568668.validator(path, query, header, formData, body)
  let scheme = call_568668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568668.url(scheme.get, call_568668.host, call_568668.base,
                         call_568668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568668, url, valid)

proc call*(call_568669: Call_GetApplicationInfo_568661; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfo
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_568670 = newJObject()
  var query_568671 = newJObject()
  add(query_568671, "timeout", newJInt(timeout))
  add(query_568671, "api-version", newJString(apiVersion))
  add(path_568670, "applicationId", newJString(applicationId))
  add(query_568671, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_568669.call(path_568670, query_568671, nil, nil, nil)

var getApplicationInfo* = Call_GetApplicationInfo_568661(
    name: "getApplicationInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}",
    validator: validate_GetApplicationInfo_568662, base: "",
    url: url_GetApplicationInfo_568663, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteApplication_568672 = ref object of OpenApiRestCall_567668
proc url_DeleteApplication_568674(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteApplication_568673(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568675 = path.getOrDefault("applicationId")
  valid_568675 = validateParameter(valid_568675, JString, required = true,
                                 default = nil)
  if valid_568675 != nil:
    section.add "applicationId", valid_568675
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_568676 = query.getOrDefault("timeout")
  valid_568676 = validateParameter(valid_568676, JInt, required = false,
                                 default = newJInt(60))
  if valid_568676 != nil:
    section.add "timeout", valid_568676
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568677 = query.getOrDefault("api-version")
  valid_568677 = validateParameter(valid_568677, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568677 != nil:
    section.add "api-version", valid_568677
  var valid_568678 = query.getOrDefault("ForceRemove")
  valid_568678 = validateParameter(valid_568678, JBool, required = false, default = nil)
  if valid_568678 != nil:
    section.add "ForceRemove", valid_568678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568679: Call_DeleteApplication_568672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  let valid = call_568679.validator(path, query, header, formData, body)
  let scheme = call_568679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568679.url(scheme.get, call_568679.host, call_568679.base,
                         call_568679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568679, url, valid)

proc call*(call_568680: Call_DeleteApplication_568672; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteApplication
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568681 = newJObject()
  var query_568682 = newJObject()
  add(query_568682, "timeout", newJInt(timeout))
  add(query_568682, "api-version", newJString(apiVersion))
  add(query_568682, "ForceRemove", newJBool(ForceRemove))
  add(path_568681, "applicationId", newJString(applicationId))
  result = call_568680.call(path_568681, query_568682, nil, nil, nil)

var deleteApplication* = Call_DeleteApplication_568672(name: "deleteApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/Delete",
    validator: validate_DeleteApplication_568673, base: "",
    url: url_DeleteApplication_568674, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableApplicationBackup_568683 = ref object of OpenApiRestCall_567668
proc url_DisableApplicationBackup_568685(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableApplicationBackup_568684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568686 = path.getOrDefault("applicationId")
  valid_568686 = validateParameter(valid_568686, JString, required = true,
                                 default = nil)
  if valid_568686 != nil:
    section.add "applicationId", valid_568686
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568687 = query.getOrDefault("timeout")
  valid_568687 = validateParameter(valid_568687, JInt, required = false,
                                 default = newJInt(60))
  if valid_568687 != nil:
    section.add "timeout", valid_568687
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568688 = query.getOrDefault("api-version")
  valid_568688 = validateParameter(valid_568688, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568688 != nil:
    section.add "api-version", valid_568688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568690: Call_DisableApplicationBackup_568683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  let valid = call_568690.validator(path, query, header, formData, body)
  let scheme = call_568690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568690.url(scheme.get, call_568690.host, call_568690.base,
                         call_568690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568690, url, valid)

proc call*(call_568691: Call_DisableApplicationBackup_568683;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableApplicationBackup
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568692 = newJObject()
  var query_568693 = newJObject()
  var body_568694 = newJObject()
  add(query_568693, "timeout", newJInt(timeout))
  add(query_568693, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_568694 = DisableBackupDescription
  add(path_568692, "applicationId", newJString(applicationId))
  result = call_568691.call(path_568692, query_568693, nil, nil, body_568694)

var disableApplicationBackup* = Call_DisableApplicationBackup_568683(
    name: "disableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/DisableBackup",
    validator: validate_DisableApplicationBackup_568684, base: "",
    url: url_DisableApplicationBackup_568685, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableApplicationBackup_568695 = ref object of OpenApiRestCall_567668
proc url_EnableApplicationBackup_568697(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableApplicationBackup_568696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568698 = path.getOrDefault("applicationId")
  valid_568698 = validateParameter(valid_568698, JString, required = true,
                                 default = nil)
  if valid_568698 != nil:
    section.add "applicationId", valid_568698
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568699 = query.getOrDefault("timeout")
  valid_568699 = validateParameter(valid_568699, JInt, required = false,
                                 default = newJInt(60))
  if valid_568699 != nil:
    section.add "timeout", valid_568699
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568700 = query.getOrDefault("api-version")
  valid_568700 = validateParameter(valid_568700, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568700 != nil:
    section.add "api-version", valid_568700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568702: Call_EnableApplicationBackup_568695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_568702.validator(path, query, header, formData, body)
  let scheme = call_568702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568702.url(scheme.get, call_568702.host, call_568702.base,
                         call_568702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568702, url, valid)

proc call*(call_568703: Call_EnableApplicationBackup_568695;
          EnableBackupDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## enableApplicationBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568704 = newJObject()
  var query_568705 = newJObject()
  var body_568706 = newJObject()
  add(query_568705, "timeout", newJInt(timeout))
  add(query_568705, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_568706 = EnableBackupDescription
  add(path_568704, "applicationId", newJString(applicationId))
  result = call_568703.call(path_568704, query_568705, nil, nil, body_568706)

var enableApplicationBackup* = Call_EnableApplicationBackup_568695(
    name: "enableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/EnableBackup",
    validator: validate_EnableApplicationBackup_568696, base: "",
    url: url_EnableApplicationBackup_568697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupConfigurationInfo_568707 = ref object of OpenApiRestCall_567668
proc url_GetApplicationBackupConfigurationInfo_568709(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupConfigurationInfo_568708(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568710 = path.getOrDefault("applicationId")
  valid_568710 = validateParameter(valid_568710, JString, required = true,
                                 default = nil)
  if valid_568710 != nil:
    section.add "applicationId", valid_568710
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568711 = query.getOrDefault("timeout")
  valid_568711 = validateParameter(valid_568711, JInt, required = false,
                                 default = newJInt(60))
  if valid_568711 != nil:
    section.add "timeout", valid_568711
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568712 = query.getOrDefault("api-version")
  valid_568712 = validateParameter(valid_568712, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568712 != nil:
    section.add "api-version", valid_568712
  var valid_568713 = query.getOrDefault("ContinuationToken")
  valid_568713 = validateParameter(valid_568713, JString, required = false,
                                 default = nil)
  if valid_568713 != nil:
    section.add "ContinuationToken", valid_568713
  var valid_568714 = query.getOrDefault("MaxResults")
  valid_568714 = validateParameter(valid_568714, JInt, required = false,
                                 default = newJInt(0))
  if valid_568714 != nil:
    section.add "MaxResults", valid_568714
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568715: Call_GetApplicationBackupConfigurationInfo_568707;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  let valid = call_568715.validator(path, query, header, formData, body)
  let scheme = call_568715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568715.url(scheme.get, call_568715.host, call_568715.base,
                         call_568715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568715, url, valid)

proc call*(call_568716: Call_GetApplicationBackupConfigurationInfo_568707;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getApplicationBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_568717 = newJObject()
  var query_568718 = newJObject()
  add(query_568718, "timeout", newJInt(timeout))
  add(query_568718, "api-version", newJString(apiVersion))
  add(path_568717, "applicationId", newJString(applicationId))
  add(query_568718, "ContinuationToken", newJString(ContinuationToken))
  add(query_568718, "MaxResults", newJInt(MaxResults))
  result = call_568716.call(path_568717, query_568718, nil, nil, nil)

var getApplicationBackupConfigurationInfo* = Call_GetApplicationBackupConfigurationInfo_568707(
    name: "getApplicationBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackupConfigurationInfo",
    validator: validate_GetApplicationBackupConfigurationInfo_568708, base: "",
    url: url_GetApplicationBackupConfigurationInfo_568709,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupList_568719 = ref object of OpenApiRestCall_567668
proc url_GetApplicationBackupList_568721(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupList_568720(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568722 = path.getOrDefault("applicationId")
  valid_568722 = validateParameter(valid_568722, JString, required = true,
                                 default = nil)
  if valid_568722 != nil:
    section.add "applicationId", valid_568722
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568723 = query.getOrDefault("timeout")
  valid_568723 = validateParameter(valid_568723, JInt, required = false,
                                 default = newJInt(60))
  if valid_568723 != nil:
    section.add "timeout", valid_568723
  var valid_568724 = query.getOrDefault("Latest")
  valid_568724 = validateParameter(valid_568724, JBool, required = false,
                                 default = newJBool(false))
  if valid_568724 != nil:
    section.add "Latest", valid_568724
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568725 = query.getOrDefault("api-version")
  valid_568725 = validateParameter(valid_568725, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568725 != nil:
    section.add "api-version", valid_568725
  var valid_568726 = query.getOrDefault("StartDateTimeFilter")
  valid_568726 = validateParameter(valid_568726, JString, required = false,
                                 default = nil)
  if valid_568726 != nil:
    section.add "StartDateTimeFilter", valid_568726
  var valid_568727 = query.getOrDefault("EndDateTimeFilter")
  valid_568727 = validateParameter(valid_568727, JString, required = false,
                                 default = nil)
  if valid_568727 != nil:
    section.add "EndDateTimeFilter", valid_568727
  var valid_568728 = query.getOrDefault("ContinuationToken")
  valid_568728 = validateParameter(valid_568728, JString, required = false,
                                 default = nil)
  if valid_568728 != nil:
    section.add "ContinuationToken", valid_568728
  var valid_568729 = query.getOrDefault("MaxResults")
  valid_568729 = validateParameter(valid_568729, JInt, required = false,
                                 default = newJInt(0))
  if valid_568729 != nil:
    section.add "MaxResults", valid_568729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568730: Call_GetApplicationBackupList_568719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_568730.validator(path, query, header, formData, body)
  let scheme = call_568730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568730.url(scheme.get, call_568730.host, call_568730.base,
                         call_568730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568730, url, valid)

proc call*(call_568731: Call_GetApplicationBackupList_568719;
          applicationId: string; timeout: int = 60; Latest: bool = false;
          apiVersion: string = "6.4"; StartDateTimeFilter: string = "";
          EndDateTimeFilter: string = ""; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getApplicationBackupList
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_568732 = newJObject()
  var query_568733 = newJObject()
  add(query_568733, "timeout", newJInt(timeout))
  add(query_568733, "Latest", newJBool(Latest))
  add(query_568733, "api-version", newJString(apiVersion))
  add(query_568733, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_568733, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_568732, "applicationId", newJString(applicationId))
  add(query_568733, "ContinuationToken", newJString(ContinuationToken))
  add(query_568733, "MaxResults", newJInt(MaxResults))
  result = call_568731.call(path_568732, query_568733, nil, nil, nil)

var getApplicationBackupList* = Call_GetApplicationBackupList_568719(
    name: "getApplicationBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackups",
    validator: validate_GetApplicationBackupList_568720, base: "",
    url: url_GetApplicationBackupList_568721, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealthUsingPolicy_568748 = ref object of OpenApiRestCall_567668
proc url_GetApplicationHealthUsingPolicy_568750(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealthUsingPolicy_568749(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568751 = path.getOrDefault("applicationId")
  valid_568751 = validateParameter(valid_568751, JString, required = true,
                                 default = nil)
  if valid_568751 != nil:
    section.add "applicationId", valid_568751
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568752 = query.getOrDefault("timeout")
  valid_568752 = validateParameter(valid_568752, JInt, required = false,
                                 default = newJInt(60))
  if valid_568752 != nil:
    section.add "timeout", valid_568752
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568753 = query.getOrDefault("api-version")
  valid_568753 = validateParameter(valid_568753, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568753 != nil:
    section.add "api-version", valid_568753
  var valid_568754 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568754 = validateParameter(valid_568754, JBool, required = false,
                                 default = newJBool(false))
  if valid_568754 != nil:
    section.add "ExcludeHealthStatistics", valid_568754
  var valid_568755 = query.getOrDefault("EventsHealthStateFilter")
  valid_568755 = validateParameter(valid_568755, JInt, required = false,
                                 default = newJInt(0))
  if valid_568755 != nil:
    section.add "EventsHealthStateFilter", valid_568755
  var valid_568756 = query.getOrDefault("ServicesHealthStateFilter")
  valid_568756 = validateParameter(valid_568756, JInt, required = false,
                                 default = newJInt(0))
  if valid_568756 != nil:
    section.add "ServicesHealthStateFilter", valid_568756
  var valid_568757 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_568757 = validateParameter(valid_568757, JInt, required = false,
                                 default = newJInt(0))
  if valid_568757 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_568757
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568759: Call_GetApplicationHealthUsingPolicy_568748;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_568759.validator(path, query, header, formData, body)
  let scheme = call_568759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568759.url(scheme.get, call_568759.host, call_568759.base,
                         call_568759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568759, url, valid)

proc call*(call_568760: Call_GetApplicationHealthUsingPolicy_568748;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealthUsingPolicy
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_568761 = newJObject()
  var query_568762 = newJObject()
  var body_568763 = newJObject()
  add(query_568762, "timeout", newJInt(timeout))
  add(query_568762, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_568763 = ApplicationHealthPolicy
  add(query_568762, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568762, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_568761, "applicationId", newJString(applicationId))
  add(query_568762, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_568762, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_568760.call(path_568761, query_568762, nil, nil, body_568763)

var getApplicationHealthUsingPolicy* = Call_GetApplicationHealthUsingPolicy_568748(
    name: "getApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealthUsingPolicy_568749, base: "",
    url: url_GetApplicationHealthUsingPolicy_568750,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealth_568734 = ref object of OpenApiRestCall_567668
proc url_GetApplicationHealth_568736(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealth_568735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568737 = path.getOrDefault("applicationId")
  valid_568737 = validateParameter(valid_568737, JString, required = true,
                                 default = nil)
  if valid_568737 != nil:
    section.add "applicationId", valid_568737
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_568738 = query.getOrDefault("timeout")
  valid_568738 = validateParameter(valid_568738, JInt, required = false,
                                 default = newJInt(60))
  if valid_568738 != nil:
    section.add "timeout", valid_568738
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568739 = query.getOrDefault("api-version")
  valid_568739 = validateParameter(valid_568739, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568739 != nil:
    section.add "api-version", valid_568739
  var valid_568740 = query.getOrDefault("ExcludeHealthStatistics")
  valid_568740 = validateParameter(valid_568740, JBool, required = false,
                                 default = newJBool(false))
  if valid_568740 != nil:
    section.add "ExcludeHealthStatistics", valid_568740
  var valid_568741 = query.getOrDefault("EventsHealthStateFilter")
  valid_568741 = validateParameter(valid_568741, JInt, required = false,
                                 default = newJInt(0))
  if valid_568741 != nil:
    section.add "EventsHealthStateFilter", valid_568741
  var valid_568742 = query.getOrDefault("ServicesHealthStateFilter")
  valid_568742 = validateParameter(valid_568742, JInt, required = false,
                                 default = newJInt(0))
  if valid_568742 != nil:
    section.add "ServicesHealthStateFilter", valid_568742
  var valid_568743 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_568743 = validateParameter(valid_568743, JInt, required = false,
                                 default = newJInt(0))
  if valid_568743 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_568743
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568744: Call_GetApplicationHealth_568734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  let valid = call_568744.validator(path, query, header, formData, body)
  let scheme = call_568744.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568744.url(scheme.get, call_568744.host, call_568744.base,
                         call_568744.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568744, url, valid)

proc call*(call_568745: Call_GetApplicationHealth_568734; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          ServicesHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealth
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_568746 = newJObject()
  var query_568747 = newJObject()
  add(query_568747, "timeout", newJInt(timeout))
  add(query_568747, "api-version", newJString(apiVersion))
  add(query_568747, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_568747, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_568746, "applicationId", newJString(applicationId))
  add(query_568747, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_568747, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_568745.call(path_568746, query_568747, nil, nil, nil)

var getApplicationHealth* = Call_GetApplicationHealth_568734(
    name: "getApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealth_568735, base: "",
    url: url_GetApplicationHealth_568736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationLoadInfo_568764 = ref object of OpenApiRestCall_567668
proc url_GetApplicationLoadInfo_568766(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationLoadInfo_568765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568767 = path.getOrDefault("applicationId")
  valid_568767 = validateParameter(valid_568767, JString, required = true,
                                 default = nil)
  if valid_568767 != nil:
    section.add "applicationId", valid_568767
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568768 = query.getOrDefault("timeout")
  valid_568768 = validateParameter(valid_568768, JInt, required = false,
                                 default = newJInt(60))
  if valid_568768 != nil:
    section.add "timeout", valid_568768
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568769 = query.getOrDefault("api-version")
  valid_568769 = validateParameter(valid_568769, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568769 != nil:
    section.add "api-version", valid_568769
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568770: Call_GetApplicationLoadInfo_568764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  let valid = call_568770.validator(path, query, header, formData, body)
  let scheme = call_568770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568770.url(scheme.get, call_568770.host, call_568770.base,
                         call_568770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568770, url, valid)

proc call*(call_568771: Call_GetApplicationLoadInfo_568764; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationLoadInfo
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568772 = newJObject()
  var query_568773 = newJObject()
  add(query_568773, "timeout", newJInt(timeout))
  add(query_568773, "api-version", newJString(apiVersion))
  add(path_568772, "applicationId", newJString(applicationId))
  result = call_568771.call(path_568772, query_568773, nil, nil, nil)

var getApplicationLoadInfo* = Call_GetApplicationLoadInfo_568764(
    name: "getApplicationLoadInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetLoadInformation",
    validator: validate_GetApplicationLoadInfo_568765, base: "",
    url: url_GetApplicationLoadInfo_568766, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfoList_568774 = ref object of OpenApiRestCall_567668
proc url_GetServiceInfoList_568776(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfoList_568775(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568777 = path.getOrDefault("applicationId")
  valid_568777 = validateParameter(valid_568777, JString, required = true,
                                 default = nil)
  if valid_568777 != nil:
    section.add "applicationId", valid_568777
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: JString
  ##                  : The service type name used to filter the services to query for.
  section = newJObject()
  var valid_568778 = query.getOrDefault("timeout")
  valid_568778 = validateParameter(valid_568778, JInt, required = false,
                                 default = newJInt(60))
  if valid_568778 != nil:
    section.add "timeout", valid_568778
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568779 = query.getOrDefault("api-version")
  valid_568779 = validateParameter(valid_568779, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568779 != nil:
    section.add "api-version", valid_568779
  var valid_568780 = query.getOrDefault("ContinuationToken")
  valid_568780 = validateParameter(valid_568780, JString, required = false,
                                 default = nil)
  if valid_568780 != nil:
    section.add "ContinuationToken", valid_568780
  var valid_568781 = query.getOrDefault("ServiceTypeName")
  valid_568781 = validateParameter(valid_568781, JString, required = false,
                                 default = nil)
  if valid_568781 != nil:
    section.add "ServiceTypeName", valid_568781
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568782: Call_GetServiceInfoList_568774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  let valid = call_568782.validator(path, query, header, formData, body)
  let scheme = call_568782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568782.url(scheme.get, call_568782.host, call_568782.base,
                         call_568782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568782, url, valid)

proc call*(call_568783: Call_GetServiceInfoList_568774; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          ServiceTypeName: string = ""): Recallable =
  ## getServiceInfoList
  ## Returns the information about all services belonging to the application specified by the application ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: string
  ##                  : The service type name used to filter the services to query for.
  var path_568784 = newJObject()
  var query_568785 = newJObject()
  add(query_568785, "timeout", newJInt(timeout))
  add(query_568785, "api-version", newJString(apiVersion))
  add(path_568784, "applicationId", newJString(applicationId))
  add(query_568785, "ContinuationToken", newJString(ContinuationToken))
  add(query_568785, "ServiceTypeName", newJString(ServiceTypeName))
  result = call_568783.call(path_568784, query_568785, nil, nil, nil)

var getServiceInfoList* = Call_GetServiceInfoList_568774(
    name: "getServiceInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices",
    validator: validate_GetServiceInfoList_568775, base: "",
    url: url_GetServiceInfoList_568776, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateService_568786 = ref object of OpenApiRestCall_567668
proc url_CreateService_568788(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/$/Create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateService_568787(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568789 = path.getOrDefault("applicationId")
  valid_568789 = validateParameter(valid_568789, JString, required = true,
                                 default = nil)
  if valid_568789 != nil:
    section.add "applicationId", valid_568789
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568790 = query.getOrDefault("timeout")
  valid_568790 = validateParameter(valid_568790, JInt, required = false,
                                 default = newJInt(60))
  if valid_568790 != nil:
    section.add "timeout", valid_568790
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568791 = query.getOrDefault("api-version")
  valid_568791 = validateParameter(valid_568791, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568791 != nil:
    section.add "api-version", valid_568791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568793: Call_CreateService_568786; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  let valid = call_568793.validator(path, query, header, formData, body)
  let scheme = call_568793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568793.url(scheme.get, call_568793.host, call_568793.base,
                         call_568793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568793, url, valid)

proc call*(call_568794: Call_CreateService_568786; applicationId: string;
          ServiceDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createService
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  var path_568795 = newJObject()
  var query_568796 = newJObject()
  var body_568797 = newJObject()
  add(query_568796, "timeout", newJInt(timeout))
  add(query_568796, "api-version", newJString(apiVersion))
  add(path_568795, "applicationId", newJString(applicationId))
  if ServiceDescription != nil:
    body_568797 = ServiceDescription
  result = call_568794.call(path_568795, query_568796, nil, nil, body_568797)

var createService* = Call_CreateService_568786(name: "createService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/Create",
    validator: validate_CreateService_568787, base: "", url: url_CreateService_568788,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateServiceFromTemplate_568798 = ref object of OpenApiRestCall_567668
proc url_CreateServiceFromTemplate_568800(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetServices/$/CreateFromTemplate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateServiceFromTemplate_568799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568801 = path.getOrDefault("applicationId")
  valid_568801 = validateParameter(valid_568801, JString, required = true,
                                 default = nil)
  if valid_568801 != nil:
    section.add "applicationId", valid_568801
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568802 = query.getOrDefault("timeout")
  valid_568802 = validateParameter(valid_568802, JInt, required = false,
                                 default = newJInt(60))
  if valid_568802 != nil:
    section.add "timeout", valid_568802
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568803 = query.getOrDefault("api-version")
  valid_568803 = validateParameter(valid_568803, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568803 != nil:
    section.add "api-version", valid_568803
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568805: Call_CreateServiceFromTemplate_568798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  let valid = call_568805.validator(path, query, header, formData, body)
  let scheme = call_568805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568805.url(scheme.get, call_568805.host, call_568805.base,
                         call_568805.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568805, url, valid)

proc call*(call_568806: Call_CreateServiceFromTemplate_568798;
          ServiceFromTemplateDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createServiceFromTemplate
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568807 = newJObject()
  var query_568808 = newJObject()
  var body_568809 = newJObject()
  add(query_568808, "timeout", newJInt(timeout))
  add(query_568808, "api-version", newJString(apiVersion))
  if ServiceFromTemplateDescription != nil:
    body_568809 = ServiceFromTemplateDescription
  add(path_568807, "applicationId", newJString(applicationId))
  result = call_568806.call(path_568807, query_568808, nil, nil, body_568809)

var createServiceFromTemplate* = Call_CreateServiceFromTemplate_568798(
    name: "createServiceFromTemplate", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate",
    validator: validate_CreateServiceFromTemplate_568799, base: "",
    url: url_CreateServiceFromTemplate_568800,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfo_568810 = ref object of OpenApiRestCall_567668
proc url_GetServiceInfo_568812(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/"),
               (kind: VariableSegment, value: "serviceId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfo_568811(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568813 = path.getOrDefault("applicationId")
  valid_568813 = validateParameter(valid_568813, JString, required = true,
                                 default = nil)
  if valid_568813 != nil:
    section.add "applicationId", valid_568813
  var valid_568814 = path.getOrDefault("serviceId")
  valid_568814 = validateParameter(valid_568814, JString, required = true,
                                 default = nil)
  if valid_568814 != nil:
    section.add "serviceId", valid_568814
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568815 = query.getOrDefault("timeout")
  valid_568815 = validateParameter(valid_568815, JInt, required = false,
                                 default = newJInt(60))
  if valid_568815 != nil:
    section.add "timeout", valid_568815
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568816 = query.getOrDefault("api-version")
  valid_568816 = validateParameter(valid_568816, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568816 != nil:
    section.add "api-version", valid_568816
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568817: Call_GetServiceInfo_568810; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  let valid = call_568817.validator(path, query, header, formData, body)
  let scheme = call_568817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568817.url(scheme.get, call_568817.host, call_568817.base,
                         call_568817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568817, url, valid)

proc call*(call_568818: Call_GetServiceInfo_568810; applicationId: string;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceInfo
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_568819 = newJObject()
  var query_568820 = newJObject()
  add(query_568820, "timeout", newJInt(timeout))
  add(query_568820, "api-version", newJString(apiVersion))
  add(path_568819, "applicationId", newJString(applicationId))
  add(path_568819, "serviceId", newJString(serviceId))
  result = call_568818.call(path_568819, query_568820, nil, nil, nil)

var getServiceInfo* = Call_GetServiceInfo_568810(name: "getServiceInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/{serviceId}",
    validator: validate_GetServiceInfo_568811, base: "", url: url_GetServiceInfo_568812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationUpgrade_568821 = ref object of OpenApiRestCall_567668
proc url_GetApplicationUpgrade_568823(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationUpgrade_568822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568824 = path.getOrDefault("applicationId")
  valid_568824 = validateParameter(valid_568824, JString, required = true,
                                 default = nil)
  if valid_568824 != nil:
    section.add "applicationId", valid_568824
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568825 = query.getOrDefault("timeout")
  valid_568825 = validateParameter(valid_568825, JInt, required = false,
                                 default = newJInt(60))
  if valid_568825 != nil:
    section.add "timeout", valid_568825
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568826 = query.getOrDefault("api-version")
  valid_568826 = validateParameter(valid_568826, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568826 != nil:
    section.add "api-version", valid_568826
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568827: Call_GetApplicationUpgrade_568821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_568827.validator(path, query, header, formData, body)
  let scheme = call_568827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568827.url(scheme.get, call_568827.host, call_568827.base,
                         call_568827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568827, url, valid)

proc call*(call_568828: Call_GetApplicationUpgrade_568821; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationUpgrade
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568829 = newJObject()
  var query_568830 = newJObject()
  add(query_568830, "timeout", newJInt(timeout))
  add(query_568830, "api-version", newJString(apiVersion))
  add(path_568829, "applicationId", newJString(applicationId))
  result = call_568828.call(path_568829, query_568830, nil, nil, nil)

var getApplicationUpgrade* = Call_GetApplicationUpgrade_568821(
    name: "getApplicationUpgrade", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetUpgradeProgress",
    validator: validate_GetApplicationUpgrade_568822, base: "",
    url: url_GetApplicationUpgrade_568823, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationUpgrade_568831 = ref object of OpenApiRestCall_567668
proc url_ResumeApplicationUpgrade_568833(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/MoveToNextUpgradeDomain")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationUpgrade_568832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568834 = path.getOrDefault("applicationId")
  valid_568834 = validateParameter(valid_568834, JString, required = true,
                                 default = nil)
  if valid_568834 != nil:
    section.add "applicationId", valid_568834
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568835 = query.getOrDefault("timeout")
  valid_568835 = validateParameter(valid_568835, JInt, required = false,
                                 default = newJInt(60))
  if valid_568835 != nil:
    section.add "timeout", valid_568835
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568836 = query.getOrDefault("api-version")
  valid_568836 = validateParameter(valid_568836, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568836 != nil:
    section.add "api-version", valid_568836
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568838: Call_ResumeApplicationUpgrade_568831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  let valid = call_568838.validator(path, query, header, formData, body)
  let scheme = call_568838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568838.url(scheme.get, call_568838.host, call_568838.base,
                         call_568838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568838, url, valid)

proc call*(call_568839: Call_ResumeApplicationUpgrade_568831;
          ResumeApplicationUpgradeDescription: JsonNode; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resumeApplicationUpgrade
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568840 = newJObject()
  var query_568841 = newJObject()
  var body_568842 = newJObject()
  add(query_568841, "timeout", newJInt(timeout))
  if ResumeApplicationUpgradeDescription != nil:
    body_568842 = ResumeApplicationUpgradeDescription
  add(query_568841, "api-version", newJString(apiVersion))
  add(path_568840, "applicationId", newJString(applicationId))
  result = call_568839.call(path_568840, query_568841, nil, nil, body_568842)

var resumeApplicationUpgrade* = Call_ResumeApplicationUpgrade_568831(
    name: "resumeApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeApplicationUpgrade_568832, base: "",
    url: url_ResumeApplicationUpgrade_568833, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportApplicationHealth_568843 = ref object of OpenApiRestCall_567668
proc url_ReportApplicationHealth_568845(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportApplicationHealth_568844(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568846 = path.getOrDefault("applicationId")
  valid_568846 = validateParameter(valid_568846, JString, required = true,
                                 default = nil)
  if valid_568846 != nil:
    section.add "applicationId", valid_568846
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568847 = query.getOrDefault("Immediate")
  valid_568847 = validateParameter(valid_568847, JBool, required = false,
                                 default = newJBool(false))
  if valid_568847 != nil:
    section.add "Immediate", valid_568847
  var valid_568848 = query.getOrDefault("timeout")
  valid_568848 = validateParameter(valid_568848, JInt, required = false,
                                 default = newJInt(60))
  if valid_568848 != nil:
    section.add "timeout", valid_568848
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568849 = query.getOrDefault("api-version")
  valid_568849 = validateParameter(valid_568849, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568849 != nil:
    section.add "api-version", valid_568849
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568851: Call_ReportApplicationHealth_568843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_568851.validator(path, query, header, formData, body)
  let scheme = call_568851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568851.url(scheme.get, call_568851.host, call_568851.base,
                         call_568851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568851, url, valid)

proc call*(call_568852: Call_ReportApplicationHealth_568843;
          HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportApplicationHealth
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568853 = newJObject()
  var query_568854 = newJObject()
  var body_568855 = newJObject()
  add(query_568854, "Immediate", newJBool(Immediate))
  add(query_568854, "timeout", newJInt(timeout))
  add(query_568854, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_568855 = HealthInformation
  add(path_568853, "applicationId", newJString(applicationId))
  result = call_568852.call(path_568853, query_568854, nil, nil, body_568855)

var reportApplicationHealth* = Call_ReportApplicationHealth_568843(
    name: "reportApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ReportHealth",
    validator: validate_ReportApplicationHealth_568844, base: "",
    url: url_ReportApplicationHealth_568845, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationBackup_568856 = ref object of OpenApiRestCall_567668
proc url_ResumeApplicationBackup_568858(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationBackup_568857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568859 = path.getOrDefault("applicationId")
  valid_568859 = validateParameter(valid_568859, JString, required = true,
                                 default = nil)
  if valid_568859 != nil:
    section.add "applicationId", valid_568859
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568860 = query.getOrDefault("timeout")
  valid_568860 = validateParameter(valid_568860, JInt, required = false,
                                 default = newJInt(60))
  if valid_568860 != nil:
    section.add "timeout", valid_568860
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568861 = query.getOrDefault("api-version")
  valid_568861 = validateParameter(valid_568861, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568861 != nil:
    section.add "api-version", valid_568861
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568862: Call_ResumeApplicationBackup_568856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_568862.validator(path, query, header, formData, body)
  let scheme = call_568862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568862.url(scheme.get, call_568862.host, call_568862.base,
                         call_568862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568862, url, valid)

proc call*(call_568863: Call_ResumeApplicationBackup_568856; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeApplicationBackup
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568864 = newJObject()
  var query_568865 = newJObject()
  add(query_568865, "timeout", newJInt(timeout))
  add(query_568865, "api-version", newJString(apiVersion))
  add(path_568864, "applicationId", newJString(applicationId))
  result = call_568863.call(path_568864, query_568865, nil, nil, nil)

var resumeApplicationBackup* = Call_ResumeApplicationBackup_568856(
    name: "resumeApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ResumeBackup",
    validator: validate_ResumeApplicationBackup_568857, base: "",
    url: url_ResumeApplicationBackup_568858, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackApplicationUpgrade_568866 = ref object of OpenApiRestCall_567668
proc url_RollbackApplicationUpgrade_568868(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RollbackApplicationUpgrade_568867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568869 = path.getOrDefault("applicationId")
  valid_568869 = validateParameter(valid_568869, JString, required = true,
                                 default = nil)
  if valid_568869 != nil:
    section.add "applicationId", valid_568869
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568870 = query.getOrDefault("timeout")
  valid_568870 = validateParameter(valid_568870, JInt, required = false,
                                 default = newJInt(60))
  if valid_568870 != nil:
    section.add "timeout", valid_568870
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568871 = query.getOrDefault("api-version")
  valid_568871 = validateParameter(valid_568871, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568871 != nil:
    section.add "api-version", valid_568871
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568872: Call_RollbackApplicationUpgrade_568866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  let valid = call_568872.validator(path, query, header, formData, body)
  let scheme = call_568872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568872.url(scheme.get, call_568872.host, call_568872.base,
                         call_568872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568872, url, valid)

proc call*(call_568873: Call_RollbackApplicationUpgrade_568866;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## rollbackApplicationUpgrade
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568874 = newJObject()
  var query_568875 = newJObject()
  add(query_568875, "timeout", newJInt(timeout))
  add(query_568875, "api-version", newJString(apiVersion))
  add(path_568874, "applicationId", newJString(applicationId))
  result = call_568873.call(path_568874, query_568875, nil, nil, nil)

var rollbackApplicationUpgrade* = Call_RollbackApplicationUpgrade_568866(
    name: "rollbackApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/RollbackUpgrade",
    validator: validate_RollbackApplicationUpgrade_568867, base: "",
    url: url_RollbackApplicationUpgrade_568868,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendApplicationBackup_568876 = ref object of OpenApiRestCall_567668
proc url_SuspendApplicationBackup_568878(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendApplicationBackup_568877(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568879 = path.getOrDefault("applicationId")
  valid_568879 = validateParameter(valid_568879, JString, required = true,
                                 default = nil)
  if valid_568879 != nil:
    section.add "applicationId", valid_568879
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568880 = query.getOrDefault("timeout")
  valid_568880 = validateParameter(valid_568880, JInt, required = false,
                                 default = newJInt(60))
  if valid_568880 != nil:
    section.add "timeout", valid_568880
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568881 = query.getOrDefault("api-version")
  valid_568881 = validateParameter(valid_568881, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568881 != nil:
    section.add "api-version", valid_568881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568882: Call_SuspendApplicationBackup_568876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  let valid = call_568882.validator(path, query, header, formData, body)
  let scheme = call_568882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568882.url(scheme.get, call_568882.host, call_568882.base,
                         call_568882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568882, url, valid)

proc call*(call_568883: Call_SuspendApplicationBackup_568876;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendApplicationBackup
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_568884 = newJObject()
  var query_568885 = newJObject()
  add(query_568885, "timeout", newJInt(timeout))
  add(query_568885, "api-version", newJString(apiVersion))
  add(path_568884, "applicationId", newJString(applicationId))
  result = call_568883.call(path_568884, query_568885, nil, nil, nil)

var suspendApplicationBackup* = Call_SuspendApplicationBackup_568876(
    name: "suspendApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/SuspendBackup",
    validator: validate_SuspendApplicationBackup_568877, base: "",
    url: url_SuspendApplicationBackup_568878, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateApplicationUpgrade_568886 = ref object of OpenApiRestCall_567668
proc url_UpdateApplicationUpgrade_568888(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/UpdateUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateApplicationUpgrade_568887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568889 = path.getOrDefault("applicationId")
  valid_568889 = validateParameter(valid_568889, JString, required = true,
                                 default = nil)
  if valid_568889 != nil:
    section.add "applicationId", valid_568889
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568890 = query.getOrDefault("timeout")
  valid_568890 = validateParameter(valid_568890, JInt, required = false,
                                 default = newJInt(60))
  if valid_568890 != nil:
    section.add "timeout", valid_568890
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568891 = query.getOrDefault("api-version")
  valid_568891 = validateParameter(valid_568891, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568891 != nil:
    section.add "api-version", valid_568891
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568893: Call_UpdateApplicationUpgrade_568886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  let valid = call_568893.validator(path, query, header, formData, body)
  let scheme = call_568893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568893.url(scheme.get, call_568893.host, call_568893.base,
                         call_568893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568893, url, valid)

proc call*(call_568894: Call_UpdateApplicationUpgrade_568886;
          applicationId: string; ApplicationUpgradeUpdateDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## updateApplicationUpgrade
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  var path_568895 = newJObject()
  var query_568896 = newJObject()
  var body_568897 = newJObject()
  add(query_568896, "timeout", newJInt(timeout))
  add(query_568896, "api-version", newJString(apiVersion))
  add(path_568895, "applicationId", newJString(applicationId))
  if ApplicationUpgradeUpdateDescription != nil:
    body_568897 = ApplicationUpgradeUpdateDescription
  result = call_568894.call(path_568895, query_568896, nil, nil, body_568897)

var updateApplicationUpgrade* = Call_UpdateApplicationUpgrade_568886(
    name: "updateApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/UpdateUpgrade",
    validator: validate_UpdateApplicationUpgrade_568887, base: "",
    url: url_UpdateApplicationUpgrade_568888, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartApplicationUpgrade_568898 = ref object of OpenApiRestCall_567668
proc url_StartApplicationUpgrade_568900(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartApplicationUpgrade_568899(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_568901 = path.getOrDefault("applicationId")
  valid_568901 = validateParameter(valid_568901, JString, required = true,
                                 default = nil)
  if valid_568901 != nil:
    section.add "applicationId", valid_568901
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568902 = query.getOrDefault("timeout")
  valid_568902 = validateParameter(valid_568902, JInt, required = false,
                                 default = newJInt(60))
  if valid_568902 != nil:
    section.add "timeout", valid_568902
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568903 = query.getOrDefault("api-version")
  valid_568903 = validateParameter(valid_568903, JString, required = true,
                                 default = newJString("6.0"))
  if valid_568903 != nil:
    section.add "api-version", valid_568903
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568905: Call_StartApplicationUpgrade_568898; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  let valid = call_568905.validator(path, query, header, formData, body)
  let scheme = call_568905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568905.url(scheme.get, call_568905.host, call_568905.base,
                         call_568905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568905, url, valid)

proc call*(call_568906: Call_StartApplicationUpgrade_568898; applicationId: string;
          ApplicationUpgradeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## startApplicationUpgrade
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  var path_568907 = newJObject()
  var query_568908 = newJObject()
  var body_568909 = newJObject()
  add(query_568908, "timeout", newJInt(timeout))
  add(query_568908, "api-version", newJString(apiVersion))
  add(path_568907, "applicationId", newJString(applicationId))
  if ApplicationUpgradeDescription != nil:
    body_568909 = ApplicationUpgradeDescription
  result = call_568906.call(path_568907, query_568908, nil, nil, body_568909)

var startApplicationUpgrade* = Call_StartApplicationUpgrade_568898(
    name: "startApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/Upgrade",
    validator: validate_StartApplicationUpgrade_568899, base: "",
    url: url_StartApplicationUpgrade_568900, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupsFromBackupLocation_568910 = ref object of OpenApiRestCall_567668
proc url_GetBackupsFromBackupLocation_568912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupsFromBackupLocation_568911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568913 = query.getOrDefault("timeout")
  valid_568913 = validateParameter(valid_568913, JInt, required = false,
                                 default = newJInt(60))
  if valid_568913 != nil:
    section.add "timeout", valid_568913
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568914 = query.getOrDefault("api-version")
  valid_568914 = validateParameter(valid_568914, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568914 != nil:
    section.add "api-version", valid_568914
  var valid_568915 = query.getOrDefault("ContinuationToken")
  valid_568915 = validateParameter(valid_568915, JString, required = false,
                                 default = nil)
  if valid_568915 != nil:
    section.add "ContinuationToken", valid_568915
  var valid_568916 = query.getOrDefault("MaxResults")
  valid_568916 = validateParameter(valid_568916, JInt, required = false,
                                 default = newJInt(0))
  if valid_568916 != nil:
    section.add "MaxResults", valid_568916
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568918: Call_GetBackupsFromBackupLocation_568910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  let valid = call_568918.validator(path, query, header, formData, body)
  let scheme = call_568918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568918.url(scheme.get, call_568918.host, call_568918.base,
                         call_568918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568918, url, valid)

proc call*(call_568919: Call_GetBackupsFromBackupLocation_568910;
          GetBackupByStorageQueryDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupsFromBackupLocation
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_568920 = newJObject()
  var body_568921 = newJObject()
  add(query_568920, "timeout", newJInt(timeout))
  add(query_568920, "api-version", newJString(apiVersion))
  if GetBackupByStorageQueryDescription != nil:
    body_568921 = GetBackupByStorageQueryDescription
  add(query_568920, "ContinuationToken", newJString(ContinuationToken))
  add(query_568920, "MaxResults", newJInt(MaxResults))
  result = call_568919.call(nil, query_568920, nil, nil, body_568921)

var getBackupsFromBackupLocation* = Call_GetBackupsFromBackupLocation_568910(
    name: "getBackupsFromBackupLocation", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/$/GetBackups",
    validator: validate_GetBackupsFromBackupLocation_568911, base: "",
    url: url_GetBackupsFromBackupLocation_568912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyList_568922 = ref object of OpenApiRestCall_567668
proc url_GetBackupPolicyList_568924(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupPolicyList_568923(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Get a list of all the backup policies configured.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568925 = query.getOrDefault("timeout")
  valid_568925 = validateParameter(valid_568925, JInt, required = false,
                                 default = newJInt(60))
  if valid_568925 != nil:
    section.add "timeout", valid_568925
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568926 = query.getOrDefault("api-version")
  valid_568926 = validateParameter(valid_568926, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568926 != nil:
    section.add "api-version", valid_568926
  var valid_568927 = query.getOrDefault("ContinuationToken")
  valid_568927 = validateParameter(valid_568927, JString, required = false,
                                 default = nil)
  if valid_568927 != nil:
    section.add "ContinuationToken", valid_568927
  var valid_568928 = query.getOrDefault("MaxResults")
  valid_568928 = validateParameter(valid_568928, JInt, required = false,
                                 default = newJInt(0))
  if valid_568928 != nil:
    section.add "MaxResults", valid_568928
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568929: Call_GetBackupPolicyList_568922; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a list of all the backup policies configured.
  ## 
  let valid = call_568929.validator(path, query, header, formData, body)
  let scheme = call_568929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568929.url(scheme.get, call_568929.host, call_568929.base,
                         call_568929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568929, url, valid)

proc call*(call_568930: Call_GetBackupPolicyList_568922; timeout: int = 60;
          apiVersion: string = "6.4"; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getBackupPolicyList
  ## Get a list of all the backup policies configured.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_568931 = newJObject()
  add(query_568931, "timeout", newJInt(timeout))
  add(query_568931, "api-version", newJString(apiVersion))
  add(query_568931, "ContinuationToken", newJString(ContinuationToken))
  add(query_568931, "MaxResults", newJInt(MaxResults))
  result = call_568930.call(nil, query_568931, nil, nil, nil)

var getBackupPolicyList* = Call_GetBackupPolicyList_568922(
    name: "getBackupPolicyList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies",
    validator: validate_GetBackupPolicyList_568923, base: "",
    url: url_GetBackupPolicyList_568924, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBackupPolicy_568932 = ref object of OpenApiRestCall_567668
proc url_CreateBackupPolicy_568934(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateBackupPolicy_568933(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568935 = query.getOrDefault("timeout")
  valid_568935 = validateParameter(valid_568935, JInt, required = false,
                                 default = newJInt(60))
  if valid_568935 != nil:
    section.add "timeout", valid_568935
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568936 = query.getOrDefault("api-version")
  valid_568936 = validateParameter(valid_568936, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568936 != nil:
    section.add "api-version", valid_568936
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568938: Call_CreateBackupPolicy_568932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  let valid = call_568938.validator(path, query, header, formData, body)
  let scheme = call_568938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568938.url(scheme.get, call_568938.host, call_568938.base,
                         call_568938.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568938, url, valid)

proc call*(call_568939: Call_CreateBackupPolicy_568932;
          BackupPolicyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## createBackupPolicy
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  var query_568940 = newJObject()
  var body_568941 = newJObject()
  add(query_568940, "timeout", newJInt(timeout))
  add(query_568940, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_568941 = BackupPolicyDescription
  result = call_568939.call(nil, query_568940, nil, nil, body_568941)

var createBackupPolicy* = Call_CreateBackupPolicy_568932(
    name: "createBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/$/Create",
    validator: validate_CreateBackupPolicy_568933, base: "",
    url: url_CreateBackupPolicy_568934, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyByName_568942 = ref object of OpenApiRestCall_567668
proc url_GetBackupPolicyByName_568944(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetBackupPolicyByName_568943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568945 = path.getOrDefault("backupPolicyName")
  valid_568945 = validateParameter(valid_568945, JString, required = true,
                                 default = nil)
  if valid_568945 != nil:
    section.add "backupPolicyName", valid_568945
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568946 = query.getOrDefault("timeout")
  valid_568946 = validateParameter(valid_568946, JInt, required = false,
                                 default = newJInt(60))
  if valid_568946 != nil:
    section.add "timeout", valid_568946
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568947 = query.getOrDefault("api-version")
  valid_568947 = validateParameter(valid_568947, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568947 != nil:
    section.add "api-version", valid_568947
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568948: Call_GetBackupPolicyByName_568942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  let valid = call_568948.validator(path, query, header, formData, body)
  let scheme = call_568948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568948.url(scheme.get, call_568948.host, call_568948.base,
                         call_568948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568948, url, valid)

proc call*(call_568949: Call_GetBackupPolicyByName_568942;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getBackupPolicyByName
  ## Gets a particular backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_568950 = newJObject()
  var query_568951 = newJObject()
  add(query_568951, "timeout", newJInt(timeout))
  add(query_568951, "api-version", newJString(apiVersion))
  add(path_568950, "backupPolicyName", newJString(backupPolicyName))
  result = call_568949.call(path_568950, query_568951, nil, nil, nil)

var getBackupPolicyByName* = Call_GetBackupPolicyByName_568942(
    name: "getBackupPolicyByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}",
    validator: validate_GetBackupPolicyByName_568943, base: "",
    url: url_GetBackupPolicyByName_568944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBackupPolicy_568952 = ref object of OpenApiRestCall_567668
proc url_DeleteBackupPolicy_568954(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteBackupPolicy_568953(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568955 = path.getOrDefault("backupPolicyName")
  valid_568955 = validateParameter(valid_568955, JString, required = true,
                                 default = nil)
  if valid_568955 != nil:
    section.add "backupPolicyName", valid_568955
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568956 = query.getOrDefault("timeout")
  valid_568956 = validateParameter(valid_568956, JInt, required = false,
                                 default = newJInt(60))
  if valid_568956 != nil:
    section.add "timeout", valid_568956
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568957 = query.getOrDefault("api-version")
  valid_568957 = validateParameter(valid_568957, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568957 != nil:
    section.add "api-version", valid_568957
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568958: Call_DeleteBackupPolicy_568952; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  let valid = call_568958.validator(path, query, header, formData, body)
  let scheme = call_568958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568958.url(scheme.get, call_568958.host, call_568958.base,
                         call_568958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568958, url, valid)

proc call*(call_568959: Call_DeleteBackupPolicy_568952; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## deleteBackupPolicy
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_568960 = newJObject()
  var query_568961 = newJObject()
  add(query_568961, "timeout", newJInt(timeout))
  add(query_568961, "api-version", newJString(apiVersion))
  add(path_568960, "backupPolicyName", newJString(backupPolicyName))
  result = call_568959.call(path_568960, query_568961, nil, nil, nil)

var deleteBackupPolicy* = Call_DeleteBackupPolicy_568952(
    name: "deleteBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete",
    validator: validate_DeleteBackupPolicy_568953, base: "",
    url: url_DeleteBackupPolicy_568954, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAllEntitiesBackedUpByPolicy_568962 = ref object of OpenApiRestCall_567668
proc url_GetAllEntitiesBackedUpByPolicy_568964(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/GetBackupEnabledEntities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetAllEntitiesBackedUpByPolicy_568963(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568965 = path.getOrDefault("backupPolicyName")
  valid_568965 = validateParameter(valid_568965, JString, required = true,
                                 default = nil)
  if valid_568965 != nil:
    section.add "backupPolicyName", valid_568965
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568966 = query.getOrDefault("timeout")
  valid_568966 = validateParameter(valid_568966, JInt, required = false,
                                 default = newJInt(60))
  if valid_568966 != nil:
    section.add "timeout", valid_568966
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568967 = query.getOrDefault("api-version")
  valid_568967 = validateParameter(valid_568967, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568967 != nil:
    section.add "api-version", valid_568967
  var valid_568968 = query.getOrDefault("ContinuationToken")
  valid_568968 = validateParameter(valid_568968, JString, required = false,
                                 default = nil)
  if valid_568968 != nil:
    section.add "ContinuationToken", valid_568968
  var valid_568969 = query.getOrDefault("MaxResults")
  valid_568969 = validateParameter(valid_568969, JInt, required = false,
                                 default = newJInt(0))
  if valid_568969 != nil:
    section.add "MaxResults", valid_568969
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568970: Call_GetAllEntitiesBackedUpByPolicy_568962; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  let valid = call_568970.validator(path, query, header, formData, body)
  let scheme = call_568970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568970.url(scheme.get, call_568970.host, call_568970.base,
                         call_568970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568970, url, valid)

proc call*(call_568971: Call_GetAllEntitiesBackedUpByPolicy_568962;
          backupPolicyName: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getAllEntitiesBackedUpByPolicy
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_568972 = newJObject()
  var query_568973 = newJObject()
  add(query_568973, "timeout", newJInt(timeout))
  add(query_568973, "api-version", newJString(apiVersion))
  add(path_568972, "backupPolicyName", newJString(backupPolicyName))
  add(query_568973, "ContinuationToken", newJString(ContinuationToken))
  add(query_568973, "MaxResults", newJInt(MaxResults))
  result = call_568971.call(path_568972, query_568973, nil, nil, nil)

var getAllEntitiesBackedUpByPolicy* = Call_GetAllEntitiesBackedUpByPolicy_568962(
    name: "getAllEntitiesBackedUpByPolicy", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities",
    validator: validate_GetAllEntitiesBackedUpByPolicy_568963, base: "",
    url: url_GetAllEntitiesBackedUpByPolicy_568964,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBackupPolicy_568974 = ref object of OpenApiRestCall_567668
proc url_UpdateBackupPolicy_568976(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateBackupPolicy_568975(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_568977 = path.getOrDefault("backupPolicyName")
  valid_568977 = validateParameter(valid_568977, JString, required = true,
                                 default = nil)
  if valid_568977 != nil:
    section.add "backupPolicyName", valid_568977
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_568978 = query.getOrDefault("timeout")
  valid_568978 = validateParameter(valid_568978, JInt, required = false,
                                 default = newJInt(60))
  if valid_568978 != nil:
    section.add "timeout", valid_568978
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568979 = query.getOrDefault("api-version")
  valid_568979 = validateParameter(valid_568979, JString, required = true,
                                 default = newJString("6.4"))
  if valid_568979 != nil:
    section.add "api-version", valid_568979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568981: Call_UpdateBackupPolicy_568974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  let valid = call_568981.validator(path, query, header, formData, body)
  let scheme = call_568981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568981.url(scheme.get, call_568981.host, call_568981.base,
                         call_568981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568981, url, valid)

proc call*(call_568982: Call_UpdateBackupPolicy_568974;
          BackupPolicyDescription: JsonNode; backupPolicyName: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## updateBackupPolicy
  ## Updates the backup policy identified by {backupPolicyName}
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_568983 = newJObject()
  var query_568984 = newJObject()
  var body_568985 = newJObject()
  add(query_568984, "timeout", newJInt(timeout))
  add(query_568984, "api-version", newJString(apiVersion))
  if BackupPolicyDescription != nil:
    body_568985 = BackupPolicyDescription
  add(path_568983, "backupPolicyName", newJString(backupPolicyName))
  result = call_568982.call(path_568983, query_568984, nil, nil, body_568985)

var updateBackupPolicy* = Call_UpdateBackupPolicy_568974(
    name: "updateBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update",
    validator: validate_UpdateBackupPolicy_568975, base: "",
    url: url_UpdateBackupPolicy_568976, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatusList_568986 = ref object of OpenApiRestCall_567668
proc url_GetComposeDeploymentStatusList_568988(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetComposeDeploymentStatusList_568987(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_568989 = query.getOrDefault("timeout")
  valid_568989 = validateParameter(valid_568989, JInt, required = false,
                                 default = newJInt(60))
  if valid_568989 != nil:
    section.add "timeout", valid_568989
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568990 = query.getOrDefault("api-version")
  valid_568990 = validateParameter(valid_568990, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_568990 != nil:
    section.add "api-version", valid_568990
  var valid_568991 = query.getOrDefault("ContinuationToken")
  valid_568991 = validateParameter(valid_568991, JString, required = false,
                                 default = nil)
  if valid_568991 != nil:
    section.add "ContinuationToken", valid_568991
  var valid_568992 = query.getOrDefault("MaxResults")
  valid_568992 = validateParameter(valid_568992, JInt, required = false,
                                 default = newJInt(0))
  if valid_568992 != nil:
    section.add "MaxResults", valid_568992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568993: Call_GetComposeDeploymentStatusList_568986; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  let valid = call_568993.validator(path, query, header, formData, body)
  let scheme = call_568993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568993.url(scheme.get, call_568993.host, call_568993.base,
                         call_568993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568993, url, valid)

proc call*(call_568994: Call_GetComposeDeploymentStatusList_568986;
          timeout: int = 60; apiVersion: string = "6.0-preview";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getComposeDeploymentStatusList
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_568995 = newJObject()
  add(query_568995, "timeout", newJInt(timeout))
  add(query_568995, "api-version", newJString(apiVersion))
  add(query_568995, "ContinuationToken", newJString(ContinuationToken))
  add(query_568995, "MaxResults", newJInt(MaxResults))
  result = call_568994.call(nil, query_568995, nil, nil, nil)

var getComposeDeploymentStatusList* = Call_GetComposeDeploymentStatusList_568986(
    name: "getComposeDeploymentStatusList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments",
    validator: validate_GetComposeDeploymentStatusList_568987, base: "",
    url: url_GetComposeDeploymentStatusList_568988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateComposeDeployment_568996 = ref object of OpenApiRestCall_567668
proc url_CreateComposeDeployment_568998(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateComposeDeployment_568997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_568999 = query.getOrDefault("timeout")
  valid_568999 = validateParameter(valid_568999, JInt, required = false,
                                 default = newJInt(60))
  if valid_568999 != nil:
    section.add "timeout", valid_568999
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569000 = query.getOrDefault("api-version")
  valid_569000 = validateParameter(valid_569000, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569000 != nil:
    section.add "api-version", valid_569000
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569002: Call_CreateComposeDeployment_568996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  let valid = call_569002.validator(path, query, header, formData, body)
  let scheme = call_569002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569002.url(scheme.get, call_569002.host, call_569002.base,
                         call_569002.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569002, url, valid)

proc call*(call_569003: Call_CreateComposeDeployment_568996;
          CreateComposeDeploymentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## createComposeDeployment
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  var query_569004 = newJObject()
  var body_569005 = newJObject()
  add(query_569004, "timeout", newJInt(timeout))
  add(query_569004, "api-version", newJString(apiVersion))
  if CreateComposeDeploymentDescription != nil:
    body_569005 = CreateComposeDeploymentDescription
  result = call_569003.call(nil, query_569004, nil, nil, body_569005)

var createComposeDeployment* = Call_CreateComposeDeployment_568996(
    name: "createComposeDeployment", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/ComposeDeployments/$/Create",
    validator: validate_CreateComposeDeployment_568997, base: "",
    url: url_CreateComposeDeployment_568998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatus_569006 = ref object of OpenApiRestCall_567668
proc url_GetComposeDeploymentStatus_569008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentStatus_569007(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569009 = path.getOrDefault("deploymentName")
  valid_569009 = validateParameter(valid_569009, JString, required = true,
                                 default = nil)
  if valid_569009 != nil:
    section.add "deploymentName", valid_569009
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569010 = query.getOrDefault("timeout")
  valid_569010 = validateParameter(valid_569010, JInt, required = false,
                                 default = newJInt(60))
  if valid_569010 != nil:
    section.add "timeout", valid_569010
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569011 = query.getOrDefault("api-version")
  valid_569011 = validateParameter(valid_569011, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569011 != nil:
    section.add "api-version", valid_569011
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569012: Call_GetComposeDeploymentStatus_569006; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  let valid = call_569012.validator(path, query, header, formData, body)
  let scheme = call_569012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569012.url(scheme.get, call_569012.host, call_569012.base,
                         call_569012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569012, url, valid)

proc call*(call_569013: Call_GetComposeDeploymentStatus_569006;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentStatus
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569014 = newJObject()
  var query_569015 = newJObject()
  add(query_569015, "timeout", newJInt(timeout))
  add(query_569015, "api-version", newJString(apiVersion))
  add(path_569014, "deploymentName", newJString(deploymentName))
  result = call_569013.call(path_569014, query_569015, nil, nil, nil)

var getComposeDeploymentStatus* = Call_GetComposeDeploymentStatus_569006(
    name: "getComposeDeploymentStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments/{deploymentName}",
    validator: validate_GetComposeDeploymentStatus_569007, base: "",
    url: url_GetComposeDeploymentStatus_569008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveComposeDeployment_569016 = ref object of OpenApiRestCall_567668
proc url_RemoveComposeDeployment_569018(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveComposeDeployment_569017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569019 = path.getOrDefault("deploymentName")
  valid_569019 = validateParameter(valid_569019, JString, required = true,
                                 default = nil)
  if valid_569019 != nil:
    section.add "deploymentName", valid_569019
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569020 = query.getOrDefault("timeout")
  valid_569020 = validateParameter(valid_569020, JInt, required = false,
                                 default = newJInt(60))
  if valid_569020 != nil:
    section.add "timeout", valid_569020
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569021 = query.getOrDefault("api-version")
  valid_569021 = validateParameter(valid_569021, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569021 != nil:
    section.add "api-version", valid_569021
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569022: Call_RemoveComposeDeployment_569016; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  let valid = call_569022.validator(path, query, header, formData, body)
  let scheme = call_569022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569022.url(scheme.get, call_569022.host, call_569022.base,
                         call_569022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569022, url, valid)

proc call*(call_569023: Call_RemoveComposeDeployment_569016;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## removeComposeDeployment
  ## Deletes an existing Service Fabric compose deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569024 = newJObject()
  var query_569025 = newJObject()
  add(query_569025, "timeout", newJInt(timeout))
  add(query_569025, "api-version", newJString(apiVersion))
  add(path_569024, "deploymentName", newJString(deploymentName))
  result = call_569023.call(path_569024, query_569025, nil, nil, nil)

var removeComposeDeployment* = Call_RemoveComposeDeployment_569016(
    name: "removeComposeDeployment", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Delete",
    validator: validate_RemoveComposeDeployment_569017, base: "",
    url: url_RemoveComposeDeployment_569018, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentUpgradeProgress_569026 = ref object of OpenApiRestCall_567668
proc url_GetComposeDeploymentUpgradeProgress_569028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentUpgradeProgress_569027(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569029 = path.getOrDefault("deploymentName")
  valid_569029 = validateParameter(valid_569029, JString, required = true,
                                 default = nil)
  if valid_569029 != nil:
    section.add "deploymentName", valid_569029
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569030 = query.getOrDefault("timeout")
  valid_569030 = validateParameter(valid_569030, JInt, required = false,
                                 default = newJInt(60))
  if valid_569030 != nil:
    section.add "timeout", valid_569030
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569031 = query.getOrDefault("api-version")
  valid_569031 = validateParameter(valid_569031, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569031 != nil:
    section.add "api-version", valid_569031
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569032: Call_GetComposeDeploymentUpgradeProgress_569026;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_569032.validator(path, query, header, formData, body)
  let scheme = call_569032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569032.url(scheme.get, call_569032.host, call_569032.base,
                         call_569032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569032, url, valid)

proc call*(call_569033: Call_GetComposeDeploymentUpgradeProgress_569026;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.0-preview"): Recallable =
  ## getComposeDeploymentUpgradeProgress
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569034 = newJObject()
  var query_569035 = newJObject()
  add(query_569035, "timeout", newJInt(timeout))
  add(query_569035, "api-version", newJString(apiVersion))
  add(path_569034, "deploymentName", newJString(deploymentName))
  result = call_569033.call(path_569034, query_569035, nil, nil, nil)

var getComposeDeploymentUpgradeProgress* = Call_GetComposeDeploymentUpgradeProgress_569026(
    name: "getComposeDeploymentUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress",
    validator: validate_GetComposeDeploymentUpgradeProgress_569027, base: "",
    url: url_GetComposeDeploymentUpgradeProgress_569028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartRollbackComposeDeploymentUpgrade_569036 = ref object of OpenApiRestCall_567668
proc url_StartRollbackComposeDeploymentUpgrade_569038(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartRollbackComposeDeploymentUpgrade_569037(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569039 = path.getOrDefault("deploymentName")
  valid_569039 = validateParameter(valid_569039, JString, required = true,
                                 default = nil)
  if valid_569039 != nil:
    section.add "deploymentName", valid_569039
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  var valid_569040 = query.getOrDefault("timeout")
  valid_569040 = validateParameter(valid_569040, JInt, required = false,
                                 default = newJInt(60))
  if valid_569040 != nil:
    section.add "timeout", valid_569040
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569041 = query.getOrDefault("api-version")
  valid_569041 = validateParameter(valid_569041, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_569041 != nil:
    section.add "api-version", valid_569041
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569042: Call_StartRollbackComposeDeploymentUpgrade_569036;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  let valid = call_569042.validator(path, query, header, formData, body)
  let scheme = call_569042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569042.url(scheme.get, call_569042.host, call_569042.base,
                         call_569042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569042, url, valid)

proc call*(call_569043: Call_StartRollbackComposeDeploymentUpgrade_569036;
          deploymentName: string; timeout: int = 60;
          apiVersion: string = "6.4-preview"): Recallable =
  ## startRollbackComposeDeploymentUpgrade
  ## Rollback a service fabric compose deployment upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  var path_569044 = newJObject()
  var query_569045 = newJObject()
  add(query_569045, "timeout", newJInt(timeout))
  add(query_569045, "api-version", newJString(apiVersion))
  add(path_569044, "deploymentName", newJString(deploymentName))
  result = call_569043.call(path_569044, query_569045, nil, nil, nil)

var startRollbackComposeDeploymentUpgrade* = Call_StartRollbackComposeDeploymentUpgrade_569036(
    name: "startRollbackComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade",
    validator: validate_StartRollbackComposeDeploymentUpgrade_569037, base: "",
    url: url_StartRollbackComposeDeploymentUpgrade_569038,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartComposeDeploymentUpgrade_569046 = ref object of OpenApiRestCall_567668
proc url_StartComposeDeploymentUpgrade_569048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartComposeDeploymentUpgrade_569047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_569049 = path.getOrDefault("deploymentName")
  valid_569049 = validateParameter(valid_569049, JString, required = true,
                                 default = nil)
  if valid_569049 != nil:
    section.add "deploymentName", valid_569049
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  section = newJObject()
  var valid_569050 = query.getOrDefault("timeout")
  valid_569050 = validateParameter(valid_569050, JInt, required = false,
                                 default = newJInt(60))
  if valid_569050 != nil:
    section.add "timeout", valid_569050
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569051 = query.getOrDefault("api-version")
  valid_569051 = validateParameter(valid_569051, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_569051 != nil:
    section.add "api-version", valid_569051
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569053: Call_StartComposeDeploymentUpgrade_569046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  let valid = call_569053.validator(path, query, header, formData, body)
  let scheme = call_569053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569053.url(scheme.get, call_569053.host, call_569053.base,
                         call_569053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569053, url, valid)

proc call*(call_569054: Call_StartComposeDeploymentUpgrade_569046;
          deploymentName: string; ComposeDeploymentUpgradeDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0-preview"): Recallable =
  ## startComposeDeploymentUpgrade
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  var path_569055 = newJObject()
  var query_569056 = newJObject()
  var body_569057 = newJObject()
  add(query_569056, "timeout", newJInt(timeout))
  add(query_569056, "api-version", newJString(apiVersion))
  add(path_569055, "deploymentName", newJString(deploymentName))
  if ComposeDeploymentUpgradeDescription != nil:
    body_569057 = ComposeDeploymentUpgradeDescription
  result = call_569054.call(path_569055, query_569056, nil, nil, body_569057)

var startComposeDeploymentUpgrade* = Call_StartComposeDeploymentUpgrade_569046(
    name: "startComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Upgrade",
    validator: validate_StartComposeDeploymentUpgrade_569047, base: "",
    url: url_StartComposeDeploymentUpgrade_569048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationsEventList_569058 = ref object of OpenApiRestCall_567668
proc url_GetApplicationsEventList_569060(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationsEventList_569059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569061 = query.getOrDefault("timeout")
  valid_569061 = validateParameter(valid_569061, JInt, required = false,
                                 default = newJInt(60))
  if valid_569061 != nil:
    section.add "timeout", valid_569061
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569062 = query.getOrDefault("api-version")
  valid_569062 = validateParameter(valid_569062, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569062 != nil:
    section.add "api-version", valid_569062
  var valid_569063 = query.getOrDefault("SkipCorrelationLookup")
  valid_569063 = validateParameter(valid_569063, JBool, required = false, default = nil)
  if valid_569063 != nil:
    section.add "SkipCorrelationLookup", valid_569063
  var valid_569064 = query.getOrDefault("EventsTypesFilter")
  valid_569064 = validateParameter(valid_569064, JString, required = false,
                                 default = nil)
  if valid_569064 != nil:
    section.add "EventsTypesFilter", valid_569064
  var valid_569065 = query.getOrDefault("EndTimeUtc")
  valid_569065 = validateParameter(valid_569065, JString, required = true,
                                 default = nil)
  if valid_569065 != nil:
    section.add "EndTimeUtc", valid_569065
  var valid_569066 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569066 = validateParameter(valid_569066, JBool, required = false, default = nil)
  if valid_569066 != nil:
    section.add "ExcludeAnalysisEvents", valid_569066
  var valid_569067 = query.getOrDefault("StartTimeUtc")
  valid_569067 = validateParameter(valid_569067, JString, required = true,
                                 default = nil)
  if valid_569067 != nil:
    section.add "StartTimeUtc", valid_569067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569068: Call_GetApplicationsEventList_569058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_569068.validator(path, query, header, formData, body)
  let scheme = call_569068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569068.url(scheme.get, call_569068.host, call_569068.base,
                         call_569068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569068, url, valid)

proc call*(call_569069: Call_GetApplicationsEventList_569058; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationsEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569070 = newJObject()
  add(query_569070, "timeout", newJInt(timeout))
  add(query_569070, "api-version", newJString(apiVersion))
  add(query_569070, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569070, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569070, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569070, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569070, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569069.call(nil, query_569070, nil, nil, nil)

var getApplicationsEventList* = Call_GetApplicationsEventList_569058(
    name: "getApplicationsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Applications/Events",
    validator: validate_GetApplicationsEventList_569059, base: "",
    url: url_GetApplicationsEventList_569060, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationEventList_569071 = ref object of OpenApiRestCall_567668
proc url_GetApplicationEventList_569073(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationEventList_569072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_569074 = path.getOrDefault("applicationId")
  valid_569074 = validateParameter(valid_569074, JString, required = true,
                                 default = nil)
  if valid_569074 != nil:
    section.add "applicationId", valid_569074
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569075 = query.getOrDefault("timeout")
  valid_569075 = validateParameter(valid_569075, JInt, required = false,
                                 default = newJInt(60))
  if valid_569075 != nil:
    section.add "timeout", valid_569075
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569076 = query.getOrDefault("api-version")
  valid_569076 = validateParameter(valid_569076, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569076 != nil:
    section.add "api-version", valid_569076
  var valid_569077 = query.getOrDefault("SkipCorrelationLookup")
  valid_569077 = validateParameter(valid_569077, JBool, required = false, default = nil)
  if valid_569077 != nil:
    section.add "SkipCorrelationLookup", valid_569077
  var valid_569078 = query.getOrDefault("EventsTypesFilter")
  valid_569078 = validateParameter(valid_569078, JString, required = false,
                                 default = nil)
  if valid_569078 != nil:
    section.add "EventsTypesFilter", valid_569078
  var valid_569079 = query.getOrDefault("EndTimeUtc")
  valid_569079 = validateParameter(valid_569079, JString, required = true,
                                 default = nil)
  if valid_569079 != nil:
    section.add "EndTimeUtc", valid_569079
  var valid_569080 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569080 = validateParameter(valid_569080, JBool, required = false, default = nil)
  if valid_569080 != nil:
    section.add "ExcludeAnalysisEvents", valid_569080
  var valid_569081 = query.getOrDefault("StartTimeUtc")
  valid_569081 = validateParameter(valid_569081, JString, required = true,
                                 default = nil)
  if valid_569081 != nil:
    section.add "StartTimeUtc", valid_569081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569082: Call_GetApplicationEventList_569071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_569082.validator(path, query, header, formData, body)
  let scheme = call_569082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569082.url(scheme.get, call_569082.host, call_569082.base,
                         call_569082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569082, url, valid)

proc call*(call_569083: Call_GetApplicationEventList_569071; EndTimeUtc: string;
          applicationId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationEventList
  ## The response is list of ApplicationEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569084 = newJObject()
  var query_569085 = newJObject()
  add(query_569085, "timeout", newJInt(timeout))
  add(query_569085, "api-version", newJString(apiVersion))
  add(query_569085, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569085, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569085, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569084, "applicationId", newJString(applicationId))
  add(query_569085, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569085, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569083.call(path_569084, query_569085, nil, nil, nil)

var getApplicationEventList* = Call_GetApplicationEventList_569071(
    name: "getApplicationEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Applications/{applicationId}/$/Events",
    validator: validate_GetApplicationEventList_569072, base: "",
    url: url_GetApplicationEventList_569073, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterEventList_569086 = ref object of OpenApiRestCall_567668
proc url_GetClusterEventList_569088(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterEventList_569087(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ClusterEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569089 = query.getOrDefault("timeout")
  valid_569089 = validateParameter(valid_569089, JInt, required = false,
                                 default = newJInt(60))
  if valid_569089 != nil:
    section.add "timeout", valid_569089
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569090 = query.getOrDefault("api-version")
  valid_569090 = validateParameter(valid_569090, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569090 != nil:
    section.add "api-version", valid_569090
  var valid_569091 = query.getOrDefault("SkipCorrelationLookup")
  valid_569091 = validateParameter(valid_569091, JBool, required = false, default = nil)
  if valid_569091 != nil:
    section.add "SkipCorrelationLookup", valid_569091
  var valid_569092 = query.getOrDefault("EventsTypesFilter")
  valid_569092 = validateParameter(valid_569092, JString, required = false,
                                 default = nil)
  if valid_569092 != nil:
    section.add "EventsTypesFilter", valid_569092
  var valid_569093 = query.getOrDefault("EndTimeUtc")
  valid_569093 = validateParameter(valid_569093, JString, required = true,
                                 default = nil)
  if valid_569093 != nil:
    section.add "EndTimeUtc", valid_569093
  var valid_569094 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569094 = validateParameter(valid_569094, JBool, required = false, default = nil)
  if valid_569094 != nil:
    section.add "ExcludeAnalysisEvents", valid_569094
  var valid_569095 = query.getOrDefault("StartTimeUtc")
  valid_569095 = validateParameter(valid_569095, JString, required = true,
                                 default = nil)
  if valid_569095 != nil:
    section.add "StartTimeUtc", valid_569095
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569096: Call_GetClusterEventList_569086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ClusterEvent objects.
  ## 
  let valid = call_569096.validator(path, query, header, formData, body)
  let scheme = call_569096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569096.url(scheme.get, call_569096.host, call_569096.base,
                         call_569096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569096, url, valid)

proc call*(call_569097: Call_GetClusterEventList_569086; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getClusterEventList
  ## The response is list of ClusterEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569098 = newJObject()
  add(query_569098, "timeout", newJInt(timeout))
  add(query_569098, "api-version", newJString(apiVersion))
  add(query_569098, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569098, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569098, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569098, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569098, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569097.call(nil, query_569098, nil, nil, nil)

var getClusterEventList* = Call_GetClusterEventList_569086(
    name: "getClusterEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Cluster/Events",
    validator: validate_GetClusterEventList_569087, base: "",
    url: url_GetClusterEventList_569088, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainersEventList_569099 = ref object of OpenApiRestCall_567668
proc url_GetContainersEventList_569101(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetContainersEventList_569100(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569102 = query.getOrDefault("timeout")
  valid_569102 = validateParameter(valid_569102, JInt, required = false,
                                 default = newJInt(60))
  if valid_569102 != nil:
    section.add "timeout", valid_569102
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569103 = query.getOrDefault("api-version")
  valid_569103 = validateParameter(valid_569103, JString, required = true,
                                 default = newJString("6.2-preview"))
  if valid_569103 != nil:
    section.add "api-version", valid_569103
  var valid_569104 = query.getOrDefault("SkipCorrelationLookup")
  valid_569104 = validateParameter(valid_569104, JBool, required = false, default = nil)
  if valid_569104 != nil:
    section.add "SkipCorrelationLookup", valid_569104
  var valid_569105 = query.getOrDefault("EventsTypesFilter")
  valid_569105 = validateParameter(valid_569105, JString, required = false,
                                 default = nil)
  if valid_569105 != nil:
    section.add "EventsTypesFilter", valid_569105
  var valid_569106 = query.getOrDefault("EndTimeUtc")
  valid_569106 = validateParameter(valid_569106, JString, required = true,
                                 default = nil)
  if valid_569106 != nil:
    section.add "EndTimeUtc", valid_569106
  var valid_569107 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569107 = validateParameter(valid_569107, JBool, required = false, default = nil)
  if valid_569107 != nil:
    section.add "ExcludeAnalysisEvents", valid_569107
  var valid_569108 = query.getOrDefault("StartTimeUtc")
  valid_569108 = validateParameter(valid_569108, JString, required = true,
                                 default = nil)
  if valid_569108 != nil:
    section.add "StartTimeUtc", valid_569108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569109: Call_GetContainersEventList_569099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  let valid = call_569109.validator(path, query, header, formData, body)
  let scheme = call_569109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569109.url(scheme.get, call_569109.host, call_569109.base,
                         call_569109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569109, url, valid)

proc call*(call_569110: Call_GetContainersEventList_569099; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.2-preview";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getContainersEventList
  ## The response is list of ContainerInstanceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569111 = newJObject()
  add(query_569111, "timeout", newJInt(timeout))
  add(query_569111, "api-version", newJString(apiVersion))
  add(query_569111, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569111, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569111, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569111, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569111, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569110.call(nil, query_569111, nil, nil, nil)

var getContainersEventList* = Call_GetContainersEventList_569099(
    name: "getContainersEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Containers/Events",
    validator: validate_GetContainersEventList_569100, base: "",
    url: url_GetContainersEventList_569101, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCorrelatedEventList_569112 = ref object of OpenApiRestCall_567668
proc url_GetCorrelatedEventList_569114(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "eventInstanceId" in path, "`eventInstanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/CorrelatedEvents/"),
               (kind: VariableSegment, value: "eventInstanceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetCorrelatedEventList_569113(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of FabricEvents.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   eventInstanceId: JString (required)
  ##                  : The EventInstanceId.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `eventInstanceId` field"
  var valid_569115 = path.getOrDefault("eventInstanceId")
  valid_569115 = validateParameter(valid_569115, JString, required = true,
                                 default = nil)
  if valid_569115 != nil:
    section.add "eventInstanceId", valid_569115
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569116 = query.getOrDefault("timeout")
  valid_569116 = validateParameter(valid_569116, JInt, required = false,
                                 default = newJInt(60))
  if valid_569116 != nil:
    section.add "timeout", valid_569116
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569117 = query.getOrDefault("api-version")
  valid_569117 = validateParameter(valid_569117, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569117 != nil:
    section.add "api-version", valid_569117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569118: Call_GetCorrelatedEventList_569112; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of FabricEvents.
  ## 
  let valid = call_569118.validator(path, query, header, formData, body)
  let scheme = call_569118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569118.url(scheme.get, call_569118.host, call_569118.base,
                         call_569118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569118, url, valid)

proc call*(call_569119: Call_GetCorrelatedEventList_569112;
          eventInstanceId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getCorrelatedEventList
  ## The response is list of FabricEvents.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   eventInstanceId: string (required)
  ##                  : The EventInstanceId.
  var path_569120 = newJObject()
  var query_569121 = newJObject()
  add(query_569121, "timeout", newJInt(timeout))
  add(query_569121, "api-version", newJString(apiVersion))
  add(path_569120, "eventInstanceId", newJString(eventInstanceId))
  result = call_569119.call(path_569120, query_569121, nil, nil, nil)

var getCorrelatedEventList* = Call_GetCorrelatedEventList_569112(
    name: "getCorrelatedEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events",
    validator: validate_GetCorrelatedEventList_569113, base: "",
    url: url_GetCorrelatedEventList_569114, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodesEventList_569122 = ref object of OpenApiRestCall_567668
proc url_GetNodesEventList_569124(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodesEventList_569123(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569125 = query.getOrDefault("timeout")
  valid_569125 = validateParameter(valid_569125, JInt, required = false,
                                 default = newJInt(60))
  if valid_569125 != nil:
    section.add "timeout", valid_569125
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569126 = query.getOrDefault("api-version")
  valid_569126 = validateParameter(valid_569126, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569126 != nil:
    section.add "api-version", valid_569126
  var valid_569127 = query.getOrDefault("SkipCorrelationLookup")
  valid_569127 = validateParameter(valid_569127, JBool, required = false, default = nil)
  if valid_569127 != nil:
    section.add "SkipCorrelationLookup", valid_569127
  var valid_569128 = query.getOrDefault("EventsTypesFilter")
  valid_569128 = validateParameter(valid_569128, JString, required = false,
                                 default = nil)
  if valid_569128 != nil:
    section.add "EventsTypesFilter", valid_569128
  var valid_569129 = query.getOrDefault("EndTimeUtc")
  valid_569129 = validateParameter(valid_569129, JString, required = true,
                                 default = nil)
  if valid_569129 != nil:
    section.add "EndTimeUtc", valid_569129
  var valid_569130 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569130 = validateParameter(valid_569130, JBool, required = false, default = nil)
  if valid_569130 != nil:
    section.add "ExcludeAnalysisEvents", valid_569130
  var valid_569131 = query.getOrDefault("StartTimeUtc")
  valid_569131 = validateParameter(valid_569131, JString, required = true,
                                 default = nil)
  if valid_569131 != nil:
    section.add "StartTimeUtc", valid_569131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569132: Call_GetNodesEventList_569122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_569132.validator(path, query, header, formData, body)
  let scheme = call_569132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569132.url(scheme.get, call_569132.host, call_569132.base,
                         call_569132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569132, url, valid)

proc call*(call_569133: Call_GetNodesEventList_569122; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodesEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569134 = newJObject()
  add(query_569134, "timeout", newJInt(timeout))
  add(query_569134, "api-version", newJString(apiVersion))
  add(query_569134, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569134, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569134, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569134, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569134, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569133.call(nil, query_569134, nil, nil, nil)

var getNodesEventList* = Call_GetNodesEventList_569122(name: "getNodesEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/Events", validator: validate_GetNodesEventList_569123,
    base: "", url: url_GetNodesEventList_569124,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeEventList_569135 = ref object of OpenApiRestCall_567668
proc url_GetNodeEventList_569137(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeEventList_569136(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569138 = path.getOrDefault("nodeName")
  valid_569138 = validateParameter(valid_569138, JString, required = true,
                                 default = nil)
  if valid_569138 != nil:
    section.add "nodeName", valid_569138
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569139 = query.getOrDefault("timeout")
  valid_569139 = validateParameter(valid_569139, JInt, required = false,
                                 default = newJInt(60))
  if valid_569139 != nil:
    section.add "timeout", valid_569139
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569140 = query.getOrDefault("api-version")
  valid_569140 = validateParameter(valid_569140, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569140 != nil:
    section.add "api-version", valid_569140
  var valid_569141 = query.getOrDefault("SkipCorrelationLookup")
  valid_569141 = validateParameter(valid_569141, JBool, required = false, default = nil)
  if valid_569141 != nil:
    section.add "SkipCorrelationLookup", valid_569141
  var valid_569142 = query.getOrDefault("EventsTypesFilter")
  valid_569142 = validateParameter(valid_569142, JString, required = false,
                                 default = nil)
  if valid_569142 != nil:
    section.add "EventsTypesFilter", valid_569142
  var valid_569143 = query.getOrDefault("EndTimeUtc")
  valid_569143 = validateParameter(valid_569143, JString, required = true,
                                 default = nil)
  if valid_569143 != nil:
    section.add "EndTimeUtc", valid_569143
  var valid_569144 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569144 = validateParameter(valid_569144, JBool, required = false, default = nil)
  if valid_569144 != nil:
    section.add "ExcludeAnalysisEvents", valid_569144
  var valid_569145 = query.getOrDefault("StartTimeUtc")
  valid_569145 = validateParameter(valid_569145, JString, required = true,
                                 default = nil)
  if valid_569145 != nil:
    section.add "StartTimeUtc", valid_569145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569146: Call_GetNodeEventList_569135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_569146.validator(path, query, header, formData, body)
  let scheme = call_569146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569146.url(scheme.get, call_569146.host, call_569146.base,
                         call_569146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569146, url, valid)

proc call*(call_569147: Call_GetNodeEventList_569135; nodeName: string;
          EndTimeUtc: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodeEventList
  ## The response is list of NodeEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569148 = newJObject()
  var query_569149 = newJObject()
  add(query_569149, "timeout", newJInt(timeout))
  add(query_569149, "api-version", newJString(apiVersion))
  add(path_569148, "nodeName", newJString(nodeName))
  add(query_569149, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569149, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569149, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569149, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569149, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569147.call(path_569148, query_569149, nil, nil, nil)

var getNodeEventList* = Call_GetNodeEventList_569135(name: "getNodeEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/{nodeName}/$/Events",
    validator: validate_GetNodeEventList_569136, base: "",
    url: url_GetNodeEventList_569137, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionsEventList_569150 = ref object of OpenApiRestCall_567668
proc url_GetPartitionsEventList_569152(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPartitionsEventList_569151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569153 = query.getOrDefault("timeout")
  valid_569153 = validateParameter(valid_569153, JInt, required = false,
                                 default = newJInt(60))
  if valid_569153 != nil:
    section.add "timeout", valid_569153
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569154 = query.getOrDefault("api-version")
  valid_569154 = validateParameter(valid_569154, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569154 != nil:
    section.add "api-version", valid_569154
  var valid_569155 = query.getOrDefault("SkipCorrelationLookup")
  valid_569155 = validateParameter(valid_569155, JBool, required = false, default = nil)
  if valid_569155 != nil:
    section.add "SkipCorrelationLookup", valid_569155
  var valid_569156 = query.getOrDefault("EventsTypesFilter")
  valid_569156 = validateParameter(valid_569156, JString, required = false,
                                 default = nil)
  if valid_569156 != nil:
    section.add "EventsTypesFilter", valid_569156
  var valid_569157 = query.getOrDefault("EndTimeUtc")
  valid_569157 = validateParameter(valid_569157, JString, required = true,
                                 default = nil)
  if valid_569157 != nil:
    section.add "EndTimeUtc", valid_569157
  var valid_569158 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569158 = validateParameter(valid_569158, JBool, required = false, default = nil)
  if valid_569158 != nil:
    section.add "ExcludeAnalysisEvents", valid_569158
  var valid_569159 = query.getOrDefault("StartTimeUtc")
  valid_569159 = validateParameter(valid_569159, JString, required = true,
                                 default = nil)
  if valid_569159 != nil:
    section.add "StartTimeUtc", valid_569159
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569160: Call_GetPartitionsEventList_569150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_569160.validator(path, query, header, formData, body)
  let scheme = call_569160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569160.url(scheme.get, call_569160.host, call_569160.base,
                         call_569160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569160, url, valid)

proc call*(call_569161: Call_GetPartitionsEventList_569150; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionsEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569162 = newJObject()
  add(query_569162, "timeout", newJInt(timeout))
  add(query_569162, "api-version", newJString(apiVersion))
  add(query_569162, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569162, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569162, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569162, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569162, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569161.call(nil, query_569162, nil, nil, nil)

var getPartitionsEventList* = Call_GetPartitionsEventList_569150(
    name: "getPartitionsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/Events",
    validator: validate_GetPartitionsEventList_569151, base: "",
    url: url_GetPartitionsEventList_569152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionEventList_569163 = ref object of OpenApiRestCall_567668
proc url_GetPartitionEventList_569165(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionEventList_569164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569166 = path.getOrDefault("partitionId")
  valid_569166 = validateParameter(valid_569166, JString, required = true,
                                 default = nil)
  if valid_569166 != nil:
    section.add "partitionId", valid_569166
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569167 = query.getOrDefault("timeout")
  valid_569167 = validateParameter(valid_569167, JInt, required = false,
                                 default = newJInt(60))
  if valid_569167 != nil:
    section.add "timeout", valid_569167
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569168 = query.getOrDefault("api-version")
  valid_569168 = validateParameter(valid_569168, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569168 != nil:
    section.add "api-version", valid_569168
  var valid_569169 = query.getOrDefault("SkipCorrelationLookup")
  valid_569169 = validateParameter(valid_569169, JBool, required = false, default = nil)
  if valid_569169 != nil:
    section.add "SkipCorrelationLookup", valid_569169
  var valid_569170 = query.getOrDefault("EventsTypesFilter")
  valid_569170 = validateParameter(valid_569170, JString, required = false,
                                 default = nil)
  if valid_569170 != nil:
    section.add "EventsTypesFilter", valid_569170
  var valid_569171 = query.getOrDefault("EndTimeUtc")
  valid_569171 = validateParameter(valid_569171, JString, required = true,
                                 default = nil)
  if valid_569171 != nil:
    section.add "EndTimeUtc", valid_569171
  var valid_569172 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569172 = validateParameter(valid_569172, JBool, required = false, default = nil)
  if valid_569172 != nil:
    section.add "ExcludeAnalysisEvents", valid_569172
  var valid_569173 = query.getOrDefault("StartTimeUtc")
  valid_569173 = validateParameter(valid_569173, JString, required = true,
                                 default = nil)
  if valid_569173 != nil:
    section.add "StartTimeUtc", valid_569173
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569174: Call_GetPartitionEventList_569163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_569174.validator(path, query, header, formData, body)
  let scheme = call_569174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569174.url(scheme.get, call_569174.host, call_569174.base,
                         call_569174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569174, url, valid)

proc call*(call_569175: Call_GetPartitionEventList_569163; EndTimeUtc: string;
          partitionId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionEventList
  ## The response is list of PartitionEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569176 = newJObject()
  var query_569177 = newJObject()
  add(query_569177, "timeout", newJInt(timeout))
  add(query_569177, "api-version", newJString(apiVersion))
  add(query_569177, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569177, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569177, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569176, "partitionId", newJString(partitionId))
  add(query_569177, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569177, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569175.call(path_569176, query_569177, nil, nil, nil)

var getPartitionEventList* = Call_GetPartitionEventList_569163(
    name: "getPartitionEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Events",
    validator: validate_GetPartitionEventList_569164, base: "",
    url: url_GetPartitionEventList_569165, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicasEventList_569178 = ref object of OpenApiRestCall_567668
proc url_GetPartitionReplicasEventList_569180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicasEventList_569179(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569181 = path.getOrDefault("partitionId")
  valid_569181 = validateParameter(valid_569181, JString, required = true,
                                 default = nil)
  if valid_569181 != nil:
    section.add "partitionId", valid_569181
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569182 = query.getOrDefault("timeout")
  valid_569182 = validateParameter(valid_569182, JInt, required = false,
                                 default = newJInt(60))
  if valid_569182 != nil:
    section.add "timeout", valid_569182
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569183 = query.getOrDefault("api-version")
  valid_569183 = validateParameter(valid_569183, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569183 != nil:
    section.add "api-version", valid_569183
  var valid_569184 = query.getOrDefault("SkipCorrelationLookup")
  valid_569184 = validateParameter(valid_569184, JBool, required = false, default = nil)
  if valid_569184 != nil:
    section.add "SkipCorrelationLookup", valid_569184
  var valid_569185 = query.getOrDefault("EventsTypesFilter")
  valid_569185 = validateParameter(valid_569185, JString, required = false,
                                 default = nil)
  if valid_569185 != nil:
    section.add "EventsTypesFilter", valid_569185
  var valid_569186 = query.getOrDefault("EndTimeUtc")
  valid_569186 = validateParameter(valid_569186, JString, required = true,
                                 default = nil)
  if valid_569186 != nil:
    section.add "EndTimeUtc", valid_569186
  var valid_569187 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569187 = validateParameter(valid_569187, JBool, required = false, default = nil)
  if valid_569187 != nil:
    section.add "ExcludeAnalysisEvents", valid_569187
  var valid_569188 = query.getOrDefault("StartTimeUtc")
  valid_569188 = validateParameter(valid_569188, JString, required = true,
                                 default = nil)
  if valid_569188 != nil:
    section.add "StartTimeUtc", valid_569188
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569189: Call_GetPartitionReplicasEventList_569178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_569189.validator(path, query, header, formData, body)
  let scheme = call_569189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569189.url(scheme.get, call_569189.host, call_569189.base,
                         call_569189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569189, url, valid)

proc call*(call_569190: Call_GetPartitionReplicasEventList_569178;
          EndTimeUtc: string; partitionId: string; StartTimeUtc: string;
          timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicasEventList
  ## The response is list of ReplicaEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569191 = newJObject()
  var query_569192 = newJObject()
  add(query_569192, "timeout", newJInt(timeout))
  add(query_569192, "api-version", newJString(apiVersion))
  add(query_569192, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569192, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569192, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569191, "partitionId", newJString(partitionId))
  add(query_569192, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569192, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569190.call(path_569191, query_569192, nil, nil, nil)

var getPartitionReplicasEventList* = Call_GetPartitionReplicasEventList_569178(
    name: "getPartitionReplicasEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Replicas/Events",
    validator: validate_GetPartitionReplicasEventList_569179, base: "",
    url: url_GetPartitionReplicasEventList_569180,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicaEventList_569193 = ref object of OpenApiRestCall_567668
proc url_GetPartitionReplicaEventList_569195(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicaEventList_569194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569196 = path.getOrDefault("replicaId")
  valid_569196 = validateParameter(valid_569196, JString, required = true,
                                 default = nil)
  if valid_569196 != nil:
    section.add "replicaId", valid_569196
  var valid_569197 = path.getOrDefault("partitionId")
  valid_569197 = validateParameter(valid_569197, JString, required = true,
                                 default = nil)
  if valid_569197 != nil:
    section.add "partitionId", valid_569197
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569198 = query.getOrDefault("timeout")
  valid_569198 = validateParameter(valid_569198, JInt, required = false,
                                 default = newJInt(60))
  if valid_569198 != nil:
    section.add "timeout", valid_569198
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569199 = query.getOrDefault("api-version")
  valid_569199 = validateParameter(valid_569199, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569199 != nil:
    section.add "api-version", valid_569199
  var valid_569200 = query.getOrDefault("SkipCorrelationLookup")
  valid_569200 = validateParameter(valid_569200, JBool, required = false, default = nil)
  if valid_569200 != nil:
    section.add "SkipCorrelationLookup", valid_569200
  var valid_569201 = query.getOrDefault("EventsTypesFilter")
  valid_569201 = validateParameter(valid_569201, JString, required = false,
                                 default = nil)
  if valid_569201 != nil:
    section.add "EventsTypesFilter", valid_569201
  var valid_569202 = query.getOrDefault("EndTimeUtc")
  valid_569202 = validateParameter(valid_569202, JString, required = true,
                                 default = nil)
  if valid_569202 != nil:
    section.add "EndTimeUtc", valid_569202
  var valid_569203 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569203 = validateParameter(valid_569203, JBool, required = false, default = nil)
  if valid_569203 != nil:
    section.add "ExcludeAnalysisEvents", valid_569203
  var valid_569204 = query.getOrDefault("StartTimeUtc")
  valid_569204 = validateParameter(valid_569204, JString, required = true,
                                 default = nil)
  if valid_569204 != nil:
    section.add "StartTimeUtc", valid_569204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569205: Call_GetPartitionReplicaEventList_569193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_569205.validator(path, query, header, formData, body)
  let scheme = call_569205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569205.url(scheme.get, call_569205.host, call_569205.base,
                         call_569205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569205, url, valid)

proc call*(call_569206: Call_GetPartitionReplicaEventList_569193;
          replicaId: string; EndTimeUtc: string; partitionId: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicaEventList
  ## The response is list of ReplicaEvent objects.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569207 = newJObject()
  var query_569208 = newJObject()
  add(path_569207, "replicaId", newJString(replicaId))
  add(query_569208, "timeout", newJInt(timeout))
  add(query_569208, "api-version", newJString(apiVersion))
  add(query_569208, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569208, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569208, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569207, "partitionId", newJString(partitionId))
  add(query_569208, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569208, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569206.call(path_569207, query_569208, nil, nil, nil)

var getPartitionReplicaEventList* = Call_GetPartitionReplicaEventList_569193(
    name: "getPartitionReplicaEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events",
    validator: validate_GetPartitionReplicaEventList_569194, base: "",
    url: url_GetPartitionReplicaEventList_569195,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServicesEventList_569209 = ref object of OpenApiRestCall_567668
proc url_GetServicesEventList_569211(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetServicesEventList_569210(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569212 = query.getOrDefault("timeout")
  valid_569212 = validateParameter(valid_569212, JInt, required = false,
                                 default = newJInt(60))
  if valid_569212 != nil:
    section.add "timeout", valid_569212
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569213 = query.getOrDefault("api-version")
  valid_569213 = validateParameter(valid_569213, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569213 != nil:
    section.add "api-version", valid_569213
  var valid_569214 = query.getOrDefault("SkipCorrelationLookup")
  valid_569214 = validateParameter(valid_569214, JBool, required = false, default = nil)
  if valid_569214 != nil:
    section.add "SkipCorrelationLookup", valid_569214
  var valid_569215 = query.getOrDefault("EventsTypesFilter")
  valid_569215 = validateParameter(valid_569215, JString, required = false,
                                 default = nil)
  if valid_569215 != nil:
    section.add "EventsTypesFilter", valid_569215
  var valid_569216 = query.getOrDefault("EndTimeUtc")
  valid_569216 = validateParameter(valid_569216, JString, required = true,
                                 default = nil)
  if valid_569216 != nil:
    section.add "EndTimeUtc", valid_569216
  var valid_569217 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569217 = validateParameter(valid_569217, JBool, required = false, default = nil)
  if valid_569217 != nil:
    section.add "ExcludeAnalysisEvents", valid_569217
  var valid_569218 = query.getOrDefault("StartTimeUtc")
  valid_569218 = validateParameter(valid_569218, JString, required = true,
                                 default = nil)
  if valid_569218 != nil:
    section.add "StartTimeUtc", valid_569218
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569219: Call_GetServicesEventList_569209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_569219.validator(path, query, header, formData, body)
  let scheme = call_569219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569219.url(scheme.get, call_569219.host, call_569219.base,
                         call_569219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569219, url, valid)

proc call*(call_569220: Call_GetServicesEventList_569209; EndTimeUtc: string;
          StartTimeUtc: string; timeout: int = 60; apiVersion: string = "6.4";
          SkipCorrelationLookup: bool = false; EventsTypesFilter: string = "";
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServicesEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var query_569221 = newJObject()
  add(query_569221, "timeout", newJInt(timeout))
  add(query_569221, "api-version", newJString(apiVersion))
  add(query_569221, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569221, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569221, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_569221, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569221, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569220.call(nil, query_569221, nil, nil, nil)

var getServicesEventList* = Call_GetServicesEventList_569209(
    name: "getServicesEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Services/Events",
    validator: validate_GetServicesEventList_569210, base: "",
    url: url_GetServicesEventList_569211, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceEventList_569222 = ref object of OpenApiRestCall_567668
proc url_GetServiceEventList_569224(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceEventList_569223(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_569225 = path.getOrDefault("serviceId")
  valid_569225 = validateParameter(valid_569225, JString, required = true,
                                 default = nil)
  if valid_569225 != nil:
    section.add "serviceId", valid_569225
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  section = newJObject()
  var valid_569226 = query.getOrDefault("timeout")
  valid_569226 = validateParameter(valid_569226, JInt, required = false,
                                 default = newJInt(60))
  if valid_569226 != nil:
    section.add "timeout", valid_569226
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569227 = query.getOrDefault("api-version")
  valid_569227 = validateParameter(valid_569227, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569227 != nil:
    section.add "api-version", valid_569227
  var valid_569228 = query.getOrDefault("SkipCorrelationLookup")
  valid_569228 = validateParameter(valid_569228, JBool, required = false, default = nil)
  if valid_569228 != nil:
    section.add "SkipCorrelationLookup", valid_569228
  var valid_569229 = query.getOrDefault("EventsTypesFilter")
  valid_569229 = validateParameter(valid_569229, JString, required = false,
                                 default = nil)
  if valid_569229 != nil:
    section.add "EventsTypesFilter", valid_569229
  var valid_569230 = query.getOrDefault("EndTimeUtc")
  valid_569230 = validateParameter(valid_569230, JString, required = true,
                                 default = nil)
  if valid_569230 != nil:
    section.add "EndTimeUtc", valid_569230
  var valid_569231 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_569231 = validateParameter(valid_569231, JBool, required = false, default = nil)
  if valid_569231 != nil:
    section.add "ExcludeAnalysisEvents", valid_569231
  var valid_569232 = query.getOrDefault("StartTimeUtc")
  valid_569232 = validateParameter(valid_569232, JString, required = true,
                                 default = nil)
  if valid_569232 != nil:
    section.add "StartTimeUtc", valid_569232
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569233: Call_GetServiceEventList_569222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_569233.validator(path, query, header, formData, body)
  let scheme = call_569233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569233.url(scheme.get, call_569233.host, call_569233.base,
                         call_569233.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569233, url, valid)

proc call*(call_569234: Call_GetServiceEventList_569222; EndTimeUtc: string;
          serviceId: string; StartTimeUtc: string; timeout: int = 60;
          apiVersion: string = "6.4"; SkipCorrelationLookup: bool = false;
          EventsTypesFilter: string = ""; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServiceEventList
  ## The response is list of ServiceEvent objects.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  var path_569235 = newJObject()
  var query_569236 = newJObject()
  add(query_569236, "timeout", newJInt(timeout))
  add(query_569236, "api-version", newJString(apiVersion))
  add(query_569236, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_569236, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_569236, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_569235, "serviceId", newJString(serviceId))
  add(query_569236, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(query_569236, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_569234.call(path_569235, query_569236, nil, nil, nil)

var getServiceEventList* = Call_GetServiceEventList_569222(
    name: "getServiceEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Services/{serviceId}/$/Events",
    validator: validate_GetServiceEventList_569223, base: "",
    url: url_GetServiceEventList_569224, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFaultOperationList_569237 = ref object of OpenApiRestCall_567668
proc url_GetFaultOperationList_569239(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFaultOperationList_569238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: JInt (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: JInt (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  section = newJObject()
  var valid_569240 = query.getOrDefault("timeout")
  valid_569240 = validateParameter(valid_569240, JInt, required = false,
                                 default = newJInt(60))
  if valid_569240 != nil:
    section.add "timeout", valid_569240
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569241 = query.getOrDefault("api-version")
  valid_569241 = validateParameter(valid_569241, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569241 != nil:
    section.add "api-version", valid_569241
  var valid_569242 = query.getOrDefault("TypeFilter")
  valid_569242 = validateParameter(valid_569242, JInt, required = true,
                                 default = newJInt(65535))
  if valid_569242 != nil:
    section.add "TypeFilter", valid_569242
  var valid_569243 = query.getOrDefault("StateFilter")
  valid_569243 = validateParameter(valid_569243, JInt, required = true,
                                 default = newJInt(65535))
  if valid_569243 != nil:
    section.add "StateFilter", valid_569243
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569244: Call_GetFaultOperationList_569237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  let valid = call_569244.validator(path, query, header, formData, body)
  let scheme = call_569244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569244.url(scheme.get, call_569244.host, call_569244.base,
                         call_569244.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569244, url, valid)

proc call*(call_569245: Call_GetFaultOperationList_569237; timeout: int = 60;
          apiVersion: string = "6.0"; TypeFilter: int = 65535; StateFilter: int = 65535): Recallable =
  ## getFaultOperationList
  ## Gets the list of user-induced fault operations filtered by provided input.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   TypeFilter: int (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: int (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  var query_569246 = newJObject()
  add(query_569246, "timeout", newJInt(timeout))
  add(query_569246, "api-version", newJString(apiVersion))
  add(query_569246, "TypeFilter", newJInt(TypeFilter))
  add(query_569246, "StateFilter", newJInt(StateFilter))
  result = call_569245.call(nil, query_569246, nil, nil, nil)

var getFaultOperationList* = Call_GetFaultOperationList_569237(
    name: "getFaultOperationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/",
    validator: validate_GetFaultOperationList_569238, base: "",
    url: url_GetFaultOperationList_569239, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelOperation_569247 = ref object of OpenApiRestCall_567668
proc url_CancelOperation_569249(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelOperation_569248(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: JBool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  section = newJObject()
  var valid_569250 = query.getOrDefault("timeout")
  valid_569250 = validateParameter(valid_569250, JInt, required = false,
                                 default = newJInt(60))
  if valid_569250 != nil:
    section.add "timeout", valid_569250
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569251 = query.getOrDefault("api-version")
  valid_569251 = validateParameter(valid_569251, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569251 != nil:
    section.add "api-version", valid_569251
  var valid_569252 = query.getOrDefault("OperationId")
  valid_569252 = validateParameter(valid_569252, JString, required = true,
                                 default = nil)
  if valid_569252 != nil:
    section.add "OperationId", valid_569252
  var valid_569253 = query.getOrDefault("Force")
  valid_569253 = validateParameter(valid_569253, JBool, required = true,
                                 default = newJBool(false))
  if valid_569253 != nil:
    section.add "Force", valid_569253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569254: Call_CancelOperation_569247; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  let valid = call_569254.validator(path, query, header, formData, body)
  let scheme = call_569254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569254.url(scheme.get, call_569254.host, call_569254.base,
                         call_569254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569254, url, valid)

proc call*(call_569255: Call_CancelOperation_569247; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Force: bool = false): Recallable =
  ## cancelOperation
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   Force: bool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  var query_569256 = newJObject()
  add(query_569256, "timeout", newJInt(timeout))
  add(query_569256, "api-version", newJString(apiVersion))
  add(query_569256, "OperationId", newJString(OperationId))
  add(query_569256, "Force", newJBool(Force))
  result = call_569255.call(nil, query_569256, nil, nil, nil)

var cancelOperation* = Call_CancelOperation_569247(name: "cancelOperation",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/$/Cancel",
    validator: validate_CancelOperation_569248, base: "", url: url_CancelOperation_569249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeTransitionProgress_569257 = ref object of OpenApiRestCall_567668
proc url_GetNodeTransitionProgress_569259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetTransitionProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeTransitionProgress_569258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569260 = path.getOrDefault("nodeName")
  valid_569260 = validateParameter(valid_569260, JString, required = true,
                                 default = nil)
  if valid_569260 != nil:
    section.add "nodeName", valid_569260
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569261 = query.getOrDefault("timeout")
  valid_569261 = validateParameter(valid_569261, JInt, required = false,
                                 default = newJInt(60))
  if valid_569261 != nil:
    section.add "timeout", valid_569261
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569262 = query.getOrDefault("api-version")
  valid_569262 = validateParameter(valid_569262, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569262 != nil:
    section.add "api-version", valid_569262
  var valid_569263 = query.getOrDefault("OperationId")
  valid_569263 = validateParameter(valid_569263, JString, required = true,
                                 default = nil)
  if valid_569263 != nil:
    section.add "OperationId", valid_569263
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569264: Call_GetNodeTransitionProgress_569257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  let valid = call_569264.validator(path, query, header, formData, body)
  let scheme = call_569264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569264.url(scheme.get, call_569264.host, call_569264.base,
                         call_569264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569264, url, valid)

proc call*(call_569265: Call_GetNodeTransitionProgress_569257; nodeName: string;
          OperationId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeTransitionProgress
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569266 = newJObject()
  var query_569267 = newJObject()
  add(query_569267, "timeout", newJInt(timeout))
  add(query_569267, "api-version", newJString(apiVersion))
  add(path_569266, "nodeName", newJString(nodeName))
  add(query_569267, "OperationId", newJString(OperationId))
  result = call_569265.call(path_569266, query_569267, nil, nil, nil)

var getNodeTransitionProgress* = Call_GetNodeTransitionProgress_569257(
    name: "getNodeTransitionProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/GetTransitionProgress",
    validator: validate_GetNodeTransitionProgress_569258, base: "",
    url: url_GetNodeTransitionProgress_569259,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartNodeTransition_569268 = ref object of OpenApiRestCall_567668
proc url_StartNodeTransition_569270(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/StartTransition/")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartNodeTransition_569269(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569271 = path.getOrDefault("nodeName")
  valid_569271 = validateParameter(valid_569271, JString, required = true,
                                 default = nil)
  if valid_569271 != nil:
    section.add "nodeName", valid_569271
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeInstanceId: JString (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: JInt (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: JString (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569272 = query.getOrDefault("timeout")
  valid_569272 = validateParameter(valid_569272, JInt, required = false,
                                 default = newJInt(60))
  if valid_569272 != nil:
    section.add "timeout", valid_569272
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569273 = query.getOrDefault("api-version")
  valid_569273 = validateParameter(valid_569273, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569273 != nil:
    section.add "api-version", valid_569273
  var valid_569274 = query.getOrDefault("NodeInstanceId")
  valid_569274 = validateParameter(valid_569274, JString, required = true,
                                 default = nil)
  if valid_569274 != nil:
    section.add "NodeInstanceId", valid_569274
  var valid_569275 = query.getOrDefault("StopDurationInSeconds")
  valid_569275 = validateParameter(valid_569275, JInt, required = true, default = nil)
  if valid_569275 != nil:
    section.add "StopDurationInSeconds", valid_569275
  var valid_569276 = query.getOrDefault("NodeTransitionType")
  valid_569276 = validateParameter(valid_569276, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569276 != nil:
    section.add "NodeTransitionType", valid_569276
  var valid_569277 = query.getOrDefault("OperationId")
  valid_569277 = validateParameter(valid_569277, JString, required = true,
                                 default = nil)
  if valid_569277 != nil:
    section.add "OperationId", valid_569277
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569278: Call_StartNodeTransition_569268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  let valid = call_569278.validator(path, query, header, formData, body)
  let scheme = call_569278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569278.url(scheme.get, call_569278.host, call_569278.base,
                         call_569278.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569278, url, valid)

proc call*(call_569279: Call_StartNodeTransition_569268; nodeName: string;
          NodeInstanceId: string; StopDurationInSeconds: int; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          NodeTransitionType: string = "Invalid"): Recallable =
  ## startNodeTransition
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   NodeInstanceId: string (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   StopDurationInSeconds: int (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   NodeTransitionType: string (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569280 = newJObject()
  var query_569281 = newJObject()
  add(query_569281, "timeout", newJInt(timeout))
  add(query_569281, "api-version", newJString(apiVersion))
  add(path_569280, "nodeName", newJString(nodeName))
  add(query_569281, "NodeInstanceId", newJString(NodeInstanceId))
  add(query_569281, "StopDurationInSeconds", newJInt(StopDurationInSeconds))
  add(query_569281, "NodeTransitionType", newJString(NodeTransitionType))
  add(query_569281, "OperationId", newJString(OperationId))
  result = call_569279.call(path_569280, query_569281, nil, nil, nil)

var startNodeTransition* = Call_StartNodeTransition_569268(
    name: "startNodeTransition", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/StartTransition/",
    validator: validate_StartNodeTransition_569269, base: "",
    url: url_StartNodeTransition_569270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDataLossProgress_569282 = ref object of OpenApiRestCall_567668
proc url_GetDataLossProgress_569284(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetDataLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDataLossProgress_569283(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569285 = path.getOrDefault("partitionId")
  valid_569285 = validateParameter(valid_569285, JString, required = true,
                                 default = nil)
  if valid_569285 != nil:
    section.add "partitionId", valid_569285
  var valid_569286 = path.getOrDefault("serviceId")
  valid_569286 = validateParameter(valid_569286, JString, required = true,
                                 default = nil)
  if valid_569286 != nil:
    section.add "serviceId", valid_569286
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569287 = query.getOrDefault("timeout")
  valid_569287 = validateParameter(valid_569287, JInt, required = false,
                                 default = newJInt(60))
  if valid_569287 != nil:
    section.add "timeout", valid_569287
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569288 = query.getOrDefault("api-version")
  valid_569288 = validateParameter(valid_569288, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569288 != nil:
    section.add "api-version", valid_569288
  var valid_569289 = query.getOrDefault("OperationId")
  valid_569289 = validateParameter(valid_569289, JString, required = true,
                                 default = nil)
  if valid_569289 != nil:
    section.add "OperationId", valid_569289
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569290: Call_GetDataLossProgress_569282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  let valid = call_569290.validator(path, query, header, formData, body)
  let scheme = call_569290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569290.url(scheme.get, call_569290.host, call_569290.base,
                         call_569290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569290, url, valid)

proc call*(call_569291: Call_GetDataLossProgress_569282; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDataLossProgress
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569292 = newJObject()
  var query_569293 = newJObject()
  add(query_569293, "timeout", newJInt(timeout))
  add(query_569293, "api-version", newJString(apiVersion))
  add(path_569292, "partitionId", newJString(partitionId))
  add(path_569292, "serviceId", newJString(serviceId))
  add(query_569293, "OperationId", newJString(OperationId))
  result = call_569291.call(path_569292, query_569293, nil, nil, nil)

var getDataLossProgress* = Call_GetDataLossProgress_569282(
    name: "getDataLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress",
    validator: validate_GetDataLossProgress_569283, base: "",
    url: url_GetDataLossProgress_569284, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetQuorumLossProgress_569294 = ref object of OpenApiRestCall_567668
proc url_GetQuorumLossProgress_569296(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetQuorumLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetQuorumLossProgress_569295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569297 = path.getOrDefault("partitionId")
  valid_569297 = validateParameter(valid_569297, JString, required = true,
                                 default = nil)
  if valid_569297 != nil:
    section.add "partitionId", valid_569297
  var valid_569298 = path.getOrDefault("serviceId")
  valid_569298 = validateParameter(valid_569298, JString, required = true,
                                 default = nil)
  if valid_569298 != nil:
    section.add "serviceId", valid_569298
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569299 = query.getOrDefault("timeout")
  valid_569299 = validateParameter(valid_569299, JInt, required = false,
                                 default = newJInt(60))
  if valid_569299 != nil:
    section.add "timeout", valid_569299
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569300 = query.getOrDefault("api-version")
  valid_569300 = validateParameter(valid_569300, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569300 != nil:
    section.add "api-version", valid_569300
  var valid_569301 = query.getOrDefault("OperationId")
  valid_569301 = validateParameter(valid_569301, JString, required = true,
                                 default = nil)
  if valid_569301 != nil:
    section.add "OperationId", valid_569301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569302: Call_GetQuorumLossProgress_569294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  let valid = call_569302.validator(path, query, header, formData, body)
  let scheme = call_569302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569302.url(scheme.get, call_569302.host, call_569302.base,
                         call_569302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569302, url, valid)

proc call*(call_569303: Call_GetQuorumLossProgress_569294; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getQuorumLossProgress
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569304 = newJObject()
  var query_569305 = newJObject()
  add(query_569305, "timeout", newJInt(timeout))
  add(query_569305, "api-version", newJString(apiVersion))
  add(path_569304, "partitionId", newJString(partitionId))
  add(path_569304, "serviceId", newJString(serviceId))
  add(query_569305, "OperationId", newJString(OperationId))
  result = call_569303.call(path_569304, query_569305, nil, nil, nil)

var getQuorumLossProgress* = Call_GetQuorumLossProgress_569294(
    name: "getQuorumLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress",
    validator: validate_GetQuorumLossProgress_569295, base: "",
    url: url_GetQuorumLossProgress_569296, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestartProgress_569306 = ref object of OpenApiRestCall_567668
proc url_GetPartitionRestartProgress_569308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestartProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestartProgress_569307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569309 = path.getOrDefault("partitionId")
  valid_569309 = validateParameter(valid_569309, JString, required = true,
                                 default = nil)
  if valid_569309 != nil:
    section.add "partitionId", valid_569309
  var valid_569310 = path.getOrDefault("serviceId")
  valid_569310 = validateParameter(valid_569310, JString, required = true,
                                 default = nil)
  if valid_569310 != nil:
    section.add "serviceId", valid_569310
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569311 = query.getOrDefault("timeout")
  valid_569311 = validateParameter(valid_569311, JInt, required = false,
                                 default = newJInt(60))
  if valid_569311 != nil:
    section.add "timeout", valid_569311
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569312 = query.getOrDefault("api-version")
  valid_569312 = validateParameter(valid_569312, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569312 != nil:
    section.add "api-version", valid_569312
  var valid_569313 = query.getOrDefault("OperationId")
  valid_569313 = validateParameter(valid_569313, JString, required = true,
                                 default = nil)
  if valid_569313 != nil:
    section.add "OperationId", valid_569313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569314: Call_GetPartitionRestartProgress_569306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  let valid = call_569314.validator(path, query, header, formData, body)
  let scheme = call_569314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569314.url(scheme.get, call_569314.host, call_569314.base,
                         call_569314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569314, url, valid)

proc call*(call_569315: Call_GetPartitionRestartProgress_569306;
          partitionId: string; serviceId: string; OperationId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionRestartProgress
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569316 = newJObject()
  var query_569317 = newJObject()
  add(query_569317, "timeout", newJInt(timeout))
  add(query_569317, "api-version", newJString(apiVersion))
  add(path_569316, "partitionId", newJString(partitionId))
  add(path_569316, "serviceId", newJString(serviceId))
  add(query_569317, "OperationId", newJString(OperationId))
  result = call_569315.call(path_569316, query_569317, nil, nil, nil)

var getPartitionRestartProgress* = Call_GetPartitionRestartProgress_569306(
    name: "getPartitionRestartProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress",
    validator: validate_GetPartitionRestartProgress_569307, base: "",
    url: url_GetPartitionRestartProgress_569308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartDataLoss_569318 = ref object of OpenApiRestCall_567668
proc url_StartDataLoss_569320(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartDataLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartDataLoss_569319(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569321 = path.getOrDefault("partitionId")
  valid_569321 = validateParameter(valid_569321, JString, required = true,
                                 default = nil)
  if valid_569321 != nil:
    section.add "partitionId", valid_569321
  var valid_569322 = path.getOrDefault("serviceId")
  valid_569322 = validateParameter(valid_569322, JString, required = true,
                                 default = nil)
  if valid_569322 != nil:
    section.add "serviceId", valid_569322
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DataLossMode: JString (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569323 = query.getOrDefault("timeout")
  valid_569323 = validateParameter(valid_569323, JInt, required = false,
                                 default = newJInt(60))
  if valid_569323 != nil:
    section.add "timeout", valid_569323
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569324 = query.getOrDefault("api-version")
  valid_569324 = validateParameter(valid_569324, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569324 != nil:
    section.add "api-version", valid_569324
  var valid_569325 = query.getOrDefault("DataLossMode")
  valid_569325 = validateParameter(valid_569325, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569325 != nil:
    section.add "DataLossMode", valid_569325
  var valid_569326 = query.getOrDefault("OperationId")
  valid_569326 = validateParameter(valid_569326, JString, required = true,
                                 default = nil)
  if valid_569326 != nil:
    section.add "OperationId", valid_569326
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569327: Call_StartDataLoss_569318; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  let valid = call_569327.validator(path, query, header, formData, body)
  let scheme = call_569327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569327.url(scheme.get, call_569327.host, call_569327.base,
                         call_569327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569327, url, valid)

proc call*(call_569328: Call_StartDataLoss_569318; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; DataLossMode: string = "Invalid"): Recallable =
  ## startDataLoss
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   DataLossMode: string (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569329 = newJObject()
  var query_569330 = newJObject()
  add(query_569330, "timeout", newJInt(timeout))
  add(query_569330, "api-version", newJString(apiVersion))
  add(path_569329, "partitionId", newJString(partitionId))
  add(query_569330, "DataLossMode", newJString(DataLossMode))
  add(path_569329, "serviceId", newJString(serviceId))
  add(query_569330, "OperationId", newJString(OperationId))
  result = call_569328.call(path_569329, query_569330, nil, nil, nil)

var startDataLoss* = Call_StartDataLoss_569318(name: "startDataLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss",
    validator: validate_StartDataLoss_569319, base: "", url: url_StartDataLoss_569320,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartQuorumLoss_569331 = ref object of OpenApiRestCall_567668
proc url_StartQuorumLoss_569333(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartQuorumLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartQuorumLoss_569332(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569334 = path.getOrDefault("partitionId")
  valid_569334 = validateParameter(valid_569334, JString, required = true,
                                 default = nil)
  if valid_569334 != nil:
    section.add "partitionId", valid_569334
  var valid_569335 = path.getOrDefault("serviceId")
  valid_569335 = validateParameter(valid_569335, JString, required = true,
                                 default = nil)
  if valid_569335 != nil:
    section.add "serviceId", valid_569335
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: JString (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   QuorumLossDuration: JInt (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569336 = query.getOrDefault("timeout")
  valid_569336 = validateParameter(valid_569336, JInt, required = false,
                                 default = newJInt(60))
  if valid_569336 != nil:
    section.add "timeout", valid_569336
  assert query != nil,
        "query argument is necessary due to required `QuorumLossMode` field"
  var valid_569337 = query.getOrDefault("QuorumLossMode")
  valid_569337 = validateParameter(valid_569337, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569337 != nil:
    section.add "QuorumLossMode", valid_569337
  var valid_569338 = query.getOrDefault("api-version")
  valid_569338 = validateParameter(valid_569338, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569338 != nil:
    section.add "api-version", valid_569338
  var valid_569339 = query.getOrDefault("QuorumLossDuration")
  valid_569339 = validateParameter(valid_569339, JInt, required = true, default = nil)
  if valid_569339 != nil:
    section.add "QuorumLossDuration", valid_569339
  var valid_569340 = query.getOrDefault("OperationId")
  valid_569340 = validateParameter(valid_569340, JString, required = true,
                                 default = nil)
  if valid_569340 != nil:
    section.add "OperationId", valid_569340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569341: Call_StartQuorumLoss_569331; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  let valid = call_569341.validator(path, query, header, formData, body)
  let scheme = call_569341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569341.url(scheme.get, call_569341.host, call_569341.base,
                         call_569341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569341, url, valid)

proc call*(call_569342: Call_StartQuorumLoss_569331; partitionId: string;
          QuorumLossDuration: int; serviceId: string; OperationId: string;
          timeout: int = 60; QuorumLossMode: string = "Invalid";
          apiVersion: string = "6.0"): Recallable =
  ## startQuorumLoss
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossMode: string (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   QuorumLossDuration: int (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569343 = newJObject()
  var query_569344 = newJObject()
  add(query_569344, "timeout", newJInt(timeout))
  add(query_569344, "QuorumLossMode", newJString(QuorumLossMode))
  add(query_569344, "api-version", newJString(apiVersion))
  add(path_569343, "partitionId", newJString(partitionId))
  add(query_569344, "QuorumLossDuration", newJInt(QuorumLossDuration))
  add(path_569343, "serviceId", newJString(serviceId))
  add(query_569344, "OperationId", newJString(OperationId))
  result = call_569342.call(path_569343, query_569344, nil, nil, nil)

var startQuorumLoss* = Call_StartQuorumLoss_569331(name: "startQuorumLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss",
    validator: validate_StartQuorumLoss_569332, base: "", url: url_StartQuorumLoss_569333,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartPartitionRestart_569345 = ref object of OpenApiRestCall_567668
proc url_StartPartitionRestart_569347(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartRestart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartPartitionRestart_569346(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569348 = path.getOrDefault("partitionId")
  valid_569348 = validateParameter(valid_569348, JString, required = true,
                                 default = nil)
  if valid_569348 != nil:
    section.add "partitionId", valid_569348
  var valid_569349 = path.getOrDefault("serviceId")
  valid_569349 = validateParameter(valid_569349, JString, required = true,
                                 default = nil)
  if valid_569349 != nil:
    section.add "serviceId", valid_569349
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: JString (required)
  ##                       : Describe which partitions to restart.
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  section = newJObject()
  var valid_569350 = query.getOrDefault("timeout")
  valid_569350 = validateParameter(valid_569350, JInt, required = false,
                                 default = newJInt(60))
  if valid_569350 != nil:
    section.add "timeout", valid_569350
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569351 = query.getOrDefault("api-version")
  valid_569351 = validateParameter(valid_569351, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569351 != nil:
    section.add "api-version", valid_569351
  var valid_569352 = query.getOrDefault("RestartPartitionMode")
  valid_569352 = validateParameter(valid_569352, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_569352 != nil:
    section.add "RestartPartitionMode", valid_569352
  var valid_569353 = query.getOrDefault("OperationId")
  valid_569353 = validateParameter(valid_569353, JString, required = true,
                                 default = nil)
  if valid_569353 != nil:
    section.add "OperationId", valid_569353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569354: Call_StartPartitionRestart_569345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  let valid = call_569354.validator(path, query, header, formData, body)
  let scheme = call_569354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569354.url(scheme.get, call_569354.host, call_569354.base,
                         call_569354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569354, url, valid)

proc call*(call_569355: Call_StartPartitionRestart_569345; partitionId: string;
          serviceId: string; OperationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; RestartPartitionMode: string = "Invalid"): Recallable =
  ## startPartitionRestart
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: string (required)
  ##                       : Describe which partitions to restart.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  var path_569356 = newJObject()
  var query_569357 = newJObject()
  add(query_569357, "timeout", newJInt(timeout))
  add(query_569357, "api-version", newJString(apiVersion))
  add(query_569357, "RestartPartitionMode", newJString(RestartPartitionMode))
  add(path_569356, "partitionId", newJString(partitionId))
  add(path_569356, "serviceId", newJString(serviceId))
  add(query_569357, "OperationId", newJString(OperationId))
  result = call_569355.call(path_569356, query_569357, nil, nil, nil)

var startPartitionRestart* = Call_StartPartitionRestart_569345(
    name: "startPartitionRestart", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart",
    validator: validate_StartPartitionRestart_569346, base: "",
    url: url_StartPartitionRestart_569347, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootContent_569358 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreRootContent_569360(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootContent_569359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569361 = query.getOrDefault("timeout")
  valid_569361 = validateParameter(valid_569361, JInt, required = false,
                                 default = newJInt(60))
  if valid_569361 != nil:
    section.add "timeout", valid_569361
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569362 = query.getOrDefault("api-version")
  valid_569362 = validateParameter(valid_569362, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569362 != nil:
    section.add "api-version", valid_569362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569363: Call_GetImageStoreRootContent_569358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  let valid = call_569363.validator(path, query, header, formData, body)
  let scheme = call_569363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569363.url(scheme.get, call_569363.host, call_569363.base,
                         call_569363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569363, url, valid)

proc call*(call_569364: Call_GetImageStoreRootContent_569358; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getImageStoreRootContent
  ## Returns the information about the image store content at the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_569365 = newJObject()
  add(query_569365, "timeout", newJInt(timeout))
  add(query_569365, "api-version", newJString(apiVersion))
  result = call_569364.call(nil, query_569365, nil, nil, nil)

var getImageStoreRootContent* = Call_GetImageStoreRootContent_569358(
    name: "getImageStoreRootContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore",
    validator: validate_GetImageStoreRootContent_569359, base: "",
    url: url_GetImageStoreRootContent_569360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CommitImageStoreUploadSession_569366 = ref object of OpenApiRestCall_567668
proc url_CommitImageStoreUploadSession_569368(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CommitImageStoreUploadSession_569367(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569369 = query.getOrDefault("timeout")
  valid_569369 = validateParameter(valid_569369, JInt, required = false,
                                 default = newJInt(60))
  if valid_569369 != nil:
    section.add "timeout", valid_569369
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569370 = query.getOrDefault("api-version")
  valid_569370 = validateParameter(valid_569370, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569370 != nil:
    section.add "api-version", valid_569370
  var valid_569371 = query.getOrDefault("session-id")
  valid_569371 = validateParameter(valid_569371, JString, required = true,
                                 default = nil)
  if valid_569371 != nil:
    section.add "session-id", valid_569371
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569372: Call_CommitImageStoreUploadSession_569366; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  let valid = call_569372.validator(path, query, header, formData, body)
  let scheme = call_569372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569372.url(scheme.get, call_569372.host, call_569372.base,
                         call_569372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569372, url, valid)

proc call*(call_569373: Call_CommitImageStoreUploadSession_569366;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## commitImageStoreUploadSession
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_569374 = newJObject()
  add(query_569374, "timeout", newJInt(timeout))
  add(query_569374, "api-version", newJString(apiVersion))
  add(query_569374, "session-id", newJString(sessionId))
  result = call_569373.call(nil, query_569374, nil, nil, nil)

var commitImageStoreUploadSession* = Call_CommitImageStoreUploadSession_569366(
    name: "commitImageStoreUploadSession", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/CommitUploadSession",
    validator: validate_CommitImageStoreUploadSession_569367, base: "",
    url: url_CommitImageStoreUploadSession_569368,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CopyImageStoreContent_569375 = ref object of OpenApiRestCall_567668
proc url_CopyImageStoreContent_569377(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CopyImageStoreContent_569376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569378 = query.getOrDefault("timeout")
  valid_569378 = validateParameter(valid_569378, JInt, required = false,
                                 default = newJInt(60))
  if valid_569378 != nil:
    section.add "timeout", valid_569378
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569379 = query.getOrDefault("api-version")
  valid_569379 = validateParameter(valid_569379, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569379 != nil:
    section.add "api-version", valid_569379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569381: Call_CopyImageStoreContent_569375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  let valid = call_569381.validator(path, query, header, formData, body)
  let scheme = call_569381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569381.url(scheme.get, call_569381.host, call_569381.base,
                         call_569381.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569381, url, valid)

proc call*(call_569382: Call_CopyImageStoreContent_569375;
          ImageStoreCopyDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## copyImageStoreContent
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  var query_569383 = newJObject()
  var body_569384 = newJObject()
  add(query_569383, "timeout", newJInt(timeout))
  add(query_569383, "api-version", newJString(apiVersion))
  if ImageStoreCopyDescription != nil:
    body_569384 = ImageStoreCopyDescription
  result = call_569382.call(nil, query_569383, nil, nil, body_569384)

var copyImageStoreContent* = Call_CopyImageStoreContent_569375(
    name: "copyImageStoreContent", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/Copy",
    validator: validate_CopyImageStoreContent_569376, base: "",
    url: url_CopyImageStoreContent_569377, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreUploadSession_569385 = ref object of OpenApiRestCall_567668
proc url_DeleteImageStoreUploadSession_569387(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteImageStoreUploadSession_569386(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569388 = query.getOrDefault("timeout")
  valid_569388 = validateParameter(valid_569388, JInt, required = false,
                                 default = newJInt(60))
  if valid_569388 != nil:
    section.add "timeout", valid_569388
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569389 = query.getOrDefault("api-version")
  valid_569389 = validateParameter(valid_569389, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569389 != nil:
    section.add "api-version", valid_569389
  var valid_569390 = query.getOrDefault("session-id")
  valid_569390 = validateParameter(valid_569390, JString, required = true,
                                 default = nil)
  if valid_569390 != nil:
    section.add "session-id", valid_569390
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569391: Call_DeleteImageStoreUploadSession_569385; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  let valid = call_569391.validator(path, query, header, formData, body)
  let scheme = call_569391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569391.url(scheme.get, call_569391.host, call_569391.base,
                         call_569391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569391, url, valid)

proc call*(call_569392: Call_DeleteImageStoreUploadSession_569385;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreUploadSession
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_569393 = newJObject()
  add(query_569393, "timeout", newJInt(timeout))
  add(query_569393, "api-version", newJString(apiVersion))
  add(query_569393, "session-id", newJString(sessionId))
  result = call_569392.call(nil, query_569393, nil, nil, nil)

var deleteImageStoreUploadSession* = Call_DeleteImageStoreUploadSession_569385(
    name: "deleteImageStoreUploadSession", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/$/DeleteUploadSession",
    validator: validate_DeleteImageStoreUploadSession_569386, base: "",
    url: url_DeleteImageStoreUploadSession_569387,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionById_569394 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreUploadSessionById_569396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreUploadSessionById_569395(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569397 = query.getOrDefault("timeout")
  valid_569397 = validateParameter(valid_569397, JInt, required = false,
                                 default = newJInt(60))
  if valid_569397 != nil:
    section.add "timeout", valid_569397
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569398 = query.getOrDefault("api-version")
  valid_569398 = validateParameter(valid_569398, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569398 != nil:
    section.add "api-version", valid_569398
  var valid_569399 = query.getOrDefault("session-id")
  valid_569399 = validateParameter(valid_569399, JString, required = true,
                                 default = nil)
  if valid_569399 != nil:
    section.add "session-id", valid_569399
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569400: Call_GetImageStoreUploadSessionById_569394; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_569400.validator(path, query, header, formData, body)
  let scheme = call_569400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569400.url(scheme.get, call_569400.host, call_569400.base,
                         call_569400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569400, url, valid)

proc call*(call_569401: Call_GetImageStoreUploadSessionById_569394;
          sessionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionById
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  var query_569402 = newJObject()
  add(query_569402, "timeout", newJInt(timeout))
  add(query_569402, "api-version", newJString(apiVersion))
  add(query_569402, "session-id", newJString(sessionId))
  result = call_569401.call(nil, query_569402, nil, nil, nil)

var getImageStoreUploadSessionById* = Call_GetImageStoreUploadSessionById_569394(
    name: "getImageStoreUploadSessionById", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionById_569395, base: "",
    url: url_GetImageStoreUploadSessionById_569396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFile_569413 = ref object of OpenApiRestCall_567668
proc url_UploadFile_569415(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFile_569414(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569416 = path.getOrDefault("contentPath")
  valid_569416 = validateParameter(valid_569416, JString, required = true,
                                 default = nil)
  if valid_569416 != nil:
    section.add "contentPath", valid_569416
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569417 = query.getOrDefault("timeout")
  valid_569417 = validateParameter(valid_569417, JInt, required = false,
                                 default = newJInt(60))
  if valid_569417 != nil:
    section.add "timeout", valid_569417
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569418 = query.getOrDefault("api-version")
  valid_569418 = validateParameter(valid_569418, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569418 != nil:
    section.add "api-version", valid_569418
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569419: Call_UploadFile_569413; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  let valid = call_569419.validator(path, query, header, formData, body)
  let scheme = call_569419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569419.url(scheme.get, call_569419.host, call_569419.base,
                         call_569419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569419, url, valid)

proc call*(call_569420: Call_UploadFile_569413; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFile
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569421 = newJObject()
  var query_569422 = newJObject()
  add(query_569422, "timeout", newJInt(timeout))
  add(query_569422, "api-version", newJString(apiVersion))
  add(path_569421, "contentPath", newJString(contentPath))
  result = call_569420.call(path_569421, query_569422, nil, nil, nil)

var uploadFile* = Call_UploadFile_569413(name: "uploadFile",
                                      meth: HttpMethod.HttpPut,
                                      host: "azure.local:19080",
                                      route: "/ImageStore/{contentPath}",
                                      validator: validate_UploadFile_569414,
                                      base: "", url: url_UploadFile_569415,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreContent_569403 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreContent_569405(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreContent_569404(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569406 = path.getOrDefault("contentPath")
  valid_569406 = validateParameter(valid_569406, JString, required = true,
                                 default = nil)
  if valid_569406 != nil:
    section.add "contentPath", valid_569406
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569407 = query.getOrDefault("timeout")
  valid_569407 = validateParameter(valid_569407, JInt, required = false,
                                 default = newJInt(60))
  if valid_569407 != nil:
    section.add "timeout", valid_569407
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569408 = query.getOrDefault("api-version")
  valid_569408 = validateParameter(valid_569408, JString, required = true,
                                 default = newJString("6.2"))
  if valid_569408 != nil:
    section.add "api-version", valid_569408
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569409: Call_GetImageStoreContent_569403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_569409.validator(path, query, header, formData, body)
  let scheme = call_569409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569409.url(scheme.get, call_569409.host, call_569409.base,
                         call_569409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569409, url, valid)

proc call*(call_569410: Call_GetImageStoreContent_569403; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## getImageStoreContent
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569411 = newJObject()
  var query_569412 = newJObject()
  add(query_569412, "timeout", newJInt(timeout))
  add(query_569412, "api-version", newJString(apiVersion))
  add(path_569411, "contentPath", newJString(contentPath))
  result = call_569410.call(path_569411, query_569412, nil, nil, nil)

var getImageStoreContent* = Call_GetImageStoreContent_569403(
    name: "getImageStoreContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_GetImageStoreContent_569404, base: "",
    url: url_GetImageStoreContent_569405, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreContent_569423 = ref object of OpenApiRestCall_567668
proc url_DeleteImageStoreContent_569425(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteImageStoreContent_569424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569426 = path.getOrDefault("contentPath")
  valid_569426 = validateParameter(valid_569426, JString, required = true,
                                 default = nil)
  if valid_569426 != nil:
    section.add "contentPath", valid_569426
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569427 = query.getOrDefault("timeout")
  valid_569427 = validateParameter(valid_569427, JInt, required = false,
                                 default = newJInt(60))
  if valid_569427 != nil:
    section.add "timeout", valid_569427
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569428 = query.getOrDefault("api-version")
  valid_569428 = validateParameter(valid_569428, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569428 != nil:
    section.add "api-version", valid_569428
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569429: Call_DeleteImageStoreContent_569423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  let valid = call_569429.validator(path, query, header, formData, body)
  let scheme = call_569429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569429.url(scheme.get, call_569429.host, call_569429.base,
                         call_569429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569429, url, valid)

proc call*(call_569430: Call_DeleteImageStoreContent_569423; contentPath: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteImageStoreContent
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569431 = newJObject()
  var query_569432 = newJObject()
  add(query_569432, "timeout", newJInt(timeout))
  add(query_569432, "api-version", newJString(apiVersion))
  add(path_569431, "contentPath", newJString(contentPath))
  result = call_569430.call(path_569431, query_569432, nil, nil, nil)

var deleteImageStoreContent* = Call_DeleteImageStoreContent_569423(
    name: "deleteImageStoreContent", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_DeleteImageStoreContent_569424, base: "",
    url: url_DeleteImageStoreContent_569425, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionByPath_569433 = ref object of OpenApiRestCall_567668
proc url_GetImageStoreUploadSessionByPath_569435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/GetUploadSession")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreUploadSessionByPath_569434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569436 = path.getOrDefault("contentPath")
  valid_569436 = validateParameter(valid_569436, JString, required = true,
                                 default = nil)
  if valid_569436 != nil:
    section.add "contentPath", valid_569436
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569437 = query.getOrDefault("timeout")
  valid_569437 = validateParameter(valid_569437, JInt, required = false,
                                 default = newJInt(60))
  if valid_569437 != nil:
    section.add "timeout", valid_569437
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569438 = query.getOrDefault("api-version")
  valid_569438 = validateParameter(valid_569438, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569438 != nil:
    section.add "api-version", valid_569438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569439: Call_GetImageStoreUploadSessionByPath_569433;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_569439.validator(path, query, header, formData, body)
  let scheme = call_569439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569439.url(scheme.get, call_569439.host, call_569439.base,
                         call_569439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569439, url, valid)

proc call*(call_569440: Call_GetImageStoreUploadSessionByPath_569433;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getImageStoreUploadSessionByPath
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569441 = newJObject()
  var query_569442 = newJObject()
  add(query_569442, "timeout", newJInt(timeout))
  add(query_569442, "api-version", newJString(apiVersion))
  add(path_569441, "contentPath", newJString(contentPath))
  result = call_569440.call(path_569441, query_569442, nil, nil, nil)

var getImageStoreUploadSessionByPath* = Call_GetImageStoreUploadSessionByPath_569433(
    name: "getImageStoreUploadSessionByPath", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionByPath_569434, base: "",
    url: url_GetImageStoreUploadSessionByPath_569435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFileChunk_569443 = ref object of OpenApiRestCall_567668
proc url_UploadFileChunk_569445(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/UploadChunk")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFileChunk_569444(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_569446 = path.getOrDefault("contentPath")
  valid_569446 = validateParameter(valid_569446, JString, required = true,
                                 default = nil)
  if valid_569446 != nil:
    section.add "contentPath", valid_569446
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  section = newJObject()
  var valid_569447 = query.getOrDefault("timeout")
  valid_569447 = validateParameter(valid_569447, JInt, required = false,
                                 default = newJInt(60))
  if valid_569447 != nil:
    section.add "timeout", valid_569447
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569448 = query.getOrDefault("api-version")
  valid_569448 = validateParameter(valid_569448, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569448 != nil:
    section.add "api-version", valid_569448
  var valid_569449 = query.getOrDefault("session-id")
  valid_569449 = validateParameter(valid_569449, JString, required = true,
                                 default = nil)
  if valid_569449 != nil:
    section.add "session-id", valid_569449
  result.add "query", section
  ## parameters in `header` object:
  ##   Content-Range: JString (required)
  ##                : When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
  section = newJObject()
  assert header != nil,
        "header argument is necessary due to required `Content-Range` field"
  var valid_569450 = header.getOrDefault("Content-Range")
  valid_569450 = validateParameter(valid_569450, JString, required = true,
                                 default = nil)
  if valid_569450 != nil:
    section.add "Content-Range", valid_569450
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569451: Call_UploadFileChunk_569443; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  let valid = call_569451.validator(path, query, header, formData, body)
  let scheme = call_569451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569451.url(scheme.get, call_569451.host, call_569451.base,
                         call_569451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569451, url, valid)

proc call*(call_569452: Call_UploadFileChunk_569443; sessionId: string;
          contentPath: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## uploadFileChunk
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  var path_569453 = newJObject()
  var query_569454 = newJObject()
  add(query_569454, "timeout", newJInt(timeout))
  add(query_569454, "api-version", newJString(apiVersion))
  add(query_569454, "session-id", newJString(sessionId))
  add(path_569453, "contentPath", newJString(contentPath))
  result = call_569452.call(path_569453, query_569454, nil, nil, nil)

var uploadFileChunk* = Call_UploadFileChunk_569443(name: "uploadFileChunk",
    meth: HttpMethod.HttpPut, host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/UploadChunk",
    validator: validate_UploadFileChunk_569444, base: "", url: url_UploadFileChunk_569445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateName_569455 = ref object of OpenApiRestCall_567668
proc url_CreateName_569457(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateName_569456(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates the specified Service Fabric name.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569458 = query.getOrDefault("timeout")
  valid_569458 = validateParameter(valid_569458, JInt, required = false,
                                 default = newJInt(60))
  if valid_569458 != nil:
    section.add "timeout", valid_569458
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569459 = query.getOrDefault("api-version")
  valid_569459 = validateParameter(valid_569459, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569459 != nil:
    section.add "api-version", valid_569459
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569461: Call_CreateName_569455; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates the specified Service Fabric name.
  ## 
  let valid = call_569461.validator(path, query, header, formData, body)
  let scheme = call_569461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569461.url(scheme.get, call_569461.host, call_569461.base,
                         call_569461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569461, url, valid)

proc call*(call_569462: Call_CreateName_569455; NameDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## createName
  ## Creates the specified Service Fabric name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  var query_569463 = newJObject()
  var body_569464 = newJObject()
  add(query_569463, "timeout", newJInt(timeout))
  add(query_569463, "api-version", newJString(apiVersion))
  if NameDescription != nil:
    body_569464 = NameDescription
  result = call_569462.call(nil, query_569463, nil, nil, body_569464)

var createName* = Call_CreateName_569455(name: "createName",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Names/$/Create",
                                      validator: validate_CreateName_569456,
                                      base: "", url: url_CreateName_569457,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNameExistsInfo_569465 = ref object of OpenApiRestCall_567668
proc url_GetNameExistsInfo_569467(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNameExistsInfo_569466(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569468 = path.getOrDefault("nameId")
  valid_569468 = validateParameter(valid_569468, JString, required = true,
                                 default = nil)
  if valid_569468 != nil:
    section.add "nameId", valid_569468
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569469 = query.getOrDefault("timeout")
  valid_569469 = validateParameter(valid_569469, JInt, required = false,
                                 default = newJInt(60))
  if valid_569469 != nil:
    section.add "timeout", valid_569469
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569470 = query.getOrDefault("api-version")
  valid_569470 = validateParameter(valid_569470, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569470 != nil:
    section.add "api-version", valid_569470
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569471: Call_GetNameExistsInfo_569465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  let valid = call_569471.validator(path, query, header, formData, body)
  let scheme = call_569471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569471.url(scheme.get, call_569471.host, call_569471.base,
                         call_569471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569471, url, valid)

proc call*(call_569472: Call_GetNameExistsInfo_569465; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNameExistsInfo
  ## Returns whether the specified Service Fabric name exists.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_569473 = newJObject()
  var query_569474 = newJObject()
  add(query_569474, "timeout", newJInt(timeout))
  add(query_569474, "api-version", newJString(apiVersion))
  add(path_569473, "nameId", newJString(nameId))
  result = call_569472.call(path_569473, query_569474, nil, nil, nil)

var getNameExistsInfo* = Call_GetNameExistsInfo_569465(name: "getNameExistsInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Names/{nameId}",
    validator: validate_GetNameExistsInfo_569466, base: "",
    url: url_GetNameExistsInfo_569467, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteName_569475 = ref object of OpenApiRestCall_567668
proc url_DeleteName_569477(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteName_569476(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569478 = path.getOrDefault("nameId")
  valid_569478 = validateParameter(valid_569478, JString, required = true,
                                 default = nil)
  if valid_569478 != nil:
    section.add "nameId", valid_569478
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569479 = query.getOrDefault("timeout")
  valid_569479 = validateParameter(valid_569479, JInt, required = false,
                                 default = newJInt(60))
  if valid_569479 != nil:
    section.add "timeout", valid_569479
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569480 = query.getOrDefault("api-version")
  valid_569480 = validateParameter(valid_569480, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569480 != nil:
    section.add "api-version", valid_569480
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569481: Call_DeleteName_569475; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  let valid = call_569481.validator(path, query, header, formData, body)
  let scheme = call_569481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569481.url(scheme.get, call_569481.host, call_569481.base,
                         call_569481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569481, url, valid)

proc call*(call_569482: Call_DeleteName_569475; nameId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deleteName
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_569483 = newJObject()
  var query_569484 = newJObject()
  add(query_569484, "timeout", newJInt(timeout))
  add(query_569484, "api-version", newJString(apiVersion))
  add(path_569483, "nameId", newJString(nameId))
  result = call_569482.call(path_569483, query_569484, nil, nil, nil)

var deleteName* = Call_DeleteName_569475(name: "deleteName",
                                      meth: HttpMethod.HttpDelete,
                                      host: "azure.local:19080",
                                      route: "/Names/{nameId}",
                                      validator: validate_DeleteName_569476,
                                      base: "", url: url_DeleteName_569477,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfoList_569485 = ref object of OpenApiRestCall_567668
proc url_GetPropertyInfoList_569487(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfoList_569486(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569488 = path.getOrDefault("nameId")
  valid_569488 = validateParameter(valid_569488, JString, required = true,
                                 default = nil)
  if valid_569488 != nil:
    section.add "nameId", valid_569488
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: JBool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  section = newJObject()
  var valid_569489 = query.getOrDefault("timeout")
  valid_569489 = validateParameter(valid_569489, JInt, required = false,
                                 default = newJInt(60))
  if valid_569489 != nil:
    section.add "timeout", valid_569489
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569490 = query.getOrDefault("api-version")
  valid_569490 = validateParameter(valid_569490, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569490 != nil:
    section.add "api-version", valid_569490
  var valid_569491 = query.getOrDefault("ContinuationToken")
  valid_569491 = validateParameter(valid_569491, JString, required = false,
                                 default = nil)
  if valid_569491 != nil:
    section.add "ContinuationToken", valid_569491
  var valid_569492 = query.getOrDefault("IncludeValues")
  valid_569492 = validateParameter(valid_569492, JBool, required = false,
                                 default = newJBool(false))
  if valid_569492 != nil:
    section.add "IncludeValues", valid_569492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569493: Call_GetPropertyInfoList_569485; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  let valid = call_569493.validator(path, query, header, formData, body)
  let scheme = call_569493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569493.url(scheme.get, call_569493.host, call_569493.base,
                         call_569493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569493, url, valid)

proc call*(call_569494: Call_GetPropertyInfoList_569485; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = "";
          IncludeValues: bool = false): Recallable =
  ## getPropertyInfoList
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   IncludeValues: bool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  var path_569495 = newJObject()
  var query_569496 = newJObject()
  add(query_569496, "timeout", newJInt(timeout))
  add(query_569496, "api-version", newJString(apiVersion))
  add(path_569495, "nameId", newJString(nameId))
  add(query_569496, "ContinuationToken", newJString(ContinuationToken))
  add(query_569496, "IncludeValues", newJBool(IncludeValues))
  result = call_569494.call(path_569495, query_569496, nil, nil, nil)

var getPropertyInfoList* = Call_GetPropertyInfoList_569485(
    name: "getPropertyInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Names/{nameId}/$/GetProperties",
    validator: validate_GetPropertyInfoList_569486, base: "",
    url: url_GetPropertyInfoList_569487, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SubmitPropertyBatch_569497 = ref object of OpenApiRestCall_567668
proc url_SubmitPropertyBatch_569499(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties/$/SubmitBatch")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SubmitPropertyBatch_569498(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569500 = path.getOrDefault("nameId")
  valid_569500 = validateParameter(valid_569500, JString, required = true,
                                 default = nil)
  if valid_569500 != nil:
    section.add "nameId", valid_569500
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569501 = query.getOrDefault("timeout")
  valid_569501 = validateParameter(valid_569501, JInt, required = false,
                                 default = newJInt(60))
  if valid_569501 != nil:
    section.add "timeout", valid_569501
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569502 = query.getOrDefault("api-version")
  valid_569502 = validateParameter(valid_569502, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569502 != nil:
    section.add "api-version", valid_569502
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569504: Call_SubmitPropertyBatch_569497; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  let valid = call_569504.validator(path, query, header, formData, body)
  let scheme = call_569504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569504.url(scheme.get, call_569504.host, call_569504.base,
                         call_569504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569504, url, valid)

proc call*(call_569505: Call_SubmitPropertyBatch_569497; nameId: string;
          PropertyBatchDescriptionList: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## submitPropertyBatch
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  var path_569506 = newJObject()
  var query_569507 = newJObject()
  var body_569508 = newJObject()
  add(query_569507, "timeout", newJInt(timeout))
  add(query_569507, "api-version", newJString(apiVersion))
  add(path_569506, "nameId", newJString(nameId))
  if PropertyBatchDescriptionList != nil:
    body_569508 = PropertyBatchDescriptionList
  result = call_569505.call(path_569506, query_569507, nil, nil, body_569508)

var submitPropertyBatch* = Call_SubmitPropertyBatch_569497(
    name: "submitPropertyBatch", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperties/$/SubmitBatch",
    validator: validate_SubmitPropertyBatch_569498, base: "",
    url: url_SubmitPropertyBatch_569499, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutProperty_569520 = ref object of OpenApiRestCall_567668
proc url_PutProperty_569522(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_PutProperty_569521(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569523 = path.getOrDefault("nameId")
  valid_569523 = validateParameter(valid_569523, JString, required = true,
                                 default = nil)
  if valid_569523 != nil:
    section.add "nameId", valid_569523
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569524 = query.getOrDefault("timeout")
  valid_569524 = validateParameter(valid_569524, JInt, required = false,
                                 default = newJInt(60))
  if valid_569524 != nil:
    section.add "timeout", valid_569524
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569525 = query.getOrDefault("api-version")
  valid_569525 = validateParameter(valid_569525, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569525 != nil:
    section.add "api-version", valid_569525
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569527: Call_PutProperty_569520; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  let valid = call_569527.validator(path, query, header, formData, body)
  let scheme = call_569527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569527.url(scheme.get, call_569527.host, call_569527.base,
                         call_569527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569527, url, valid)

proc call*(call_569528: Call_PutProperty_569520; nameId: string;
          PropertyDescription: JsonNode; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## putProperty
  ## Creates or updates the specified Service Fabric property under a given name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  var path_569529 = newJObject()
  var query_569530 = newJObject()
  var body_569531 = newJObject()
  add(query_569530, "timeout", newJInt(timeout))
  add(query_569530, "api-version", newJString(apiVersion))
  add(path_569529, "nameId", newJString(nameId))
  if PropertyDescription != nil:
    body_569531 = PropertyDescription
  result = call_569528.call(path_569529, query_569530, nil, nil, body_569531)

var putProperty* = Call_PutProperty_569520(name: "putProperty",
                                        meth: HttpMethod.HttpPut,
                                        host: "azure.local:19080",
                                        route: "/Names/{nameId}/$/GetProperty",
                                        validator: validate_PutProperty_569521,
                                        base: "", url: url_PutProperty_569522,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfo_569509 = ref object of OpenApiRestCall_567668
proc url_GetPropertyInfo_569511(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfo_569510(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569512 = path.getOrDefault("nameId")
  valid_569512 = validateParameter(valid_569512, JString, required = true,
                                 default = nil)
  if valid_569512 != nil:
    section.add "nameId", valid_569512
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_569513 = query.getOrDefault("timeout")
  valid_569513 = validateParameter(valid_569513, JInt, required = false,
                                 default = newJInt(60))
  if valid_569513 != nil:
    section.add "timeout", valid_569513
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569514 = query.getOrDefault("api-version")
  valid_569514 = validateParameter(valid_569514, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569514 != nil:
    section.add "api-version", valid_569514
  var valid_569515 = query.getOrDefault("PropertyName")
  valid_569515 = validateParameter(valid_569515, JString, required = true,
                                 default = nil)
  if valid_569515 != nil:
    section.add "PropertyName", valid_569515
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569516: Call_GetPropertyInfo_569509; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  let valid = call_569516.validator(path, query, header, formData, body)
  let scheme = call_569516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569516.url(scheme.get, call_569516.host, call_569516.base,
                         call_569516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569516, url, valid)

proc call*(call_569517: Call_GetPropertyInfo_569509; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPropertyInfo
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_569518 = newJObject()
  var query_569519 = newJObject()
  add(query_569519, "timeout", newJInt(timeout))
  add(query_569519, "api-version", newJString(apiVersion))
  add(path_569518, "nameId", newJString(nameId))
  add(query_569519, "PropertyName", newJString(PropertyName))
  result = call_569517.call(path_569518, query_569519, nil, nil, nil)

var getPropertyInfo* = Call_GetPropertyInfo_569509(name: "getPropertyInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_GetPropertyInfo_569510,
    base: "", url: url_GetPropertyInfo_569511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProperty_569532 = ref object of OpenApiRestCall_567668
proc url_DeleteProperty_569534(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteProperty_569533(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569535 = path.getOrDefault("nameId")
  valid_569535 = validateParameter(valid_569535, JString, required = true,
                                 default = nil)
  if valid_569535 != nil:
    section.add "nameId", valid_569535
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  var valid_569536 = query.getOrDefault("timeout")
  valid_569536 = validateParameter(valid_569536, JInt, required = false,
                                 default = newJInt(60))
  if valid_569536 != nil:
    section.add "timeout", valid_569536
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569537 = query.getOrDefault("api-version")
  valid_569537 = validateParameter(valid_569537, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569537 != nil:
    section.add "api-version", valid_569537
  var valid_569538 = query.getOrDefault("PropertyName")
  valid_569538 = validateParameter(valid_569538, JString, required = true,
                                 default = nil)
  if valid_569538 != nil:
    section.add "PropertyName", valid_569538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569539: Call_DeleteProperty_569532; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  let valid = call_569539.validator(path, query, header, formData, body)
  let scheme = call_569539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569539.url(scheme.get, call_569539.host, call_569539.base,
                         call_569539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569539, url, valid)

proc call*(call_569540: Call_DeleteProperty_569532; nameId: string;
          PropertyName: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## deleteProperty
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  var path_569541 = newJObject()
  var query_569542 = newJObject()
  add(query_569542, "timeout", newJInt(timeout))
  add(query_569542, "api-version", newJString(apiVersion))
  add(path_569541, "nameId", newJString(nameId))
  add(query_569542, "PropertyName", newJString(PropertyName))
  result = call_569540.call(path_569541, query_569542, nil, nil, nil)

var deleteProperty* = Call_DeleteProperty_569532(name: "deleteProperty",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_DeleteProperty_569533,
    base: "", url: url_DeleteProperty_569534, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSubNameInfoList_569543 = ref object of OpenApiRestCall_567668
proc url_GetSubNameInfoList_569545(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetSubNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetSubNameInfoList_569544(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_569546 = path.getOrDefault("nameId")
  valid_569546 = validateParameter(valid_569546, JString, required = true,
                                 default = nil)
  if valid_569546 != nil:
    section.add "nameId", valid_569546
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: JBool
  ##            : Allows specifying that the search performed should be recursive.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_569547 = query.getOrDefault("timeout")
  valid_569547 = validateParameter(valid_569547, JInt, required = false,
                                 default = newJInt(60))
  if valid_569547 != nil:
    section.add "timeout", valid_569547
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569548 = query.getOrDefault("api-version")
  valid_569548 = validateParameter(valid_569548, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569548 != nil:
    section.add "api-version", valid_569548
  var valid_569549 = query.getOrDefault("Recursive")
  valid_569549 = validateParameter(valid_569549, JBool, required = false,
                                 default = newJBool(false))
  if valid_569549 != nil:
    section.add "Recursive", valid_569549
  var valid_569550 = query.getOrDefault("ContinuationToken")
  valid_569550 = validateParameter(valid_569550, JString, required = false,
                                 default = nil)
  if valid_569550 != nil:
    section.add "ContinuationToken", valid_569550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569551: Call_GetSubNameInfoList_569543; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  let valid = call_569551.validator(path, query, header, formData, body)
  let scheme = call_569551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569551.url(scheme.get, call_569551.host, call_569551.base,
                         call_569551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569551, url, valid)

proc call*(call_569552: Call_GetSubNameInfoList_569543; nameId: string;
          timeout: int = 60; apiVersion: string = "6.0"; Recursive: bool = false;
          ContinuationToken: string = ""): Recallable =
  ## getSubNameInfoList
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Recursive: bool
  ##            : Allows specifying that the search performed should be recursive.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_569553 = newJObject()
  var query_569554 = newJObject()
  add(query_569554, "timeout", newJInt(timeout))
  add(query_569554, "api-version", newJString(apiVersion))
  add(query_569554, "Recursive", newJBool(Recursive))
  add(path_569553, "nameId", newJString(nameId))
  add(query_569554, "ContinuationToken", newJString(ContinuationToken))
  result = call_569552.call(path_569553, query_569554, nil, nil, nil)

var getSubNameInfoList* = Call_GetSubNameInfoList_569543(
    name: "getSubNameInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetSubNames",
    validator: validate_GetSubNameInfoList_569544, base: "",
    url: url_GetSubNameInfoList_569545, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfoList_569555 = ref object of OpenApiRestCall_567668
proc url_GetNodeInfoList_569557(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodeInfoList_569556(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: JString
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_569558 = query.getOrDefault("timeout")
  valid_569558 = validateParameter(valid_569558, JInt, required = false,
                                 default = newJInt(60))
  if valid_569558 != nil:
    section.add "timeout", valid_569558
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569559 = query.getOrDefault("api-version")
  valid_569559 = validateParameter(valid_569559, JString, required = true,
                                 default = newJString("6.3"))
  if valid_569559 != nil:
    section.add "api-version", valid_569559
  var valid_569560 = query.getOrDefault("NodeStatusFilter")
  valid_569560 = validateParameter(valid_569560, JString, required = false,
                                 default = newJString("default"))
  if valid_569560 != nil:
    section.add "NodeStatusFilter", valid_569560
  var valid_569561 = query.getOrDefault("ContinuationToken")
  valid_569561 = validateParameter(valid_569561, JString, required = false,
                                 default = nil)
  if valid_569561 != nil:
    section.add "ContinuationToken", valid_569561
  var valid_569562 = query.getOrDefault("MaxResults")
  valid_569562 = validateParameter(valid_569562, JInt, required = false,
                                 default = newJInt(0))
  if valid_569562 != nil:
    section.add "MaxResults", valid_569562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569563: Call_GetNodeInfoList_569555; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  let valid = call_569563.validator(path, query, header, formData, body)
  let scheme = call_569563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569563.url(scheme.get, call_569563.host, call_569563.base,
                         call_569563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569563, url, valid)

proc call*(call_569564: Call_GetNodeInfoList_569555; timeout: int = 60;
          apiVersion: string = "6.3"; NodeStatusFilter: string = "default";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getNodeInfoList
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: string
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var query_569565 = newJObject()
  add(query_569565, "timeout", newJInt(timeout))
  add(query_569565, "api-version", newJString(apiVersion))
  add(query_569565, "NodeStatusFilter", newJString(NodeStatusFilter))
  add(query_569565, "ContinuationToken", newJString(ContinuationToken))
  add(query_569565, "MaxResults", newJInt(MaxResults))
  result = call_569564.call(nil, query_569565, nil, nil, nil)

var getNodeInfoList* = Call_GetNodeInfoList_569555(name: "getNodeInfoList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Nodes",
    validator: validate_GetNodeInfoList_569556, base: "", url: url_GetNodeInfoList_569557,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfo_569566 = ref object of OpenApiRestCall_567668
proc url_GetNodeInfo_569568(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeInfo_569567(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569569 = path.getOrDefault("nodeName")
  valid_569569 = validateParameter(valid_569569, JString, required = true,
                                 default = nil)
  if valid_569569 != nil:
    section.add "nodeName", valid_569569
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569570 = query.getOrDefault("timeout")
  valid_569570 = validateParameter(valid_569570, JInt, required = false,
                                 default = newJInt(60))
  if valid_569570 != nil:
    section.add "timeout", valid_569570
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569571 = query.getOrDefault("api-version")
  valid_569571 = validateParameter(valid_569571, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569571 != nil:
    section.add "api-version", valid_569571
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569572: Call_GetNodeInfo_569566; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  let valid = call_569572.validator(path, query, header, formData, body)
  let scheme = call_569572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569572.url(scheme.get, call_569572.host, call_569572.base,
                         call_569572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569572, url, valid)

proc call*(call_569573: Call_GetNodeInfo_569566; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getNodeInfo
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569574 = newJObject()
  var query_569575 = newJObject()
  add(query_569575, "timeout", newJInt(timeout))
  add(query_569575, "api-version", newJString(apiVersion))
  add(path_569574, "nodeName", newJString(nodeName))
  result = call_569573.call(path_569574, query_569575, nil, nil, nil)

var getNodeInfo* = Call_GetNodeInfo_569566(name: "getNodeInfo",
                                        meth: HttpMethod.HttpGet,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}",
                                        validator: validate_GetNodeInfo_569567,
                                        base: "", url: url_GetNodeInfo_569568,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableNode_569576 = ref object of OpenApiRestCall_567668
proc url_EnableNode_569578(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Activate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableNode_569577(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569579 = path.getOrDefault("nodeName")
  valid_569579 = validateParameter(valid_569579, JString, required = true,
                                 default = nil)
  if valid_569579 != nil:
    section.add "nodeName", valid_569579
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569580 = query.getOrDefault("timeout")
  valid_569580 = validateParameter(valid_569580, JInt, required = false,
                                 default = newJInt(60))
  if valid_569580 != nil:
    section.add "timeout", valid_569580
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569581 = query.getOrDefault("api-version")
  valid_569581 = validateParameter(valid_569581, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569581 != nil:
    section.add "api-version", valid_569581
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569582: Call_EnableNode_569576; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  let valid = call_569582.validator(path, query, header, formData, body)
  let scheme = call_569582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569582.url(scheme.get, call_569582.host, call_569582.base,
                         call_569582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569582, url, valid)

proc call*(call_569583: Call_EnableNode_569576; nodeName: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## enableNode
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569584 = newJObject()
  var query_569585 = newJObject()
  add(query_569585, "timeout", newJInt(timeout))
  add(query_569585, "api-version", newJString(apiVersion))
  add(path_569584, "nodeName", newJString(nodeName))
  result = call_569583.call(path_569584, query_569585, nil, nil, nil)

var enableNode* = Call_EnableNode_569576(name: "enableNode",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Nodes/{nodeName}/$/Activate",
                                      validator: validate_EnableNode_569577,
                                      base: "", url: url_EnableNode_569578,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableNode_569586 = ref object of OpenApiRestCall_567668
proc url_DisableNode_569588(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Deactivate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableNode_569587(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569589 = path.getOrDefault("nodeName")
  valid_569589 = validateParameter(valid_569589, JString, required = true,
                                 default = nil)
  if valid_569589 != nil:
    section.add "nodeName", valid_569589
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569590 = query.getOrDefault("timeout")
  valid_569590 = validateParameter(valid_569590, JInt, required = false,
                                 default = newJInt(60))
  if valid_569590 != nil:
    section.add "timeout", valid_569590
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569591 = query.getOrDefault("api-version")
  valid_569591 = validateParameter(valid_569591, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569591 != nil:
    section.add "api-version", valid_569591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569593: Call_DisableNode_569586; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  let valid = call_569593.validator(path, query, header, formData, body)
  let scheme = call_569593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569593.url(scheme.get, call_569593.host, call_569593.base,
                         call_569593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569593, url, valid)

proc call*(call_569594: Call_DisableNode_569586; nodeName: string;
          DeactivationIntentDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## disableNode
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  var path_569595 = newJObject()
  var query_569596 = newJObject()
  var body_569597 = newJObject()
  add(query_569596, "timeout", newJInt(timeout))
  add(query_569596, "api-version", newJString(apiVersion))
  add(path_569595, "nodeName", newJString(nodeName))
  if DeactivationIntentDescription != nil:
    body_569597 = DeactivationIntentDescription
  result = call_569594.call(path_569595, query_569596, nil, nil, body_569597)

var disableNode* = Call_DisableNode_569586(name: "disableNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080", route: "/Nodes/{nodeName}/$/Deactivate",
                                        validator: validate_DisableNode_569587,
                                        base: "", url: url_DisableNode_569588,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeployServicePackageToNode_569598 = ref object of OpenApiRestCall_567668
proc url_DeployServicePackageToNode_569600(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/DeployServicePackage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeployServicePackageToNode_569599(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569601 = path.getOrDefault("nodeName")
  valid_569601 = validateParameter(valid_569601, JString, required = true,
                                 default = nil)
  if valid_569601 != nil:
    section.add "nodeName", valid_569601
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569602 = query.getOrDefault("timeout")
  valid_569602 = validateParameter(valid_569602, JInt, required = false,
                                 default = newJInt(60))
  if valid_569602 != nil:
    section.add "timeout", valid_569602
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569603 = query.getOrDefault("api-version")
  valid_569603 = validateParameter(valid_569603, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569603 != nil:
    section.add "api-version", valid_569603
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569605: Call_DeployServicePackageToNode_569598; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  let valid = call_569605.validator(path, query, header, formData, body)
  let scheme = call_569605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569605.url(scheme.get, call_569605.host, call_569605.base,
                         call_569605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569605, url, valid)

proc call*(call_569606: Call_DeployServicePackageToNode_569598; nodeName: string;
          DeployServicePackageToNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## deployServicePackageToNode
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  var path_569607 = newJObject()
  var query_569608 = newJObject()
  var body_569609 = newJObject()
  add(query_569608, "timeout", newJInt(timeout))
  add(query_569608, "api-version", newJString(apiVersion))
  add(path_569607, "nodeName", newJString(nodeName))
  if DeployServicePackageToNodeDescription != nil:
    body_569609 = DeployServicePackageToNodeDescription
  result = call_569606.call(path_569607, query_569608, nil, nil, body_569609)

var deployServicePackageToNode* = Call_DeployServicePackageToNode_569598(
    name: "deployServicePackageToNode", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/DeployServicePackage",
    validator: validate_DeployServicePackageToNode_569599, base: "",
    url: url_DeployServicePackageToNode_569600,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfoList_569610 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationInfoList_569612(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfoList_569611(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569613 = path.getOrDefault("nodeName")
  valid_569613 = validateParameter(valid_569613, JString, required = true,
                                 default = nil)
  if valid_569613 != nil:
    section.add "nodeName", valid_569613
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_569614 = query.getOrDefault("timeout")
  valid_569614 = validateParameter(valid_569614, JInt, required = false,
                                 default = newJInt(60))
  if valid_569614 != nil:
    section.add "timeout", valid_569614
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569615 = query.getOrDefault("api-version")
  valid_569615 = validateParameter(valid_569615, JString, required = true,
                                 default = newJString("6.1"))
  if valid_569615 != nil:
    section.add "api-version", valid_569615
  var valid_569616 = query.getOrDefault("IncludeHealthState")
  valid_569616 = validateParameter(valid_569616, JBool, required = false,
                                 default = newJBool(false))
  if valid_569616 != nil:
    section.add "IncludeHealthState", valid_569616
  var valid_569617 = query.getOrDefault("ContinuationToken")
  valid_569617 = validateParameter(valid_569617, JString, required = false,
                                 default = nil)
  if valid_569617 != nil:
    section.add "ContinuationToken", valid_569617
  var valid_569618 = query.getOrDefault("MaxResults")
  valid_569618 = validateParameter(valid_569618, JInt, required = false,
                                 default = newJInt(0))
  if valid_569618 != nil:
    section.add "MaxResults", valid_569618
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569619: Call_GetDeployedApplicationInfoList_569610; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_569619.validator(path, query, header, formData, body)
  let scheme = call_569619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569619.url(scheme.get, call_569619.host, call_569619.base,
                         call_569619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569619, url, valid)

proc call*(call_569620: Call_GetDeployedApplicationInfoList_569610;
          nodeName: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false; ContinuationToken: string = "";
          MaxResults: int = 0): Recallable =
  ## getDeployedApplicationInfoList
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_569621 = newJObject()
  var query_569622 = newJObject()
  add(query_569622, "timeout", newJInt(timeout))
  add(query_569622, "api-version", newJString(apiVersion))
  add(path_569621, "nodeName", newJString(nodeName))
  add(query_569622, "IncludeHealthState", newJBool(IncludeHealthState))
  add(query_569622, "ContinuationToken", newJString(ContinuationToken))
  add(query_569622, "MaxResults", newJInt(MaxResults))
  result = call_569620.call(path_569621, query_569622, nil, nil, nil)

var getDeployedApplicationInfoList* = Call_GetDeployedApplicationInfoList_569610(
    name: "getDeployedApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications",
    validator: validate_GetDeployedApplicationInfoList_569611, base: "",
    url: url_GetDeployedApplicationInfoList_569612,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfo_569623 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationInfo_569625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfo_569624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569626 = path.getOrDefault("nodeName")
  valid_569626 = validateParameter(valid_569626, JString, required = true,
                                 default = nil)
  if valid_569626 != nil:
    section.add "nodeName", valid_569626
  var valid_569627 = path.getOrDefault("applicationId")
  valid_569627 = validateParameter(valid_569627, JString, required = true,
                                 default = nil)
  if valid_569627 != nil:
    section.add "applicationId", valid_569627
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  section = newJObject()
  var valid_569628 = query.getOrDefault("timeout")
  valid_569628 = validateParameter(valid_569628, JInt, required = false,
                                 default = newJInt(60))
  if valid_569628 != nil:
    section.add "timeout", valid_569628
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569629 = query.getOrDefault("api-version")
  valid_569629 = validateParameter(valid_569629, JString, required = true,
                                 default = newJString("6.1"))
  if valid_569629 != nil:
    section.add "api-version", valid_569629
  var valid_569630 = query.getOrDefault("IncludeHealthState")
  valid_569630 = validateParameter(valid_569630, JBool, required = false,
                                 default = newJBool(false))
  if valid_569630 != nil:
    section.add "IncludeHealthState", valid_569630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569631: Call_GetDeployedApplicationInfo_569623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_569631.validator(path, query, header, formData, body)
  let scheme = call_569631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569631.url(scheme.get, call_569631.host, call_569631.base,
                         call_569631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569631, url, valid)

proc call*(call_569632: Call_GetDeployedApplicationInfo_569623; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.1";
          IncludeHealthState: bool = false): Recallable =
  ## getDeployedApplicationInfo
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569633 = newJObject()
  var query_569634 = newJObject()
  add(query_569634, "timeout", newJInt(timeout))
  add(query_569634, "api-version", newJString(apiVersion))
  add(path_569633, "nodeName", newJString(nodeName))
  add(query_569634, "IncludeHealthState", newJBool(IncludeHealthState))
  add(path_569633, "applicationId", newJString(applicationId))
  result = call_569632.call(path_569633, query_569634, nil, nil, nil)

var getDeployedApplicationInfo* = Call_GetDeployedApplicationInfo_569623(
    name: "getDeployedApplicationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}",
    validator: validate_GetDeployedApplicationInfo_569624, base: "",
    url: url_GetDeployedApplicationInfo_569625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedCodePackageInfoList_569635 = ref object of OpenApiRestCall_567668
proc url_GetDeployedCodePackageInfoList_569637(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedCodePackageInfoList_569636(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569638 = path.getOrDefault("nodeName")
  valid_569638 = validateParameter(valid_569638, JString, required = true,
                                 default = nil)
  if valid_569638 != nil:
    section.add "nodeName", valid_569638
  var valid_569639 = path.getOrDefault("applicationId")
  valid_569639 = validateParameter(valid_569639, JString, required = true,
                                 default = nil)
  if valid_569639 != nil:
    section.add "applicationId", valid_569639
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_569640 = query.getOrDefault("timeout")
  valid_569640 = validateParameter(valid_569640, JInt, required = false,
                                 default = newJInt(60))
  if valid_569640 != nil:
    section.add "timeout", valid_569640
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569641 = query.getOrDefault("api-version")
  valid_569641 = validateParameter(valid_569641, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569641 != nil:
    section.add "api-version", valid_569641
  var valid_569642 = query.getOrDefault("ServiceManifestName")
  valid_569642 = validateParameter(valid_569642, JString, required = false,
                                 default = nil)
  if valid_569642 != nil:
    section.add "ServiceManifestName", valid_569642
  var valid_569643 = query.getOrDefault("CodePackageName")
  valid_569643 = validateParameter(valid_569643, JString, required = false,
                                 default = nil)
  if valid_569643 != nil:
    section.add "CodePackageName", valid_569643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569644: Call_GetDeployedCodePackageInfoList_569635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_569644.validator(path, query, header, formData, body)
  let scheme = call_569644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569644.url(scheme.get, call_569644.host, call_569644.base,
                         call_569644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569644, url, valid)

proc call*(call_569645: Call_GetDeployedCodePackageInfoList_569635;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          CodePackageName: string = ""): Recallable =
  ## getDeployedCodePackageInfoList
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   CodePackageName: string
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_569646 = newJObject()
  var query_569647 = newJObject()
  add(query_569647, "timeout", newJInt(timeout))
  add(query_569647, "api-version", newJString(apiVersion))
  add(path_569646, "nodeName", newJString(nodeName))
  add(query_569647, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569646, "applicationId", newJString(applicationId))
  add(query_569647, "CodePackageName", newJString(CodePackageName))
  result = call_569645.call(path_569646, query_569647, nil, nil, nil)

var getDeployedCodePackageInfoList* = Call_GetDeployedCodePackageInfoList_569635(
    name: "getDeployedCodePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages",
    validator: validate_GetDeployedCodePackageInfoList_569636, base: "",
    url: url_GetDeployedCodePackageInfoList_569637,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeContainerApi_569648 = ref object of OpenApiRestCall_567668
proc url_InvokeContainerApi_569650(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerApi")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_InvokeContainerApi_569649(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569651 = path.getOrDefault("nodeName")
  valid_569651 = validateParameter(valid_569651, JString, required = true,
                                 default = nil)
  if valid_569651 != nil:
    section.add "nodeName", valid_569651
  var valid_569652 = path.getOrDefault("applicationId")
  valid_569652 = validateParameter(valid_569652, JString, required = true,
                                 default = nil)
  if valid_569652 != nil:
    section.add "applicationId", valid_569652
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: JString (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  section = newJObject()
  var valid_569653 = query.getOrDefault("timeout")
  valid_569653 = validateParameter(valid_569653, JInt, required = false,
                                 default = newJInt(60))
  if valid_569653 != nil:
    section.add "timeout", valid_569653
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569654 = query.getOrDefault("api-version")
  valid_569654 = validateParameter(valid_569654, JString, required = true,
                                 default = newJString("6.2"))
  if valid_569654 != nil:
    section.add "api-version", valid_569654
  var valid_569655 = query.getOrDefault("ServiceManifestName")
  valid_569655 = validateParameter(valid_569655, JString, required = true,
                                 default = nil)
  if valid_569655 != nil:
    section.add "ServiceManifestName", valid_569655
  var valid_569656 = query.getOrDefault("CodePackageName")
  valid_569656 = validateParameter(valid_569656, JString, required = true,
                                 default = nil)
  if valid_569656 != nil:
    section.add "CodePackageName", valid_569656
  var valid_569657 = query.getOrDefault("CodePackageInstanceId")
  valid_569657 = validateParameter(valid_569657, JString, required = true,
                                 default = nil)
  if valid_569657 != nil:
    section.add "CodePackageInstanceId", valid_569657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569659: Call_InvokeContainerApi_569648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_569659.validator(path, query, header, formData, body)
  let scheme = call_569659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569659.url(scheme.get, call_569659.host, call_569659.base,
                         call_569659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569659, url, valid)

proc call*(call_569660: Call_InvokeContainerApi_569648; nodeName: string;
          ServiceManifestName: string; applicationId: string;
          ContainerApiRequestBody: JsonNode; CodePackageName: string;
          CodePackageInstanceId: string; timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## invokeContainerApi
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   CodePackageInstanceId: string (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  var path_569661 = newJObject()
  var query_569662 = newJObject()
  var body_569663 = newJObject()
  add(query_569662, "timeout", newJInt(timeout))
  add(query_569662, "api-version", newJString(apiVersion))
  add(path_569661, "nodeName", newJString(nodeName))
  add(query_569662, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569661, "applicationId", newJString(applicationId))
  if ContainerApiRequestBody != nil:
    body_569663 = ContainerApiRequestBody
  add(query_569662, "CodePackageName", newJString(CodePackageName))
  add(query_569662, "CodePackageInstanceId", newJString(CodePackageInstanceId))
  result = call_569660.call(path_569661, query_569662, nil, nil, body_569663)

var invokeContainerApi* = Call_InvokeContainerApi_569648(
    name: "invokeContainerApi", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi",
    validator: validate_InvokeContainerApi_569649, base: "",
    url: url_InvokeContainerApi_569650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainerLogsDeployedOnNode_569664 = ref object of OpenApiRestCall_567668
proc url_GetContainerLogsDeployedOnNode_569666(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetContainerLogsDeployedOnNode_569665(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569667 = path.getOrDefault("nodeName")
  valid_569667 = validateParameter(valid_569667, JString, required = true,
                                 default = nil)
  if valid_569667 != nil:
    section.add "nodeName", valid_569667
  var valid_569668 = path.getOrDefault("applicationId")
  valid_569668 = validateParameter(valid_569668, JString, required = true,
                                 default = nil)
  if valid_569668 != nil:
    section.add "applicationId", valid_569668
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   Previous: JBool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_569669 = query.getOrDefault("timeout")
  valid_569669 = validateParameter(valid_569669, JInt, required = false,
                                 default = newJInt(60))
  if valid_569669 != nil:
    section.add "timeout", valid_569669
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569670 = query.getOrDefault("api-version")
  valid_569670 = validateParameter(valid_569670, JString, required = true,
                                 default = newJString("6.2"))
  if valid_569670 != nil:
    section.add "api-version", valid_569670
  var valid_569671 = query.getOrDefault("ServiceManifestName")
  valid_569671 = validateParameter(valid_569671, JString, required = true,
                                 default = nil)
  if valid_569671 != nil:
    section.add "ServiceManifestName", valid_569671
  var valid_569672 = query.getOrDefault("Tail")
  valid_569672 = validateParameter(valid_569672, JString, required = false,
                                 default = nil)
  if valid_569672 != nil:
    section.add "Tail", valid_569672
  var valid_569673 = query.getOrDefault("Previous")
  valid_569673 = validateParameter(valid_569673, JBool, required = false,
                                 default = newJBool(false))
  if valid_569673 != nil:
    section.add "Previous", valid_569673
  var valid_569674 = query.getOrDefault("CodePackageName")
  valid_569674 = validateParameter(valid_569674, JString, required = true,
                                 default = nil)
  if valid_569674 != nil:
    section.add "CodePackageName", valid_569674
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569675: Call_GetContainerLogsDeployedOnNode_569664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_569675.validator(path, query, header, formData, body)
  let scheme = call_569675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569675.url(scheme.get, call_569675.host, call_569675.base,
                         call_569675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569675, url, valid)

proc call*(call_569676: Call_GetContainerLogsDeployedOnNode_569664;
          nodeName: string; ServiceManifestName: string; applicationId: string;
          CodePackageName: string; timeout: int = 60; apiVersion: string = "6.2";
          Tail: string = ""; Previous: bool = false): Recallable =
  ## getContainerLogsDeployedOnNode
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   Previous: bool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  var path_569677 = newJObject()
  var query_569678 = newJObject()
  add(query_569678, "timeout", newJInt(timeout))
  add(query_569678, "api-version", newJString(apiVersion))
  add(path_569677, "nodeName", newJString(nodeName))
  add(query_569678, "ServiceManifestName", newJString(ServiceManifestName))
  add(query_569678, "Tail", newJString(Tail))
  add(path_569677, "applicationId", newJString(applicationId))
  add(query_569678, "Previous", newJBool(Previous))
  add(query_569678, "CodePackageName", newJString(CodePackageName))
  result = call_569676.call(path_569677, query_569678, nil, nil, nil)

var getContainerLogsDeployedOnNode* = Call_GetContainerLogsDeployedOnNode_569664(
    name: "getContainerLogsDeployedOnNode", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs",
    validator: validate_GetContainerLogsDeployedOnNode_569665, base: "",
    url: url_GetContainerLogsDeployedOnNode_569666,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartDeployedCodePackage_569679 = ref object of OpenApiRestCall_567668
proc url_RestartDeployedCodePackage_569681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartDeployedCodePackage_569680(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569682 = path.getOrDefault("nodeName")
  valid_569682 = validateParameter(valid_569682, JString, required = true,
                                 default = nil)
  if valid_569682 != nil:
    section.add "nodeName", valid_569682
  var valid_569683 = path.getOrDefault("applicationId")
  valid_569683 = validateParameter(valid_569683, JString, required = true,
                                 default = nil)
  if valid_569683 != nil:
    section.add "applicationId", valid_569683
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569684 = query.getOrDefault("timeout")
  valid_569684 = validateParameter(valid_569684, JInt, required = false,
                                 default = newJInt(60))
  if valid_569684 != nil:
    section.add "timeout", valid_569684
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569685 = query.getOrDefault("api-version")
  valid_569685 = validateParameter(valid_569685, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569685 != nil:
    section.add "api-version", valid_569685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569687: Call_RestartDeployedCodePackage_569679; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  let valid = call_569687.validator(path, query, header, formData, body)
  let scheme = call_569687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569687.url(scheme.get, call_569687.host, call_569687.base,
                         call_569687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569687, url, valid)

proc call*(call_569688: Call_RestartDeployedCodePackage_569679; nodeName: string;
          applicationId: string; RestartDeployedCodePackageDescription: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## restartDeployedCodePackage
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  var path_569689 = newJObject()
  var query_569690 = newJObject()
  var body_569691 = newJObject()
  add(query_569690, "timeout", newJInt(timeout))
  add(query_569690, "api-version", newJString(apiVersion))
  add(path_569689, "nodeName", newJString(nodeName))
  add(path_569689, "applicationId", newJString(applicationId))
  if RestartDeployedCodePackageDescription != nil:
    body_569691 = RestartDeployedCodePackageDescription
  result = call_569688.call(path_569689, query_569690, nil, nil, body_569691)

var restartDeployedCodePackage* = Call_RestartDeployedCodePackage_569679(
    name: "restartDeployedCodePackage", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart",
    validator: validate_RestartDeployedCodePackage_569680, base: "",
    url: url_RestartDeployedCodePackage_569681,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealthUsingPolicy_569706 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationHealthUsingPolicy_569708(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealthUsingPolicy_569707(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569709 = path.getOrDefault("nodeName")
  valid_569709 = validateParameter(valid_569709, JString, required = true,
                                 default = nil)
  if valid_569709 != nil:
    section.add "nodeName", valid_569709
  var valid_569710 = path.getOrDefault("applicationId")
  valid_569710 = validateParameter(valid_569710, JString, required = true,
                                 default = nil)
  if valid_569710 != nil:
    section.add "applicationId", valid_569710
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569711 = query.getOrDefault("timeout")
  valid_569711 = validateParameter(valid_569711, JInt, required = false,
                                 default = newJInt(60))
  if valid_569711 != nil:
    section.add "timeout", valid_569711
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569712 = query.getOrDefault("api-version")
  valid_569712 = validateParameter(valid_569712, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569712 != nil:
    section.add "api-version", valid_569712
  var valid_569713 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_569713 = validateParameter(valid_569713, JInt, required = false,
                                 default = newJInt(0))
  if valid_569713 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_569713
  var valid_569714 = query.getOrDefault("ExcludeHealthStatistics")
  valid_569714 = validateParameter(valid_569714, JBool, required = false,
                                 default = newJBool(false))
  if valid_569714 != nil:
    section.add "ExcludeHealthStatistics", valid_569714
  var valid_569715 = query.getOrDefault("EventsHealthStateFilter")
  valid_569715 = validateParameter(valid_569715, JInt, required = false,
                                 default = newJInt(0))
  if valid_569715 != nil:
    section.add "EventsHealthStateFilter", valid_569715
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569717: Call_GetDeployedApplicationHealthUsingPolicy_569706;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  let valid = call_569717.validator(path, query, header, formData, body)
  let scheme = call_569717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569717.url(scheme.get, call_569717.host, call_569717.base,
                         call_569717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569717, url, valid)

proc call*(call_569718: Call_GetDeployedApplicationHealthUsingPolicy_569706;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ApplicationHealthPolicy: JsonNode = nil;
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealthUsingPolicy
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569719 = newJObject()
  var query_569720 = newJObject()
  var body_569721 = newJObject()
  add(query_569720, "timeout", newJInt(timeout))
  add(query_569720, "api-version", newJString(apiVersion))
  add(path_569719, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_569721 = ApplicationHealthPolicy
  add(query_569720, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_569720, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_569720, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569719, "applicationId", newJString(applicationId))
  result = call_569718.call(path_569719, query_569720, nil, nil, body_569721)

var getDeployedApplicationHealthUsingPolicy* = Call_GetDeployedApplicationHealthUsingPolicy_569706(
    name: "getDeployedApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealthUsingPolicy_569707, base: "",
    url: url_GetDeployedApplicationHealthUsingPolicy_569708,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealth_569692 = ref object of OpenApiRestCall_567668
proc url_GetDeployedApplicationHealth_569694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealth_569693(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569695 = path.getOrDefault("nodeName")
  valid_569695 = validateParameter(valid_569695, JString, required = true,
                                 default = nil)
  if valid_569695 != nil:
    section.add "nodeName", valid_569695
  var valid_569696 = path.getOrDefault("applicationId")
  valid_569696 = validateParameter(valid_569696, JString, required = true,
                                 default = nil)
  if valid_569696 != nil:
    section.add "applicationId", valid_569696
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569697 = query.getOrDefault("timeout")
  valid_569697 = validateParameter(valid_569697, JInt, required = false,
                                 default = newJInt(60))
  if valid_569697 != nil:
    section.add "timeout", valid_569697
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569698 = query.getOrDefault("api-version")
  valid_569698 = validateParameter(valid_569698, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569698 != nil:
    section.add "api-version", valid_569698
  var valid_569699 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_569699 = validateParameter(valid_569699, JInt, required = false,
                                 default = newJInt(0))
  if valid_569699 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_569699
  var valid_569700 = query.getOrDefault("ExcludeHealthStatistics")
  valid_569700 = validateParameter(valid_569700, JBool, required = false,
                                 default = newJBool(false))
  if valid_569700 != nil:
    section.add "ExcludeHealthStatistics", valid_569700
  var valid_569701 = query.getOrDefault("EventsHealthStateFilter")
  valid_569701 = validateParameter(valid_569701, JInt, required = false,
                                 default = newJInt(0))
  if valid_569701 != nil:
    section.add "EventsHealthStateFilter", valid_569701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569702: Call_GetDeployedApplicationHealth_569692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  let valid = call_569702.validator(path, query, header, formData, body)
  let scheme = call_569702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569702.url(scheme.get, call_569702.host, call_569702.base,
                         call_569702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569702, url, valid)

proc call*(call_569703: Call_GetDeployedApplicationHealth_569692; nodeName: string;
          applicationId: string; timeout: int = 60; apiVersion: string = "6.0";
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealth
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569704 = newJObject()
  var query_569705 = newJObject()
  add(query_569705, "timeout", newJInt(timeout))
  add(query_569705, "api-version", newJString(apiVersion))
  add(path_569704, "nodeName", newJString(nodeName))
  add(query_569705, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_569705, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_569705, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569704, "applicationId", newJString(applicationId))
  result = call_569703.call(path_569704, query_569705, nil, nil, nil)

var getDeployedApplicationHealth* = Call_GetDeployedApplicationHealth_569692(
    name: "getDeployedApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealth_569693, base: "",
    url: url_GetDeployedApplicationHealth_569694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaInfoList_569722 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceReplicaInfoList_569724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaInfoList_569723(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569725 = path.getOrDefault("nodeName")
  valid_569725 = validateParameter(valid_569725, JString, required = true,
                                 default = nil)
  if valid_569725 != nil:
    section.add "nodeName", valid_569725
  var valid_569726 = path.getOrDefault("applicationId")
  valid_569726 = validateParameter(valid_569726, JString, required = true,
                                 default = nil)
  if valid_569726 != nil:
    section.add "applicationId", valid_569726
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   PartitionId: JString
  ##              : The identity of the partition.
  section = newJObject()
  var valid_569727 = query.getOrDefault("timeout")
  valid_569727 = validateParameter(valid_569727, JInt, required = false,
                                 default = newJInt(60))
  if valid_569727 != nil:
    section.add "timeout", valid_569727
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569728 = query.getOrDefault("api-version")
  valid_569728 = validateParameter(valid_569728, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569728 != nil:
    section.add "api-version", valid_569728
  var valid_569729 = query.getOrDefault("ServiceManifestName")
  valid_569729 = validateParameter(valid_569729, JString, required = false,
                                 default = nil)
  if valid_569729 != nil:
    section.add "ServiceManifestName", valid_569729
  var valid_569730 = query.getOrDefault("PartitionId")
  valid_569730 = validateParameter(valid_569730, JString, required = false,
                                 default = nil)
  if valid_569730 != nil:
    section.add "PartitionId", valid_569730
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569731: Call_GetDeployedServiceReplicaInfoList_569722;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  let valid = call_569731.validator(path, query, header, formData, body)
  let scheme = call_569731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569731.url(scheme.get, call_569731.host, call_569731.base,
                         call_569731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569731, url, valid)

proc call*(call_569732: Call_GetDeployedServiceReplicaInfoList_569722;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = "";
          PartitionId: string = ""): Recallable =
  ## getDeployedServiceReplicaInfoList
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   PartitionId: string
  ##              : The identity of the partition.
  var path_569733 = newJObject()
  var query_569734 = newJObject()
  add(query_569734, "timeout", newJInt(timeout))
  add(query_569734, "api-version", newJString(apiVersion))
  add(path_569733, "nodeName", newJString(nodeName))
  add(query_569734, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569733, "applicationId", newJString(applicationId))
  add(query_569734, "PartitionId", newJString(PartitionId))
  result = call_569732.call(path_569733, query_569734, nil, nil, nil)

var getDeployedServiceReplicaInfoList* = Call_GetDeployedServiceReplicaInfoList_569722(
    name: "getDeployedServiceReplicaInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaInfoList_569723, base: "",
    url: url_GetDeployedServiceReplicaInfoList_569724,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoList_569735 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageInfoList_569737(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoList_569736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569738 = path.getOrDefault("nodeName")
  valid_569738 = validateParameter(valid_569738, JString, required = true,
                                 default = nil)
  if valid_569738 != nil:
    section.add "nodeName", valid_569738
  var valid_569739 = path.getOrDefault("applicationId")
  valid_569739 = validateParameter(valid_569739, JString, required = true,
                                 default = nil)
  if valid_569739 != nil:
    section.add "applicationId", valid_569739
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569740 = query.getOrDefault("timeout")
  valid_569740 = validateParameter(valid_569740, JInt, required = false,
                                 default = newJInt(60))
  if valid_569740 != nil:
    section.add "timeout", valid_569740
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569741 = query.getOrDefault("api-version")
  valid_569741 = validateParameter(valid_569741, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569741 != nil:
    section.add "api-version", valid_569741
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569742: Call_GetDeployedServicePackageInfoList_569735;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_569742.validator(path, query, header, formData, body)
  let scheme = call_569742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569742.url(scheme.get, call_569742.host, call_569742.base,
                         call_569742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569742, url, valid)

proc call*(call_569743: Call_GetDeployedServicePackageInfoList_569735;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoList
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569744 = newJObject()
  var query_569745 = newJObject()
  add(query_569745, "timeout", newJInt(timeout))
  add(query_569745, "api-version", newJString(apiVersion))
  add(path_569744, "nodeName", newJString(nodeName))
  add(path_569744, "applicationId", newJString(applicationId))
  result = call_569743.call(path_569744, query_569745, nil, nil, nil)

var getDeployedServicePackageInfoList* = Call_GetDeployedServicePackageInfoList_569735(
    name: "getDeployedServicePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages",
    validator: validate_GetDeployedServicePackageInfoList_569736, base: "",
    url: url_GetDeployedServicePackageInfoList_569737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoListByName_569746 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageInfoListByName_569748(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoListByName_569747(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569749 = path.getOrDefault("nodeName")
  valid_569749 = validateParameter(valid_569749, JString, required = true,
                                 default = nil)
  if valid_569749 != nil:
    section.add "nodeName", valid_569749
  var valid_569750 = path.getOrDefault("applicationId")
  valid_569750 = validateParameter(valid_569750, JString, required = true,
                                 default = nil)
  if valid_569750 != nil:
    section.add "applicationId", valid_569750
  var valid_569751 = path.getOrDefault("servicePackageName")
  valid_569751 = validateParameter(valid_569751, JString, required = true,
                                 default = nil)
  if valid_569751 != nil:
    section.add "servicePackageName", valid_569751
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569752 = query.getOrDefault("timeout")
  valid_569752 = validateParameter(valid_569752, JInt, required = false,
                                 default = newJInt(60))
  if valid_569752 != nil:
    section.add "timeout", valid_569752
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569753 = query.getOrDefault("api-version")
  valid_569753 = validateParameter(valid_569753, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569753 != nil:
    section.add "api-version", valid_569753
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569754: Call_GetDeployedServicePackageInfoListByName_569746;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  let valid = call_569754.validator(path, query, header, formData, body)
  let scheme = call_569754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569754.url(scheme.get, call_569754.host, call_569754.base,
                         call_569754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569754, url, valid)

proc call*(call_569755: Call_GetDeployedServicePackageInfoListByName_569746;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getDeployedServicePackageInfoListByName
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569756 = newJObject()
  var query_569757 = newJObject()
  add(query_569757, "timeout", newJInt(timeout))
  add(query_569757, "api-version", newJString(apiVersion))
  add(path_569756, "nodeName", newJString(nodeName))
  add(path_569756, "applicationId", newJString(applicationId))
  add(path_569756, "servicePackageName", newJString(servicePackageName))
  result = call_569755.call(path_569756, query_569757, nil, nil, nil)

var getDeployedServicePackageInfoListByName* = Call_GetDeployedServicePackageInfoListByName_569746(
    name: "getDeployedServicePackageInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}",
    validator: validate_GetDeployedServicePackageInfoListByName_569747, base: "",
    url: url_GetDeployedServicePackageInfoListByName_569748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealthUsingPolicy_569771 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageHealthUsingPolicy_569773(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealthUsingPolicy_569772(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569774 = path.getOrDefault("nodeName")
  valid_569774 = validateParameter(valid_569774, JString, required = true,
                                 default = nil)
  if valid_569774 != nil:
    section.add "nodeName", valid_569774
  var valid_569775 = path.getOrDefault("applicationId")
  valid_569775 = validateParameter(valid_569775, JString, required = true,
                                 default = nil)
  if valid_569775 != nil:
    section.add "applicationId", valid_569775
  var valid_569776 = path.getOrDefault("servicePackageName")
  valid_569776 = validateParameter(valid_569776, JString, required = true,
                                 default = nil)
  if valid_569776 != nil:
    section.add "servicePackageName", valid_569776
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569777 = query.getOrDefault("timeout")
  valid_569777 = validateParameter(valid_569777, JInt, required = false,
                                 default = newJInt(60))
  if valid_569777 != nil:
    section.add "timeout", valid_569777
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569778 = query.getOrDefault("api-version")
  valid_569778 = validateParameter(valid_569778, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569778 != nil:
    section.add "api-version", valid_569778
  var valid_569779 = query.getOrDefault("EventsHealthStateFilter")
  valid_569779 = validateParameter(valid_569779, JInt, required = false,
                                 default = newJInt(0))
  if valid_569779 != nil:
    section.add "EventsHealthStateFilter", valid_569779
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569781: Call_GetDeployedServicePackageHealthUsingPolicy_569771;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  let valid = call_569781.validator(path, query, header, formData, body)
  let scheme = call_569781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569781.url(scheme.get, call_569781.host, call_569781.base,
                         call_569781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569781, url, valid)

proc call*(call_569782: Call_GetDeployedServicePackageHealthUsingPolicy_569771;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealthUsingPolicy
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569783 = newJObject()
  var query_569784 = newJObject()
  var body_569785 = newJObject()
  add(query_569784, "timeout", newJInt(timeout))
  add(query_569784, "api-version", newJString(apiVersion))
  add(path_569783, "nodeName", newJString(nodeName))
  if ApplicationHealthPolicy != nil:
    body_569785 = ApplicationHealthPolicy
  add(query_569784, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569783, "applicationId", newJString(applicationId))
  add(path_569783, "servicePackageName", newJString(servicePackageName))
  result = call_569782.call(path_569783, query_569784, nil, nil, body_569785)

var getDeployedServicePackageHealthUsingPolicy* = Call_GetDeployedServicePackageHealthUsingPolicy_569771(
    name: "getDeployedServicePackageHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealthUsingPolicy_569772,
    base: "", url: url_GetDeployedServicePackageHealthUsingPolicy_569773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealth_569758 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServicePackageHealth_569760(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealth_569759(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569761 = path.getOrDefault("nodeName")
  valid_569761 = validateParameter(valid_569761, JString, required = true,
                                 default = nil)
  if valid_569761 != nil:
    section.add "nodeName", valid_569761
  var valid_569762 = path.getOrDefault("applicationId")
  valid_569762 = validateParameter(valid_569762, JString, required = true,
                                 default = nil)
  if valid_569762 != nil:
    section.add "applicationId", valid_569762
  var valid_569763 = path.getOrDefault("servicePackageName")
  valid_569763 = validateParameter(valid_569763, JString, required = true,
                                 default = nil)
  if valid_569763 != nil:
    section.add "servicePackageName", valid_569763
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569764 = query.getOrDefault("timeout")
  valid_569764 = validateParameter(valid_569764, JInt, required = false,
                                 default = newJInt(60))
  if valid_569764 != nil:
    section.add "timeout", valid_569764
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569765 = query.getOrDefault("api-version")
  valid_569765 = validateParameter(valid_569765, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569765 != nil:
    section.add "api-version", valid_569765
  var valid_569766 = query.getOrDefault("EventsHealthStateFilter")
  valid_569766 = validateParameter(valid_569766, JInt, required = false,
                                 default = newJInt(0))
  if valid_569766 != nil:
    section.add "EventsHealthStateFilter", valid_569766
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569767: Call_GetDeployedServicePackageHealth_569758;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  let valid = call_569767.validator(path, query, header, formData, body)
  let scheme = call_569767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569767.url(scheme.get, call_569767.host, call_569767.base,
                         call_569767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569767, url, valid)

proc call*(call_569768: Call_GetDeployedServicePackageHealth_569758;
          nodeName: string; applicationId: string; servicePackageName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealth
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569769 = newJObject()
  var query_569770 = newJObject()
  add(query_569770, "timeout", newJInt(timeout))
  add(query_569770, "api-version", newJString(apiVersion))
  add(path_569769, "nodeName", newJString(nodeName))
  add(query_569770, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_569769, "applicationId", newJString(applicationId))
  add(path_569769, "servicePackageName", newJString(servicePackageName))
  result = call_569768.call(path_569769, query_569770, nil, nil, nil)

var getDeployedServicePackageHealth* = Call_GetDeployedServicePackageHealth_569758(
    name: "getDeployedServicePackageHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealth_569759, base: "",
    url: url_GetDeployedServicePackageHealth_569760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedServicePackageHealth_569786 = ref object of OpenApiRestCall_567668
proc url_ReportDeployedServicePackageHealth_569788(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedServicePackageHealth_569787(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569789 = path.getOrDefault("nodeName")
  valid_569789 = validateParameter(valid_569789, JString, required = true,
                                 default = nil)
  if valid_569789 != nil:
    section.add "nodeName", valid_569789
  var valid_569790 = path.getOrDefault("applicationId")
  valid_569790 = validateParameter(valid_569790, JString, required = true,
                                 default = nil)
  if valid_569790 != nil:
    section.add "applicationId", valid_569790
  var valid_569791 = path.getOrDefault("servicePackageName")
  valid_569791 = validateParameter(valid_569791, JString, required = true,
                                 default = nil)
  if valid_569791 != nil:
    section.add "servicePackageName", valid_569791
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569792 = query.getOrDefault("Immediate")
  valid_569792 = validateParameter(valid_569792, JBool, required = false,
                                 default = newJBool(false))
  if valid_569792 != nil:
    section.add "Immediate", valid_569792
  var valid_569793 = query.getOrDefault("timeout")
  valid_569793 = validateParameter(valid_569793, JInt, required = false,
                                 default = newJInt(60))
  if valid_569793 != nil:
    section.add "timeout", valid_569793
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569794 = query.getOrDefault("api-version")
  valid_569794 = validateParameter(valid_569794, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569794 != nil:
    section.add "api-version", valid_569794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569796: Call_ReportDeployedServicePackageHealth_569786;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_569796.validator(path, query, header, formData, body)
  let scheme = call_569796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569796.url(scheme.get, call_569796.host, call_569796.base,
                         call_569796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569796, url, valid)

proc call*(call_569797: Call_ReportDeployedServicePackageHealth_569786;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          servicePackageName: string; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportDeployedServicePackageHealth
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  var path_569798 = newJObject()
  var query_569799 = newJObject()
  var body_569800 = newJObject()
  add(query_569799, "Immediate", newJBool(Immediate))
  add(query_569799, "timeout", newJInt(timeout))
  add(query_569799, "api-version", newJString(apiVersion))
  add(path_569798, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_569800 = HealthInformation
  add(path_569798, "applicationId", newJString(applicationId))
  add(path_569798, "servicePackageName", newJString(servicePackageName))
  result = call_569797.call(path_569798, query_569799, nil, nil, body_569800)

var reportDeployedServicePackageHealth* = Call_ReportDeployedServicePackageHealth_569786(
    name: "reportDeployedServicePackageHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth",
    validator: validate_ReportDeployedServicePackageHealth_569787, base: "",
    url: url_ReportDeployedServicePackageHealth_569788,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoList_569801 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceTypeInfoList_569803(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoList_569802(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569804 = path.getOrDefault("nodeName")
  valid_569804 = validateParameter(valid_569804, JString, required = true,
                                 default = nil)
  if valid_569804 != nil:
    section.add "nodeName", valid_569804
  var valid_569805 = path.getOrDefault("applicationId")
  valid_569805 = validateParameter(valid_569805, JString, required = true,
                                 default = nil)
  if valid_569805 != nil:
    section.add "applicationId", valid_569805
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_569806 = query.getOrDefault("timeout")
  valid_569806 = validateParameter(valid_569806, JInt, required = false,
                                 default = newJInt(60))
  if valid_569806 != nil:
    section.add "timeout", valid_569806
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569807 = query.getOrDefault("api-version")
  valid_569807 = validateParameter(valid_569807, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569807 != nil:
    section.add "api-version", valid_569807
  var valid_569808 = query.getOrDefault("ServiceManifestName")
  valid_569808 = validateParameter(valid_569808, JString, required = false,
                                 default = nil)
  if valid_569808 != nil:
    section.add "ServiceManifestName", valid_569808
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569809: Call_GetDeployedServiceTypeInfoList_569801; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  let valid = call_569809.validator(path, query, header, formData, body)
  let scheme = call_569809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569809.url(scheme.get, call_569809.host, call_569809.base,
                         call_569809.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569809, url, valid)

proc call*(call_569810: Call_GetDeployedServiceTypeInfoList_569801;
          nodeName: string; applicationId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoList
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569811 = newJObject()
  var query_569812 = newJObject()
  add(query_569812, "timeout", newJInt(timeout))
  add(query_569812, "api-version", newJString(apiVersion))
  add(path_569811, "nodeName", newJString(nodeName))
  add(query_569812, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569811, "applicationId", newJString(applicationId))
  result = call_569810.call(path_569811, query_569812, nil, nil, nil)

var getDeployedServiceTypeInfoList* = Call_GetDeployedServiceTypeInfoList_569801(
    name: "getDeployedServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes",
    validator: validate_GetDeployedServiceTypeInfoList_569802, base: "",
    url: url_GetDeployedServiceTypeInfoList_569803,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoByName_569813 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceTypeInfoByName_569815(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoByName_569814(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_569816 = path.getOrDefault("serviceTypeName")
  valid_569816 = validateParameter(valid_569816, JString, required = true,
                                 default = nil)
  if valid_569816 != nil:
    section.add "serviceTypeName", valid_569816
  var valid_569817 = path.getOrDefault("nodeName")
  valid_569817 = validateParameter(valid_569817, JString, required = true,
                                 default = nil)
  if valid_569817 != nil:
    section.add "nodeName", valid_569817
  var valid_569818 = path.getOrDefault("applicationId")
  valid_569818 = validateParameter(valid_569818, JString, required = true,
                                 default = nil)
  if valid_569818 != nil:
    section.add "applicationId", valid_569818
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  var valid_569819 = query.getOrDefault("timeout")
  valid_569819 = validateParameter(valid_569819, JInt, required = false,
                                 default = newJInt(60))
  if valid_569819 != nil:
    section.add "timeout", valid_569819
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569820 = query.getOrDefault("api-version")
  valid_569820 = validateParameter(valid_569820, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569820 != nil:
    section.add "api-version", valid_569820
  var valid_569821 = query.getOrDefault("ServiceManifestName")
  valid_569821 = validateParameter(valid_569821, JString, required = false,
                                 default = nil)
  if valid_569821 != nil:
    section.add "ServiceManifestName", valid_569821
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569822: Call_GetDeployedServiceTypeInfoByName_569813;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  let valid = call_569822.validator(path, query, header, formData, body)
  let scheme = call_569822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569822.url(scheme.get, call_569822.host, call_569822.base,
                         call_569822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569822, url, valid)

proc call*(call_569823: Call_GetDeployedServiceTypeInfoByName_569813;
          serviceTypeName: string; nodeName: string; applicationId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoByName
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569824 = newJObject()
  var query_569825 = newJObject()
  add(query_569825, "timeout", newJInt(timeout))
  add(path_569824, "serviceTypeName", newJString(serviceTypeName))
  add(query_569825, "api-version", newJString(apiVersion))
  add(path_569824, "nodeName", newJString(nodeName))
  add(query_569825, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_569824, "applicationId", newJString(applicationId))
  result = call_569823.call(path_569824, query_569825, nil, nil, nil)

var getDeployedServiceTypeInfoByName* = Call_GetDeployedServiceTypeInfoByName_569813(
    name: "getDeployedServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetDeployedServiceTypeInfoByName_569814, base: "",
    url: url_GetDeployedServiceTypeInfoByName_569815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedApplicationHealth_569826 = ref object of OpenApiRestCall_567668
proc url_ReportDeployedApplicationHealth_569828(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedApplicationHealth_569827(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569829 = path.getOrDefault("nodeName")
  valid_569829 = validateParameter(valid_569829, JString, required = true,
                                 default = nil)
  if valid_569829 != nil:
    section.add "nodeName", valid_569829
  var valid_569830 = path.getOrDefault("applicationId")
  valid_569830 = validateParameter(valid_569830, JString, required = true,
                                 default = nil)
  if valid_569830 != nil:
    section.add "applicationId", valid_569830
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569831 = query.getOrDefault("Immediate")
  valid_569831 = validateParameter(valid_569831, JBool, required = false,
                                 default = newJBool(false))
  if valid_569831 != nil:
    section.add "Immediate", valid_569831
  var valid_569832 = query.getOrDefault("timeout")
  valid_569832 = validateParameter(valid_569832, JInt, required = false,
                                 default = newJInt(60))
  if valid_569832 != nil:
    section.add "timeout", valid_569832
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569833 = query.getOrDefault("api-version")
  valid_569833 = validateParameter(valid_569833, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569833 != nil:
    section.add "api-version", valid_569833
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569835: Call_ReportDeployedApplicationHealth_569826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_569835.validator(path, query, header, formData, body)
  let scheme = call_569835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569835.url(scheme.get, call_569835.host, call_569835.base,
                         call_569835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569835, url, valid)

proc call*(call_569836: Call_ReportDeployedApplicationHealth_569826;
          nodeName: string; HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportDeployedApplicationHealth
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_569837 = newJObject()
  var query_569838 = newJObject()
  var body_569839 = newJObject()
  add(query_569838, "Immediate", newJBool(Immediate))
  add(query_569838, "timeout", newJInt(timeout))
  add(query_569838, "api-version", newJString(apiVersion))
  add(path_569837, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_569839 = HealthInformation
  add(path_569837, "applicationId", newJString(applicationId))
  result = call_569836.call(path_569837, query_569838, nil, nil, body_569839)

var reportDeployedApplicationHealth* = Call_ReportDeployedApplicationHealth_569826(
    name: "reportDeployedApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth",
    validator: validate_ReportDeployedApplicationHealth_569827, base: "",
    url: url_ReportDeployedApplicationHealth_569828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealthUsingPolicy_569851 = ref object of OpenApiRestCall_567668
proc url_GetNodeHealthUsingPolicy_569853(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealthUsingPolicy_569852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569854 = path.getOrDefault("nodeName")
  valid_569854 = validateParameter(valid_569854, JString, required = true,
                                 default = nil)
  if valid_569854 != nil:
    section.add "nodeName", valid_569854
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569855 = query.getOrDefault("timeout")
  valid_569855 = validateParameter(valid_569855, JInt, required = false,
                                 default = newJInt(60))
  if valid_569855 != nil:
    section.add "timeout", valid_569855
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569856 = query.getOrDefault("api-version")
  valid_569856 = validateParameter(valid_569856, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569856 != nil:
    section.add "api-version", valid_569856
  var valid_569857 = query.getOrDefault("EventsHealthStateFilter")
  valid_569857 = validateParameter(valid_569857, JInt, required = false,
                                 default = newJInt(0))
  if valid_569857 != nil:
    section.add "EventsHealthStateFilter", valid_569857
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569859: Call_GetNodeHealthUsingPolicy_569851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_569859.validator(path, query, header, formData, body)
  let scheme = call_569859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569859.url(scheme.get, call_569859.host, call_569859.base,
                         call_569859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569859, url, valid)

proc call*(call_569860: Call_GetNodeHealthUsingPolicy_569851; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0; ClusterHealthPolicy: JsonNode = nil): Recallable =
  ## getNodeHealthUsingPolicy
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  var path_569861 = newJObject()
  var query_569862 = newJObject()
  var body_569863 = newJObject()
  add(query_569862, "timeout", newJInt(timeout))
  add(query_569862, "api-version", newJString(apiVersion))
  add(path_569861, "nodeName", newJString(nodeName))
  add(query_569862, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  if ClusterHealthPolicy != nil:
    body_569863 = ClusterHealthPolicy
  result = call_569860.call(path_569861, query_569862, nil, nil, body_569863)

var getNodeHealthUsingPolicy* = Call_GetNodeHealthUsingPolicy_569851(
    name: "getNodeHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetHealth",
    validator: validate_GetNodeHealthUsingPolicy_569852, base: "",
    url: url_GetNodeHealthUsingPolicy_569853, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealth_569840 = ref object of OpenApiRestCall_567668
proc url_GetNodeHealth_569842(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealth_569841(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569843 = path.getOrDefault("nodeName")
  valid_569843 = validateParameter(valid_569843, JString, required = true,
                                 default = nil)
  if valid_569843 != nil:
    section.add "nodeName", valid_569843
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_569844 = query.getOrDefault("timeout")
  valid_569844 = validateParameter(valid_569844, JInt, required = false,
                                 default = newJInt(60))
  if valid_569844 != nil:
    section.add "timeout", valid_569844
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569845 = query.getOrDefault("api-version")
  valid_569845 = validateParameter(valid_569845, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569845 != nil:
    section.add "api-version", valid_569845
  var valid_569846 = query.getOrDefault("EventsHealthStateFilter")
  valid_569846 = validateParameter(valid_569846, JInt, required = false,
                                 default = newJInt(0))
  if valid_569846 != nil:
    section.add "EventsHealthStateFilter", valid_569846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569847: Call_GetNodeHealth_569840; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_569847.validator(path, query, header, formData, body)
  let scheme = call_569847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569847.url(scheme.get, call_569847.host, call_569847.base,
                         call_569847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569847, url, valid)

proc call*(call_569848: Call_GetNodeHealth_569840; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getNodeHealth
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_569849 = newJObject()
  var query_569850 = newJObject()
  add(query_569850, "timeout", newJInt(timeout))
  add(query_569850, "api-version", newJString(apiVersion))
  add(path_569849, "nodeName", newJString(nodeName))
  add(query_569850, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_569848.call(path_569849, query_569850, nil, nil, nil)

var getNodeHealth* = Call_GetNodeHealth_569840(name: "getNodeHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetHealth", validator: validate_GetNodeHealth_569841,
    base: "", url: url_GetNodeHealth_569842, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeLoadInfo_569864 = ref object of OpenApiRestCall_567668
proc url_GetNodeLoadInfo_569866(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeLoadInfo_569865(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569867 = path.getOrDefault("nodeName")
  valid_569867 = validateParameter(valid_569867, JString, required = true,
                                 default = nil)
  if valid_569867 != nil:
    section.add "nodeName", valid_569867
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569868 = query.getOrDefault("timeout")
  valid_569868 = validateParameter(valid_569868, JInt, required = false,
                                 default = newJInt(60))
  if valid_569868 != nil:
    section.add "timeout", valid_569868
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569869 = query.getOrDefault("api-version")
  valid_569869 = validateParameter(valid_569869, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569869 != nil:
    section.add "api-version", valid_569869
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569870: Call_GetNodeLoadInfo_569864; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  let valid = call_569870.validator(path, query, header, formData, body)
  let scheme = call_569870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569870.url(scheme.get, call_569870.host, call_569870.base,
                         call_569870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569870, url, valid)

proc call*(call_569871: Call_GetNodeLoadInfo_569864; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getNodeLoadInfo
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569872 = newJObject()
  var query_569873 = newJObject()
  add(query_569873, "timeout", newJInt(timeout))
  add(query_569873, "api-version", newJString(apiVersion))
  add(path_569872, "nodeName", newJString(nodeName))
  result = call_569871.call(path_569872, query_569873, nil, nil, nil)

var getNodeLoadInfo* = Call_GetNodeLoadInfo_569864(name: "getNodeLoadInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetLoadInformation",
    validator: validate_GetNodeLoadInfo_569865, base: "", url: url_GetNodeLoadInfo_569866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569874 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceReplicaDetailInfoByPartitionId_569876(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfoByPartitionId_569875(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569877 = path.getOrDefault("nodeName")
  valid_569877 = validateParameter(valid_569877, JString, required = true,
                                 default = nil)
  if valid_569877 != nil:
    section.add "nodeName", valid_569877
  var valid_569878 = path.getOrDefault("partitionId")
  valid_569878 = validateParameter(valid_569878, JString, required = true,
                                 default = nil)
  if valid_569878 != nil:
    section.add "partitionId", valid_569878
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569879 = query.getOrDefault("timeout")
  valid_569879 = validateParameter(valid_569879, JInt, required = false,
                                 default = newJInt(60))
  if valid_569879 != nil:
    section.add "timeout", valid_569879
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569880 = query.getOrDefault("api-version")
  valid_569880 = validateParameter(valid_569880, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569880 != nil:
    section.add "api-version", valid_569880
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569881: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569874;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_569881.validator(path, query, header, formData, body)
  let scheme = call_569881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569881.url(scheme.get, call_569881.host, call_569881.base,
                         call_569881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569881, url, valid)

proc call*(call_569882: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569874;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfoByPartitionId
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569883 = newJObject()
  var query_569884 = newJObject()
  add(query_569884, "timeout", newJInt(timeout))
  add(query_569884, "api-version", newJString(apiVersion))
  add(path_569883, "nodeName", newJString(nodeName))
  add(path_569883, "partitionId", newJString(partitionId))
  result = call_569882.call(path_569883, query_569884, nil, nil, nil)

var getDeployedServiceReplicaDetailInfoByPartitionId* = Call_GetDeployedServiceReplicaDetailInfoByPartitionId_569874(
    name: "getDeployedServiceReplicaDetailInfoByPartitionId",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaDetailInfoByPartitionId_569875,
    base: "", url: url_GetDeployedServiceReplicaDetailInfoByPartitionId_569876,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveReplica_569885 = ref object of OpenApiRestCall_567668
proc url_RemoveReplica_569887(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveReplica_569886(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569888 = path.getOrDefault("replicaId")
  valid_569888 = validateParameter(valid_569888, JString, required = true,
                                 default = nil)
  if valid_569888 != nil:
    section.add "replicaId", valid_569888
  var valid_569889 = path.getOrDefault("nodeName")
  valid_569889 = validateParameter(valid_569889, JString, required = true,
                                 default = nil)
  if valid_569889 != nil:
    section.add "nodeName", valid_569889
  var valid_569890 = path.getOrDefault("partitionId")
  valid_569890 = validateParameter(valid_569890, JString, required = true,
                                 default = nil)
  if valid_569890 != nil:
    section.add "partitionId", valid_569890
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_569891 = query.getOrDefault("timeout")
  valid_569891 = validateParameter(valid_569891, JInt, required = false,
                                 default = newJInt(60))
  if valid_569891 != nil:
    section.add "timeout", valid_569891
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569892 = query.getOrDefault("api-version")
  valid_569892 = validateParameter(valid_569892, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569892 != nil:
    section.add "api-version", valid_569892
  var valid_569893 = query.getOrDefault("ForceRemove")
  valid_569893 = validateParameter(valid_569893, JBool, required = false, default = nil)
  if valid_569893 != nil:
    section.add "ForceRemove", valid_569893
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569894: Call_RemoveReplica_569885; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  let valid = call_569894.validator(path, query, header, formData, body)
  let scheme = call_569894.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569894.url(scheme.get, call_569894.host, call_569894.base,
                         call_569894.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569894, url, valid)

proc call*(call_569895: Call_RemoveReplica_569885; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## removeReplica
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569896 = newJObject()
  var query_569897 = newJObject()
  add(path_569896, "replicaId", newJString(replicaId))
  add(query_569897, "timeout", newJInt(timeout))
  add(query_569897, "api-version", newJString(apiVersion))
  add(query_569897, "ForceRemove", newJBool(ForceRemove))
  add(path_569896, "nodeName", newJString(nodeName))
  add(path_569896, "partitionId", newJString(partitionId))
  result = call_569895.call(path_569896, query_569897, nil, nil, nil)

var removeReplica* = Call_RemoveReplica_569885(name: "removeReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete",
    validator: validate_RemoveReplica_569886, base: "", url: url_RemoveReplica_569887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfo_569898 = ref object of OpenApiRestCall_567668
proc url_GetDeployedServiceReplicaDetailInfo_569900(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetDetail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfo_569899(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569901 = path.getOrDefault("replicaId")
  valid_569901 = validateParameter(valid_569901, JString, required = true,
                                 default = nil)
  if valid_569901 != nil:
    section.add "replicaId", valid_569901
  var valid_569902 = path.getOrDefault("nodeName")
  valid_569902 = validateParameter(valid_569902, JString, required = true,
                                 default = nil)
  if valid_569902 != nil:
    section.add "nodeName", valid_569902
  var valid_569903 = path.getOrDefault("partitionId")
  valid_569903 = validateParameter(valid_569903, JString, required = true,
                                 default = nil)
  if valid_569903 != nil:
    section.add "partitionId", valid_569903
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569904 = query.getOrDefault("timeout")
  valid_569904 = validateParameter(valid_569904, JInt, required = false,
                                 default = newJInt(60))
  if valid_569904 != nil:
    section.add "timeout", valid_569904
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569905 = query.getOrDefault("api-version")
  valid_569905 = validateParameter(valid_569905, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569905 != nil:
    section.add "api-version", valid_569905
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569906: Call_GetDeployedServiceReplicaDetailInfo_569898;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_569906.validator(path, query, header, formData, body)
  let scheme = call_569906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569906.url(scheme.get, call_569906.host, call_569906.base,
                         call_569906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569906, url, valid)

proc call*(call_569907: Call_GetDeployedServiceReplicaDetailInfo_569898;
          replicaId: string; nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## getDeployedServiceReplicaDetailInfo
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569908 = newJObject()
  var query_569909 = newJObject()
  add(path_569908, "replicaId", newJString(replicaId))
  add(query_569909, "timeout", newJInt(timeout))
  add(query_569909, "api-version", newJString(apiVersion))
  add(path_569908, "nodeName", newJString(nodeName))
  add(path_569908, "partitionId", newJString(partitionId))
  result = call_569907.call(path_569908, query_569909, nil, nil, nil)

var getDeployedServiceReplicaDetailInfo* = Call_GetDeployedServiceReplicaDetailInfo_569898(
    name: "getDeployedServiceReplicaDetailInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail",
    validator: validate_GetDeployedServiceReplicaDetailInfo_569899, base: "",
    url: url_GetDeployedServiceReplicaDetailInfo_569900,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartReplica_569910 = ref object of OpenApiRestCall_567668
proc url_RestartReplica_569912(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartReplica_569911(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_569913 = path.getOrDefault("replicaId")
  valid_569913 = validateParameter(valid_569913, JString, required = true,
                                 default = nil)
  if valid_569913 != nil:
    section.add "replicaId", valid_569913
  var valid_569914 = path.getOrDefault("nodeName")
  valid_569914 = validateParameter(valid_569914, JString, required = true,
                                 default = nil)
  if valid_569914 != nil:
    section.add "nodeName", valid_569914
  var valid_569915 = path.getOrDefault("partitionId")
  valid_569915 = validateParameter(valid_569915, JString, required = true,
                                 default = nil)
  if valid_569915 != nil:
    section.add "partitionId", valid_569915
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569916 = query.getOrDefault("timeout")
  valid_569916 = validateParameter(valid_569916, JInt, required = false,
                                 default = newJInt(60))
  if valid_569916 != nil:
    section.add "timeout", valid_569916
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569917 = query.getOrDefault("api-version")
  valid_569917 = validateParameter(valid_569917, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569917 != nil:
    section.add "api-version", valid_569917
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569918: Call_RestartReplica_569910; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  let valid = call_569918.validator(path, query, header, formData, body)
  let scheme = call_569918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569918.url(scheme.get, call_569918.host, call_569918.base,
                         call_569918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569918, url, valid)

proc call*(call_569919: Call_RestartReplica_569910; replicaId: string;
          nodeName: string; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartReplica
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569920 = newJObject()
  var query_569921 = newJObject()
  add(path_569920, "replicaId", newJString(replicaId))
  add(query_569921, "timeout", newJInt(timeout))
  add(query_569921, "api-version", newJString(apiVersion))
  add(path_569920, "nodeName", newJString(nodeName))
  add(path_569920, "partitionId", newJString(partitionId))
  result = call_569919.call(path_569920, query_569921, nil, nil, nil)

var restartReplica* = Call_RestartReplica_569910(name: "restartReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart",
    validator: validate_RestartReplica_569911, base: "", url: url_RestartReplica_569912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveNodeState_569922 = ref object of OpenApiRestCall_567668
proc url_RemoveNodeState_569924(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/RemoveNodeState")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveNodeState_569923(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569925 = path.getOrDefault("nodeName")
  valid_569925 = validateParameter(valid_569925, JString, required = true,
                                 default = nil)
  if valid_569925 != nil:
    section.add "nodeName", valid_569925
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569926 = query.getOrDefault("timeout")
  valid_569926 = validateParameter(valid_569926, JInt, required = false,
                                 default = newJInt(60))
  if valid_569926 != nil:
    section.add "timeout", valid_569926
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569927 = query.getOrDefault("api-version")
  valid_569927 = validateParameter(valid_569927, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569927 != nil:
    section.add "api-version", valid_569927
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569928: Call_RemoveNodeState_569922; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ## 
  let valid = call_569928.validator(path, query, header, formData, body)
  let scheme = call_569928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569928.url(scheme.get, call_569928.host, call_569928.base,
                         call_569928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569928, url, valid)

proc call*(call_569929: Call_RemoveNodeState_569922; nodeName: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## removeNodeState
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_569930 = newJObject()
  var query_569931 = newJObject()
  add(query_569931, "timeout", newJInt(timeout))
  add(query_569931, "api-version", newJString(apiVersion))
  add(path_569930, "nodeName", newJString(nodeName))
  result = call_569929.call(path_569930, query_569931, nil, nil, nil)

var removeNodeState* = Call_RemoveNodeState_569922(name: "removeNodeState",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/RemoveNodeState",
    validator: validate_RemoveNodeState_569923, base: "", url: url_RemoveNodeState_569924,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportNodeHealth_569932 = ref object of OpenApiRestCall_567668
proc url_ReportNodeHealth_569934(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportNodeHealth_569933(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569935 = path.getOrDefault("nodeName")
  valid_569935 = validateParameter(valid_569935, JString, required = true,
                                 default = nil)
  if valid_569935 != nil:
    section.add "nodeName", valid_569935
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569936 = query.getOrDefault("Immediate")
  valid_569936 = validateParameter(valid_569936, JBool, required = false,
                                 default = newJBool(false))
  if valid_569936 != nil:
    section.add "Immediate", valid_569936
  var valid_569937 = query.getOrDefault("timeout")
  valid_569937 = validateParameter(valid_569937, JInt, required = false,
                                 default = newJInt(60))
  if valid_569937 != nil:
    section.add "timeout", valid_569937
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569938 = query.getOrDefault("api-version")
  valid_569938 = validateParameter(valid_569938, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569938 != nil:
    section.add "api-version", valid_569938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569940: Call_ReportNodeHealth_569932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_569940.validator(path, query, header, formData, body)
  let scheme = call_569940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569940.url(scheme.get, call_569940.host, call_569940.base,
                         call_569940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569940, url, valid)

proc call*(call_569941: Call_ReportNodeHealth_569932; nodeName: string;
          HealthInformation: JsonNode; Immediate: bool = false; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## reportNodeHealth
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  var path_569942 = newJObject()
  var query_569943 = newJObject()
  var body_569944 = newJObject()
  add(query_569943, "Immediate", newJBool(Immediate))
  add(query_569943, "timeout", newJInt(timeout))
  add(query_569943, "api-version", newJString(apiVersion))
  add(path_569942, "nodeName", newJString(nodeName))
  if HealthInformation != nil:
    body_569944 = HealthInformation
  result = call_569941.call(path_569942, query_569943, nil, nil, body_569944)

var reportNodeHealth* = Call_ReportNodeHealth_569932(name: "reportNodeHealth",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/ReportHealth",
    validator: validate_ReportNodeHealth_569933, base: "",
    url: url_ReportNodeHealth_569934, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartNode_569945 = ref object of OpenApiRestCall_567668
proc url_RestartNode_569947(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartNode_569946(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_569948 = path.getOrDefault("nodeName")
  valid_569948 = validateParameter(valid_569948, JString, required = true,
                                 default = nil)
  if valid_569948 != nil:
    section.add "nodeName", valid_569948
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569949 = query.getOrDefault("timeout")
  valid_569949 = validateParameter(valid_569949, JInt, required = false,
                                 default = newJInt(60))
  if valid_569949 != nil:
    section.add "timeout", valid_569949
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569950 = query.getOrDefault("api-version")
  valid_569950 = validateParameter(valid_569950, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569950 != nil:
    section.add "api-version", valid_569950
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569952: Call_RestartNode_569945; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  let valid = call_569952.validator(path, query, header, formData, body)
  let scheme = call_569952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569952.url(scheme.get, call_569952.host, call_569952.base,
                         call_569952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569952, url, valid)

proc call*(call_569953: Call_RestartNode_569945; nodeName: string;
          RestartNodeDescription: JsonNode; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## restartNode
  ## Restarts a Service Fabric cluster node that is already started.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  var path_569954 = newJObject()
  var query_569955 = newJObject()
  var body_569956 = newJObject()
  add(query_569955, "timeout", newJInt(timeout))
  add(query_569955, "api-version", newJString(apiVersion))
  add(path_569954, "nodeName", newJString(nodeName))
  if RestartNodeDescription != nil:
    body_569956 = RestartNodeDescription
  result = call_569953.call(path_569954, query_569955, nil, nil, body_569956)

var restartNode* = Call_RestartNode_569945(name: "restartNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}/$/Restart",
                                        validator: validate_RestartNode_569946,
                                        base: "", url: url_RestartNode_569947,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfo_569957 = ref object of OpenApiRestCall_567668
proc url_GetPartitionInfo_569959(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfo_569958(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569960 = path.getOrDefault("partitionId")
  valid_569960 = validateParameter(valid_569960, JString, required = true,
                                 default = nil)
  if valid_569960 != nil:
    section.add "partitionId", valid_569960
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569961 = query.getOrDefault("timeout")
  valid_569961 = validateParameter(valid_569961, JInt, required = false,
                                 default = newJInt(60))
  if valid_569961 != nil:
    section.add "timeout", valid_569961
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569962 = query.getOrDefault("api-version")
  valid_569962 = validateParameter(valid_569962, JString, required = true,
                                 default = newJString("6.0"))
  if valid_569962 != nil:
    section.add "api-version", valid_569962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569963: Call_GetPartitionInfo_569957; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_569963.validator(path, query, header, formData, body)
  let scheme = call_569963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569963.url(scheme.get, call_569963.host, call_569963.base,
                         call_569963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569963, url, valid)

proc call*(call_569964: Call_GetPartitionInfo_569957; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionInfo
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569965 = newJObject()
  var query_569966 = newJObject()
  add(query_569966, "timeout", newJInt(timeout))
  add(query_569966, "api-version", newJString(apiVersion))
  add(path_569965, "partitionId", newJString(partitionId))
  result = call_569964.call(path_569965, query_569966, nil, nil, nil)

var getPartitionInfo* = Call_GetPartitionInfo_569957(name: "getPartitionInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}", validator: validate_GetPartitionInfo_569958,
    base: "", url: url_GetPartitionInfo_569959, schemes: {Scheme.Https, Scheme.Http})
type
  Call_BackupPartition_569967 = ref object of OpenApiRestCall_567668
proc url_BackupPartition_569969(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_BackupPartition_569968(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569970 = path.getOrDefault("partitionId")
  valid_569970 = validateParameter(valid_569970, JString, required = true,
                                 default = nil)
  if valid_569970 != nil:
    section.add "partitionId", valid_569970
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: JInt
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  section = newJObject()
  var valid_569971 = query.getOrDefault("timeout")
  valid_569971 = validateParameter(valid_569971, JInt, required = false,
                                 default = newJInt(60))
  if valid_569971 != nil:
    section.add "timeout", valid_569971
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569972 = query.getOrDefault("api-version")
  valid_569972 = validateParameter(valid_569972, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569972 != nil:
    section.add "api-version", valid_569972
  var valid_569973 = query.getOrDefault("BackupTimeout")
  valid_569973 = validateParameter(valid_569973, JInt, required = false,
                                 default = newJInt(10))
  if valid_569973 != nil:
    section.add "BackupTimeout", valid_569973
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569975: Call_BackupPartition_569967; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  let valid = call_569975.validator(path, query, header, formData, body)
  let scheme = call_569975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569975.url(scheme.get, call_569975.host, call_569975.base,
                         call_569975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569975, url, valid)

proc call*(call_569976: Call_BackupPartition_569967; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; BackupTimeout: int = 10;
          BackupPartitionDescription: JsonNode = nil): Recallable =
  ## backupPartition
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   BackupTimeout: int
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  var path_569977 = newJObject()
  var query_569978 = newJObject()
  var body_569979 = newJObject()
  add(query_569978, "timeout", newJInt(timeout))
  add(query_569978, "api-version", newJString(apiVersion))
  add(query_569978, "BackupTimeout", newJInt(BackupTimeout))
  add(path_569977, "partitionId", newJString(partitionId))
  if BackupPartitionDescription != nil:
    body_569979 = BackupPartitionDescription
  result = call_569976.call(path_569977, query_569978, nil, nil, body_569979)

var backupPartition* = Call_BackupPartition_569967(name: "backupPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Backup",
    validator: validate_BackupPartition_569968, base: "", url: url_BackupPartition_569969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisablePartitionBackup_569980 = ref object of OpenApiRestCall_567668
proc url_DisablePartitionBackup_569982(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisablePartitionBackup_569981(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569983 = path.getOrDefault("partitionId")
  valid_569983 = validateParameter(valid_569983, JString, required = true,
                                 default = nil)
  if valid_569983 != nil:
    section.add "partitionId", valid_569983
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569984 = query.getOrDefault("timeout")
  valid_569984 = validateParameter(valid_569984, JInt, required = false,
                                 default = newJInt(60))
  if valid_569984 != nil:
    section.add "timeout", valid_569984
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569985 = query.getOrDefault("api-version")
  valid_569985 = validateParameter(valid_569985, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569985 != nil:
    section.add "api-version", valid_569985
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569987: Call_DisablePartitionBackup_569980; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  let valid = call_569987.validator(path, query, header, formData, body)
  let scheme = call_569987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569987.url(scheme.get, call_569987.host, call_569987.base,
                         call_569987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569987, url, valid)

proc call*(call_569988: Call_DisablePartitionBackup_569980; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disablePartitionBackup
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_569989 = newJObject()
  var query_569990 = newJObject()
  var body_569991 = newJObject()
  add(query_569990, "timeout", newJInt(timeout))
  add(query_569990, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_569991 = DisableBackupDescription
  add(path_569989, "partitionId", newJString(partitionId))
  result = call_569988.call(path_569989, query_569990, nil, nil, body_569991)

var disablePartitionBackup* = Call_DisablePartitionBackup_569980(
    name: "disablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/DisableBackup",
    validator: validate_DisablePartitionBackup_569981, base: "",
    url: url_DisablePartitionBackup_569982, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnablePartitionBackup_569992 = ref object of OpenApiRestCall_567668
proc url_EnablePartitionBackup_569994(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnablePartitionBackup_569993(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_569995 = path.getOrDefault("partitionId")
  valid_569995 = validateParameter(valid_569995, JString, required = true,
                                 default = nil)
  if valid_569995 != nil:
    section.add "partitionId", valid_569995
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_569996 = query.getOrDefault("timeout")
  valid_569996 = validateParameter(valid_569996, JInt, required = false,
                                 default = newJInt(60))
  if valid_569996 != nil:
    section.add "timeout", valid_569996
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569997 = query.getOrDefault("api-version")
  valid_569997 = validateParameter(valid_569997, JString, required = true,
                                 default = newJString("6.4"))
  if valid_569997 != nil:
    section.add "api-version", valid_569997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569999: Call_EnablePartitionBackup_569992; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_569999.validator(path, query, header, formData, body)
  let scheme = call_569999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569999.url(scheme.get, call_569999.host, call_569999.base,
                         call_569999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569999, url, valid)

proc call*(call_570000: Call_EnablePartitionBackup_569992;
          EnableBackupDescription: JsonNode; partitionId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enablePartitionBackup
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570001 = newJObject()
  var query_570002 = newJObject()
  var body_570003 = newJObject()
  add(query_570002, "timeout", newJInt(timeout))
  add(query_570002, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_570003 = EnableBackupDescription
  add(path_570001, "partitionId", newJString(partitionId))
  result = call_570000.call(path_570001, query_570002, nil, nil, body_570003)

var enablePartitionBackup* = Call_EnablePartitionBackup_569992(
    name: "enablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/EnableBackup",
    validator: validate_EnablePartitionBackup_569993, base: "",
    url: url_EnablePartitionBackup_569994, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupConfigurationInfo_570004 = ref object of OpenApiRestCall_567668
proc url_GetPartitionBackupConfigurationInfo_570006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupConfigurationInfo_570005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570007 = path.getOrDefault("partitionId")
  valid_570007 = validateParameter(valid_570007, JString, required = true,
                                 default = nil)
  if valid_570007 != nil:
    section.add "partitionId", valid_570007
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570008 = query.getOrDefault("timeout")
  valid_570008 = validateParameter(valid_570008, JInt, required = false,
                                 default = newJInt(60))
  if valid_570008 != nil:
    section.add "timeout", valid_570008
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570009 = query.getOrDefault("api-version")
  valid_570009 = validateParameter(valid_570009, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570009 != nil:
    section.add "api-version", valid_570009
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570010: Call_GetPartitionBackupConfigurationInfo_570004;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  let valid = call_570010.validator(path, query, header, formData, body)
  let scheme = call_570010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570010.url(scheme.get, call_570010.host, call_570010.base,
                         call_570010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570010, url, valid)

proc call*(call_570011: Call_GetPartitionBackupConfigurationInfo_570004;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupConfigurationInfo
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570012 = newJObject()
  var query_570013 = newJObject()
  add(query_570013, "timeout", newJInt(timeout))
  add(query_570013, "api-version", newJString(apiVersion))
  add(path_570012, "partitionId", newJString(partitionId))
  result = call_570011.call(path_570012, query_570013, nil, nil, nil)

var getPartitionBackupConfigurationInfo* = Call_GetPartitionBackupConfigurationInfo_570004(
    name: "getPartitionBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupConfigurationInfo",
    validator: validate_GetPartitionBackupConfigurationInfo_570005, base: "",
    url: url_GetPartitionBackupConfigurationInfo_570006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupProgress_570014 = ref object of OpenApiRestCall_567668
proc url_GetPartitionBackupProgress_570016(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupProgress_570015(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570017 = path.getOrDefault("partitionId")
  valid_570017 = validateParameter(valid_570017, JString, required = true,
                                 default = nil)
  if valid_570017 != nil:
    section.add "partitionId", valid_570017
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570018 = query.getOrDefault("timeout")
  valid_570018 = validateParameter(valid_570018, JInt, required = false,
                                 default = newJInt(60))
  if valid_570018 != nil:
    section.add "timeout", valid_570018
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570019 = query.getOrDefault("api-version")
  valid_570019 = validateParameter(valid_570019, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570019 != nil:
    section.add "api-version", valid_570019
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570020: Call_GetPartitionBackupProgress_570014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  let valid = call_570020.validator(path, query, header, formData, body)
  let scheme = call_570020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570020.url(scheme.get, call_570020.host, call_570020.base,
                         call_570020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570020, url, valid)

proc call*(call_570021: Call_GetPartitionBackupProgress_570014;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionBackupProgress
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570022 = newJObject()
  var query_570023 = newJObject()
  add(query_570023, "timeout", newJInt(timeout))
  add(query_570023, "api-version", newJString(apiVersion))
  add(path_570022, "partitionId", newJString(partitionId))
  result = call_570021.call(path_570022, query_570023, nil, nil, nil)

var getPartitionBackupProgress* = Call_GetPartitionBackupProgress_570014(
    name: "getPartitionBackupProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupProgress",
    validator: validate_GetPartitionBackupProgress_570015, base: "",
    url: url_GetPartitionBackupProgress_570016,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupList_570024 = ref object of OpenApiRestCall_567668
proc url_GetPartitionBackupList_570026(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupList_570025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570027 = path.getOrDefault("partitionId")
  valid_570027 = validateParameter(valid_570027, JString, required = true,
                                 default = nil)
  if valid_570027 != nil:
    section.add "partitionId", valid_570027
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_570028 = query.getOrDefault("timeout")
  valid_570028 = validateParameter(valid_570028, JInt, required = false,
                                 default = newJInt(60))
  if valid_570028 != nil:
    section.add "timeout", valid_570028
  var valid_570029 = query.getOrDefault("Latest")
  valid_570029 = validateParameter(valid_570029, JBool, required = false,
                                 default = newJBool(false))
  if valid_570029 != nil:
    section.add "Latest", valid_570029
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570030 = query.getOrDefault("api-version")
  valid_570030 = validateParameter(valid_570030, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570030 != nil:
    section.add "api-version", valid_570030
  var valid_570031 = query.getOrDefault("StartDateTimeFilter")
  valid_570031 = validateParameter(valid_570031, JString, required = false,
                                 default = nil)
  if valid_570031 != nil:
    section.add "StartDateTimeFilter", valid_570031
  var valid_570032 = query.getOrDefault("EndDateTimeFilter")
  valid_570032 = validateParameter(valid_570032, JString, required = false,
                                 default = nil)
  if valid_570032 != nil:
    section.add "EndDateTimeFilter", valid_570032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570033: Call_GetPartitionBackupList_570024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  let valid = call_570033.validator(path, query, header, formData, body)
  let scheme = call_570033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570033.url(scheme.get, call_570033.host, call_570033.base,
                         call_570033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570033, url, valid)

proc call*(call_570034: Call_GetPartitionBackupList_570024; partitionId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = ""): Recallable =
  ## getPartitionBackupList
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570035 = newJObject()
  var query_570036 = newJObject()
  add(query_570036, "timeout", newJInt(timeout))
  add(query_570036, "Latest", newJBool(Latest))
  add(query_570036, "api-version", newJString(apiVersion))
  add(query_570036, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_570036, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_570035, "partitionId", newJString(partitionId))
  result = call_570034.call(path_570035, query_570036, nil, nil, nil)

var getPartitionBackupList* = Call_GetPartitionBackupList_570024(
    name: "getPartitionBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetBackups",
    validator: validate_GetPartitionBackupList_570025, base: "",
    url: url_GetPartitionBackupList_570026, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealthUsingPolicy_570050 = ref object of OpenApiRestCall_567668
proc url_GetPartitionHealthUsingPolicy_570052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealthUsingPolicy_570051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570053 = path.getOrDefault("partitionId")
  valid_570053 = validateParameter(valid_570053, JString, required = true,
                                 default = nil)
  if valid_570053 != nil:
    section.add "partitionId", valid_570053
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570054 = query.getOrDefault("timeout")
  valid_570054 = validateParameter(valid_570054, JInt, required = false,
                                 default = newJInt(60))
  if valid_570054 != nil:
    section.add "timeout", valid_570054
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570055 = query.getOrDefault("api-version")
  valid_570055 = validateParameter(valid_570055, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570055 != nil:
    section.add "api-version", valid_570055
  var valid_570056 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_570056 = validateParameter(valid_570056, JInt, required = false,
                                 default = newJInt(0))
  if valid_570056 != nil:
    section.add "ReplicasHealthStateFilter", valid_570056
  var valid_570057 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570057 = validateParameter(valid_570057, JBool, required = false,
                                 default = newJBool(false))
  if valid_570057 != nil:
    section.add "ExcludeHealthStatistics", valid_570057
  var valid_570058 = query.getOrDefault("EventsHealthStateFilter")
  valid_570058 = validateParameter(valid_570058, JInt, required = false,
                                 default = newJInt(0))
  if valid_570058 != nil:
    section.add "EventsHealthStateFilter", valid_570058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570060: Call_GetPartitionHealthUsingPolicy_570050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570060.validator(path, query, header, formData, body)
  let scheme = call_570060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570060.url(scheme.get, call_570060.host, call_570060.base,
                         call_570060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570060, url, valid)

proc call*(call_570061: Call_GetPartitionHealthUsingPolicy_570050;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0;
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealthUsingPolicy
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570062 = newJObject()
  var query_570063 = newJObject()
  var body_570064 = newJObject()
  add(query_570063, "timeout", newJInt(timeout))
  add(query_570063, "api-version", newJString(apiVersion))
  add(query_570063, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  if ApplicationHealthPolicy != nil:
    body_570064 = ApplicationHealthPolicy
  add(query_570063, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570063, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570062, "partitionId", newJString(partitionId))
  result = call_570061.call(path_570062, query_570063, nil, nil, body_570064)

var getPartitionHealthUsingPolicy* = Call_GetPartitionHealthUsingPolicy_570050(
    name: "getPartitionHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealthUsingPolicy_570051, base: "",
    url: url_GetPartitionHealthUsingPolicy_570052,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealth_570037 = ref object of OpenApiRestCall_567668
proc url_GetPartitionHealth_570039(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealth_570038(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570040 = path.getOrDefault("partitionId")
  valid_570040 = validateParameter(valid_570040, JString, required = true,
                                 default = nil)
  if valid_570040 != nil:
    section.add "partitionId", valid_570040
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570041 = query.getOrDefault("timeout")
  valid_570041 = validateParameter(valid_570041, JInt, required = false,
                                 default = newJInt(60))
  if valid_570041 != nil:
    section.add "timeout", valid_570041
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570042 = query.getOrDefault("api-version")
  valid_570042 = validateParameter(valid_570042, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570042 != nil:
    section.add "api-version", valid_570042
  var valid_570043 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_570043 = validateParameter(valid_570043, JInt, required = false,
                                 default = newJInt(0))
  if valid_570043 != nil:
    section.add "ReplicasHealthStateFilter", valid_570043
  var valid_570044 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570044 = validateParameter(valid_570044, JBool, required = false,
                                 default = newJBool(false))
  if valid_570044 != nil:
    section.add "ExcludeHealthStatistics", valid_570044
  var valid_570045 = query.getOrDefault("EventsHealthStateFilter")
  valid_570045 = validateParameter(valid_570045, JInt, required = false,
                                 default = newJInt(0))
  if valid_570045 != nil:
    section.add "EventsHealthStateFilter", valid_570045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570046: Call_GetPartitionHealth_570037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570046.validator(path, query, header, formData, body)
  let scheme = call_570046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570046.url(scheme.get, call_570046.host, call_570046.base,
                         call_570046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570046, url, valid)

proc call*(call_570047: Call_GetPartitionHealth_570037; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ReplicasHealthStateFilter: int = 0; ExcludeHealthStatistics: bool = false;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570048 = newJObject()
  var query_570049 = newJObject()
  add(query_570049, "timeout", newJInt(timeout))
  add(query_570049, "api-version", newJString(apiVersion))
  add(query_570049, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  add(query_570049, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570049, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570048, "partitionId", newJString(partitionId))
  result = call_570047.call(path_570048, query_570049, nil, nil, nil)

var getPartitionHealth* = Call_GetPartitionHealth_570037(
    name: "getPartitionHealth", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealth_570038, base: "",
    url: url_GetPartitionHealth_570039, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionLoadInformation_570065 = ref object of OpenApiRestCall_567668
proc url_GetPartitionLoadInformation_570067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionLoadInformation_570066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570068 = path.getOrDefault("partitionId")
  valid_570068 = validateParameter(valid_570068, JString, required = true,
                                 default = nil)
  if valid_570068 != nil:
    section.add "partitionId", valid_570068
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570069 = query.getOrDefault("timeout")
  valid_570069 = validateParameter(valid_570069, JInt, required = false,
                                 default = newJInt(60))
  if valid_570069 != nil:
    section.add "timeout", valid_570069
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570070 = query.getOrDefault("api-version")
  valid_570070 = validateParameter(valid_570070, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570070 != nil:
    section.add "api-version", valid_570070
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570071: Call_GetPartitionLoadInformation_570065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  let valid = call_570071.validator(path, query, header, formData, body)
  let scheme = call_570071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570071.url(scheme.get, call_570071.host, call_570071.base,
                         call_570071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570071, url, valid)

proc call*(call_570072: Call_GetPartitionLoadInformation_570065;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getPartitionLoadInformation
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570073 = newJObject()
  var query_570074 = newJObject()
  add(query_570074, "timeout", newJInt(timeout))
  add(query_570074, "api-version", newJString(apiVersion))
  add(path_570073, "partitionId", newJString(partitionId))
  result = call_570072.call(path_570073, query_570074, nil, nil, nil)

var getPartitionLoadInformation* = Call_GetPartitionLoadInformation_570065(
    name: "getPartitionLoadInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetLoadInformation",
    validator: validate_GetPartitionLoadInformation_570066, base: "",
    url: url_GetPartitionLoadInformation_570067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfoList_570075 = ref object of OpenApiRestCall_567668
proc url_GetReplicaInfoList_570077(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfoList_570076(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570078 = path.getOrDefault("partitionId")
  valid_570078 = validateParameter(valid_570078, JString, required = true,
                                 default = nil)
  if valid_570078 != nil:
    section.add "partitionId", valid_570078
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_570079 = query.getOrDefault("timeout")
  valid_570079 = validateParameter(valid_570079, JInt, required = false,
                                 default = newJInt(60))
  if valid_570079 != nil:
    section.add "timeout", valid_570079
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570080 = query.getOrDefault("api-version")
  valid_570080 = validateParameter(valid_570080, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570080 != nil:
    section.add "api-version", valid_570080
  var valid_570081 = query.getOrDefault("ContinuationToken")
  valid_570081 = validateParameter(valid_570081, JString, required = false,
                                 default = nil)
  if valid_570081 != nil:
    section.add "ContinuationToken", valid_570081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570082: Call_GetReplicaInfoList_570075; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_570082.validator(path, query, header, formData, body)
  let scheme = call_570082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570082.url(scheme.get, call_570082.host, call_570082.base,
                         call_570082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570082, url, valid)

proc call*(call_570083: Call_GetReplicaInfoList_570075; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ContinuationToken: string = ""): Recallable =
  ## getReplicaInfoList
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_570084 = newJObject()
  var query_570085 = newJObject()
  add(query_570085, "timeout", newJInt(timeout))
  add(query_570085, "api-version", newJString(apiVersion))
  add(path_570084, "partitionId", newJString(partitionId))
  add(query_570085, "ContinuationToken", newJString(ContinuationToken))
  result = call_570083.call(path_570084, query_570085, nil, nil, nil)

var getReplicaInfoList* = Call_GetReplicaInfoList_570075(
    name: "getReplicaInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas",
    validator: validate_GetReplicaInfoList_570076, base: "",
    url: url_GetReplicaInfoList_570077, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfo_570086 = ref object of OpenApiRestCall_567668
proc url_GetReplicaInfo_570088(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfo_570087(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570089 = path.getOrDefault("replicaId")
  valid_570089 = validateParameter(valid_570089, JString, required = true,
                                 default = nil)
  if valid_570089 != nil:
    section.add "replicaId", valid_570089
  var valid_570090 = path.getOrDefault("partitionId")
  valid_570090 = validateParameter(valid_570090, JString, required = true,
                                 default = nil)
  if valid_570090 != nil:
    section.add "partitionId", valid_570090
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570091 = query.getOrDefault("timeout")
  valid_570091 = validateParameter(valid_570091, JInt, required = false,
                                 default = newJInt(60))
  if valid_570091 != nil:
    section.add "timeout", valid_570091
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570092 = query.getOrDefault("api-version")
  valid_570092 = validateParameter(valid_570092, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570092 != nil:
    section.add "api-version", valid_570092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570093: Call_GetReplicaInfo_570086; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_570093.validator(path, query, header, formData, body)
  let scheme = call_570093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570093.url(scheme.get, call_570093.host, call_570093.base,
                         call_570093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570093, url, valid)

proc call*(call_570094: Call_GetReplicaInfo_570086; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getReplicaInfo
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570095 = newJObject()
  var query_570096 = newJObject()
  add(path_570095, "replicaId", newJString(replicaId))
  add(query_570096, "timeout", newJInt(timeout))
  add(query_570096, "api-version", newJString(apiVersion))
  add(path_570095, "partitionId", newJString(partitionId))
  result = call_570094.call(path_570095, query_570096, nil, nil, nil)

var getReplicaInfo* = Call_GetReplicaInfo_570086(name: "getReplicaInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}",
    validator: validate_GetReplicaInfo_570087, base: "", url: url_GetReplicaInfo_570088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealthUsingPolicy_570109 = ref object of OpenApiRestCall_567668
proc url_GetReplicaHealthUsingPolicy_570111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealthUsingPolicy_570110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570112 = path.getOrDefault("replicaId")
  valid_570112 = validateParameter(valid_570112, JString, required = true,
                                 default = nil)
  if valid_570112 != nil:
    section.add "replicaId", valid_570112
  var valid_570113 = path.getOrDefault("partitionId")
  valid_570113 = validateParameter(valid_570113, JString, required = true,
                                 default = nil)
  if valid_570113 != nil:
    section.add "partitionId", valid_570113
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570114 = query.getOrDefault("timeout")
  valid_570114 = validateParameter(valid_570114, JInt, required = false,
                                 default = newJInt(60))
  if valid_570114 != nil:
    section.add "timeout", valid_570114
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570115 = query.getOrDefault("api-version")
  valid_570115 = validateParameter(valid_570115, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570115 != nil:
    section.add "api-version", valid_570115
  var valid_570116 = query.getOrDefault("EventsHealthStateFilter")
  valid_570116 = validateParameter(valid_570116, JInt, required = false,
                                 default = newJInt(0))
  if valid_570116 != nil:
    section.add "EventsHealthStateFilter", valid_570116
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570118: Call_GetReplicaHealthUsingPolicy_570109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  let valid = call_570118.validator(path, query, header, formData, body)
  let scheme = call_570118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570118.url(scheme.get, call_570118.host, call_570118.base,
                         call_570118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570118, url, valid)

proc call*(call_570119: Call_GetReplicaHealthUsingPolicy_570109; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil; EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealthUsingPolicy
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570120 = newJObject()
  var query_570121 = newJObject()
  var body_570122 = newJObject()
  add(path_570120, "replicaId", newJString(replicaId))
  add(query_570121, "timeout", newJInt(timeout))
  add(query_570121, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_570122 = ApplicationHealthPolicy
  add(query_570121, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570120, "partitionId", newJString(partitionId))
  result = call_570119.call(path_570120, query_570121, nil, nil, body_570122)

var getReplicaHealthUsingPolicy* = Call_GetReplicaHealthUsingPolicy_570109(
    name: "getReplicaHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealthUsingPolicy_570110, base: "",
    url: url_GetReplicaHealthUsingPolicy_570111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealth_570097 = ref object of OpenApiRestCall_567668
proc url_GetReplicaHealth_570099(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealth_570098(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570100 = path.getOrDefault("replicaId")
  valid_570100 = validateParameter(valid_570100, JString, required = true,
                                 default = nil)
  if valid_570100 != nil:
    section.add "replicaId", valid_570100
  var valid_570101 = path.getOrDefault("partitionId")
  valid_570101 = validateParameter(valid_570101, JString, required = true,
                                 default = nil)
  if valid_570101 != nil:
    section.add "partitionId", valid_570101
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570102 = query.getOrDefault("timeout")
  valid_570102 = validateParameter(valid_570102, JInt, required = false,
                                 default = newJInt(60))
  if valid_570102 != nil:
    section.add "timeout", valid_570102
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570103 = query.getOrDefault("api-version")
  valid_570103 = validateParameter(valid_570103, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570103 != nil:
    section.add "api-version", valid_570103
  var valid_570104 = query.getOrDefault("EventsHealthStateFilter")
  valid_570104 = validateParameter(valid_570104, JInt, required = false,
                                 default = newJInt(0))
  if valid_570104 != nil:
    section.add "EventsHealthStateFilter", valid_570104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570105: Call_GetReplicaHealth_570097; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  let valid = call_570105.validator(path, query, header, formData, body)
  let scheme = call_570105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570105.url(scheme.get, call_570105.host, call_570105.base,
                         call_570105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570105, url, valid)

proc call*(call_570106: Call_GetReplicaHealth_570097; replicaId: string;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.0";
          EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealth
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570107 = newJObject()
  var query_570108 = newJObject()
  add(path_570107, "replicaId", newJString(replicaId))
  add(query_570108, "timeout", newJInt(timeout))
  add(query_570108, "api-version", newJString(apiVersion))
  add(query_570108, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570107, "partitionId", newJString(partitionId))
  result = call_570106.call(path_570107, query_570108, nil, nil, nil)

var getReplicaHealth* = Call_GetReplicaHealth_570097(name: "getReplicaHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealth_570098, base: "",
    url: url_GetReplicaHealth_570099, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportReplicaHealth_570123 = ref object of OpenApiRestCall_567668
proc url_ReportReplicaHealth_570125(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportReplicaHealth_570124(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_570126 = path.getOrDefault("replicaId")
  valid_570126 = validateParameter(valid_570126, JString, required = true,
                                 default = nil)
  if valid_570126 != nil:
    section.add "replicaId", valid_570126
  var valid_570127 = path.getOrDefault("partitionId")
  valid_570127 = validateParameter(valid_570127, JString, required = true,
                                 default = nil)
  if valid_570127 != nil:
    section.add "partitionId", valid_570127
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ReplicaHealthReportServiceKind: JString (required)
  ##                                 : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  section = newJObject()
  var valid_570128 = query.getOrDefault("Immediate")
  valid_570128 = validateParameter(valid_570128, JBool, required = false,
                                 default = newJBool(false))
  if valid_570128 != nil:
    section.add "Immediate", valid_570128
  var valid_570129 = query.getOrDefault("timeout")
  valid_570129 = validateParameter(valid_570129, JInt, required = false,
                                 default = newJInt(60))
  if valid_570129 != nil:
    section.add "timeout", valid_570129
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570130 = query.getOrDefault("api-version")
  valid_570130 = validateParameter(valid_570130, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570130 != nil:
    section.add "api-version", valid_570130
  var valid_570131 = query.getOrDefault("ReplicaHealthReportServiceKind")
  valid_570131 = validateParameter(valid_570131, JString, required = true,
                                 default = newJString("Stateful"))
  if valid_570131 != nil:
    section.add "ReplicaHealthReportServiceKind", valid_570131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570133: Call_ReportReplicaHealth_570123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_570133.validator(path, query, header, formData, body)
  let scheme = call_570133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570133.url(scheme.get, call_570133.host, call_570133.base,
                         call_570133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570133, url, valid)

proc call*(call_570134: Call_ReportReplicaHealth_570123; replicaId: string;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0";
          ReplicaHealthReportServiceKind: string = "Stateful"): Recallable =
  ## reportReplicaHealth
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   ReplicaHealthReportServiceKind: string (required)
  ##                                 : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570135 = newJObject()
  var query_570136 = newJObject()
  var body_570137 = newJObject()
  add(path_570135, "replicaId", newJString(replicaId))
  add(query_570136, "Immediate", newJBool(Immediate))
  add(query_570136, "timeout", newJInt(timeout))
  add(query_570136, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_570137 = HealthInformation
  add(query_570136, "ReplicaHealthReportServiceKind",
      newJString(ReplicaHealthReportServiceKind))
  add(path_570135, "partitionId", newJString(partitionId))
  result = call_570134.call(path_570135, query_570136, nil, nil, body_570137)

var reportReplicaHealth* = Call_ReportReplicaHealth_570123(
    name: "reportReplicaHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth",
    validator: validate_ReportReplicaHealth_570124, base: "",
    url: url_ReportReplicaHealth_570125, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestoreProgress_570138 = ref object of OpenApiRestCall_567668
proc url_GetPartitionRestoreProgress_570140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestoreProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestoreProgress_570139(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570141 = path.getOrDefault("partitionId")
  valid_570141 = validateParameter(valid_570141, JString, required = true,
                                 default = nil)
  if valid_570141 != nil:
    section.add "partitionId", valid_570141
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570142 = query.getOrDefault("timeout")
  valid_570142 = validateParameter(valid_570142, JInt, required = false,
                                 default = newJInt(60))
  if valid_570142 != nil:
    section.add "timeout", valid_570142
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570143 = query.getOrDefault("api-version")
  valid_570143 = validateParameter(valid_570143, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570143 != nil:
    section.add "api-version", valid_570143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570144: Call_GetPartitionRestoreProgress_570138; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  let valid = call_570144.validator(path, query, header, formData, body)
  let scheme = call_570144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570144.url(scheme.get, call_570144.host, call_570144.base,
                         call_570144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570144, url, valid)

proc call*(call_570145: Call_GetPartitionRestoreProgress_570138;
          partitionId: string; timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## getPartitionRestoreProgress
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570146 = newJObject()
  var query_570147 = newJObject()
  add(query_570147, "timeout", newJInt(timeout))
  add(query_570147, "api-version", newJString(apiVersion))
  add(path_570146, "partitionId", newJString(partitionId))
  result = call_570145.call(path_570146, query_570147, nil, nil, nil)

var getPartitionRestoreProgress* = Call_GetPartitionRestoreProgress_570138(
    name: "getPartitionRestoreProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetRestoreProgress",
    validator: validate_GetPartitionRestoreProgress_570139, base: "",
    url: url_GetPartitionRestoreProgress_570140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceNameInfo_570148 = ref object of OpenApiRestCall_567668
proc url_GetServiceNameInfo_570150(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetServiceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceNameInfo_570149(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570151 = path.getOrDefault("partitionId")
  valid_570151 = validateParameter(valid_570151, JString, required = true,
                                 default = nil)
  if valid_570151 != nil:
    section.add "partitionId", valid_570151
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570152 = query.getOrDefault("timeout")
  valid_570152 = validateParameter(valid_570152, JInt, required = false,
                                 default = newJInt(60))
  if valid_570152 != nil:
    section.add "timeout", valid_570152
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570153 = query.getOrDefault("api-version")
  valid_570153 = validateParameter(valid_570153, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570153 != nil:
    section.add "api-version", valid_570153
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570154: Call_GetServiceNameInfo_570148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  let valid = call_570154.validator(path, query, header, formData, body)
  let scheme = call_570154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570154.url(scheme.get, call_570154.host, call_570154.base,
                         call_570154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570154, url, valid)

proc call*(call_570155: Call_GetServiceNameInfo_570148; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceNameInfo
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570156 = newJObject()
  var query_570157 = newJObject()
  add(query_570157, "timeout", newJInt(timeout))
  add(query_570157, "api-version", newJString(apiVersion))
  add(path_570156, "partitionId", newJString(partitionId))
  result = call_570155.call(path_570156, query_570157, nil, nil, nil)

var getServiceNameInfo* = Call_GetServiceNameInfo_570148(
    name: "getServiceNameInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetServiceName",
    validator: validate_GetServiceNameInfo_570149, base: "",
    url: url_GetServiceNameInfo_570150, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverPartition_570158 = ref object of OpenApiRestCall_567668
proc url_RecoverPartition_570160(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverPartition_570159(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570161 = path.getOrDefault("partitionId")
  valid_570161 = validateParameter(valid_570161, JString, required = true,
                                 default = nil)
  if valid_570161 != nil:
    section.add "partitionId", valid_570161
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570162 = query.getOrDefault("timeout")
  valid_570162 = validateParameter(valid_570162, JInt, required = false,
                                 default = newJInt(60))
  if valid_570162 != nil:
    section.add "timeout", valid_570162
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570163 = query.getOrDefault("api-version")
  valid_570163 = validateParameter(valid_570163, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570163 != nil:
    section.add "api-version", valid_570163
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570164: Call_RecoverPartition_570158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_570164.validator(path, query, header, formData, body)
  let scheme = call_570164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570164.url(scheme.get, call_570164.host, call_570164.base,
                         call_570164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570164, url, valid)

proc call*(call_570165: Call_RecoverPartition_570158; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverPartition
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570166 = newJObject()
  var query_570167 = newJObject()
  add(query_570167, "timeout", newJInt(timeout))
  add(query_570167, "api-version", newJString(apiVersion))
  add(path_570166, "partitionId", newJString(partitionId))
  result = call_570165.call(path_570166, query_570167, nil, nil, nil)

var recoverPartition* = Call_RecoverPartition_570158(name: "recoverPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Recover",
    validator: validate_RecoverPartition_570159, base: "",
    url: url_RecoverPartition_570160, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportPartitionHealth_570168 = ref object of OpenApiRestCall_567668
proc url_ReportPartitionHealth_570170(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportPartitionHealth_570169(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570171 = path.getOrDefault("partitionId")
  valid_570171 = validateParameter(valid_570171, JString, required = true,
                                 default = nil)
  if valid_570171 != nil:
    section.add "partitionId", valid_570171
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570172 = query.getOrDefault("Immediate")
  valid_570172 = validateParameter(valid_570172, JBool, required = false,
                                 default = newJBool(false))
  if valid_570172 != nil:
    section.add "Immediate", valid_570172
  var valid_570173 = query.getOrDefault("timeout")
  valid_570173 = validateParameter(valid_570173, JInt, required = false,
                                 default = newJInt(60))
  if valid_570173 != nil:
    section.add "timeout", valid_570173
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570174 = query.getOrDefault("api-version")
  valid_570174 = validateParameter(valid_570174, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570174 != nil:
    section.add "api-version", valid_570174
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570176: Call_ReportPartitionHealth_570168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_570176.validator(path, query, header, formData, body)
  let scheme = call_570176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570176.url(scheme.get, call_570176.host, call_570176.base,
                         call_570176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570176, url, valid)

proc call*(call_570177: Call_ReportPartitionHealth_570168;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportPartitionHealth
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570178 = newJObject()
  var query_570179 = newJObject()
  var body_570180 = newJObject()
  add(query_570179, "Immediate", newJBool(Immediate))
  add(query_570179, "timeout", newJInt(timeout))
  add(query_570179, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_570180 = HealthInformation
  add(path_570178, "partitionId", newJString(partitionId))
  result = call_570177.call(path_570178, query_570179, nil, nil, body_570180)

var reportPartitionHealth* = Call_ReportPartitionHealth_570168(
    name: "reportPartitionHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ReportHealth",
    validator: validate_ReportPartitionHealth_570169, base: "",
    url: url_ReportPartitionHealth_570170, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResetPartitionLoad_570181 = ref object of OpenApiRestCall_567668
proc url_ResetPartitionLoad_570183(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResetLoad")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResetPartitionLoad_570182(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570184 = path.getOrDefault("partitionId")
  valid_570184 = validateParameter(valid_570184, JString, required = true,
                                 default = nil)
  if valid_570184 != nil:
    section.add "partitionId", valid_570184
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570185 = query.getOrDefault("timeout")
  valid_570185 = validateParameter(valid_570185, JInt, required = false,
                                 default = newJInt(60))
  if valid_570185 != nil:
    section.add "timeout", valid_570185
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570186 = query.getOrDefault("api-version")
  valid_570186 = validateParameter(valid_570186, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570186 != nil:
    section.add "api-version", valid_570186
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570187: Call_ResetPartitionLoad_570181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  let valid = call_570187.validator(path, query, header, formData, body)
  let scheme = call_570187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570187.url(scheme.get, call_570187.host, call_570187.base,
                         call_570187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570187, url, valid)

proc call*(call_570188: Call_ResetPartitionLoad_570181; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## resetPartitionLoad
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570189 = newJObject()
  var query_570190 = newJObject()
  add(query_570190, "timeout", newJInt(timeout))
  add(query_570190, "api-version", newJString(apiVersion))
  add(path_570189, "partitionId", newJString(partitionId))
  result = call_570188.call(path_570189, query_570190, nil, nil, nil)

var resetPartitionLoad* = Call_ResetPartitionLoad_570181(
    name: "resetPartitionLoad", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResetLoad",
    validator: validate_ResetPartitionLoad_570182, base: "",
    url: url_ResetPartitionLoad_570183, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestorePartition_570191 = ref object of OpenApiRestCall_567668
proc url_RestorePartition_570193(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestorePartition_570192(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570194 = path.getOrDefault("partitionId")
  valid_570194 = validateParameter(valid_570194, JString, required = true,
                                 default = nil)
  if valid_570194 != nil:
    section.add "partitionId", valid_570194
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestoreTimeout: JInt
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  section = newJObject()
  var valid_570195 = query.getOrDefault("timeout")
  valid_570195 = validateParameter(valid_570195, JInt, required = false,
                                 default = newJInt(60))
  if valid_570195 != nil:
    section.add "timeout", valid_570195
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570196 = query.getOrDefault("api-version")
  valid_570196 = validateParameter(valid_570196, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570196 != nil:
    section.add "api-version", valid_570196
  var valid_570197 = query.getOrDefault("RestoreTimeout")
  valid_570197 = validateParameter(valid_570197, JInt, required = false,
                                 default = newJInt(10))
  if valid_570197 != nil:
    section.add "RestoreTimeout", valid_570197
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570199: Call_RestorePartition_570191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  let valid = call_570199.validator(path, query, header, formData, body)
  let scheme = call_570199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570199.url(scheme.get, call_570199.host, call_570199.base,
                         call_570199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570199, url, valid)

proc call*(call_570200: Call_RestorePartition_570191;
          RestorePartitionDescription: JsonNode; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"; RestoreTimeout: int = 10): Recallable =
  ## restorePartition
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   RestoreTimeout: int
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  var path_570201 = newJObject()
  var query_570202 = newJObject()
  var body_570203 = newJObject()
  add(query_570202, "timeout", newJInt(timeout))
  if RestorePartitionDescription != nil:
    body_570203 = RestorePartitionDescription
  add(query_570202, "api-version", newJString(apiVersion))
  add(path_570201, "partitionId", newJString(partitionId))
  add(query_570202, "RestoreTimeout", newJInt(RestoreTimeout))
  result = call_570200.call(path_570201, query_570202, nil, nil, body_570203)

var restorePartition* = Call_RestorePartition_570191(name: "restorePartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Restore",
    validator: validate_RestorePartition_570192, base: "",
    url: url_RestorePartition_570193, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumePartitionBackup_570204 = ref object of OpenApiRestCall_567668
proc url_ResumePartitionBackup_570206(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumePartitionBackup_570205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570207 = path.getOrDefault("partitionId")
  valid_570207 = validateParameter(valid_570207, JString, required = true,
                                 default = nil)
  if valid_570207 != nil:
    section.add "partitionId", valid_570207
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570208 = query.getOrDefault("timeout")
  valid_570208 = validateParameter(valid_570208, JInt, required = false,
                                 default = newJInt(60))
  if valid_570208 != nil:
    section.add "timeout", valid_570208
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570209 = query.getOrDefault("api-version")
  valid_570209 = validateParameter(valid_570209, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570209 != nil:
    section.add "api-version", valid_570209
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570210: Call_ResumePartitionBackup_570204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_570210.validator(path, query, header, formData, body)
  let scheme = call_570210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570210.url(scheme.get, call_570210.host, call_570210.base,
                         call_570210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570210, url, valid)

proc call*(call_570211: Call_ResumePartitionBackup_570204; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumePartitionBackup
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570212 = newJObject()
  var query_570213 = newJObject()
  add(query_570213, "timeout", newJInt(timeout))
  add(query_570213, "api-version", newJString(apiVersion))
  add(path_570212, "partitionId", newJString(partitionId))
  result = call_570211.call(path_570212, query_570213, nil, nil, nil)

var resumePartitionBackup* = Call_ResumePartitionBackup_570204(
    name: "resumePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResumeBackup",
    validator: validate_ResumePartitionBackup_570205, base: "",
    url: url_ResumePartitionBackup_570206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendPartitionBackup_570214 = ref object of OpenApiRestCall_567668
proc url_SuspendPartitionBackup_570216(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendPartitionBackup_570215(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_570217 = path.getOrDefault("partitionId")
  valid_570217 = validateParameter(valid_570217, JString, required = true,
                                 default = nil)
  if valid_570217 != nil:
    section.add "partitionId", valid_570217
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570218 = query.getOrDefault("timeout")
  valid_570218 = validateParameter(valid_570218, JInt, required = false,
                                 default = newJInt(60))
  if valid_570218 != nil:
    section.add "timeout", valid_570218
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570219 = query.getOrDefault("api-version")
  valid_570219 = validateParameter(valid_570219, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570219 != nil:
    section.add "api-version", valid_570219
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570220: Call_SuspendPartitionBackup_570214; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  let valid = call_570220.validator(path, query, header, formData, body)
  let scheme = call_570220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570220.url(scheme.get, call_570220.host, call_570220.base,
                         call_570220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570220, url, valid)

proc call*(call_570221: Call_SuspendPartitionBackup_570214; partitionId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendPartitionBackup
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_570222 = newJObject()
  var query_570223 = newJObject()
  add(query_570223, "timeout", newJInt(timeout))
  add(query_570223, "api-version", newJString(apiVersion))
  add(path_570222, "partitionId", newJString(partitionId))
  result = call_570221.call(path_570222, query_570223, nil, nil, nil)

var suspendPartitionBackup* = Call_SuspendPartitionBackup_570214(
    name: "suspendPartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/SuspendBackup",
    validator: validate_SuspendPartitionBackup_570215, base: "",
    url: url_SuspendPartitionBackup_570216, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationList_570224 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationList_570226(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshApplicationList_570225(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570227 = query.getOrDefault("api-version")
  valid_570227 = validateParameter(valid_570227, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570227 != nil:
    section.add "api-version", valid_570227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570228: Call_MeshApplicationList_570224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  let valid = call_570228.validator(path, query, header, formData, body)
  let scheme = call_570228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570228.url(scheme.get, call_570228.host, call_570228.base,
                         call_570228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570228, url, valid)

proc call*(call_570229: Call_MeshApplicationList_570224;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationList
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570230 = newJObject()
  add(query_570230, "api-version", newJString(apiVersion))
  result = call_570229.call(nil, query_570230, nil, nil, nil)

var meshApplicationList* = Call_MeshApplicationList_570224(
    name: "meshApplicationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications",
    validator: validate_MeshApplicationList_570225, base: "",
    url: url_MeshApplicationList_570226, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationCreateOrUpdate_570240 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationCreateOrUpdate_570242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationCreateOrUpdate_570241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570243 = path.getOrDefault("applicationResourceName")
  valid_570243 = validateParameter(valid_570243, JString, required = true,
                                 default = nil)
  if valid_570243 != nil:
    section.add "applicationResourceName", valid_570243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570244 = query.getOrDefault("api-version")
  valid_570244 = validateParameter(valid_570244, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570244 != nil:
    section.add "api-version", valid_570244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570246: Call_MeshApplicationCreateOrUpdate_570240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_570246.validator(path, query, header, formData, body)
  let scheme = call_570246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570246.url(scheme.get, call_570246.host, call_570246.base,
                         call_570246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570246, url, valid)

proc call*(call_570247: Call_MeshApplicationCreateOrUpdate_570240;
          applicationResourceDescription: JsonNode;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationCreateOrUpdate
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570248 = newJObject()
  var query_570249 = newJObject()
  var body_570250 = newJObject()
  if applicationResourceDescription != nil:
    body_570250 = applicationResourceDescription
  add(query_570249, "api-version", newJString(apiVersion))
  add(path_570248, "applicationResourceName", newJString(applicationResourceName))
  result = call_570247.call(path_570248, query_570249, nil, nil, body_570250)

var meshApplicationCreateOrUpdate* = Call_MeshApplicationCreateOrUpdate_570240(
    name: "meshApplicationCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationCreateOrUpdate_570241, base: "",
    url: url_MeshApplicationCreateOrUpdate_570242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationGet_570231 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationGet_570233(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationGet_570232(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570234 = path.getOrDefault("applicationResourceName")
  valid_570234 = validateParameter(valid_570234, JString, required = true,
                                 default = nil)
  if valid_570234 != nil:
    section.add "applicationResourceName", valid_570234
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570235 = query.getOrDefault("api-version")
  valid_570235 = validateParameter(valid_570235, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570235 != nil:
    section.add "api-version", valid_570235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570236: Call_MeshApplicationGet_570231; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  let valid = call_570236.validator(path, query, header, formData, body)
  let scheme = call_570236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570236.url(scheme.get, call_570236.host, call_570236.base,
                         call_570236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570236, url, valid)

proc call*(call_570237: Call_MeshApplicationGet_570231;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationGet
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570238 = newJObject()
  var query_570239 = newJObject()
  add(query_570239, "api-version", newJString(apiVersion))
  add(path_570238, "applicationResourceName", newJString(applicationResourceName))
  result = call_570237.call(path_570238, query_570239, nil, nil, nil)

var meshApplicationGet* = Call_MeshApplicationGet_570231(
    name: "meshApplicationGet", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationGet_570232, base: "",
    url: url_MeshApplicationGet_570233, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationDelete_570251 = ref object of OpenApiRestCall_567668
proc url_MeshApplicationDelete_570253(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationDelete_570252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the Application resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570254 = path.getOrDefault("applicationResourceName")
  valid_570254 = validateParameter(valid_570254, JString, required = true,
                                 default = nil)
  if valid_570254 != nil:
    section.add "applicationResourceName", valid_570254
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570255 = query.getOrDefault("api-version")
  valid_570255 = validateParameter(valid_570255, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570255 != nil:
    section.add "api-version", valid_570255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570256: Call_MeshApplicationDelete_570251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Application resource identified by the name.
  ## 
  let valid = call_570256.validator(path, query, header, formData, body)
  let scheme = call_570256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570256.url(scheme.get, call_570256.host, call_570256.base,
                         call_570256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570256, url, valid)

proc call*(call_570257: Call_MeshApplicationDelete_570251;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationDelete
  ## Deletes the Application resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570258 = newJObject()
  var query_570259 = newJObject()
  add(query_570259, "api-version", newJString(apiVersion))
  add(path_570258, "applicationResourceName", newJString(applicationResourceName))
  result = call_570257.call(path_570258, query_570259, nil, nil, nil)

var meshApplicationDelete* = Call_MeshApplicationDelete_570251(
    name: "meshApplicationDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationDelete_570252, base: "",
    url: url_MeshApplicationDelete_570253, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceList_570260 = ref object of OpenApiRestCall_567668
proc url_MeshServiceList_570262(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceList_570261(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570263 = path.getOrDefault("applicationResourceName")
  valid_570263 = validateParameter(valid_570263, JString, required = true,
                                 default = nil)
  if valid_570263 != nil:
    section.add "applicationResourceName", valid_570263
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570264 = query.getOrDefault("api-version")
  valid_570264 = validateParameter(valid_570264, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570264 != nil:
    section.add "api-version", valid_570264
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570265: Call_MeshServiceList_570260; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  let valid = call_570265.validator(path, query, header, formData, body)
  let scheme = call_570265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570265.url(scheme.get, call_570265.host, call_570265.base,
                         call_570265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570265, url, valid)

proc call*(call_570266: Call_MeshServiceList_570260;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceList
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_570267 = newJObject()
  var query_570268 = newJObject()
  add(query_570268, "api-version", newJString(apiVersion))
  add(path_570267, "applicationResourceName", newJString(applicationResourceName))
  result = call_570266.call(path_570267, query_570268, nil, nil, nil)

var meshServiceList* = Call_MeshServiceList_570260(name: "meshServiceList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}/Services",
    validator: validate_MeshServiceList_570261, base: "", url: url_MeshServiceList_570262,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceGet_570269 = ref object of OpenApiRestCall_567668
proc url_MeshServiceGet_570271(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceGet_570270(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570272 = path.getOrDefault("applicationResourceName")
  valid_570272 = validateParameter(valid_570272, JString, required = true,
                                 default = nil)
  if valid_570272 != nil:
    section.add "applicationResourceName", valid_570272
  var valid_570273 = path.getOrDefault("serviceResourceName")
  valid_570273 = validateParameter(valid_570273, JString, required = true,
                                 default = nil)
  if valid_570273 != nil:
    section.add "serviceResourceName", valid_570273
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570274 = query.getOrDefault("api-version")
  valid_570274 = validateParameter(valid_570274, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570274 != nil:
    section.add "api-version", valid_570274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570275: Call_MeshServiceGet_570269; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  let valid = call_570275.validator(path, query, header, formData, body)
  let scheme = call_570275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570275.url(scheme.get, call_570275.host, call_570275.base,
                         call_570275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570275, url, valid)

proc call*(call_570276: Call_MeshServiceGet_570269;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceGet
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_570277 = newJObject()
  var query_570278 = newJObject()
  add(query_570278, "api-version", newJString(apiVersion))
  add(path_570277, "applicationResourceName", newJString(applicationResourceName))
  add(path_570277, "serviceResourceName", newJString(serviceResourceName))
  result = call_570276.call(path_570277, query_570278, nil, nil, nil)

var meshServiceGet* = Call_MeshServiceGet_570269(name: "meshServiceGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}",
    validator: validate_MeshServiceGet_570270, base: "", url: url_MeshServiceGet_570271,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaList_570279 = ref object of OpenApiRestCall_567668
proc url_MeshServiceReplicaList_570281(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaList_570280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570282 = path.getOrDefault("applicationResourceName")
  valid_570282 = validateParameter(valid_570282, JString, required = true,
                                 default = nil)
  if valid_570282 != nil:
    section.add "applicationResourceName", valid_570282
  var valid_570283 = path.getOrDefault("serviceResourceName")
  valid_570283 = validateParameter(valid_570283, JString, required = true,
                                 default = nil)
  if valid_570283 != nil:
    section.add "serviceResourceName", valid_570283
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570284 = query.getOrDefault("api-version")
  valid_570284 = validateParameter(valid_570284, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570284 != nil:
    section.add "api-version", valid_570284
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570285: Call_MeshServiceReplicaList_570279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  let valid = call_570285.validator(path, query, header, formData, body)
  let scheme = call_570285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570285.url(scheme.get, call_570285.host, call_570285.base,
                         call_570285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570285, url, valid)

proc call*(call_570286: Call_MeshServiceReplicaList_570279;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaList
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_570287 = newJObject()
  var query_570288 = newJObject()
  add(query_570288, "api-version", newJString(apiVersion))
  add(path_570287, "applicationResourceName", newJString(applicationResourceName))
  add(path_570287, "serviceResourceName", newJString(serviceResourceName))
  result = call_570286.call(path_570287, query_570288, nil, nil, nil)

var meshServiceReplicaList* = Call_MeshServiceReplicaList_570279(
    name: "meshServiceReplicaList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas",
    validator: validate_MeshServiceReplicaList_570280, base: "",
    url: url_MeshServiceReplicaList_570281, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaGet_570289 = ref object of OpenApiRestCall_567668
proc url_MeshServiceReplicaGet_570291(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaGet_570290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570292 = path.getOrDefault("applicationResourceName")
  valid_570292 = validateParameter(valid_570292, JString, required = true,
                                 default = nil)
  if valid_570292 != nil:
    section.add "applicationResourceName", valid_570292
  var valid_570293 = path.getOrDefault("serviceResourceName")
  valid_570293 = validateParameter(valid_570293, JString, required = true,
                                 default = nil)
  if valid_570293 != nil:
    section.add "serviceResourceName", valid_570293
  var valid_570294 = path.getOrDefault("replicaName")
  valid_570294 = validateParameter(valid_570294, JString, required = true,
                                 default = nil)
  if valid_570294 != nil:
    section.add "replicaName", valid_570294
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570295 = query.getOrDefault("api-version")
  valid_570295 = validateParameter(valid_570295, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570295 != nil:
    section.add "api-version", valid_570295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570296: Call_MeshServiceReplicaGet_570289; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  let valid = call_570296.validator(path, query, header, formData, body)
  let scheme = call_570296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570296.url(scheme.get, call_570296.host, call_570296.base,
                         call_570296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570296, url, valid)

proc call*(call_570297: Call_MeshServiceReplicaGet_570289;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaGet
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  var path_570298 = newJObject()
  var query_570299 = newJObject()
  add(query_570299, "api-version", newJString(apiVersion))
  add(path_570298, "applicationResourceName", newJString(applicationResourceName))
  add(path_570298, "serviceResourceName", newJString(serviceResourceName))
  add(path_570298, "replicaName", newJString(replicaName))
  result = call_570297.call(path_570298, query_570299, nil, nil, nil)

var meshServiceReplicaGet* = Call_MeshServiceReplicaGet_570289(
    name: "meshServiceReplicaGet", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}",
    validator: validate_MeshServiceReplicaGet_570290, base: "",
    url: url_MeshServiceReplicaGet_570291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshCodePackageGetContainerLogs_570300 = ref object of OpenApiRestCall_567668
proc url_MeshCodePackageGetContainerLogs_570302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  assert "codePackageName" in path, "`codePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName"),
               (kind: ConstantSegment, value: "/CodePackages/"),
               (kind: VariableSegment, value: "codePackageName"),
               (kind: ConstantSegment, value: "/Logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshCodePackageGetContainerLogs_570301(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: JString (required)
  ##                  : The name of code package of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_570303 = path.getOrDefault("applicationResourceName")
  valid_570303 = validateParameter(valid_570303, JString, required = true,
                                 default = nil)
  if valid_570303 != nil:
    section.add "applicationResourceName", valid_570303
  var valid_570304 = path.getOrDefault("serviceResourceName")
  valid_570304 = validateParameter(valid_570304, JString, required = true,
                                 default = nil)
  if valid_570304 != nil:
    section.add "serviceResourceName", valid_570304
  var valid_570305 = path.getOrDefault("replicaName")
  valid_570305 = validateParameter(valid_570305, JString, required = true,
                                 default = nil)
  if valid_570305 != nil:
    section.add "replicaName", valid_570305
  var valid_570306 = path.getOrDefault("codePackageName")
  valid_570306 = validateParameter(valid_570306, JString, required = true,
                                 default = nil)
  if valid_570306 != nil:
    section.add "codePackageName", valid_570306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570307 = query.getOrDefault("api-version")
  valid_570307 = validateParameter(valid_570307, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570307 != nil:
    section.add "api-version", valid_570307
  var valid_570308 = query.getOrDefault("Tail")
  valid_570308 = validateParameter(valid_570308, JString, required = false,
                                 default = nil)
  if valid_570308 != nil:
    section.add "Tail", valid_570308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570309: Call_MeshCodePackageGetContainerLogs_570300;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  let valid = call_570309.validator(path, query, header, formData, body)
  let scheme = call_570309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570309.url(scheme.get, call_570309.host, call_570309.base,
                         call_570309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570309, url, valid)

proc call*(call_570310: Call_MeshCodePackageGetContainerLogs_570300;
          applicationResourceName: string; serviceResourceName: string;
          replicaName: string; codePackageName: string;
          apiVersion: string = "6.4-preview"; Tail: string = ""): Recallable =
  ## meshCodePackageGetContainerLogs
  ## Gets the logs for the container of the specified code package of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  ##   codePackageName: string (required)
  ##                  : The name of code package of the service.
  var path_570311 = newJObject()
  var query_570312 = newJObject()
  add(query_570312, "api-version", newJString(apiVersion))
  add(path_570311, "applicationResourceName", newJString(applicationResourceName))
  add(path_570311, "serviceResourceName", newJString(serviceResourceName))
  add(query_570312, "Tail", newJString(Tail))
  add(path_570311, "replicaName", newJString(replicaName))
  add(path_570311, "codePackageName", newJString(codePackageName))
  result = call_570310.call(path_570311, query_570312, nil, nil, nil)

var meshCodePackageGetContainerLogs* = Call_MeshCodePackageGetContainerLogs_570300(
    name: "meshCodePackageGetContainerLogs", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs",
    validator: validate_MeshCodePackageGetContainerLogs_570301, base: "",
    url: url_MeshCodePackageGetContainerLogs_570302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayList_570313 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayList_570315(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshGatewayList_570314(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570316 = query.getOrDefault("api-version")
  valid_570316 = validateParameter(valid_570316, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570316 != nil:
    section.add "api-version", valid_570316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570317: Call_MeshGatewayList_570313; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_570317.validator(path, query, header, formData, body)
  let scheme = call_570317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570317.url(scheme.get, call_570317.host, call_570317.base,
                         call_570317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570317, url, valid)

proc call*(call_570318: Call_MeshGatewayList_570313;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayList
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570319 = newJObject()
  add(query_570319, "api-version", newJString(apiVersion))
  result = call_570318.call(nil, query_570319, nil, nil, nil)

var meshGatewayList* = Call_MeshGatewayList_570313(name: "meshGatewayList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways", validator: validate_MeshGatewayList_570314,
    base: "", url: url_MeshGatewayList_570315, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayCreateOrUpdate_570329 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayCreateOrUpdate_570331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayCreateOrUpdate_570330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_570332 = path.getOrDefault("gatewayResourceName")
  valid_570332 = validateParameter(valid_570332, JString, required = true,
                                 default = nil)
  if valid_570332 != nil:
    section.add "gatewayResourceName", valid_570332
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570333 = query.getOrDefault("api-version")
  valid_570333 = validateParameter(valid_570333, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570333 != nil:
    section.add "api-version", valid_570333
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570335: Call_MeshGatewayCreateOrUpdate_570329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  let valid = call_570335.validator(path, query, header, formData, body)
  let scheme = call_570335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570335.url(scheme.get, call_570335.host, call_570335.base,
                         call_570335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570335, url, valid)

proc call*(call_570336: Call_MeshGatewayCreateOrUpdate_570329;
          gatewayResourceDescription: JsonNode; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayCreateOrUpdate
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_570337 = newJObject()
  var query_570338 = newJObject()
  var body_570339 = newJObject()
  add(query_570338, "api-version", newJString(apiVersion))
  if gatewayResourceDescription != nil:
    body_570339 = gatewayResourceDescription
  add(path_570337, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_570336.call(path_570337, query_570338, nil, nil, body_570339)

var meshGatewayCreateOrUpdate* = Call_MeshGatewayCreateOrUpdate_570329(
    name: "meshGatewayCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayCreateOrUpdate_570330, base: "",
    url: url_MeshGatewayCreateOrUpdate_570331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayGet_570320 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayGet_570322(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayGet_570321(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_570323 = path.getOrDefault("gatewayResourceName")
  valid_570323 = validateParameter(valid_570323, JString, required = true,
                                 default = nil)
  if valid_570323 != nil:
    section.add "gatewayResourceName", valid_570323
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570324 = query.getOrDefault("api-version")
  valid_570324 = validateParameter(valid_570324, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570324 != nil:
    section.add "api-version", valid_570324
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570325: Call_MeshGatewayGet_570320; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_570325.validator(path, query, header, formData, body)
  let scheme = call_570325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570325.url(scheme.get, call_570325.host, call_570325.base,
                         call_570325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570325, url, valid)

proc call*(call_570326: Call_MeshGatewayGet_570320; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayGet
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_570327 = newJObject()
  var query_570328 = newJObject()
  add(query_570328, "api-version", newJString(apiVersion))
  add(path_570327, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_570326.call(path_570327, query_570328, nil, nil, nil)

var meshGatewayGet* = Call_MeshGatewayGet_570320(name: "meshGatewayGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayGet_570321, base: "", url: url_MeshGatewayGet_570322,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayDelete_570340 = ref object of OpenApiRestCall_567668
proc url_MeshGatewayDelete_570342(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayDelete_570341(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Gateway resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_570343 = path.getOrDefault("gatewayResourceName")
  valid_570343 = validateParameter(valid_570343, JString, required = true,
                                 default = nil)
  if valid_570343 != nil:
    section.add "gatewayResourceName", valid_570343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570344 = query.getOrDefault("api-version")
  valid_570344 = validateParameter(valid_570344, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570344 != nil:
    section.add "api-version", valid_570344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570345: Call_MeshGatewayDelete_570340; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Gateway resource identified by the name.
  ## 
  let valid = call_570345.validator(path, query, header, formData, body)
  let scheme = call_570345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570345.url(scheme.get, call_570345.host, call_570345.base,
                         call_570345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570345, url, valid)

proc call*(call_570346: Call_MeshGatewayDelete_570340; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayDelete
  ## Deletes the Gateway resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  var path_570347 = newJObject()
  var query_570348 = newJObject()
  add(query_570348, "api-version", newJString(apiVersion))
  add(path_570347, "gatewayResourceName", newJString(gatewayResourceName))
  result = call_570346.call(path_570347, query_570348, nil, nil, nil)

var meshGatewayDelete* = Call_MeshGatewayDelete_570340(name: "meshGatewayDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayDelete_570341, base: "",
    url: url_MeshGatewayDelete_570342, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkList_570349 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkList_570351(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshNetworkList_570350(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570352 = query.getOrDefault("api-version")
  valid_570352 = validateParameter(valid_570352, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570352 != nil:
    section.add "api-version", valid_570352
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570353: Call_MeshNetworkList_570349; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  let valid = call_570353.validator(path, query, header, formData, body)
  let scheme = call_570353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570353.url(scheme.get, call_570353.host, call_570353.base,
                         call_570353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570353, url, valid)

proc call*(call_570354: Call_MeshNetworkList_570349;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkList
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570355 = newJObject()
  add(query_570355, "api-version", newJString(apiVersion))
  result = call_570354.call(nil, query_570355, nil, nil, nil)

var meshNetworkList* = Call_MeshNetworkList_570349(name: "meshNetworkList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks", validator: validate_MeshNetworkList_570350,
    base: "", url: url_MeshNetworkList_570351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkCreateOrUpdate_570365 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkCreateOrUpdate_570367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkCreateOrUpdate_570366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_570368 = path.getOrDefault("networkResourceName")
  valid_570368 = validateParameter(valid_570368, JString, required = true,
                                 default = nil)
  if valid_570368 != nil:
    section.add "networkResourceName", valid_570368
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570369 = query.getOrDefault("api-version")
  valid_570369 = validateParameter(valid_570369, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570369 != nil:
    section.add "api-version", valid_570369
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570371: Call_MeshNetworkCreateOrUpdate_570365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  let valid = call_570371.validator(path, query, header, formData, body)
  let scheme = call_570371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570371.url(scheme.get, call_570371.host, call_570371.base,
                         call_570371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570371, url, valid)

proc call*(call_570372: Call_MeshNetworkCreateOrUpdate_570365;
          networkResourceDescription: JsonNode; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkCreateOrUpdate
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_570373 = newJObject()
  var query_570374 = newJObject()
  var body_570375 = newJObject()
  add(query_570374, "api-version", newJString(apiVersion))
  if networkResourceDescription != nil:
    body_570375 = networkResourceDescription
  add(path_570373, "networkResourceName", newJString(networkResourceName))
  result = call_570372.call(path_570373, query_570374, nil, nil, body_570375)

var meshNetworkCreateOrUpdate* = Call_MeshNetworkCreateOrUpdate_570365(
    name: "meshNetworkCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkCreateOrUpdate_570366, base: "",
    url: url_MeshNetworkCreateOrUpdate_570367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkGet_570356 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkGet_570358(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkGet_570357(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_570359 = path.getOrDefault("networkResourceName")
  valid_570359 = validateParameter(valid_570359, JString, required = true,
                                 default = nil)
  if valid_570359 != nil:
    section.add "networkResourceName", valid_570359
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570360 = query.getOrDefault("api-version")
  valid_570360 = validateParameter(valid_570360, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570360 != nil:
    section.add "api-version", valid_570360
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570361: Call_MeshNetworkGet_570356; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  let valid = call_570361.validator(path, query, header, formData, body)
  let scheme = call_570361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570361.url(scheme.get, call_570361.host, call_570361.base,
                         call_570361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570361, url, valid)

proc call*(call_570362: Call_MeshNetworkGet_570356; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkGet
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_570363 = newJObject()
  var query_570364 = newJObject()
  add(query_570364, "api-version", newJString(apiVersion))
  add(path_570363, "networkResourceName", newJString(networkResourceName))
  result = call_570362.call(path_570363, query_570364, nil, nil, nil)

var meshNetworkGet* = Call_MeshNetworkGet_570356(name: "meshNetworkGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkGet_570357, base: "", url: url_MeshNetworkGet_570358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkDelete_570376 = ref object of OpenApiRestCall_567668
proc url_MeshNetworkDelete_570378(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkDelete_570377(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Network resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_570379 = path.getOrDefault("networkResourceName")
  valid_570379 = validateParameter(valid_570379, JString, required = true,
                                 default = nil)
  if valid_570379 != nil:
    section.add "networkResourceName", valid_570379
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570380 = query.getOrDefault("api-version")
  valid_570380 = validateParameter(valid_570380, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570380 != nil:
    section.add "api-version", valid_570380
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570381: Call_MeshNetworkDelete_570376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Network resource identified by the name.
  ## 
  let valid = call_570381.validator(path, query, header, formData, body)
  let scheme = call_570381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570381.url(scheme.get, call_570381.host, call_570381.base,
                         call_570381.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570381, url, valid)

proc call*(call_570382: Call_MeshNetworkDelete_570376; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkDelete
  ## Deletes the Network resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_570383 = newJObject()
  var query_570384 = newJObject()
  add(query_570384, "api-version", newJString(apiVersion))
  add(path_570383, "networkResourceName", newJString(networkResourceName))
  result = call_570382.call(path_570383, query_570384, nil, nil, nil)

var meshNetworkDelete* = Call_MeshNetworkDelete_570376(name: "meshNetworkDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkDelete_570377, base: "",
    url: url_MeshNetworkDelete_570378, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretList_570385 = ref object of OpenApiRestCall_567668
proc url_MeshSecretList_570387(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshSecretList_570386(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570388 = query.getOrDefault("api-version")
  valid_570388 = validateParameter(valid_570388, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570388 != nil:
    section.add "api-version", valid_570388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570389: Call_MeshSecretList_570385; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  let valid = call_570389.validator(path, query, header, formData, body)
  let scheme = call_570389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570389.url(scheme.get, call_570389.host, call_570389.base,
                         call_570389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570389, url, valid)

proc call*(call_570390: Call_MeshSecretList_570385;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretList
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570391 = newJObject()
  add(query_570391, "api-version", newJString(apiVersion))
  result = call_570390.call(nil, query_570391, nil, nil, nil)

var meshSecretList* = Call_MeshSecretList_570385(name: "meshSecretList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets", validator: validate_MeshSecretList_570386,
    base: "", url: url_MeshSecretList_570387, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretCreateOrUpdate_570401 = ref object of OpenApiRestCall_567668
proc url_MeshSecretCreateOrUpdate_570403(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretCreateOrUpdate_570402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570404 = path.getOrDefault("secretResourceName")
  valid_570404 = validateParameter(valid_570404, JString, required = true,
                                 default = nil)
  if valid_570404 != nil:
    section.add "secretResourceName", valid_570404
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570405 = query.getOrDefault("api-version")
  valid_570405 = validateParameter(valid_570405, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570405 != nil:
    section.add "api-version", valid_570405
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570407: Call_MeshSecretCreateOrUpdate_570401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  let valid = call_570407.validator(path, query, header, formData, body)
  let scheme = call_570407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570407.url(scheme.get, call_570407.host, call_570407.base,
                         call_570407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570407, url, valid)

proc call*(call_570408: Call_MeshSecretCreateOrUpdate_570401;
          secretResourceDescription: JsonNode; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretCreateOrUpdate
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570409 = newJObject()
  var query_570410 = newJObject()
  var body_570411 = newJObject()
  add(query_570410, "api-version", newJString(apiVersion))
  if secretResourceDescription != nil:
    body_570411 = secretResourceDescription
  add(path_570409, "secretResourceName", newJString(secretResourceName))
  result = call_570408.call(path_570409, query_570410, nil, nil, body_570411)

var meshSecretCreateOrUpdate* = Call_MeshSecretCreateOrUpdate_570401(
    name: "meshSecretCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretCreateOrUpdate_570402, base: "",
    url: url_MeshSecretCreateOrUpdate_570403, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretGet_570392 = ref object of OpenApiRestCall_567668
proc url_MeshSecretGet_570394(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretGet_570393(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570395 = path.getOrDefault("secretResourceName")
  valid_570395 = validateParameter(valid_570395, JString, required = true,
                                 default = nil)
  if valid_570395 != nil:
    section.add "secretResourceName", valid_570395
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570396 = query.getOrDefault("api-version")
  valid_570396 = validateParameter(valid_570396, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570396 != nil:
    section.add "api-version", valid_570396
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570397: Call_MeshSecretGet_570392; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  let valid = call_570397.validator(path, query, header, formData, body)
  let scheme = call_570397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570397.url(scheme.get, call_570397.host, call_570397.base,
                         call_570397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570397, url, valid)

proc call*(call_570398: Call_MeshSecretGet_570392; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretGet
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570399 = newJObject()
  var query_570400 = newJObject()
  add(query_570400, "api-version", newJString(apiVersion))
  add(path_570399, "secretResourceName", newJString(secretResourceName))
  result = call_570398.call(path_570399, query_570400, nil, nil, nil)

var meshSecretGet* = Call_MeshSecretGet_570392(name: "meshSecretGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretGet_570393, base: "", url: url_MeshSecretGet_570394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretDelete_570412 = ref object of OpenApiRestCall_567668
proc url_MeshSecretDelete_570414(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretDelete_570413(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570415 = path.getOrDefault("secretResourceName")
  valid_570415 = validateParameter(valid_570415, JString, required = true,
                                 default = nil)
  if valid_570415 != nil:
    section.add "secretResourceName", valid_570415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570416 = query.getOrDefault("api-version")
  valid_570416 = validateParameter(valid_570416, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570416 != nil:
    section.add "api-version", valid_570416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570417: Call_MeshSecretDelete_570412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  let valid = call_570417.validator(path, query, header, formData, body)
  let scheme = call_570417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570417.url(scheme.get, call_570417.host, call_570417.base,
                         call_570417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570417, url, valid)

proc call*(call_570418: Call_MeshSecretDelete_570412; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretDelete
  ## Deletes the specified Secret resource and all of its named values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570419 = newJObject()
  var query_570420 = newJObject()
  add(query_570420, "api-version", newJString(apiVersion))
  add(path_570419, "secretResourceName", newJString(secretResourceName))
  result = call_570418.call(path_570419, query_570420, nil, nil, nil)

var meshSecretDelete* = Call_MeshSecretDelete_570412(name: "meshSecretDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretDelete_570413, base: "",
    url: url_MeshSecretDelete_570414, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueList_570421 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueList_570423(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueList_570422(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_570424 = path.getOrDefault("secretResourceName")
  valid_570424 = validateParameter(valid_570424, JString, required = true,
                                 default = nil)
  if valid_570424 != nil:
    section.add "secretResourceName", valid_570424
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570425 = query.getOrDefault("api-version")
  valid_570425 = validateParameter(valid_570425, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570425 != nil:
    section.add "api-version", valid_570425
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570426: Call_MeshSecretValueList_570421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  let valid = call_570426.validator(path, query, header, formData, body)
  let scheme = call_570426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570426.url(scheme.get, call_570426.host, call_570426.base,
                         call_570426.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570426, url, valid)

proc call*(call_570427: Call_MeshSecretValueList_570421;
          secretResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueList
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570428 = newJObject()
  var query_570429 = newJObject()
  add(query_570429, "api-version", newJString(apiVersion))
  add(path_570428, "secretResourceName", newJString(secretResourceName))
  result = call_570427.call(path_570428, query_570429, nil, nil, nil)

var meshSecretValueList* = Call_MeshSecretValueList_570421(
    name: "meshSecretValueList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}/values",
    validator: validate_MeshSecretValueList_570422, base: "",
    url: url_MeshSecretValueList_570423, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueAddValue_570440 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueAddValue_570442(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueAddValue_570441(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570443 = path.getOrDefault("secretValueResourceName")
  valid_570443 = validateParameter(valid_570443, JString, required = true,
                                 default = nil)
  if valid_570443 != nil:
    section.add "secretValueResourceName", valid_570443
  var valid_570444 = path.getOrDefault("secretResourceName")
  valid_570444 = validateParameter(valid_570444, JString, required = true,
                                 default = nil)
  if valid_570444 != nil:
    section.add "secretResourceName", valid_570444
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570445 = query.getOrDefault("api-version")
  valid_570445 = validateParameter(valid_570445, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570445 != nil:
    section.add "api-version", valid_570445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570447: Call_MeshSecretValueAddValue_570440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  let valid = call_570447.validator(path, query, header, formData, body)
  let scheme = call_570447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570447.url(scheme.get, call_570447.host, call_570447.base,
                         call_570447.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570447, url, valid)

proc call*(call_570448: Call_MeshSecretValueAddValue_570440;
          secretValueResourceName: string; secretResourceName: string;
          secretValueResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueAddValue
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  var path_570449 = newJObject()
  var query_570450 = newJObject()
  var body_570451 = newJObject()
  add(query_570450, "api-version", newJString(apiVersion))
  add(path_570449, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570449, "secretResourceName", newJString(secretResourceName))
  if secretValueResourceDescription != nil:
    body_570451 = secretValueResourceDescription
  result = call_570448.call(path_570449, query_570450, nil, nil, body_570451)

var meshSecretValueAddValue* = Call_MeshSecretValueAddValue_570440(
    name: "meshSecretValueAddValue", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueAddValue_570441, base: "",
    url: url_MeshSecretValueAddValue_570442, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueGet_570430 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueGet_570432(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueGet_570431(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570433 = path.getOrDefault("secretValueResourceName")
  valid_570433 = validateParameter(valid_570433, JString, required = true,
                                 default = nil)
  if valid_570433 != nil:
    section.add "secretValueResourceName", valid_570433
  var valid_570434 = path.getOrDefault("secretResourceName")
  valid_570434 = validateParameter(valid_570434, JString, required = true,
                                 default = nil)
  if valid_570434 != nil:
    section.add "secretResourceName", valid_570434
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570435 = query.getOrDefault("api-version")
  valid_570435 = validateParameter(valid_570435, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570435 != nil:
    section.add "api-version", valid_570435
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570436: Call_MeshSecretValueGet_570430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  let valid = call_570436.validator(path, query, header, formData, body)
  let scheme = call_570436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570436.url(scheme.get, call_570436.host, call_570436.base,
                         call_570436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570436, url, valid)

proc call*(call_570437: Call_MeshSecretValueGet_570430;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueGet
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570438 = newJObject()
  var query_570439 = newJObject()
  add(query_570439, "api-version", newJString(apiVersion))
  add(path_570438, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570438, "secretResourceName", newJString(secretResourceName))
  result = call_570437.call(path_570438, query_570439, nil, nil, nil)

var meshSecretValueGet* = Call_MeshSecretValueGet_570430(
    name: "meshSecretValueGet", meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueGet_570431, base: "",
    url: url_MeshSecretValueGet_570432, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueDelete_570452 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueDelete_570454(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueDelete_570453(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570455 = path.getOrDefault("secretValueResourceName")
  valid_570455 = validateParameter(valid_570455, JString, required = true,
                                 default = nil)
  if valid_570455 != nil:
    section.add "secretValueResourceName", valid_570455
  var valid_570456 = path.getOrDefault("secretResourceName")
  valid_570456 = validateParameter(valid_570456, JString, required = true,
                                 default = nil)
  if valid_570456 != nil:
    section.add "secretResourceName", valid_570456
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570457 = query.getOrDefault("api-version")
  valid_570457 = validateParameter(valid_570457, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570457 != nil:
    section.add "api-version", valid_570457
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570458: Call_MeshSecretValueDelete_570452; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  let valid = call_570458.validator(path, query, header, formData, body)
  let scheme = call_570458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570458.url(scheme.get, call_570458.host, call_570458.base,
                         call_570458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570458, url, valid)

proc call*(call_570459: Call_MeshSecretValueDelete_570452;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueDelete
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570460 = newJObject()
  var query_570461 = newJObject()
  add(query_570461, "api-version", newJString(apiVersion))
  add(path_570460, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570460, "secretResourceName", newJString(secretResourceName))
  result = call_570459.call(path_570460, query_570461, nil, nil, nil)

var meshSecretValueDelete* = Call_MeshSecretValueDelete_570452(
    name: "meshSecretValueDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueDelete_570453, base: "",
    url: url_MeshSecretValueDelete_570454, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueShow_570462 = ref object of OpenApiRestCall_567668
proc url_MeshSecretValueShow_570464(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName"),
               (kind: ConstantSegment, value: "/list_value")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueShow_570463(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `secretValueResourceName` field"
  var valid_570465 = path.getOrDefault("secretValueResourceName")
  valid_570465 = validateParameter(valid_570465, JString, required = true,
                                 default = nil)
  if valid_570465 != nil:
    section.add "secretValueResourceName", valid_570465
  var valid_570466 = path.getOrDefault("secretResourceName")
  valid_570466 = validateParameter(valid_570466, JString, required = true,
                                 default = nil)
  if valid_570466 != nil:
    section.add "secretResourceName", valid_570466
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570467 = query.getOrDefault("api-version")
  valid_570467 = validateParameter(valid_570467, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570467 != nil:
    section.add "api-version", valid_570467
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570468: Call_MeshSecretValueShow_570462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  let valid = call_570468.validator(path, query, header, formData, body)
  let scheme = call_570468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570468.url(scheme.get, call_570468.host, call_570468.base,
                         call_570468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570468, url, valid)

proc call*(call_570469: Call_MeshSecretValueShow_570462;
          secretValueResourceName: string; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueShow
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_570470 = newJObject()
  var query_570471 = newJObject()
  add(query_570471, "api-version", newJString(apiVersion))
  add(path_570470, "secretValueResourceName", newJString(secretValueResourceName))
  add(path_570470, "secretResourceName", newJString(secretResourceName))
  result = call_570469.call(path_570470, query_570471, nil, nil, nil)

var meshSecretValueShow* = Call_MeshSecretValueShow_570462(
    name: "meshSecretValueShow", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value",
    validator: validate_MeshSecretValueShow_570463, base: "",
    url: url_MeshSecretValueShow_570464, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeList_570472 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeList_570474(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshVolumeList_570473(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570475 = query.getOrDefault("api-version")
  valid_570475 = validateParameter(valid_570475, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570475 != nil:
    section.add "api-version", valid_570475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570476: Call_MeshVolumeList_570472; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  let valid = call_570476.validator(path, query, header, formData, body)
  let scheme = call_570476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570476.url(scheme.get, call_570476.host, call_570476.base,
                         call_570476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570476, url, valid)

proc call*(call_570477: Call_MeshVolumeList_570472;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeList
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_570478 = newJObject()
  add(query_570478, "api-version", newJString(apiVersion))
  result = call_570477.call(nil, query_570478, nil, nil, nil)

var meshVolumeList* = Call_MeshVolumeList_570472(name: "meshVolumeList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes", validator: validate_MeshVolumeList_570473,
    base: "", url: url_MeshVolumeList_570474, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeCreateOrUpdate_570488 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeCreateOrUpdate_570490(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeCreateOrUpdate_570489(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_570491 = path.getOrDefault("volumeResourceName")
  valid_570491 = validateParameter(valid_570491, JString, required = true,
                                 default = nil)
  if valid_570491 != nil:
    section.add "volumeResourceName", valid_570491
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570492 = query.getOrDefault("api-version")
  valid_570492 = validateParameter(valid_570492, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570492 != nil:
    section.add "api-version", valid_570492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570494: Call_MeshVolumeCreateOrUpdate_570488; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_570494.validator(path, query, header, formData, body)
  let scheme = call_570494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570494.url(scheme.get, call_570494.host, call_570494.base,
                         call_570494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570494, url, valid)

proc call*(call_570495: Call_MeshVolumeCreateOrUpdate_570488;
          volumeResourceName: string; volumeResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeCreateOrUpdate
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  var path_570496 = newJObject()
  var query_570497 = newJObject()
  var body_570498 = newJObject()
  add(query_570497, "api-version", newJString(apiVersion))
  add(path_570496, "volumeResourceName", newJString(volumeResourceName))
  if volumeResourceDescription != nil:
    body_570498 = volumeResourceDescription
  result = call_570495.call(path_570496, query_570497, nil, nil, body_570498)

var meshVolumeCreateOrUpdate* = Call_MeshVolumeCreateOrUpdate_570488(
    name: "meshVolumeCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeCreateOrUpdate_570489, base: "",
    url: url_MeshVolumeCreateOrUpdate_570490, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeGet_570479 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeGet_570481(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeGet_570480(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_570482 = path.getOrDefault("volumeResourceName")
  valid_570482 = validateParameter(valid_570482, JString, required = true,
                                 default = nil)
  if valid_570482 != nil:
    section.add "volumeResourceName", valid_570482
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570483 = query.getOrDefault("api-version")
  valid_570483 = validateParameter(valid_570483, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570483 != nil:
    section.add "api-version", valid_570483
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570484: Call_MeshVolumeGet_570479; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  let valid = call_570484.validator(path, query, header, formData, body)
  let scheme = call_570484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570484.url(scheme.get, call_570484.host, call_570484.base,
                         call_570484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570484, url, valid)

proc call*(call_570485: Call_MeshVolumeGet_570479; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeGet
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_570486 = newJObject()
  var query_570487 = newJObject()
  add(query_570487, "api-version", newJString(apiVersion))
  add(path_570486, "volumeResourceName", newJString(volumeResourceName))
  result = call_570485.call(path_570486, query_570487, nil, nil, nil)

var meshVolumeGet* = Call_MeshVolumeGet_570479(name: "meshVolumeGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeGet_570480, base: "", url: url_MeshVolumeGet_570481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeDelete_570499 = ref object of OpenApiRestCall_567668
proc url_MeshVolumeDelete_570501(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeDelete_570500(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the Volume resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_570502 = path.getOrDefault("volumeResourceName")
  valid_570502 = validateParameter(valid_570502, JString, required = true,
                                 default = nil)
  if valid_570502 != nil:
    section.add "volumeResourceName", valid_570502
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570503 = query.getOrDefault("api-version")
  valid_570503 = validateParameter(valid_570503, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_570503 != nil:
    section.add "api-version", valid_570503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570504: Call_MeshVolumeDelete_570499; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Volume resource identified by the name.
  ## 
  let valid = call_570504.validator(path, query, header, formData, body)
  let scheme = call_570504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570504.url(scheme.get, call_570504.host, call_570504.base,
                         call_570504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570504, url, valid)

proc call*(call_570505: Call_MeshVolumeDelete_570499; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeDelete
  ## Deletes the Volume resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_570506 = newJObject()
  var query_570507 = newJObject()
  add(query_570507, "api-version", newJString(apiVersion))
  add(path_570506, "volumeResourceName", newJString(volumeResourceName))
  result = call_570505.call(path_570506, query_570507, nil, nil, nil)

var meshVolumeDelete* = Call_MeshVolumeDelete_570499(name: "meshVolumeDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeDelete_570500, base: "",
    url: url_MeshVolumeDelete_570501, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverServicePartitions_570508 = ref object of OpenApiRestCall_567668
proc url_RecoverServicePartitions_570510(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/$/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverServicePartitions_570509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570511 = path.getOrDefault("serviceId")
  valid_570511 = validateParameter(valid_570511, JString, required = true,
                                 default = nil)
  if valid_570511 != nil:
    section.add "serviceId", valid_570511
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570512 = query.getOrDefault("timeout")
  valid_570512 = validateParameter(valid_570512, JInt, required = false,
                                 default = newJInt(60))
  if valid_570512 != nil:
    section.add "timeout", valid_570512
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570513 = query.getOrDefault("api-version")
  valid_570513 = validateParameter(valid_570513, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570513 != nil:
    section.add "api-version", valid_570513
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570514: Call_RecoverServicePartitions_570508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_570514.validator(path, query, header, formData, body)
  let scheme = call_570514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570514.url(scheme.get, call_570514.host, call_570514.base,
                         call_570514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570514, url, valid)

proc call*(call_570515: Call_RecoverServicePartitions_570508; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## recoverServicePartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570516 = newJObject()
  var query_570517 = newJObject()
  add(query_570517, "timeout", newJInt(timeout))
  add(query_570517, "api-version", newJString(apiVersion))
  add(path_570516, "serviceId", newJString(serviceId))
  result = call_570515.call(path_570516, query_570517, nil, nil, nil)

var recoverServicePartitions* = Call_RecoverServicePartitions_570508(
    name: "recoverServicePartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Services/$/{serviceId}/$/GetPartitions/$/Recover",
    validator: validate_RecoverServicePartitions_570509, base: "",
    url: url_RecoverServicePartitions_570510, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteService_570518 = ref object of OpenApiRestCall_567668
proc url_DeleteService_570520(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteService_570519(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570521 = path.getOrDefault("serviceId")
  valid_570521 = validateParameter(valid_570521, JString, required = true,
                                 default = nil)
  if valid_570521 != nil:
    section.add "serviceId", valid_570521
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  var valid_570522 = query.getOrDefault("timeout")
  valid_570522 = validateParameter(valid_570522, JInt, required = false,
                                 default = newJInt(60))
  if valid_570522 != nil:
    section.add "timeout", valid_570522
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570523 = query.getOrDefault("api-version")
  valid_570523 = validateParameter(valid_570523, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570523 != nil:
    section.add "api-version", valid_570523
  var valid_570524 = query.getOrDefault("ForceRemove")
  valid_570524 = validateParameter(valid_570524, JBool, required = false, default = nil)
  if valid_570524 != nil:
    section.add "ForceRemove", valid_570524
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570525: Call_DeleteService_570518; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  let valid = call_570525.validator(path, query, header, formData, body)
  let scheme = call_570525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570525.url(scheme.get, call_570525.host, call_570525.base,
                         call_570525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570525, url, valid)

proc call*(call_570526: Call_DeleteService_570518; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"; ForceRemove: bool = false): Recallable =
  ## deleteService
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570527 = newJObject()
  var query_570528 = newJObject()
  add(query_570528, "timeout", newJInt(timeout))
  add(query_570528, "api-version", newJString(apiVersion))
  add(query_570528, "ForceRemove", newJBool(ForceRemove))
  add(path_570527, "serviceId", newJString(serviceId))
  result = call_570526.call(path_570527, query_570528, nil, nil, nil)

var deleteService* = Call_DeleteService_570518(name: "deleteService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Delete", validator: validate_DeleteService_570519,
    base: "", url: url_DeleteService_570520, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableServiceBackup_570529 = ref object of OpenApiRestCall_567668
proc url_DisableServiceBackup_570531(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableServiceBackup_570530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570532 = path.getOrDefault("serviceId")
  valid_570532 = validateParameter(valid_570532, JString, required = true,
                                 default = nil)
  if valid_570532 != nil:
    section.add "serviceId", valid_570532
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570533 = query.getOrDefault("timeout")
  valid_570533 = validateParameter(valid_570533, JInt, required = false,
                                 default = newJInt(60))
  if valid_570533 != nil:
    section.add "timeout", valid_570533
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570534 = query.getOrDefault("api-version")
  valid_570534 = validateParameter(valid_570534, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570534 != nil:
    section.add "api-version", valid_570534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570536: Call_DisableServiceBackup_570529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  let valid = call_570536.validator(path, query, header, formData, body)
  let scheme = call_570536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570536.url(scheme.get, call_570536.host, call_570536.base,
                         call_570536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570536, url, valid)

proc call*(call_570537: Call_DisableServiceBackup_570529; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil): Recallable =
  ## disableServiceBackup
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570538 = newJObject()
  var query_570539 = newJObject()
  var body_570540 = newJObject()
  add(query_570539, "timeout", newJInt(timeout))
  add(query_570539, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_570540 = DisableBackupDescription
  add(path_570538, "serviceId", newJString(serviceId))
  result = call_570537.call(path_570538, query_570539, nil, nil, body_570540)

var disableServiceBackup* = Call_DisableServiceBackup_570529(
    name: "disableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/DisableBackup",
    validator: validate_DisableServiceBackup_570530, base: "",
    url: url_DisableServiceBackup_570531, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableServiceBackup_570541 = ref object of OpenApiRestCall_567668
proc url_EnableServiceBackup_570543(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableServiceBackup_570542(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570544 = path.getOrDefault("serviceId")
  valid_570544 = validateParameter(valid_570544, JString, required = true,
                                 default = nil)
  if valid_570544 != nil:
    section.add "serviceId", valid_570544
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570545 = query.getOrDefault("timeout")
  valid_570545 = validateParameter(valid_570545, JInt, required = false,
                                 default = newJInt(60))
  if valid_570545 != nil:
    section.add "timeout", valid_570545
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570546 = query.getOrDefault("api-version")
  valid_570546 = validateParameter(valid_570546, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570546 != nil:
    section.add "api-version", valid_570546
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570548: Call_EnableServiceBackup_570541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_570548.validator(path, query, header, formData, body)
  let scheme = call_570548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570548.url(scheme.get, call_570548.host, call_570548.base,
                         call_570548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570548, url, valid)

proc call*(call_570549: Call_EnableServiceBackup_570541;
          EnableBackupDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.4"): Recallable =
  ## enableServiceBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570550 = newJObject()
  var query_570551 = newJObject()
  var body_570552 = newJObject()
  add(query_570551, "timeout", newJInt(timeout))
  add(query_570551, "api-version", newJString(apiVersion))
  if EnableBackupDescription != nil:
    body_570552 = EnableBackupDescription
  add(path_570550, "serviceId", newJString(serviceId))
  result = call_570549.call(path_570550, query_570551, nil, nil, body_570552)

var enableServiceBackup* = Call_EnableServiceBackup_570541(
    name: "enableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/EnableBackup",
    validator: validate_EnableServiceBackup_570542, base: "",
    url: url_EnableServiceBackup_570543, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationNameInfo_570553 = ref object of OpenApiRestCall_567668
proc url_GetApplicationNameInfo_570555(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetApplicationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationNameInfo_570554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570556 = path.getOrDefault("serviceId")
  valid_570556 = validateParameter(valid_570556, JString, required = true,
                                 default = nil)
  if valid_570556 != nil:
    section.add "serviceId", valid_570556
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570557 = query.getOrDefault("timeout")
  valid_570557 = validateParameter(valid_570557, JInt, required = false,
                                 default = newJInt(60))
  if valid_570557 != nil:
    section.add "timeout", valid_570557
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570558 = query.getOrDefault("api-version")
  valid_570558 = validateParameter(valid_570558, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570558 != nil:
    section.add "api-version", valid_570558
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570559: Call_GetApplicationNameInfo_570553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  let valid = call_570559.validator(path, query, header, formData, body)
  let scheme = call_570559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570559.url(scheme.get, call_570559.host, call_570559.base,
                         call_570559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570559, url, valid)

proc call*(call_570560: Call_GetApplicationNameInfo_570553; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getApplicationNameInfo
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570561 = newJObject()
  var query_570562 = newJObject()
  add(query_570562, "timeout", newJInt(timeout))
  add(query_570562, "api-version", newJString(apiVersion))
  add(path_570561, "serviceId", newJString(serviceId))
  result = call_570560.call(path_570561, query_570562, nil, nil, nil)

var getApplicationNameInfo* = Call_GetApplicationNameInfo_570553(
    name: "getApplicationNameInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetApplicationName",
    validator: validate_GetApplicationNameInfo_570554, base: "",
    url: url_GetApplicationNameInfo_570555, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupConfigurationInfo_570563 = ref object of OpenApiRestCall_567668
proc url_GetServiceBackupConfigurationInfo_570565(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupConfigurationInfo_570564(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570566 = path.getOrDefault("serviceId")
  valid_570566 = validateParameter(valid_570566, JString, required = true,
                                 default = nil)
  if valid_570566 != nil:
    section.add "serviceId", valid_570566
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_570567 = query.getOrDefault("timeout")
  valid_570567 = validateParameter(valid_570567, JInt, required = false,
                                 default = newJInt(60))
  if valid_570567 != nil:
    section.add "timeout", valid_570567
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570568 = query.getOrDefault("api-version")
  valid_570568 = validateParameter(valid_570568, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570568 != nil:
    section.add "api-version", valid_570568
  var valid_570569 = query.getOrDefault("ContinuationToken")
  valid_570569 = validateParameter(valid_570569, JString, required = false,
                                 default = nil)
  if valid_570569 != nil:
    section.add "ContinuationToken", valid_570569
  var valid_570570 = query.getOrDefault("MaxResults")
  valid_570570 = validateParameter(valid_570570, JInt, required = false,
                                 default = newJInt(0))
  if valid_570570 != nil:
    section.add "MaxResults", valid_570570
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570571: Call_GetServiceBackupConfigurationInfo_570563;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  let valid = call_570571.validator(path, query, header, formData, body)
  let scheme = call_570571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570571.url(scheme.get, call_570571.host, call_570571.base,
                         call_570571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570571, url, valid)

proc call*(call_570572: Call_GetServiceBackupConfigurationInfo_570563;
          serviceId: string; timeout: int = 60; apiVersion: string = "6.4";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_570573 = newJObject()
  var query_570574 = newJObject()
  add(query_570574, "timeout", newJInt(timeout))
  add(query_570574, "api-version", newJString(apiVersion))
  add(path_570573, "serviceId", newJString(serviceId))
  add(query_570574, "ContinuationToken", newJString(ContinuationToken))
  add(query_570574, "MaxResults", newJInt(MaxResults))
  result = call_570572.call(path_570573, query_570574, nil, nil, nil)

var getServiceBackupConfigurationInfo* = Call_GetServiceBackupConfigurationInfo_570563(
    name: "getServiceBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetBackupConfigurationInfo",
    validator: validate_GetServiceBackupConfigurationInfo_570564, base: "",
    url: url_GetServiceBackupConfigurationInfo_570565,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupList_570575 = ref object of OpenApiRestCall_567668
proc url_GetServiceBackupList_570577(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupList_570576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570578 = path.getOrDefault("serviceId")
  valid_570578 = validateParameter(valid_570578, JString, required = true,
                                 default = nil)
  if valid_570578 != nil:
    section.add "serviceId", valid_570578
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  section = newJObject()
  var valid_570579 = query.getOrDefault("timeout")
  valid_570579 = validateParameter(valid_570579, JInt, required = false,
                                 default = newJInt(60))
  if valid_570579 != nil:
    section.add "timeout", valid_570579
  var valid_570580 = query.getOrDefault("Latest")
  valid_570580 = validateParameter(valid_570580, JBool, required = false,
                                 default = newJBool(false))
  if valid_570580 != nil:
    section.add "Latest", valid_570580
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570581 = query.getOrDefault("api-version")
  valid_570581 = validateParameter(valid_570581, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570581 != nil:
    section.add "api-version", valid_570581
  var valid_570582 = query.getOrDefault("StartDateTimeFilter")
  valid_570582 = validateParameter(valid_570582, JString, required = false,
                                 default = nil)
  if valid_570582 != nil:
    section.add "StartDateTimeFilter", valid_570582
  var valid_570583 = query.getOrDefault("EndDateTimeFilter")
  valid_570583 = validateParameter(valid_570583, JString, required = false,
                                 default = nil)
  if valid_570583 != nil:
    section.add "EndDateTimeFilter", valid_570583
  var valid_570584 = query.getOrDefault("ContinuationToken")
  valid_570584 = validateParameter(valid_570584, JString, required = false,
                                 default = nil)
  if valid_570584 != nil:
    section.add "ContinuationToken", valid_570584
  var valid_570585 = query.getOrDefault("MaxResults")
  valid_570585 = validateParameter(valid_570585, JInt, required = false,
                                 default = newJInt(0))
  if valid_570585 != nil:
    section.add "MaxResults", valid_570585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570586: Call_GetServiceBackupList_570575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_570586.validator(path, query, header, formData, body)
  let scheme = call_570586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570586.url(scheme.get, call_570586.host, call_570586.base,
                         call_570586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570586, url, valid)

proc call*(call_570587: Call_GetServiceBackupList_570575; serviceId: string;
          timeout: int = 60; Latest: bool = false; apiVersion: string = "6.4";
          StartDateTimeFilter: string = ""; EndDateTimeFilter: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0): Recallable =
  ## getServiceBackupList
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  var path_570588 = newJObject()
  var query_570589 = newJObject()
  add(query_570589, "timeout", newJInt(timeout))
  add(query_570589, "Latest", newJBool(Latest))
  add(query_570589, "api-version", newJString(apiVersion))
  add(query_570589, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_570589, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_570588, "serviceId", newJString(serviceId))
  add(query_570589, "ContinuationToken", newJString(ContinuationToken))
  add(query_570589, "MaxResults", newJInt(MaxResults))
  result = call_570587.call(path_570588, query_570589, nil, nil, nil)

var getServiceBackupList* = Call_GetServiceBackupList_570575(
    name: "getServiceBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetBackups",
    validator: validate_GetServiceBackupList_570576, base: "",
    url: url_GetServiceBackupList_570577, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceDescription_570590 = ref object of OpenApiRestCall_567668
proc url_GetServiceDescription_570592(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetDescription")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceDescription_570591(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570593 = path.getOrDefault("serviceId")
  valid_570593 = validateParameter(valid_570593, JString, required = true,
                                 default = nil)
  if valid_570593 != nil:
    section.add "serviceId", valid_570593
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570594 = query.getOrDefault("timeout")
  valid_570594 = validateParameter(valid_570594, JInt, required = false,
                                 default = newJInt(60))
  if valid_570594 != nil:
    section.add "timeout", valid_570594
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570595 = query.getOrDefault("api-version")
  valid_570595 = validateParameter(valid_570595, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570595 != nil:
    section.add "api-version", valid_570595
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570596: Call_GetServiceDescription_570590; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  let valid = call_570596.validator(path, query, header, formData, body)
  let scheme = call_570596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570596.url(scheme.get, call_570596.host, call_570596.base,
                         call_570596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570596, url, valid)

proc call*(call_570597: Call_GetServiceDescription_570590; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## getServiceDescription
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570598 = newJObject()
  var query_570599 = newJObject()
  add(query_570599, "timeout", newJInt(timeout))
  add(query_570599, "api-version", newJString(apiVersion))
  add(path_570598, "serviceId", newJString(serviceId))
  result = call_570597.call(path_570598, query_570599, nil, nil, nil)

var getServiceDescription* = Call_GetServiceDescription_570590(
    name: "getServiceDescription", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetDescription",
    validator: validate_GetServiceDescription_570591, base: "",
    url: url_GetServiceDescription_570592, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealthUsingPolicy_570613 = ref object of OpenApiRestCall_567668
proc url_GetServiceHealthUsingPolicy_570615(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealthUsingPolicy_570614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570616 = path.getOrDefault("serviceId")
  valid_570616 = validateParameter(valid_570616, JString, required = true,
                                 default = nil)
  if valid_570616 != nil:
    section.add "serviceId", valid_570616
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570617 = query.getOrDefault("timeout")
  valid_570617 = validateParameter(valid_570617, JInt, required = false,
                                 default = newJInt(60))
  if valid_570617 != nil:
    section.add "timeout", valid_570617
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570618 = query.getOrDefault("api-version")
  valid_570618 = validateParameter(valid_570618, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570618 != nil:
    section.add "api-version", valid_570618
  var valid_570619 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570619 = validateParameter(valid_570619, JBool, required = false,
                                 default = newJBool(false))
  if valid_570619 != nil:
    section.add "ExcludeHealthStatistics", valid_570619
  var valid_570620 = query.getOrDefault("EventsHealthStateFilter")
  valid_570620 = validateParameter(valid_570620, JInt, required = false,
                                 default = newJInt(0))
  if valid_570620 != nil:
    section.add "EventsHealthStateFilter", valid_570620
  var valid_570621 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_570621 = validateParameter(valid_570621, JInt, required = false,
                                 default = newJInt(0))
  if valid_570621 != nil:
    section.add "PartitionsHealthStateFilter", valid_570621
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570623: Call_GetServiceHealthUsingPolicy_570613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570623.validator(path, query, header, formData, body)
  let scheme = call_570623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570623.url(scheme.get, call_570623.host, call_570623.base,
                         call_570623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570623, url, valid)

proc call*(call_570624: Call_GetServiceHealthUsingPolicy_570613; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ApplicationHealthPolicy: JsonNode = nil;
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealthUsingPolicy
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_570625 = newJObject()
  var query_570626 = newJObject()
  var body_570627 = newJObject()
  add(query_570626, "timeout", newJInt(timeout))
  add(query_570626, "api-version", newJString(apiVersion))
  if ApplicationHealthPolicy != nil:
    body_570627 = ApplicationHealthPolicy
  add(query_570626, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570626, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570625, "serviceId", newJString(serviceId))
  add(query_570626, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_570624.call(path_570625, query_570626, nil, nil, body_570627)

var getServiceHealthUsingPolicy* = Call_GetServiceHealthUsingPolicy_570613(
    name: "getServiceHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealthUsingPolicy_570614, base: "",
    url: url_GetServiceHealthUsingPolicy_570615,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealth_570600 = ref object of OpenApiRestCall_567668
proc url_GetServiceHealth_570602(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealth_570601(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570603 = path.getOrDefault("serviceId")
  valid_570603 = validateParameter(valid_570603, JString, required = true,
                                 default = nil)
  if valid_570603 != nil:
    section.add "serviceId", valid_570603
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_570604 = query.getOrDefault("timeout")
  valid_570604 = validateParameter(valid_570604, JInt, required = false,
                                 default = newJInt(60))
  if valid_570604 != nil:
    section.add "timeout", valid_570604
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570605 = query.getOrDefault("api-version")
  valid_570605 = validateParameter(valid_570605, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570605 != nil:
    section.add "api-version", valid_570605
  var valid_570606 = query.getOrDefault("ExcludeHealthStatistics")
  valid_570606 = validateParameter(valid_570606, JBool, required = false,
                                 default = newJBool(false))
  if valid_570606 != nil:
    section.add "ExcludeHealthStatistics", valid_570606
  var valid_570607 = query.getOrDefault("EventsHealthStateFilter")
  valid_570607 = validateParameter(valid_570607, JInt, required = false,
                                 default = newJInt(0))
  if valid_570607 != nil:
    section.add "EventsHealthStateFilter", valid_570607
  var valid_570608 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_570608 = validateParameter(valid_570608, JInt, required = false,
                                 default = newJInt(0))
  if valid_570608 != nil:
    section.add "PartitionsHealthStateFilter", valid_570608
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570609: Call_GetServiceHealth_570600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_570609.validator(path, query, header, formData, body)
  let scheme = call_570609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570609.url(scheme.get, call_570609.host, call_570609.base,
                         call_570609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570609, url, valid)

proc call*(call_570610: Call_GetServiceHealth_570600; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.0";
          ExcludeHealthStatistics: bool = false; EventsHealthStateFilter: int = 0;
          PartitionsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealth
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_570611 = newJObject()
  var query_570612 = newJObject()
  add(query_570612, "timeout", newJInt(timeout))
  add(query_570612, "api-version", newJString(apiVersion))
  add(query_570612, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_570612, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_570611, "serviceId", newJString(serviceId))
  add(query_570612, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  result = call_570610.call(path_570611, query_570612, nil, nil, nil)

var getServiceHealth* = Call_GetServiceHealth_570600(name: "getServiceHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealth_570601, base: "",
    url: url_GetServiceHealth_570602, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfoList_570628 = ref object of OpenApiRestCall_567668
proc url_GetPartitionInfoList_570630(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfoList_570629(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570631 = path.getOrDefault("serviceId")
  valid_570631 = validateParameter(valid_570631, JString, required = true,
                                 default = nil)
  if valid_570631 != nil:
    section.add "serviceId", valid_570631
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  section = newJObject()
  var valid_570632 = query.getOrDefault("timeout")
  valid_570632 = validateParameter(valid_570632, JInt, required = false,
                                 default = newJInt(60))
  if valid_570632 != nil:
    section.add "timeout", valid_570632
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570633 = query.getOrDefault("api-version")
  valid_570633 = validateParameter(valid_570633, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570633 != nil:
    section.add "api-version", valid_570633
  var valid_570634 = query.getOrDefault("ContinuationToken")
  valid_570634 = validateParameter(valid_570634, JString, required = false,
                                 default = nil)
  if valid_570634 != nil:
    section.add "ContinuationToken", valid_570634
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570635: Call_GetPartitionInfoList_570628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_570635.validator(path, query, header, formData, body)
  let scheme = call_570635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570635.url(scheme.get, call_570635.host, call_570635.base,
                         call_570635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570635, url, valid)

proc call*(call_570636: Call_GetPartitionInfoList_570628; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"; ContinuationToken: string = ""): Recallable =
  ## getPartitionInfoList
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  var path_570637 = newJObject()
  var query_570638 = newJObject()
  add(query_570638, "timeout", newJInt(timeout))
  add(query_570638, "api-version", newJString(apiVersion))
  add(path_570637, "serviceId", newJString(serviceId))
  add(query_570638, "ContinuationToken", newJString(ContinuationToken))
  result = call_570636.call(path_570637, query_570638, nil, nil, nil)

var getPartitionInfoList* = Call_GetPartitionInfoList_570628(
    name: "getPartitionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetPartitions",
    validator: validate_GetPartitionInfoList_570629, base: "",
    url: url_GetPartitionInfoList_570630, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportServiceHealth_570639 = ref object of OpenApiRestCall_567668
proc url_ReportServiceHealth_570641(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportServiceHealth_570640(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570642 = path.getOrDefault("serviceId")
  valid_570642 = validateParameter(valid_570642, JString, required = true,
                                 default = nil)
  if valid_570642 != nil:
    section.add "serviceId", valid_570642
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570643 = query.getOrDefault("Immediate")
  valid_570643 = validateParameter(valid_570643, JBool, required = false,
                                 default = newJBool(false))
  if valid_570643 != nil:
    section.add "Immediate", valid_570643
  var valid_570644 = query.getOrDefault("timeout")
  valid_570644 = validateParameter(valid_570644, JInt, required = false,
                                 default = newJInt(60))
  if valid_570644 != nil:
    section.add "timeout", valid_570644
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570645 = query.getOrDefault("api-version")
  valid_570645 = validateParameter(valid_570645, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570645 != nil:
    section.add "api-version", valid_570645
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570647: Call_ReportServiceHealth_570639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_570647.validator(path, query, header, formData, body)
  let scheme = call_570647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570647.url(scheme.get, call_570647.host, call_570647.base,
                         call_570647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570647, url, valid)

proc call*(call_570648: Call_ReportServiceHealth_570639;
          HealthInformation: JsonNode; serviceId: string; Immediate: bool = false;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## reportServiceHealth
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570649 = newJObject()
  var query_570650 = newJObject()
  var body_570651 = newJObject()
  add(query_570650, "Immediate", newJBool(Immediate))
  add(query_570650, "timeout", newJInt(timeout))
  add(query_570650, "api-version", newJString(apiVersion))
  if HealthInformation != nil:
    body_570651 = HealthInformation
  add(path_570649, "serviceId", newJString(serviceId))
  result = call_570648.call(path_570649, query_570650, nil, nil, body_570651)

var reportServiceHealth* = Call_ReportServiceHealth_570639(
    name: "reportServiceHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ReportHealth",
    validator: validate_ReportServiceHealth_570640, base: "",
    url: url_ReportServiceHealth_570641, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResolveService_570652 = ref object of OpenApiRestCall_567668
proc url_ResolveService_570654(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResolvePartition")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResolveService_570653(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570655 = path.getOrDefault("serviceId")
  valid_570655 = validateParameter(valid_570655, JString, required = true,
                                 default = nil)
  if valid_570655 != nil:
    section.add "serviceId", valid_570655
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: JString
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: JInt
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   PreviousRspVersion: JString
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  section = newJObject()
  var valid_570656 = query.getOrDefault("timeout")
  valid_570656 = validateParameter(valid_570656, JInt, required = false,
                                 default = newJInt(60))
  if valid_570656 != nil:
    section.add "timeout", valid_570656
  var valid_570657 = query.getOrDefault("PartitionKeyValue")
  valid_570657 = validateParameter(valid_570657, JString, required = false,
                                 default = nil)
  if valid_570657 != nil:
    section.add "PartitionKeyValue", valid_570657
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570658 = query.getOrDefault("api-version")
  valid_570658 = validateParameter(valid_570658, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570658 != nil:
    section.add "api-version", valid_570658
  var valid_570659 = query.getOrDefault("PartitionKeyType")
  valid_570659 = validateParameter(valid_570659, JInt, required = false, default = nil)
  if valid_570659 != nil:
    section.add "PartitionKeyType", valid_570659
  var valid_570660 = query.getOrDefault("PreviousRspVersion")
  valid_570660 = validateParameter(valid_570660, JString, required = false,
                                 default = nil)
  if valid_570660 != nil:
    section.add "PreviousRspVersion", valid_570660
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570661: Call_ResolveService_570652; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  let valid = call_570661.validator(path, query, header, formData, body)
  let scheme = call_570661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570661.url(scheme.get, call_570661.host, call_570661.base,
                         call_570661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570661, url, valid)

proc call*(call_570662: Call_ResolveService_570652; serviceId: string;
          timeout: int = 60; PartitionKeyValue: string = ""; apiVersion: string = "6.0";
          PartitionKeyType: int = 0; PreviousRspVersion: string = ""): Recallable =
  ## resolveService
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyValue: string
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyType: int
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PreviousRspVersion: string
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  var path_570663 = newJObject()
  var query_570664 = newJObject()
  add(query_570664, "timeout", newJInt(timeout))
  add(query_570664, "PartitionKeyValue", newJString(PartitionKeyValue))
  add(query_570664, "api-version", newJString(apiVersion))
  add(query_570664, "PartitionKeyType", newJInt(PartitionKeyType))
  add(path_570663, "serviceId", newJString(serviceId))
  add(query_570664, "PreviousRspVersion", newJString(PreviousRspVersion))
  result = call_570662.call(path_570663, query_570664, nil, nil, nil)

var resolveService* = Call_ResolveService_570652(name: "resolveService",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/ResolvePartition",
    validator: validate_ResolveService_570653, base: "", url: url_ResolveService_570654,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeServiceBackup_570665 = ref object of OpenApiRestCall_567668
proc url_ResumeServiceBackup_570667(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeServiceBackup_570666(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570668 = path.getOrDefault("serviceId")
  valid_570668 = validateParameter(valid_570668, JString, required = true,
                                 default = nil)
  if valid_570668 != nil:
    section.add "serviceId", valid_570668
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570669 = query.getOrDefault("timeout")
  valid_570669 = validateParameter(valid_570669, JInt, required = false,
                                 default = newJInt(60))
  if valid_570669 != nil:
    section.add "timeout", valid_570669
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570670 = query.getOrDefault("api-version")
  valid_570670 = validateParameter(valid_570670, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570670 != nil:
    section.add "api-version", valid_570670
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570671: Call_ResumeServiceBackup_570665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_570671.validator(path, query, header, formData, body)
  let scheme = call_570671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570671.url(scheme.get, call_570671.host, call_570671.base,
                         call_570671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570671, url, valid)

proc call*(call_570672: Call_ResumeServiceBackup_570665; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## resumeServiceBackup
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570673 = newJObject()
  var query_570674 = newJObject()
  add(query_570674, "timeout", newJInt(timeout))
  add(query_570674, "api-version", newJString(apiVersion))
  add(path_570673, "serviceId", newJString(serviceId))
  result = call_570672.call(path_570673, query_570674, nil, nil, nil)

var resumeServiceBackup* = Call_ResumeServiceBackup_570665(
    name: "resumeServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ResumeBackup",
    validator: validate_ResumeServiceBackup_570666, base: "",
    url: url_ResumeServiceBackup_570667, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendServiceBackup_570675 = ref object of OpenApiRestCall_567668
proc url_SuspendServiceBackup_570677(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendServiceBackup_570676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570678 = path.getOrDefault("serviceId")
  valid_570678 = validateParameter(valid_570678, JString, required = true,
                                 default = nil)
  if valid_570678 != nil:
    section.add "serviceId", valid_570678
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570679 = query.getOrDefault("timeout")
  valid_570679 = validateParameter(valid_570679, JInt, required = false,
                                 default = newJInt(60))
  if valid_570679 != nil:
    section.add "timeout", valid_570679
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570680 = query.getOrDefault("api-version")
  valid_570680 = validateParameter(valid_570680, JString, required = true,
                                 default = newJString("6.4"))
  if valid_570680 != nil:
    section.add "api-version", valid_570680
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570681: Call_SuspendServiceBackup_570675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  let valid = call_570681.validator(path, query, header, formData, body)
  let scheme = call_570681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570681.url(scheme.get, call_570681.host, call_570681.base,
                         call_570681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570681, url, valid)

proc call*(call_570682: Call_SuspendServiceBackup_570675; serviceId: string;
          timeout: int = 60; apiVersion: string = "6.4"): Recallable =
  ## suspendServiceBackup
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570683 = newJObject()
  var query_570684 = newJObject()
  add(query_570684, "timeout", newJInt(timeout))
  add(query_570684, "api-version", newJString(apiVersion))
  add(path_570683, "serviceId", newJString(serviceId))
  result = call_570682.call(path_570683, query_570684, nil, nil, nil)

var suspendServiceBackup* = Call_SuspendServiceBackup_570675(
    name: "suspendServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/SuspendBackup",
    validator: validate_SuspendServiceBackup_570676, base: "",
    url: url_SuspendServiceBackup_570677, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateService_570685 = ref object of OpenApiRestCall_567668
proc url_UpdateService_570687(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateService_570686(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_570688 = path.getOrDefault("serviceId")
  valid_570688 = validateParameter(valid_570688, JString, required = true,
                                 default = nil)
  if valid_570688 != nil:
    section.add "serviceId", valid_570688
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570689 = query.getOrDefault("timeout")
  valid_570689 = validateParameter(valid_570689, JInt, required = false,
                                 default = newJInt(60))
  if valid_570689 != nil:
    section.add "timeout", valid_570689
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570690 = query.getOrDefault("api-version")
  valid_570690 = validateParameter(valid_570690, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570690 != nil:
    section.add "api-version", valid_570690
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570692: Call_UpdateService_570685; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  let valid = call_570692.validator(path, query, header, formData, body)
  let scheme = call_570692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570692.url(scheme.get, call_570692.host, call_570692.base,
                         call_570692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570692, url, valid)

proc call*(call_570693: Call_UpdateService_570685;
          ServiceUpdateDescription: JsonNode; serviceId: string; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## updateService
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_570694 = newJObject()
  var query_570695 = newJObject()
  var body_570696 = newJObject()
  add(query_570695, "timeout", newJInt(timeout))
  add(query_570695, "api-version", newJString(apiVersion))
  if ServiceUpdateDescription != nil:
    body_570696 = ServiceUpdateDescription
  add(path_570694, "serviceId", newJString(serviceId))
  result = call_570693.call(path_570694, query_570695, nil, nil, body_570696)

var updateService* = Call_UpdateService_570685(name: "updateService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Update", validator: validate_UpdateService_570686,
    base: "", url: url_UpdateService_570687, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaos_570697 = ref object of OpenApiRestCall_567668
proc url_GetChaos_570699(protocol: Scheme; host: string; base: string; route: string;
                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaos_570698(path: JsonNode; query: JsonNode; header: JsonNode;
                             formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570700 = query.getOrDefault("timeout")
  valid_570700 = validateParameter(valid_570700, JInt, required = false,
                                 default = newJInt(60))
  if valid_570700 != nil:
    section.add "timeout", valid_570700
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570701 = query.getOrDefault("api-version")
  valid_570701 = validateParameter(valid_570701, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570701 != nil:
    section.add "api-version", valid_570701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570702: Call_GetChaos_570697; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  let valid = call_570702.validator(path, query, header, formData, body)
  let scheme = call_570702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570702.url(scheme.get, call_570702.host, call_570702.base,
                         call_570702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570702, url, valid)

proc call*(call_570703: Call_GetChaos_570697; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaos
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_570704 = newJObject()
  add(query_570704, "timeout", newJInt(timeout))
  add(query_570704, "api-version", newJString(apiVersion))
  result = call_570703.call(nil, query_570704, nil, nil, nil)

var getChaos* = Call_GetChaos_570697(name: "getChaos", meth: HttpMethod.HttpGet,
                                  host: "azure.local:19080",
                                  route: "/Tools/Chaos",
                                  validator: validate_GetChaos_570698, base: "",
                                  url: url_GetChaos_570699,
                                  schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartChaos_570705 = ref object of OpenApiRestCall_567668
proc url_StartChaos_570707(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartChaos_570706(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570708 = query.getOrDefault("timeout")
  valid_570708 = validateParameter(valid_570708, JInt, required = false,
                                 default = newJInt(60))
  if valid_570708 != nil:
    section.add "timeout", valid_570708
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570709 = query.getOrDefault("api-version")
  valid_570709 = validateParameter(valid_570709, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570709 != nil:
    section.add "api-version", valid_570709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570711: Call_StartChaos_570705; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  let valid = call_570711.validator(path, query, header, formData, body)
  let scheme = call_570711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570711.url(scheme.get, call_570711.host, call_570711.base,
                         call_570711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570711, url, valid)

proc call*(call_570712: Call_StartChaos_570705; ChaosParameters: JsonNode;
          timeout: int = 60; apiVersion: string = "6.0"): Recallable =
  ## startChaos
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  var query_570713 = newJObject()
  var body_570714 = newJObject()
  add(query_570713, "timeout", newJInt(timeout))
  add(query_570713, "api-version", newJString(apiVersion))
  if ChaosParameters != nil:
    body_570714 = ChaosParameters
  result = call_570712.call(nil, query_570713, nil, nil, body_570714)

var startChaos* = Call_StartChaos_570705(name: "startChaos",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Tools/Chaos/$/Start",
                                      validator: validate_StartChaos_570706,
                                      base: "", url: url_StartChaos_570707,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopChaos_570715 = ref object of OpenApiRestCall_567668
proc url_StopChaos_570717(protocol: Scheme; host: string; base: string; route: string;
                         path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StopChaos_570716(path: JsonNode; query: JsonNode; header: JsonNode;
                              formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570718 = query.getOrDefault("timeout")
  valid_570718 = validateParameter(valid_570718, JInt, required = false,
                                 default = newJInt(60))
  if valid_570718 != nil:
    section.add "timeout", valid_570718
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570719 = query.getOrDefault("api-version")
  valid_570719 = validateParameter(valid_570719, JString, required = true,
                                 default = newJString("6.0"))
  if valid_570719 != nil:
    section.add "api-version", valid_570719
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570720: Call_StopChaos_570715; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  let valid = call_570720.validator(path, query, header, formData, body)
  let scheme = call_570720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570720.url(scheme.get, call_570720.host, call_570720.base,
                         call_570720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570720, url, valid)

proc call*(call_570721: Call_StopChaos_570715; timeout: int = 60;
          apiVersion: string = "6.0"): Recallable =
  ## stopChaos
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_570722 = newJObject()
  add(query_570722, "timeout", newJInt(timeout))
  add(query_570722, "api-version", newJString(apiVersion))
  result = call_570721.call(nil, query_570722, nil, nil, nil)

var stopChaos* = Call_StopChaos_570715(name: "stopChaos", meth: HttpMethod.HttpPost,
                                    host: "azure.local:19080",
                                    route: "/Tools/Chaos/$/Stop",
                                    validator: validate_StopChaos_570716,
                                    base: "", url: url_StopChaos_570717,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosEvents_570723 = ref object of OpenApiRestCall_567668
proc url_GetChaosEvents_570725(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosEvents_570724(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: JString
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: JString
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  section = newJObject()
  var valid_570726 = query.getOrDefault("timeout")
  valid_570726 = validateParameter(valid_570726, JInt, required = false,
                                 default = newJInt(60))
  if valid_570726 != nil:
    section.add "timeout", valid_570726
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570727 = query.getOrDefault("api-version")
  valid_570727 = validateParameter(valid_570727, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570727 != nil:
    section.add "api-version", valid_570727
  var valid_570728 = query.getOrDefault("EndTimeUtc")
  valid_570728 = validateParameter(valid_570728, JString, required = false,
                                 default = nil)
  if valid_570728 != nil:
    section.add "EndTimeUtc", valid_570728
  var valid_570729 = query.getOrDefault("ContinuationToken")
  valid_570729 = validateParameter(valid_570729, JString, required = false,
                                 default = nil)
  if valid_570729 != nil:
    section.add "ContinuationToken", valid_570729
  var valid_570730 = query.getOrDefault("MaxResults")
  valid_570730 = validateParameter(valid_570730, JInt, required = false,
                                 default = newJInt(0))
  if valid_570730 != nil:
    section.add "MaxResults", valid_570730
  var valid_570731 = query.getOrDefault("StartTimeUtc")
  valid_570731 = validateParameter(valid_570731, JString, required = false,
                                 default = nil)
  if valid_570731 != nil:
    section.add "StartTimeUtc", valid_570731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570732: Call_GetChaosEvents_570723; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  let valid = call_570732.validator(path, query, header, formData, body)
  let scheme = call_570732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570732.url(scheme.get, call_570732.host, call_570732.base,
                         call_570732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570732, url, valid)

proc call*(call_570733: Call_GetChaosEvents_570723; timeout: int = 60;
          apiVersion: string = "6.2"; EndTimeUtc: string = "";
          ContinuationToken: string = ""; MaxResults: int = 0; StartTimeUtc: string = ""): Recallable =
  ## getChaosEvents
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   EndTimeUtc: string
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartTimeUtc: string
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  var query_570734 = newJObject()
  add(query_570734, "timeout", newJInt(timeout))
  add(query_570734, "api-version", newJString(apiVersion))
  add(query_570734, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_570734, "ContinuationToken", newJString(ContinuationToken))
  add(query_570734, "MaxResults", newJInt(MaxResults))
  add(query_570734, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_570733.call(nil, query_570734, nil, nil, nil)

var getChaosEvents* = Call_GetChaosEvents_570723(name: "getChaosEvents",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Events", validator: validate_GetChaosEvents_570724,
    base: "", url: url_GetChaosEvents_570725, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChaosSchedule_570743 = ref object of OpenApiRestCall_567668
proc url_PostChaosSchedule_570745(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostChaosSchedule_570744(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570746 = query.getOrDefault("timeout")
  valid_570746 = validateParameter(valid_570746, JInt, required = false,
                                 default = newJInt(60))
  if valid_570746 != nil:
    section.add "timeout", valid_570746
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570747 = query.getOrDefault("api-version")
  valid_570747 = validateParameter(valid_570747, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570747 != nil:
    section.add "api-version", valid_570747
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570749: Call_PostChaosSchedule_570743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  let valid = call_570749.validator(path, query, header, formData, body)
  let scheme = call_570749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570749.url(scheme.get, call_570749.host, call_570749.base,
                         call_570749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570749, url, valid)

proc call*(call_570750: Call_PostChaosSchedule_570743; ChaosSchedule: JsonNode;
          timeout: int = 60; apiVersion: string = "6.2"): Recallable =
  ## postChaosSchedule
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  var query_570751 = newJObject()
  var body_570752 = newJObject()
  add(query_570751, "timeout", newJInt(timeout))
  add(query_570751, "api-version", newJString(apiVersion))
  if ChaosSchedule != nil:
    body_570752 = ChaosSchedule
  result = call_570750.call(nil, query_570751, nil, nil, body_570752)

var postChaosSchedule* = Call_PostChaosSchedule_570743(name: "postChaosSchedule",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_PostChaosSchedule_570744,
    base: "", url: url_PostChaosSchedule_570745,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosSchedule_570735 = ref object of OpenApiRestCall_567668
proc url_GetChaosSchedule_570737(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosSchedule_570736(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  var valid_570738 = query.getOrDefault("timeout")
  valid_570738 = validateParameter(valid_570738, JInt, required = false,
                                 default = newJInt(60))
  if valid_570738 != nil:
    section.add "timeout", valid_570738
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570739 = query.getOrDefault("api-version")
  valid_570739 = validateParameter(valid_570739, JString, required = true,
                                 default = newJString("6.2"))
  if valid_570739 != nil:
    section.add "api-version", valid_570739
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570740: Call_GetChaosSchedule_570735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  let valid = call_570740.validator(path, query, header, formData, body)
  let scheme = call_570740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570740.url(scheme.get, call_570740.host, call_570740.base,
                         call_570740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570740, url, valid)

proc call*(call_570741: Call_GetChaosSchedule_570735; timeout: int = 60;
          apiVersion: string = "6.2"): Recallable =
  ## getChaosSchedule
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  var query_570742 = newJObject()
  add(query_570742, "timeout", newJInt(timeout))
  add(query_570742, "api-version", newJString(apiVersion))
  result = call_570741.call(nil, query_570742, nil, nil, nil)

var getChaosSchedule* = Call_GetChaosSchedule_570735(name: "getChaosSchedule",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_GetChaosSchedule_570736,
    base: "", url: url_GetChaosSchedule_570737, schemes: {Scheme.Https, Scheme.Http})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
