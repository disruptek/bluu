
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: Service Fabric Client APIs
## version: 6.4.0.36
## termsOfService: (not provided)
## license: (not provided)
## 
## Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_563566 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_563566](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_563566): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "servicefabric"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_CancelRepairTask_563788 = ref object of OpenApiRestCall_563566
proc url_CancelRepairTask_563790(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelRepairTask_563789(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_563981 = query.getOrDefault("api-version")
  valid_563981 = validateParameter(valid_563981, JString, required = true,
                                 default = newJString("6.0"))
  if valid_563981 != nil:
    section.add "api-version", valid_563981
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564005: Call_CancelRepairTask_563788; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564005.validator(path, query, header, formData, body)
  let scheme = call_564005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564005.url(scheme.get, call_564005.host, call_564005.base,
                         call_564005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564005, url, valid)

proc call*(call_564076: Call_CancelRepairTask_563788;
          RepairTaskCancelDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## cancelRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskCancelDescription: JObject (required)
  ##                              : Describes the repair task to be cancelled.
  var query_564077 = newJObject()
  var body_564079 = newJObject()
  add(query_564077, "api-version", newJString(apiVersion))
  if RepairTaskCancelDescription != nil:
    body_564079 = RepairTaskCancelDescription
  result = call_564076.call(nil, query_564077, nil, nil, body_564079)

var cancelRepairTask* = Call_CancelRepairTask_563788(name: "cancelRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CancelRepairTask", validator: validate_CancelRepairTask_563789,
    base: "", url: url_CancelRepairTask_563790, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRepairTask_564118 = ref object of OpenApiRestCall_563566
proc url_CreateRepairTask_564120(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateRepairTask_564119(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564121 = query.getOrDefault("api-version")
  valid_564121 = validateParameter(valid_564121, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564121 != nil:
    section.add "api-version", valid_564121
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564123: Call_CreateRepairTask_564118; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564123.validator(path, query, header, formData, body)
  let scheme = call_564123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564123.url(scheme.get, call_564123.host, call_564123.base,
                         call_564123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564123, url, valid)

proc call*(call_564124: Call_CreateRepairTask_564118; RepairTask: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## createRepairTask
  ## For clusters that have the Repair Manager Service configured,
  ## this API provides a way to create repair tasks that run automatically or manually.
  ## For repair tasks that run automatically, an appropriate repair executor
  ## must be running for each repair action to run automatically.
  ## These are currently only available in specially-configured Azure Cloud Services.
  ## 
  ## To create a manual repair task, provide the set of impacted node names and the
  ## expected impact. When the state of the created repair task changes to approved,
  ## you can safely perform repair actions on those nodes.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  var query_564125 = newJObject()
  var body_564126 = newJObject()
  add(query_564125, "api-version", newJString(apiVersion))
  if RepairTask != nil:
    body_564126 = RepairTask
  result = call_564124.call(nil, query_564125, nil, nil, body_564126)

var createRepairTask* = Call_CreateRepairTask_564118(name: "createRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/CreateRepairTask", validator: validate_CreateRepairTask_564119,
    base: "", url: url_CreateRepairTask_564120, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRepairTask_564127 = ref object of OpenApiRestCall_563566
proc url_DeleteRepairTask_564129(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteRepairTask_564128(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564130 = query.getOrDefault("api-version")
  valid_564130 = validateParameter(valid_564130, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564130 != nil:
    section.add "api-version", valid_564130
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564132: Call_DeleteRepairTask_564127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564132.validator(path, query, header, formData, body)
  let scheme = call_564132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564132.url(scheme.get, call_564132.host, call_564132.base,
                         call_564132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564132, url, valid)

proc call*(call_564133: Call_DeleteRepairTask_564127;
          RepairTaskDeleteDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## deleteRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskDeleteDescription: JObject (required)
  ##                              : Describes the repair task to be deleted.
  var query_564134 = newJObject()
  var body_564135 = newJObject()
  add(query_564134, "api-version", newJString(apiVersion))
  if RepairTaskDeleteDescription != nil:
    body_564135 = RepairTaskDeleteDescription
  result = call_564133.call(nil, query_564134, nil, nil, body_564135)

var deleteRepairTask* = Call_DeleteRepairTask_564127(name: "deleteRepairTask",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/DeleteRepairTask", validator: validate_DeleteRepairTask_564128,
    base: "", url: url_DeleteRepairTask_564129, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ForceApproveRepairTask_564136 = ref object of OpenApiRestCall_563566
proc url_ForceApproveRepairTask_564138(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ForceApproveRepairTask_564137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564139 = query.getOrDefault("api-version")
  valid_564139 = validateParameter(valid_564139, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564139 != nil:
    section.add "api-version", valid_564139
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564141: Call_ForceApproveRepairTask_564136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564141.validator(path, query, header, formData, body)
  let scheme = call_564141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564141.url(scheme.get, call_564141.host, call_564141.base,
                         call_564141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564141, url, valid)

proc call*(call_564142: Call_ForceApproveRepairTask_564136;
          RepairTaskApproveDescription: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## forceApproveRepairTask
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskApproveDescription: JObject (required)
  ##                               : Describes the repair task to be approved.
  var query_564143 = newJObject()
  var body_564144 = newJObject()
  add(query_564143, "api-version", newJString(apiVersion))
  if RepairTaskApproveDescription != nil:
    body_564144 = RepairTaskApproveDescription
  result = call_564142.call(nil, query_564143, nil, nil, body_564144)

var forceApproveRepairTask* = Call_ForceApproveRepairTask_564136(
    name: "forceApproveRepairTask", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ForceApproveRepairTask",
    validator: validate_ForceApproveRepairTask_564137, base: "",
    url: url_ForceApproveRepairTask_564138, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAadMetadata_564145 = ref object of OpenApiRestCall_563566
proc url_GetAadMetadata_564147(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAadMetadata_564146(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564148 = query.getOrDefault("api-version")
  valid_564148 = validateParameter(valid_564148, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564148 != nil:
    section.add "api-version", valid_564148
  var valid_564150 = query.getOrDefault("timeout")
  valid_564150 = validateParameter(valid_564150, JInt, required = false,
                                 default = newJInt(60))
  if valid_564150 != nil:
    section.add "timeout", valid_564150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564151: Call_GetAadMetadata_564145; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ## 
  let valid = call_564151.validator(path, query, header, formData, body)
  let scheme = call_564151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564151.url(scheme.get, call_564151.host, call_564151.base,
                         call_564151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564151, url, valid)

proc call*(call_564152: Call_GetAadMetadata_564145; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getAadMetadata
  ## Gets the Azure Active Directory metadata used for secured connection to cluster.
  ## This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564153 = newJObject()
  add(query_564153, "api-version", newJString(apiVersion))
  add(query_564153, "timeout", newJInt(timeout))
  result = call_564152.call(nil, query_564153, nil, nil, nil)

var getAadMetadata* = Call_GetAadMetadata_564145(name: "getAadMetadata",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/$/GetAadMetadata",
    validator: validate_GetAadMetadata_564146, base: "", url: url_GetAadMetadata_564147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfiguration_564154 = ref object of OpenApiRestCall_563566
proc url_GetClusterConfiguration_564156(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfiguration_564155(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationApiVersion: JString (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationApiVersion` field"
  var valid_564157 = query.getOrDefault("ConfigurationApiVersion")
  valid_564157 = validateParameter(valid_564157, JString, required = true,
                                 default = nil)
  if valid_564157 != nil:
    section.add "ConfigurationApiVersion", valid_564157
  var valid_564158 = query.getOrDefault("api-version")
  valid_564158 = validateParameter(valid_564158, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564158 != nil:
    section.add "api-version", valid_564158
  var valid_564159 = query.getOrDefault("timeout")
  valid_564159 = validateParameter(valid_564159, JInt, required = false,
                                 default = newJInt(60))
  if valid_564159 != nil:
    section.add "timeout", valid_564159
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564160: Call_GetClusterConfiguration_564154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  let valid = call_564160.validator(path, query, header, formData, body)
  let scheme = call_564160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564160.url(scheme.get, call_564160.host, call_564160.base,
                         call_564160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564160, url, valid)

proc call*(call_564161: Call_GetClusterConfiguration_564154;
          ConfigurationApiVersion: string; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getClusterConfiguration
  ## The cluster configuration contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ##   ConfigurationApiVersion: string (required)
  ##                          : The API version of the Standalone cluster json configuration.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564162 = newJObject()
  add(query_564162, "ConfigurationApiVersion", newJString(ConfigurationApiVersion))
  add(query_564162, "api-version", newJString(apiVersion))
  add(query_564162, "timeout", newJInt(timeout))
  result = call_564161.call(nil, query_564162, nil, nil, nil)

var getClusterConfiguration* = Call_GetClusterConfiguration_564154(
    name: "getClusterConfiguration", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfiguration",
    validator: validate_GetClusterConfiguration_564155, base: "",
    url: url_GetClusterConfiguration_564156, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterConfigurationUpgradeStatus_564163 = ref object of OpenApiRestCall_563566
proc url_GetClusterConfigurationUpgradeStatus_564165(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterConfigurationUpgradeStatus_564164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564166 = query.getOrDefault("api-version")
  valid_564166 = validateParameter(valid_564166, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564166 != nil:
    section.add "api-version", valid_564166
  var valid_564167 = query.getOrDefault("timeout")
  valid_564167 = validateParameter(valid_564167, JInt, required = false,
                                 default = newJInt(60))
  if valid_564167 != nil:
    section.add "timeout", valid_564167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564168: Call_GetClusterConfigurationUpgradeStatus_564163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ## 
  let valid = call_564168.validator(path, query, header, formData, body)
  let scheme = call_564168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564168.url(scheme.get, call_564168.host, call_564168.base,
                         call_564168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564168, url, valid)

proc call*(call_564169: Call_GetClusterConfigurationUpgradeStatus_564163;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getClusterConfigurationUpgradeStatus
  ## Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564170 = newJObject()
  add(query_564170, "api-version", newJString(apiVersion))
  add(query_564170, "timeout", newJInt(timeout))
  result = call_564169.call(nil, query_564170, nil, nil, nil)

var getClusterConfigurationUpgradeStatus* = Call_GetClusterConfigurationUpgradeStatus_564163(
    name: "getClusterConfigurationUpgradeStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterConfigurationUpgradeStatus",
    validator: validate_GetClusterConfigurationUpgradeStatus_564164, base: "",
    url: url_GetClusterConfigurationUpgradeStatus_564165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthUsingPolicy_564184 = ref object of OpenApiRestCall_563566
proc url_GetClusterHealthUsingPolicy_564186(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthUsingPolicy_564185(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_564187 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_564187 = validateParameter(valid_564187, JBool, required = false,
                                 default = newJBool(false))
  if valid_564187 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_564187
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564188 = query.getOrDefault("api-version")
  valid_564188 = validateParameter(valid_564188, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564188 != nil:
    section.add "api-version", valid_564188
  var valid_564189 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_564189 = validateParameter(valid_564189, JInt, required = false,
                                 default = newJInt(0))
  if valid_564189 != nil:
    section.add "ApplicationsHealthStateFilter", valid_564189
  var valid_564190 = query.getOrDefault("ExcludeHealthStatistics")
  valid_564190 = validateParameter(valid_564190, JBool, required = false,
                                 default = newJBool(false))
  if valid_564190 != nil:
    section.add "ExcludeHealthStatistics", valid_564190
  var valid_564191 = query.getOrDefault("timeout")
  valid_564191 = validateParameter(valid_564191, JInt, required = false,
                                 default = newJInt(60))
  if valid_564191 != nil:
    section.add "timeout", valid_564191
  var valid_564192 = query.getOrDefault("EventsHealthStateFilter")
  valid_564192 = validateParameter(valid_564192, JInt, required = false,
                                 default = newJInt(0))
  if valid_564192 != nil:
    section.add "EventsHealthStateFilter", valid_564192
  var valid_564193 = query.getOrDefault("NodesHealthStateFilter")
  valid_564193 = validateParameter(valid_564193, JInt, required = false,
                                 default = newJInt(0))
  if valid_564193 != nil:
    section.add "NodesHealthStateFilter", valid_564193
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564195: Call_GetClusterHealthUsingPolicy_564184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_564195.validator(path, query, header, formData, body)
  let scheme = call_564195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564195.url(scheme.get, call_564195.host, call_564195.base,
                         call_564195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564195, url, valid)

proc call*(call_564196: Call_GetClusterHealthUsingPolicy_564184;
          ClusterHealthPolicies: JsonNode = nil;
          IncludeSystemApplicationHealthStatistics: bool = false;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; timeout: int = 60;
          EventsHealthStateFilter: int = 0; NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealthUsingPolicy
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   ClusterHealthPolicies: JObject
  ##                        : Describes the health policies used to evaluate the cluster health.
  ## If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_564197 = newJObject()
  var body_564198 = newJObject()
  if ClusterHealthPolicies != nil:
    body_564198 = ClusterHealthPolicies
  add(query_564197, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  add(query_564197, "api-version", newJString(apiVersion))
  add(query_564197, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_564197, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_564197, "timeout", newJInt(timeout))
  add(query_564197, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_564197, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_564196.call(nil, query_564197, nil, nil, body_564198)

var getClusterHealthUsingPolicy* = Call_GetClusterHealthUsingPolicy_564184(
    name: "getClusterHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/GetClusterHealth",
    validator: validate_GetClusterHealthUsingPolicy_564185, base: "",
    url: url_GetClusterHealthUsingPolicy_564186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealth_564171 = ref object of OpenApiRestCall_563566
proc url_GetClusterHealth_564173(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealth_564172(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludeSystemApplicationHealthStatistics: JBool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: JInt
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: JInt
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  var valid_564174 = query.getOrDefault("IncludeSystemApplicationHealthStatistics")
  valid_564174 = validateParameter(valid_564174, JBool, required = false,
                                 default = newJBool(false))
  if valid_564174 != nil:
    section.add "IncludeSystemApplicationHealthStatistics", valid_564174
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564175 = query.getOrDefault("api-version")
  valid_564175 = validateParameter(valid_564175, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564175 != nil:
    section.add "api-version", valid_564175
  var valid_564176 = query.getOrDefault("ApplicationsHealthStateFilter")
  valid_564176 = validateParameter(valid_564176, JInt, required = false,
                                 default = newJInt(0))
  if valid_564176 != nil:
    section.add "ApplicationsHealthStateFilter", valid_564176
  var valid_564177 = query.getOrDefault("ExcludeHealthStatistics")
  valid_564177 = validateParameter(valid_564177, JBool, required = false,
                                 default = newJBool(false))
  if valid_564177 != nil:
    section.add "ExcludeHealthStatistics", valid_564177
  var valid_564178 = query.getOrDefault("timeout")
  valid_564178 = validateParameter(valid_564178, JInt, required = false,
                                 default = newJInt(60))
  if valid_564178 != nil:
    section.add "timeout", valid_564178
  var valid_564179 = query.getOrDefault("EventsHealthStateFilter")
  valid_564179 = validateParameter(valid_564179, JInt, required = false,
                                 default = newJInt(0))
  if valid_564179 != nil:
    section.add "EventsHealthStateFilter", valid_564179
  var valid_564180 = query.getOrDefault("NodesHealthStateFilter")
  valid_564180 = validateParameter(valid_564180, JInt, required = false,
                                 default = newJInt(0))
  if valid_564180 != nil:
    section.add "NodesHealthStateFilter", valid_564180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564181: Call_GetClusterHealth_564171; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ## 
  let valid = call_564181.validator(path, query, header, formData, body)
  let scheme = call_564181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564181.url(scheme.get, call_564181.host, call_564181.base,
                         call_564181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564181, url, valid)

proc call*(call_564182: Call_GetClusterHealth_564171;
          IncludeSystemApplicationHealthStatistics: bool = false;
          apiVersion: string = "6.0"; ApplicationsHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; timeout: int = 60;
          EventsHealthStateFilter: int = 0; NodesHealthStateFilter: int = 0): Recallable =
  ## getClusterHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
  ##   IncludeSystemApplicationHealthStatistics: bool
  ##                                           : Indicates whether the health statistics should include the fabric:/System application health statistics. False by default.
  ## If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.
  ## Otherwise, the query result includes health statistics only for user applications.
  ## The health statistics must be included in the query result for this parameter to be applied.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationsHealthStateFilter: int
  ##                                : Allows filtering of the application health state objects returned in the result of cluster health
  ## query based on their health state.
  ## The possible values for this parameter include integer value obtained from members or bitwise operations
  ## on members of HealthStateFilter enumeration. Only applications that match the filter are returned.
  ## All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   NodesHealthStateFilter: int
  ##                         : Allows filtering of the node health state objects returned in the result of cluster health query
  ## based on their health state. The possible values for this parameter include integer value of one of the
  ## following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var query_564183 = newJObject()
  add(query_564183, "IncludeSystemApplicationHealthStatistics",
      newJBool(IncludeSystemApplicationHealthStatistics))
  add(query_564183, "api-version", newJString(apiVersion))
  add(query_564183, "ApplicationsHealthStateFilter",
      newJInt(ApplicationsHealthStateFilter))
  add(query_564183, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_564183, "timeout", newJInt(timeout))
  add(query_564183, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_564183, "NodesHealthStateFilter", newJInt(NodesHealthStateFilter))
  result = call_564182.call(nil, query_564183, nil, nil, nil)

var getClusterHealth* = Call_GetClusterHealth_564171(name: "getClusterHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterHealth", validator: validate_GetClusterHealth_564172,
    base: "", url: url_GetClusterHealth_564173, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564207 = ref object of OpenApiRestCall_563566
proc url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564209(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564208(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564210 = query.getOrDefault("api-version")
  valid_564210 = validateParameter(valid_564210, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564210 != nil:
    section.add "api-version", valid_564210
  var valid_564211 = query.getOrDefault("timeout")
  valid_564211 = validateParameter(valid_564211, JInt, required = false,
                                 default = newJInt(60))
  if valid_564211 != nil:
    section.add "timeout", valid_564211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564213: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564207;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ## 
  let valid = call_564213.validator(path, query, header, formData, body)
  let scheme = call_564213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564213.url(scheme.get, call_564213.host, call_564213.base,
                         call_564213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564213, url, valid)

proc call*(call_564214: Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564207;
          apiVersion: string = "6.0";
          ClusterHealthChunkQueryDescription: JsonNode = nil; timeout: int = 60): Recallable =
  ## getClusterHealthChunkUsingPolicyAndAdvancedFilters
  ## Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description.
  ## The query description allows users to specify health policies for evaluating the cluster and its children.
  ## Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterHealthChunkQueryDescription: JObject
  ##                                     : Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned.
  ## If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.
  ## By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.
  ## If the application health policy map is specified, and it has an entry for an application, the specified application health policy
  ## is used to evaluate the application health.
  ## Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.
  ## The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return
  ## only services that are in Error or Warning, and all partitions and replicas for one of these services.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564215 = newJObject()
  var body_564216 = newJObject()
  add(query_564215, "api-version", newJString(apiVersion))
  if ClusterHealthChunkQueryDescription != nil:
    body_564216 = ClusterHealthChunkQueryDescription
  add(query_564215, "timeout", newJInt(timeout))
  result = call_564214.call(nil, query_564215, nil, nil, body_564216)

var getClusterHealthChunkUsingPolicyAndAdvancedFilters* = Call_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564207(
    name: "getClusterHealthChunkUsingPolicyAndAdvancedFilters",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564208,
    base: "", url: url_GetClusterHealthChunkUsingPolicyAndAdvancedFilters_564209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterHealthChunk_564199 = ref object of OpenApiRestCall_563566
proc url_GetClusterHealthChunk_564201(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterHealthChunk_564200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564202 = query.getOrDefault("api-version")
  valid_564202 = validateParameter(valid_564202, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564202 != nil:
    section.add "api-version", valid_564202
  var valid_564203 = query.getOrDefault("timeout")
  valid_564203 = validateParameter(valid_564203, JInt, required = false,
                                 default = newJInt(60))
  if valid_564203 != nil:
    section.add "timeout", valid_564203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564204: Call_GetClusterHealthChunk_564199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ## 
  let valid = call_564204.validator(path, query, header, formData, body)
  let scheme = call_564204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564204.url(scheme.get, call_564204.host, call_564204.base,
                         call_564204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564204, url, valid)

proc call*(call_564205: Call_GetClusterHealthChunk_564199;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getClusterHealthChunk
  ## Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities.
  ## To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564206 = newJObject()
  add(query_564206, "api-version", newJString(apiVersion))
  add(query_564206, "timeout", newJInt(timeout))
  result = call_564205.call(nil, query_564206, nil, nil, nil)

var getClusterHealthChunk* = Call_GetClusterHealthChunk_564199(
    name: "getClusterHealthChunk", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetClusterHealthChunk",
    validator: validate_GetClusterHealthChunk_564200, base: "",
    url: url_GetClusterHealthChunk_564201, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterManifest_564217 = ref object of OpenApiRestCall_563566
proc url_GetClusterManifest_564219(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterManifest_564218(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564220 = query.getOrDefault("api-version")
  valid_564220 = validateParameter(valid_564220, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564220 != nil:
    section.add "api-version", valid_564220
  var valid_564221 = query.getOrDefault("timeout")
  valid_564221 = validateParameter(valid_564221, JInt, required = false,
                                 default = newJInt(60))
  if valid_564221 != nil:
    section.add "timeout", valid_564221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564222: Call_GetClusterManifest_564217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ## 
  let valid = call_564222.validator(path, query, header, formData, body)
  let scheme = call_564222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564222.url(scheme.get, call_564222.host, call_564222.base,
                         call_564222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564222, url, valid)

proc call*(call_564223: Call_GetClusterManifest_564217; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getClusterManifest
  ## Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster,
  ## security configurations, fault, and upgrade domain topologies, etc.
  ## 
  ## These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest
  ## is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).
  ## 
  ## The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564224 = newJObject()
  add(query_564224, "api-version", newJString(apiVersion))
  add(query_564224, "timeout", newJInt(timeout))
  result = call_564223.call(nil, query_564224, nil, nil, nil)

var getClusterManifest* = Call_GetClusterManifest_564217(
    name: "getClusterManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterManifest", validator: validate_GetClusterManifest_564218,
    base: "", url: url_GetClusterManifest_564219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterVersion_564225 = ref object of OpenApiRestCall_563566
proc url_GetClusterVersion_564227(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterVersion_564226(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564228 = query.getOrDefault("api-version")
  valid_564228 = validateParameter(valid_564228, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564228 != nil:
    section.add "api-version", valid_564228
  var valid_564229 = query.getOrDefault("timeout")
  valid_564229 = validateParameter(valid_564229, JInt, required = false,
                                 default = newJInt(60))
  if valid_564229 != nil:
    section.add "timeout", valid_564229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564230: Call_GetClusterVersion_564225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ## 
  let valid = call_564230.validator(path, query, header, formData, body)
  let scheme = call_564230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564230.url(scheme.get, call_564230.host, call_564230.base,
                         call_564230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564230, url, valid)

proc call*(call_564231: Call_GetClusterVersion_564225; apiVersion: string = "6.4";
          timeout: int = 60): Recallable =
  ## getClusterVersion
  ## If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564232 = newJObject()
  add(query_564232, "api-version", newJString(apiVersion))
  add(query_564232, "timeout", newJInt(timeout))
  result = call_564231.call(nil, query_564232, nil, nil, nil)

var getClusterVersion* = Call_GetClusterVersion_564225(name: "getClusterVersion",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetClusterVersion", validator: validate_GetClusterVersion_564226,
    base: "", url: url_GetClusterVersion_564227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricCodeVersionInfoList_564233 = ref object of OpenApiRestCall_563566
proc url_GetProvisionedFabricCodeVersionInfoList_564235(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricCodeVersionInfoList_564234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: JString
  ##              : The product version of Service Fabric.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564236 = query.getOrDefault("api-version")
  valid_564236 = validateParameter(valid_564236, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564236 != nil:
    section.add "api-version", valid_564236
  var valid_564237 = query.getOrDefault("timeout")
  valid_564237 = validateParameter(valid_564237, JInt, required = false,
                                 default = newJInt(60))
  if valid_564237 != nil:
    section.add "timeout", valid_564237
  var valid_564238 = query.getOrDefault("CodeVersion")
  valid_564238 = validateParameter(valid_564238, JString, required = false,
                                 default = nil)
  if valid_564238 != nil:
    section.add "CodeVersion", valid_564238
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564239: Call_GetProvisionedFabricCodeVersionInfoList_564233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_564239.validator(path, query, header, formData, body)
  let scheme = call_564239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564239.url(scheme.get, call_564239.host, call_564239.base,
                         call_564239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564239, url, valid)

proc call*(call_564240: Call_GetProvisionedFabricCodeVersionInfoList_564233;
          apiVersion: string = "6.0"; timeout: int = 60; CodeVersion: string = ""): Recallable =
  ## getProvisionedFabricCodeVersionInfoList
  ## Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodeVersion: string
  ##              : The product version of Service Fabric.
  var query_564241 = newJObject()
  add(query_564241, "api-version", newJString(apiVersion))
  add(query_564241, "timeout", newJInt(timeout))
  add(query_564241, "CodeVersion", newJString(CodeVersion))
  result = call_564240.call(nil, query_564241, nil, nil, nil)

var getProvisionedFabricCodeVersionInfoList* = Call_GetProvisionedFabricCodeVersionInfoList_564233(
    name: "getProvisionedFabricCodeVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedCodeVersions",
    validator: validate_GetProvisionedFabricCodeVersionInfoList_564234, base: "",
    url: url_GetProvisionedFabricCodeVersionInfoList_564235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetProvisionedFabricConfigVersionInfoList_564242 = ref object of OpenApiRestCall_563566
proc url_GetProvisionedFabricConfigVersionInfoList_564244(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetProvisionedFabricConfigVersionInfoList_564243(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: JString
  ##                : The config version of Service Fabric.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564245 = query.getOrDefault("api-version")
  valid_564245 = validateParameter(valid_564245, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564245 != nil:
    section.add "api-version", valid_564245
  var valid_564246 = query.getOrDefault("ConfigVersion")
  valid_564246 = validateParameter(valid_564246, JString, required = false,
                                 default = nil)
  if valid_564246 != nil:
    section.add "ConfigVersion", valid_564246
  var valid_564247 = query.getOrDefault("timeout")
  valid_564247 = validateParameter(valid_564247, JInt, required = false,
                                 default = newJInt(60))
  if valid_564247 != nil:
    section.add "timeout", valid_564247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564248: Call_GetProvisionedFabricConfigVersionInfoList_564242;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ## 
  let valid = call_564248.validator(path, query, header, formData, body)
  let scheme = call_564248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564248.url(scheme.get, call_564248.host, call_564248.base,
                         call_564248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564248, url, valid)

proc call*(call_564249: Call_GetProvisionedFabricConfigVersionInfoList_564242;
          apiVersion: string = "6.0"; ConfigVersion: string = ""; timeout: int = 60): Recallable =
  ## getProvisionedFabricConfigVersionInfoList
  ## Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ConfigVersion: string
  ##                : The config version of Service Fabric.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564250 = newJObject()
  add(query_564250, "api-version", newJString(apiVersion))
  add(query_564250, "ConfigVersion", newJString(ConfigVersion))
  add(query_564250, "timeout", newJInt(timeout))
  result = call_564249.call(nil, query_564250, nil, nil, nil)

var getProvisionedFabricConfigVersionInfoList* = Call_GetProvisionedFabricConfigVersionInfoList_564242(
    name: "getProvisionedFabricConfigVersionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetProvisionedConfigVersions",
    validator: validate_GetProvisionedFabricConfigVersionInfoList_564243,
    base: "", url: url_GetProvisionedFabricConfigVersionInfoList_564244,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRepairTaskList_564251 = ref object of OpenApiRestCall_563566
proc url_GetRepairTaskList_564253(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRepairTaskList_564252(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExecutorFilter: JString
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StateFilter: JInt
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  ##   TaskIdFilter: JString
  ##               : The repair task ID prefix to be matched.
  section = newJObject()
  var valid_564254 = query.getOrDefault("ExecutorFilter")
  valid_564254 = validateParameter(valid_564254, JString, required = false,
                                 default = nil)
  if valid_564254 != nil:
    section.add "ExecutorFilter", valid_564254
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564255 = query.getOrDefault("api-version")
  valid_564255 = validateParameter(valid_564255, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564255 != nil:
    section.add "api-version", valid_564255
  var valid_564256 = query.getOrDefault("StateFilter")
  valid_564256 = validateParameter(valid_564256, JInt, required = false, default = nil)
  if valid_564256 != nil:
    section.add "StateFilter", valid_564256
  var valid_564257 = query.getOrDefault("TaskIdFilter")
  valid_564257 = validateParameter(valid_564257, JString, required = false,
                                 default = nil)
  if valid_564257 != nil:
    section.add "TaskIdFilter", valid_564257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564258: Call_GetRepairTaskList_564251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564258.validator(path, query, header, formData, body)
  let scheme = call_564258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564258.url(scheme.get, call_564258.host, call_564258.base,
                         call_564258.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564258, url, valid)

proc call*(call_564259: Call_GetRepairTaskList_564251; ExecutorFilter: string = "";
          apiVersion: string = "6.0"; StateFilter: int = 0; TaskIdFilter: string = ""): Recallable =
  ## getRepairTaskList
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   ExecutorFilter: string
  ##                 : The name of the repair executor whose claimed tasks should be included in the list.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StateFilter: int
  ##              : A bitwise-OR of the following values, specifying which task states should be included in the result list.
  ## 
  ## - 1 - Created
  ## - 2 - Claimed
  ## - 4 - Preparing
  ## - 8 - Approved
  ## - 16 - Executing
  ## - 32 - Restoring
  ## - 64 - Completed
  ##   TaskIdFilter: string
  ##               : The repair task ID prefix to be matched.
  var query_564260 = newJObject()
  add(query_564260, "ExecutorFilter", newJString(ExecutorFilter))
  add(query_564260, "api-version", newJString(apiVersion))
  add(query_564260, "StateFilter", newJInt(StateFilter))
  add(query_564260, "TaskIdFilter", newJString(TaskIdFilter))
  result = call_564259.call(nil, query_564260, nil, nil, nil)

var getRepairTaskList* = Call_GetRepairTaskList_564251(name: "getRepairTaskList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/$/GetRepairTaskList", validator: validate_GetRepairTaskList_564252,
    base: "", url: url_GetRepairTaskList_564253,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpgradeOrchestrationServiceState_564261 = ref object of OpenApiRestCall_563566
proc url_GetUpgradeOrchestrationServiceState_564263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpgradeOrchestrationServiceState_564262(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564264 = query.getOrDefault("api-version")
  valid_564264 = validateParameter(valid_564264, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564264 != nil:
    section.add "api-version", valid_564264
  var valid_564265 = query.getOrDefault("timeout")
  valid_564265 = validateParameter(valid_564265, JInt, required = false,
                                 default = newJInt(60))
  if valid_564265 != nil:
    section.add "timeout", valid_564265
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564266: Call_GetUpgradeOrchestrationServiceState_564261;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_564266.validator(path, query, header, formData, body)
  let scheme = call_564266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564266.url(scheme.get, call_564266.host, call_564266.base,
                         call_564266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564266, url, valid)

proc call*(call_564267: Call_GetUpgradeOrchestrationServiceState_564261;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getUpgradeOrchestrationServiceState
  ## Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564268 = newJObject()
  add(query_564268, "api-version", newJString(apiVersion))
  add(query_564268, "timeout", newJInt(timeout))
  result = call_564267.call(nil, query_564268, nil, nil, nil)

var getUpgradeOrchestrationServiceState* = Call_GetUpgradeOrchestrationServiceState_564261(
    name: "getUpgradeOrchestrationServiceState", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeOrchestrationServiceState",
    validator: validate_GetUpgradeOrchestrationServiceState_564262, base: "",
    url: url_GetUpgradeOrchestrationServiceState_564263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterUpgradeProgress_564269 = ref object of OpenApiRestCall_563566
proc url_GetClusterUpgradeProgress_564271(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterUpgradeProgress_564270(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564272 = query.getOrDefault("api-version")
  valid_564272 = validateParameter(valid_564272, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564272 != nil:
    section.add "api-version", valid_564272
  var valid_564273 = query.getOrDefault("timeout")
  valid_564273 = validateParameter(valid_564273, JInt, required = false,
                                 default = newJInt(60))
  if valid_564273 != nil:
    section.add "timeout", valid_564273
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564274: Call_GetClusterUpgradeProgress_564269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ## 
  let valid = call_564274.validator(path, query, header, formData, body)
  let scheme = call_564274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564274.url(scheme.get, call_564274.host, call_564274.base,
                         call_564274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564274, url, valid)

proc call*(call_564275: Call_GetClusterUpgradeProgress_564269;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getClusterUpgradeProgress
  ## Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564276 = newJObject()
  add(query_564276, "api-version", newJString(apiVersion))
  add(query_564276, "timeout", newJInt(timeout))
  result = call_564275.call(nil, query_564276, nil, nil, nil)

var getClusterUpgradeProgress* = Call_GetClusterUpgradeProgress_564269(
    name: "getClusterUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/GetUpgradeProgress",
    validator: validate_GetClusterUpgradeProgress_564270, base: "",
    url: url_GetClusterUpgradeProgress_564271,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureCommand_564277 = ref object of OpenApiRestCall_563566
proc url_InvokeInfrastructureCommand_564279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureCommand_564278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564280 = query.getOrDefault("api-version")
  valid_564280 = validateParameter(valid_564280, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564280 != nil:
    section.add "api-version", valid_564280
  var valid_564281 = query.getOrDefault("timeout")
  valid_564281 = validateParameter(valid_564281, JInt, required = false,
                                 default = newJInt(60))
  if valid_564281 != nil:
    section.add "timeout", valid_564281
  var valid_564282 = query.getOrDefault("ServiceId")
  valid_564282 = validateParameter(valid_564282, JString, required = false,
                                 default = nil)
  if valid_564282 != nil:
    section.add "ServiceId", valid_564282
  var valid_564283 = query.getOrDefault("Command")
  valid_564283 = validateParameter(valid_564283, JString, required = true,
                                 default = nil)
  if valid_564283 != nil:
    section.add "Command", valid_564283
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564284: Call_InvokeInfrastructureCommand_564277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564284.validator(path, query, header, formData, body)
  let scheme = call_564284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564284.url(scheme.get, call_564284.host, call_564284.base,
                         call_564284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564284, url, valid)

proc call*(call_564285: Call_InvokeInfrastructureCommand_564277; Command: string;
          apiVersion: string = "6.0"; timeout: int = 60; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureCommand
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific commands to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_564286 = newJObject()
  add(query_564286, "api-version", newJString(apiVersion))
  add(query_564286, "timeout", newJInt(timeout))
  add(query_564286, "ServiceId", newJString(ServiceId))
  add(query_564286, "Command", newJString(Command))
  result = call_564285.call(nil, query_564286, nil, nil, nil)

var invokeInfrastructureCommand* = Call_InvokeInfrastructureCommand_564277(
    name: "invokeInfrastructureCommand", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureCommand",
    validator: validate_InvokeInfrastructureCommand_564278, base: "",
    url: url_InvokeInfrastructureCommand_564279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeInfrastructureQuery_564287 = ref object of OpenApiRestCall_563566
proc url_InvokeInfrastructureQuery_564289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_InvokeInfrastructureQuery_564288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceId: JString
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: JString (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564290 = query.getOrDefault("api-version")
  valid_564290 = validateParameter(valid_564290, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564290 != nil:
    section.add "api-version", valid_564290
  var valid_564291 = query.getOrDefault("timeout")
  valid_564291 = validateParameter(valid_564291, JInt, required = false,
                                 default = newJInt(60))
  if valid_564291 != nil:
    section.add "timeout", valid_564291
  var valid_564292 = query.getOrDefault("ServiceId")
  valid_564292 = validateParameter(valid_564292, JString, required = false,
                                 default = nil)
  if valid_564292 != nil:
    section.add "ServiceId", valid_564292
  var valid_564293 = query.getOrDefault("Command")
  valid_564293 = validateParameter(valid_564293, JString, required = true,
                                 default = nil)
  if valid_564293 != nil:
    section.add "Command", valid_564293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564294: Call_InvokeInfrastructureQuery_564287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564294.validator(path, query, header, formData, body)
  let scheme = call_564294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564294.url(scheme.get, call_564294.host, call_564294.base,
                         call_564294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564294, url, valid)

proc call*(call_564295: Call_InvokeInfrastructureQuery_564287; Command: string;
          apiVersion: string = "6.0"; timeout: int = 60; ServiceId: string = ""): Recallable =
  ## invokeInfrastructureQuery
  ## For clusters that have one or more instances of the Infrastructure Service configured,
  ## this API provides a way to send infrastructure-specific queries to a particular
  ## instance of the Infrastructure Service.
  ## 
  ## Available commands and their corresponding response formats vary depending upon
  ## the infrastructure on which the cluster is running.
  ## 
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceId: string
  ##            : The identity of the infrastructure service. This is the full name of the infrastructure service without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one instance of infrastructure service running.
  ##   Command: string (required)
  ##          : The text of the command to be invoked. The content of the command is infrastructure-specific.
  var query_564296 = newJObject()
  add(query_564296, "api-version", newJString(apiVersion))
  add(query_564296, "timeout", newJInt(timeout))
  add(query_564296, "ServiceId", newJString(ServiceId))
  add(query_564296, "Command", newJString(Command))
  result = call_564295.call(nil, query_564296, nil, nil, nil)

var invokeInfrastructureQuery* = Call_InvokeInfrastructureQuery_564287(
    name: "invokeInfrastructureQuery", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/$/InvokeInfrastructureQuery",
    validator: validate_InvokeInfrastructureQuery_564288, base: "",
    url: url_InvokeInfrastructureQuery_564289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeClusterUpgrade_564297 = ref object of OpenApiRestCall_563566
proc url_ResumeClusterUpgrade_564299(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ResumeClusterUpgrade_564298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564300 = query.getOrDefault("api-version")
  valid_564300 = validateParameter(valid_564300, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564300 != nil:
    section.add "api-version", valid_564300
  var valid_564301 = query.getOrDefault("timeout")
  valid_564301 = validateParameter(valid_564301, JInt, required = false,
                                 default = newJInt(60))
  if valid_564301 != nil:
    section.add "timeout", valid_564301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564303: Call_ResumeClusterUpgrade_564297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ## 
  let valid = call_564303.validator(path, query, header, formData, body)
  let scheme = call_564303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564303.url(scheme.get, call_564303.host, call_564303.base,
                         call_564303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564303, url, valid)

proc call*(call_564304: Call_ResumeClusterUpgrade_564297;
          ResumeClusterUpgradeDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## resumeClusterUpgrade
  ## Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
  ##   ResumeClusterUpgradeDescription: JObject (required)
  ##                                  : Describes the parameters for resuming a cluster upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564305 = newJObject()
  var body_564306 = newJObject()
  if ResumeClusterUpgradeDescription != nil:
    body_564306 = ResumeClusterUpgradeDescription
  add(query_564305, "api-version", newJString(apiVersion))
  add(query_564305, "timeout", newJInt(timeout))
  result = call_564304.call(nil, query_564305, nil, nil, body_564306)

var resumeClusterUpgrade* = Call_ResumeClusterUpgrade_564297(
    name: "resumeClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeClusterUpgrade_564298, base: "",
    url: url_ResumeClusterUpgrade_564299, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionCluster_564307 = ref object of OpenApiRestCall_563566
proc url_ProvisionCluster_564309(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionCluster_564308(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564310 = query.getOrDefault("api-version")
  valid_564310 = validateParameter(valid_564310, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564310 != nil:
    section.add "api-version", valid_564310
  var valid_564311 = query.getOrDefault("timeout")
  valid_564311 = validateParameter(valid_564311, JInt, required = false,
                                 default = newJInt(60))
  if valid_564311 != nil:
    section.add "timeout", valid_564311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564313: Call_ProvisionCluster_564307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ## 
  let valid = call_564313.validator(path, query, header, formData, body)
  let scheme = call_564313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564313.url(scheme.get, call_564313.host, call_564313.base,
                         call_564313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564313, url, valid)

proc call*(call_564314: Call_ProvisionCluster_564307;
          ProvisionFabricDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## provisionCluster
  ## Validate and provision the code or configuration packages of a Service Fabric cluster.
  ##   ProvisionFabricDescription: JObject (required)
  ##                             : Describes the parameters for provisioning a cluster.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564315 = newJObject()
  var body_564316 = newJObject()
  if ProvisionFabricDescription != nil:
    body_564316 = ProvisionFabricDescription
  add(query_564315, "api-version", newJString(apiVersion))
  add(query_564315, "timeout", newJInt(timeout))
  result = call_564314.call(nil, query_564315, nil, nil, body_564316)

var provisionCluster* = Call_ProvisionCluster_564307(name: "provisionCluster",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/$/Provision",
    validator: validate_ProvisionCluster_564308, base: "",
    url: url_ProvisionCluster_564309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverAllPartitions_564317 = ref object of OpenApiRestCall_563566
proc url_RecoverAllPartitions_564319(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverAllPartitions_564318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564320 = query.getOrDefault("api-version")
  valid_564320 = validateParameter(valid_564320, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564320 != nil:
    section.add "api-version", valid_564320
  var valid_564321 = query.getOrDefault("timeout")
  valid_564321 = validateParameter(valid_564321, JInt, required = false,
                                 default = newJInt(60))
  if valid_564321 != nil:
    section.add "timeout", valid_564321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564322: Call_RecoverAllPartitions_564317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_564322.validator(path, query, header, formData, body)
  let scheme = call_564322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564322.url(scheme.get, call_564322.host, call_564322.base,
                         call_564322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564322, url, valid)

proc call*(call_564323: Call_RecoverAllPartitions_564317;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## recoverAllPartitions
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564324 = newJObject()
  add(query_564324, "api-version", newJString(apiVersion))
  add(query_564324, "timeout", newJInt(timeout))
  result = call_564323.call(nil, query_564324, nil, nil, nil)

var recoverAllPartitions* = Call_RecoverAllPartitions_564317(
    name: "recoverAllPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverAllPartitions",
    validator: validate_RecoverAllPartitions_564318, base: "",
    url: url_RecoverAllPartitions_564319, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverSystemPartitions_564325 = ref object of OpenApiRestCall_563566
proc url_RecoverSystemPartitions_564327(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RecoverSystemPartitions_564326(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564328 = query.getOrDefault("api-version")
  valid_564328 = validateParameter(valid_564328, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564328 != nil:
    section.add "api-version", valid_564328
  var valid_564329 = query.getOrDefault("timeout")
  valid_564329 = validateParameter(valid_564329, JInt, required = false,
                                 default = newJInt(60))
  if valid_564329 != nil:
    section.add "timeout", valid_564329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564330: Call_RecoverSystemPartitions_564325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_564330.validator(path, query, header, formData, body)
  let scheme = call_564330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564330.url(scheme.get, call_564330.host, call_564330.base,
                         call_564330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564330, url, valid)

proc call*(call_564331: Call_RecoverSystemPartitions_564325;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## recoverSystemPartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564332 = newJObject()
  add(query_564332, "api-version", newJString(apiVersion))
  add(query_564332, "timeout", newJInt(timeout))
  result = call_564331.call(nil, query_564332, nil, nil, nil)

var recoverSystemPartitions* = Call_RecoverSystemPartitions_564325(
    name: "recoverSystemPartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RecoverSystemPartitions",
    validator: validate_RecoverSystemPartitions_564326, base: "",
    url: url_RecoverSystemPartitions_564327, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportClusterHealth_564333 = ref object of OpenApiRestCall_563566
proc url_ReportClusterHealth_564335(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ReportClusterHealth_564334(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564336 = query.getOrDefault("Immediate")
  valid_564336 = validateParameter(valid_564336, JBool, required = false,
                                 default = newJBool(false))
  if valid_564336 != nil:
    section.add "Immediate", valid_564336
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564337 = query.getOrDefault("api-version")
  valid_564337 = validateParameter(valid_564337, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564337 != nil:
    section.add "api-version", valid_564337
  var valid_564338 = query.getOrDefault("timeout")
  valid_564338 = validateParameter(valid_564338, JInt, required = false,
                                 default = newJInt(60))
  if valid_564338 != nil:
    section.add "timeout", valid_564338
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564340: Call_ReportClusterHealth_564333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_564340.validator(path, query, header, formData, body)
  let scheme = call_564340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564340.url(scheme.get, call_564340.host, call_564340.base,
                         call_564340.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564340, url, valid)

proc call*(call_564341: Call_ReportClusterHealth_564333;
          HealthInformation: JsonNode; Immediate: bool = false;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## reportClusterHealth
  ## Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564342 = newJObject()
  var body_564343 = newJObject()
  add(query_564342, "Immediate", newJBool(Immediate))
  if HealthInformation != nil:
    body_564343 = HealthInformation
  add(query_564342, "api-version", newJString(apiVersion))
  add(query_564342, "timeout", newJInt(timeout))
  result = call_564341.call(nil, query_564342, nil, nil, body_564343)

var reportClusterHealth* = Call_ReportClusterHealth_564333(
    name: "reportClusterHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/ReportClusterHealth",
    validator: validate_ReportClusterHealth_564334, base: "",
    url: url_ReportClusterHealth_564335, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackClusterUpgrade_564344 = ref object of OpenApiRestCall_563566
proc url_RollbackClusterUpgrade_564346(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_RollbackClusterUpgrade_564345(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564347 = query.getOrDefault("api-version")
  valid_564347 = validateParameter(valid_564347, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564347 != nil:
    section.add "api-version", valid_564347
  var valid_564348 = query.getOrDefault("timeout")
  valid_564348 = validateParameter(valid_564348, JInt, required = false,
                                 default = newJInt(60))
  if valid_564348 != nil:
    section.add "timeout", valid_564348
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564349: Call_RollbackClusterUpgrade_564344; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ## 
  let valid = call_564349.validator(path, query, header, formData, body)
  let scheme = call_564349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564349.url(scheme.get, call_564349.host, call_564349.base,
                         call_564349.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564349, url, valid)

proc call*(call_564350: Call_RollbackClusterUpgrade_564344;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## rollbackClusterUpgrade
  ## Roll back the code or configuration upgrade of a Service Fabric cluster.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564351 = newJObject()
  add(query_564351, "api-version", newJString(apiVersion))
  add(query_564351, "timeout", newJInt(timeout))
  result = call_564350.call(nil, query_564351, nil, nil, nil)

var rollbackClusterUpgrade* = Call_RollbackClusterUpgrade_564344(
    name: "rollbackClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/RollbackUpgrade",
    validator: validate_RollbackClusterUpgrade_564345, base: "",
    url: url_RollbackClusterUpgrade_564346, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetUpgradeOrchestrationServiceState_564352 = ref object of OpenApiRestCall_563566
proc url_SetUpgradeOrchestrationServiceState_564354(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_SetUpgradeOrchestrationServiceState_564353(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564355 = query.getOrDefault("api-version")
  valid_564355 = validateParameter(valid_564355, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564355 != nil:
    section.add "api-version", valid_564355
  var valid_564356 = query.getOrDefault("timeout")
  valid_564356 = validateParameter(valid_564356, JInt, required = false,
                                 default = newJInt(60))
  if valid_564356 != nil:
    section.add "timeout", valid_564356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564358: Call_SetUpgradeOrchestrationServiceState_564352;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ## 
  let valid = call_564358.validator(path, query, header, formData, body)
  let scheme = call_564358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564358.url(scheme.get, call_564358.host, call_564358.base,
                         call_564358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564358, url, valid)

proc call*(call_564359: Call_SetUpgradeOrchestrationServiceState_564352;
          UpgradeOrchestrationServiceState: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## setUpgradeOrchestrationServiceState
  ## Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpgradeOrchestrationServiceState: JObject (required)
  ##                                   : Service state of Service Fabric Upgrade Orchestration Service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564360 = newJObject()
  var body_564361 = newJObject()
  add(query_564360, "api-version", newJString(apiVersion))
  if UpgradeOrchestrationServiceState != nil:
    body_564361 = UpgradeOrchestrationServiceState
  add(query_564360, "timeout", newJInt(timeout))
  result = call_564359.call(nil, query_564360, nil, nil, body_564361)

var setUpgradeOrchestrationServiceState* = Call_SetUpgradeOrchestrationServiceState_564352(
    name: "setUpgradeOrchestrationServiceState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/SetUpgradeOrchestrationServiceState",
    validator: validate_SetUpgradeOrchestrationServiceState_564353, base: "",
    url: url_SetUpgradeOrchestrationServiceState_564354,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterConfigurationUpgrade_564362 = ref object of OpenApiRestCall_563566
proc url_StartClusterConfigurationUpgrade_564364(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterConfigurationUpgrade_564363(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564375 = query.getOrDefault("api-version")
  valid_564375 = validateParameter(valid_564375, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564375 != nil:
    section.add "api-version", valid_564375
  var valid_564376 = query.getOrDefault("timeout")
  valid_564376 = validateParameter(valid_564376, JInt, required = false,
                                 default = newJInt(60))
  if valid_564376 != nil:
    section.add "timeout", valid_564376
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564378: Call_StartClusterConfigurationUpgrade_564362;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ## 
  let valid = call_564378.validator(path, query, header, formData, body)
  let scheme = call_564378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564378.url(scheme.get, call_564378.host, call_564378.base,
                         call_564378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564378, url, valid)

proc call*(call_564379: Call_StartClusterConfigurationUpgrade_564362;
          ClusterConfigurationUpgradeDescription: JsonNode;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## startClusterConfigurationUpgrade
  ## Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterConfigurationUpgradeDescription: JObject (required)
  ##                                         : Parameters for a standalone cluster configuration upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564380 = newJObject()
  var body_564381 = newJObject()
  add(query_564380, "api-version", newJString(apiVersion))
  if ClusterConfigurationUpgradeDescription != nil:
    body_564381 = ClusterConfigurationUpgradeDescription
  add(query_564380, "timeout", newJInt(timeout))
  result = call_564379.call(nil, query_564380, nil, nil, body_564381)

var startClusterConfigurationUpgrade* = Call_StartClusterConfigurationUpgrade_564362(
    name: "startClusterConfigurationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/StartClusterConfigurationUpgrade",
    validator: validate_StartClusterConfigurationUpgrade_564363, base: "",
    url: url_StartClusterConfigurationUpgrade_564364,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionCluster_564382 = ref object of OpenApiRestCall_563566
proc url_UnprovisionCluster_564384(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UnprovisionCluster_564383(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## It is supported to unprovision code and configuration separately.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564385 = query.getOrDefault("api-version")
  valid_564385 = validateParameter(valid_564385, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564385 != nil:
    section.add "api-version", valid_564385
  var valid_564386 = query.getOrDefault("timeout")
  valid_564386 = validateParameter(valid_564386, JInt, required = false,
                                 default = newJInt(60))
  if valid_564386 != nil:
    section.add "timeout", valid_564386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564388: Call_UnprovisionCluster_564382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## It is supported to unprovision code and configuration separately.
  ## 
  let valid = call_564388.validator(path, query, header, formData, body)
  let scheme = call_564388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564388.url(scheme.get, call_564388.host, call_564388.base,
                         call_564388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564388, url, valid)

proc call*(call_564389: Call_UnprovisionCluster_564382;
          UnprovisionFabricDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## unprovisionCluster
  ## It is supported to unprovision code and configuration separately.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UnprovisionFabricDescription: JObject (required)
  ##                               : Describes the parameters for unprovisioning a cluster.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564390 = newJObject()
  var body_564391 = newJObject()
  add(query_564390, "api-version", newJString(apiVersion))
  if UnprovisionFabricDescription != nil:
    body_564391 = UnprovisionFabricDescription
  add(query_564390, "timeout", newJInt(timeout))
  result = call_564389.call(nil, query_564390, nil, nil, body_564391)

var unprovisionCluster* = Call_UnprovisionCluster_564382(
    name: "unprovisionCluster", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Unprovision",
    validator: validate_UnprovisionCluster_564383, base: "",
    url: url_UnprovisionCluster_564384, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairExecutionState_564392 = ref object of OpenApiRestCall_563566
proc url_UpdateRepairExecutionState_564394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairExecutionState_564393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564395 = query.getOrDefault("api-version")
  valid_564395 = validateParameter(valid_564395, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564395 != nil:
    section.add "api-version", valid_564395
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564397: Call_UpdateRepairExecutionState_564392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564397.validator(path, query, header, formData, body)
  let scheme = call_564397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564397.url(scheme.get, call_564397.host, call_564397.base,
                         call_564397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564397, url, valid)

proc call*(call_564398: Call_UpdateRepairExecutionState_564392;
          RepairTask: JsonNode; apiVersion: string = "6.0"): Recallable =
  ## updateRepairExecutionState
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTask: JObject (required)
  ##             : Describes the repair task to be created or updated.
  var query_564399 = newJObject()
  var body_564400 = newJObject()
  add(query_564399, "api-version", newJString(apiVersion))
  if RepairTask != nil:
    body_564400 = RepairTask
  result = call_564398.call(nil, query_564399, nil, nil, body_564400)

var updateRepairExecutionState* = Call_UpdateRepairExecutionState_564392(
    name: "updateRepairExecutionState", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairExecutionState",
    validator: validate_UpdateRepairExecutionState_564393, base: "",
    url: url_UpdateRepairExecutionState_564394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRepairTaskHealthPolicy_564401 = ref object of OpenApiRestCall_563566
proc url_UpdateRepairTaskHealthPolicy_564403(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateRepairTaskHealthPolicy_564402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564404 = query.getOrDefault("api-version")
  valid_564404 = validateParameter(valid_564404, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564404 != nil:
    section.add "api-version", valid_564404
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564406: Call_UpdateRepairTaskHealthPolicy_564401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ## 
  let valid = call_564406.validator(path, query, header, formData, body)
  let scheme = call_564406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564406.url(scheme.get, call_564406.host, call_564406.base,
                         call_564406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564406, url, valid)

proc call*(call_564407: Call_UpdateRepairTaskHealthPolicy_564401;
          RepairTaskUpdateHealthPolicyDescription: JsonNode;
          apiVersion: string = "6.0"): Recallable =
  ## updateRepairTaskHealthPolicy
  ## This API supports the Service Fabric platform; it is not meant to be used directly from your code.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RepairTaskUpdateHealthPolicyDescription: JObject (required)
  ##                                          : Describes the repair task healthy policy to be updated.
  var query_564408 = newJObject()
  var body_564409 = newJObject()
  add(query_564408, "api-version", newJString(apiVersion))
  if RepairTaskUpdateHealthPolicyDescription != nil:
    body_564409 = RepairTaskUpdateHealthPolicyDescription
  result = call_564407.call(nil, query_564408, nil, nil, body_564409)

var updateRepairTaskHealthPolicy* = Call_UpdateRepairTaskHealthPolicy_564401(
    name: "updateRepairTaskHealthPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateRepairTaskHealthPolicy",
    validator: validate_UpdateRepairTaskHealthPolicy_564402, base: "",
    url: url_UpdateRepairTaskHealthPolicy_564403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateClusterUpgrade_564410 = ref object of OpenApiRestCall_563566
proc url_UpdateClusterUpgrade_564412(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_UpdateClusterUpgrade_564411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564413 = query.getOrDefault("api-version")
  valid_564413 = validateParameter(valid_564413, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564413 != nil:
    section.add "api-version", valid_564413
  var valid_564414 = query.getOrDefault("timeout")
  valid_564414 = validateParameter(valid_564414, JInt, required = false,
                                 default = newJInt(60))
  if valid_564414 != nil:
    section.add "timeout", valid_564414
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564416: Call_UpdateClusterUpgrade_564410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ## 
  let valid = call_564416.validator(path, query, header, formData, body)
  let scheme = call_564416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564416.url(scheme.get, call_564416.host, call_564416.base,
                         call_564416.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564416, url, valid)

proc call*(call_564417: Call_UpdateClusterUpgrade_564410;
          UpdateClusterUpgradeDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## updateClusterUpgrade
  ## Update the upgrade parameters used during a Service Fabric cluster upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   UpdateClusterUpgradeDescription: JObject (required)
  ##                                  : Parameters for updating a cluster upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564418 = newJObject()
  var body_564419 = newJObject()
  add(query_564418, "api-version", newJString(apiVersion))
  if UpdateClusterUpgradeDescription != nil:
    body_564419 = UpdateClusterUpgradeDescription
  add(query_564418, "timeout", newJInt(timeout))
  result = call_564417.call(nil, query_564418, nil, nil, body_564419)

var updateClusterUpgrade* = Call_UpdateClusterUpgrade_564410(
    name: "updateClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/UpdateUpgrade",
    validator: validate_UpdateClusterUpgrade_564411, base: "",
    url: url_UpdateClusterUpgrade_564412, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartClusterUpgrade_564420 = ref object of OpenApiRestCall_563566
proc url_StartClusterUpgrade_564422(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartClusterUpgrade_564421(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564423 = query.getOrDefault("api-version")
  valid_564423 = validateParameter(valid_564423, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564423 != nil:
    section.add "api-version", valid_564423
  var valid_564424 = query.getOrDefault("timeout")
  valid_564424 = validateParameter(valid_564424, JInt, required = false,
                                 default = newJInt(60))
  if valid_564424 != nil:
    section.add "timeout", valid_564424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564426: Call_StartClusterUpgrade_564420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ## 
  let valid = call_564426.validator(path, query, header, formData, body)
  let scheme = call_564426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564426.url(scheme.get, call_564426.host, call_564426.base,
                         call_564426.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564426, url, valid)

proc call*(call_564427: Call_StartClusterUpgrade_564420;
          StartClusterUpgradeDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## startClusterUpgrade
  ## Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   StartClusterUpgradeDescription: JObject (required)
  ##                                 : Describes the parameters for starting a cluster upgrade.
  var query_564428 = newJObject()
  var body_564429 = newJObject()
  add(query_564428, "api-version", newJString(apiVersion))
  add(query_564428, "timeout", newJInt(timeout))
  if StartClusterUpgradeDescription != nil:
    body_564429 = StartClusterUpgradeDescription
  result = call_564427.call(nil, query_564428, nil, nil, body_564429)

var startClusterUpgrade* = Call_StartClusterUpgrade_564420(
    name: "startClusterUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/$/Upgrade",
    validator: validate_StartClusterUpgrade_564421, base: "",
    url: url_StartClusterUpgrade_564422, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoList_564430 = ref object of OpenApiRestCall_563566
proc url_GetApplicationTypeInfoList_564432(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationTypeInfoList_564431(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ApplicationTypeDefinitionKindFilter: JInt
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_564433 = query.getOrDefault("ContinuationToken")
  valid_564433 = validateParameter(valid_564433, JString, required = false,
                                 default = nil)
  if valid_564433 != nil:
    section.add "ContinuationToken", valid_564433
  var valid_564434 = query.getOrDefault("MaxResults")
  valid_564434 = validateParameter(valid_564434, JInt, required = false,
                                 default = newJInt(0))
  if valid_564434 != nil:
    section.add "MaxResults", valid_564434
  var valid_564435 = query.getOrDefault("ApplicationTypeDefinitionKindFilter")
  valid_564435 = validateParameter(valid_564435, JInt, required = false,
                                 default = newJInt(0))
  if valid_564435 != nil:
    section.add "ApplicationTypeDefinitionKindFilter", valid_564435
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564436 = query.getOrDefault("api-version")
  valid_564436 = validateParameter(valid_564436, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564436 != nil:
    section.add "api-version", valid_564436
  var valid_564437 = query.getOrDefault("timeout")
  valid_564437 = validateParameter(valid_564437, JInt, required = false,
                                 default = newJInt(60))
  if valid_564437 != nil:
    section.add "timeout", valid_564437
  var valid_564438 = query.getOrDefault("ExcludeApplicationParameters")
  valid_564438 = validateParameter(valid_564438, JBool, required = false,
                                 default = newJBool(false))
  if valid_564438 != nil:
    section.add "ExcludeApplicationParameters", valid_564438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564439: Call_GetApplicationTypeInfoList_564430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_564439.validator(path, query, header, formData, body)
  let scheme = call_564439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564439.url(scheme.get, call_564439.host, call_564439.base,
                         call_564439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564439, url, valid)

proc call*(call_564440: Call_GetApplicationTypeInfoList_564430;
          ContinuationToken: string = ""; MaxResults: int = 0;
          ApplicationTypeDefinitionKindFilter: int = 0; apiVersion: string = "6.0";
          timeout: int = 60; ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoList
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   ApplicationTypeDefinitionKindFilter: int
  ##                                      : Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.
  ## - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_564441 = newJObject()
  add(query_564441, "ContinuationToken", newJString(ContinuationToken))
  add(query_564441, "MaxResults", newJInt(MaxResults))
  add(query_564441, "ApplicationTypeDefinitionKindFilter",
      newJInt(ApplicationTypeDefinitionKindFilter))
  add(query_564441, "api-version", newJString(apiVersion))
  add(query_564441, "timeout", newJInt(timeout))
  add(query_564441, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_564440.call(nil, query_564441, nil, nil, nil)

var getApplicationTypeInfoList* = Call_GetApplicationTypeInfoList_564430(
    name: "getApplicationTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes",
    validator: validate_GetApplicationTypeInfoList_564431, base: "",
    url: url_GetApplicationTypeInfoList_564432,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ProvisionApplicationType_564442 = ref object of OpenApiRestCall_563566
proc url_ProvisionApplicationType_564444(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_ProvisionApplicationType_564443(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564445 = query.getOrDefault("api-version")
  valid_564445 = validateParameter(valid_564445, JString, required = true,
                                 default = newJString("6.2"))
  if valid_564445 != nil:
    section.add "api-version", valid_564445
  var valid_564446 = query.getOrDefault("timeout")
  valid_564446 = validateParameter(valid_564446, JInt, required = false,
                                 default = newJInt(60))
  if valid_564446 != nil:
    section.add "timeout", valid_564446
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564448: Call_ProvisionApplicationType_564442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ## 
  let valid = call_564448.validator(path, query, header, formData, body)
  let scheme = call_564448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564448.url(scheme.get, call_564448.host, call_564448.base,
                         call_564448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564448, url, valid)

proc call*(call_564449: Call_ProvisionApplicationType_564442;
          ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JsonNode;
          apiVersion: string = "6.2"; timeout: int = 60): Recallable =
  ## provisionApplicationType
  ## Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated.
  ## The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ProvisionApplicationTypeDescriptionBaseRequiredBodyParam: JObject (required)
  ##                                                           : The base type of provision application type description which supports either image store-based provision or external store-based provision.
  var query_564450 = newJObject()
  var body_564451 = newJObject()
  add(query_564450, "api-version", newJString(apiVersion))
  add(query_564450, "timeout", newJInt(timeout))
  if ProvisionApplicationTypeDescriptionBaseRequiredBodyParam != nil:
    body_564451 = ProvisionApplicationTypeDescriptionBaseRequiredBodyParam
  result = call_564449.call(nil, query_564450, nil, nil, body_564451)

var provisionApplicationType* = Call_ProvisionApplicationType_564442(
    name: "provisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ApplicationTypes/$/Provision",
    validator: validate_ProvisionApplicationType_564443, base: "",
    url: url_ProvisionApplicationType_564444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationTypeInfoListByName_564452 = ref object of OpenApiRestCall_563566
proc url_GetApplicationTypeInfoListByName_564454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationTypeInfoListByName_564453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_564469 = path.getOrDefault("applicationTypeName")
  valid_564469 = validateParameter(valid_564469, JString, required = true,
                                 default = nil)
  if valid_564469 != nil:
    section.add "applicationTypeName", valid_564469
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString
  ##                         : The version of the application type.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_564470 = query.getOrDefault("ContinuationToken")
  valid_564470 = validateParameter(valid_564470, JString, required = false,
                                 default = nil)
  if valid_564470 != nil:
    section.add "ContinuationToken", valid_564470
  var valid_564471 = query.getOrDefault("MaxResults")
  valid_564471 = validateParameter(valid_564471, JInt, required = false,
                                 default = newJInt(0))
  if valid_564471 != nil:
    section.add "MaxResults", valid_564471
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564472 = query.getOrDefault("api-version")
  valid_564472 = validateParameter(valid_564472, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564472 != nil:
    section.add "api-version", valid_564472
  var valid_564473 = query.getOrDefault("ApplicationTypeVersion")
  valid_564473 = validateParameter(valid_564473, JString, required = false,
                                 default = nil)
  if valid_564473 != nil:
    section.add "ApplicationTypeVersion", valid_564473
  var valid_564474 = query.getOrDefault("timeout")
  valid_564474 = validateParameter(valid_564474, JInt, required = false,
                                 default = newJInt(60))
  if valid_564474 != nil:
    section.add "timeout", valid_564474
  var valid_564475 = query.getOrDefault("ExcludeApplicationParameters")
  valid_564475 = validateParameter(valid_564475, JBool, required = false,
                                 default = newJBool(false))
  if valid_564475 != nil:
    section.add "ExcludeApplicationParameters", valid_564475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564476: Call_GetApplicationTypeInfoListByName_564452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ## 
  let valid = call_564476.validator(path, query, header, formData, body)
  let scheme = call_564476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564476.url(scheme.get, call_564476.host, call_564476.base,
                         call_564476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564476, url, valid)

proc call*(call_564477: Call_GetApplicationTypeInfoListByName_564452;
          applicationTypeName: string; ContinuationToken: string = "";
          MaxResults: int = 0; apiVersion: string = "6.0";
          ApplicationTypeVersion: string = ""; timeout: int = 60;
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationTypeInfoListByName
  ## Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: string
  ##                         : The version of the application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var path_564478 = newJObject()
  var query_564479 = newJObject()
  add(query_564479, "ContinuationToken", newJString(ContinuationToken))
  add(query_564479, "MaxResults", newJInt(MaxResults))
  add(query_564479, "api-version", newJString(apiVersion))
  add(query_564479, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_564479, "timeout", newJInt(timeout))
  add(path_564478, "applicationTypeName", newJString(applicationTypeName))
  add(query_564479, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_564477.call(path_564478, query_564479, nil, nil, nil)

var getApplicationTypeInfoListByName* = Call_GetApplicationTypeInfoListByName_564452(
    name: "getApplicationTypeInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}",
    validator: validate_GetApplicationTypeInfoListByName_564453, base: "",
    url: url_GetApplicationTypeInfoListByName_564454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationManifest_564480 = ref object of OpenApiRestCall_563566
proc url_GetApplicationManifest_564482(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetApplicationManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationManifest_564481(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response contains the application manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_564483 = path.getOrDefault("applicationTypeName")
  valid_564483 = validateParameter(valid_564483, JString, required = true,
                                 default = nil)
  if valid_564483 != nil:
    section.add "applicationTypeName", valid_564483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564484 = query.getOrDefault("api-version")
  valid_564484 = validateParameter(valid_564484, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564484 != nil:
    section.add "api-version", valid_564484
  var valid_564485 = query.getOrDefault("ApplicationTypeVersion")
  valid_564485 = validateParameter(valid_564485, JString, required = true,
                                 default = nil)
  if valid_564485 != nil:
    section.add "ApplicationTypeVersion", valid_564485
  var valid_564486 = query.getOrDefault("timeout")
  valid_564486 = validateParameter(valid_564486, JInt, required = false,
                                 default = newJInt(60))
  if valid_564486 != nil:
    section.add "timeout", valid_564486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564487: Call_GetApplicationManifest_564480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response contains the application manifest XML as a string.
  ## 
  let valid = call_564487.validator(path, query, header, formData, body)
  let scheme = call_564487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564487.url(scheme.get, call_564487.host, call_564487.base,
                         call_564487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564487, url, valid)

proc call*(call_564488: Call_GetApplicationManifest_564480;
          ApplicationTypeVersion: string; applicationTypeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getApplicationManifest
  ## The response contains the application manifest XML as a string.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  var path_564489 = newJObject()
  var query_564490 = newJObject()
  add(query_564490, "api-version", newJString(apiVersion))
  add(query_564490, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_564490, "timeout", newJInt(timeout))
  add(path_564489, "applicationTypeName", newJString(applicationTypeName))
  result = call_564488.call(path_564489, query_564490, nil, nil, nil)

var getApplicationManifest* = Call_GetApplicationManifest_564480(
    name: "getApplicationManifest", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest",
    validator: validate_GetApplicationManifest_564481, base: "",
    url: url_GetApplicationManifest_564482, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceManifest_564491 = ref object of OpenApiRestCall_563566
proc url_GetServiceManifest_564493(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceManifest")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceManifest_564492(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_564494 = path.getOrDefault("applicationTypeName")
  valid_564494 = validateParameter(valid_564494, JString, required = true,
                                 default = nil)
  if valid_564494 != nil:
    section.add "applicationTypeName", valid_564494
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564495 = query.getOrDefault("api-version")
  valid_564495 = validateParameter(valid_564495, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564495 != nil:
    section.add "api-version", valid_564495
  var valid_564496 = query.getOrDefault("ApplicationTypeVersion")
  valid_564496 = validateParameter(valid_564496, JString, required = true,
                                 default = nil)
  if valid_564496 != nil:
    section.add "ApplicationTypeVersion", valid_564496
  var valid_564497 = query.getOrDefault("timeout")
  valid_564497 = validateParameter(valid_564497, JInt, required = false,
                                 default = newJInt(60))
  if valid_564497 != nil:
    section.add "timeout", valid_564497
  var valid_564498 = query.getOrDefault("ServiceManifestName")
  valid_564498 = validateParameter(valid_564498, JString, required = true,
                                 default = nil)
  if valid_564498 != nil:
    section.add "ServiceManifestName", valid_564498
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564499: Call_GetServiceManifest_564491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ## 
  let valid = call_564499.validator(path, query, header, formData, body)
  let scheme = call_564499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564499.url(scheme.get, call_564499.host, call_564499.base,
                         call_564499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564499, url, valid)

proc call*(call_564500: Call_GetServiceManifest_564491;
          ApplicationTypeVersion: string; applicationTypeName: string;
          ServiceManifestName: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceManifest
  ## Gets the manifest describing a service type. The response contains the service manifest XML as a string.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  var path_564501 = newJObject()
  var query_564502 = newJObject()
  add(query_564502, "api-version", newJString(apiVersion))
  add(query_564502, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_564502, "timeout", newJInt(timeout))
  add(path_564501, "applicationTypeName", newJString(applicationTypeName))
  add(query_564502, "ServiceManifestName", newJString(ServiceManifestName))
  result = call_564500.call(path_564501, query_564502, nil, nil, nil)

var getServiceManifest* = Call_GetServiceManifest_564491(
    name: "getServiceManifest", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest",
    validator: validate_GetServiceManifest_564492, base: "",
    url: url_GetServiceManifest_564493, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoList_564503 = ref object of OpenApiRestCall_563566
proc url_GetServiceTypeInfoList_564505(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoList_564504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_564506 = path.getOrDefault("applicationTypeName")
  valid_564506 = validateParameter(valid_564506, JString, required = true,
                                 default = nil)
  if valid_564506 != nil:
    section.add "applicationTypeName", valid_564506
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564507 = query.getOrDefault("api-version")
  valid_564507 = validateParameter(valid_564507, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564507 != nil:
    section.add "api-version", valid_564507
  var valid_564508 = query.getOrDefault("ApplicationTypeVersion")
  valid_564508 = validateParameter(valid_564508, JString, required = true,
                                 default = nil)
  if valid_564508 != nil:
    section.add "ApplicationTypeVersion", valid_564508
  var valid_564509 = query.getOrDefault("timeout")
  valid_564509 = validateParameter(valid_564509, JInt, required = false,
                                 default = newJInt(60))
  if valid_564509 != nil:
    section.add "timeout", valid_564509
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564510: Call_GetServiceTypeInfoList_564503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ## 
  let valid = call_564510.validator(path, query, header, formData, body)
  let scheme = call_564510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564510.url(scheme.get, call_564510.host, call_564510.base,
                         call_564510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564510, url, valid)

proc call*(call_564511: Call_GetServiceTypeInfoList_564503;
          ApplicationTypeVersion: string; applicationTypeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceTypeInfoList
  ## Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  var path_564512 = newJObject()
  var query_564513 = newJObject()
  add(query_564513, "api-version", newJString(apiVersion))
  add(query_564513, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_564513, "timeout", newJInt(timeout))
  add(path_564512, "applicationTypeName", newJString(applicationTypeName))
  result = call_564511.call(path_564512, query_564513, nil, nil, nil)

var getServiceTypeInfoList* = Call_GetServiceTypeInfoList_564503(
    name: "getServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes",
    validator: validate_GetServiceTypeInfoList_564504, base: "",
    url: url_GetServiceTypeInfoList_564505, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceTypeInfoByName_564514 = ref object of OpenApiRestCall_563566
proc url_GetServiceTypeInfoByName_564516(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceTypeInfoByName_564515(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_564517 = path.getOrDefault("serviceTypeName")
  valid_564517 = validateParameter(valid_564517, JString, required = true,
                                 default = nil)
  if valid_564517 != nil:
    section.add "serviceTypeName", valid_564517
  var valid_564518 = path.getOrDefault("applicationTypeName")
  valid_564518 = validateParameter(valid_564518, JString, required = true,
                                 default = nil)
  if valid_564518 != nil:
    section.add "applicationTypeName", valid_564518
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: JString (required)
  ##                         : The version of the application type.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564519 = query.getOrDefault("api-version")
  valid_564519 = validateParameter(valid_564519, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564519 != nil:
    section.add "api-version", valid_564519
  var valid_564520 = query.getOrDefault("ApplicationTypeVersion")
  valid_564520 = validateParameter(valid_564520, JString, required = true,
                                 default = nil)
  if valid_564520 != nil:
    section.add "ApplicationTypeVersion", valid_564520
  var valid_564521 = query.getOrDefault("timeout")
  valid_564521 = validateParameter(valid_564521, JInt, required = false,
                                 default = newJInt(60))
  if valid_564521 != nil:
    section.add "timeout", valid_564521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564522: Call_GetServiceTypeInfoByName_564514; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ## 
  let valid = call_564522.validator(path, query, header, formData, body)
  let scheme = call_564522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564522.url(scheme.get, call_564522.host, call_564522.base,
                         call_564522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564522, url, valid)

proc call*(call_564523: Call_GetServiceTypeInfoByName_564514;
          serviceTypeName: string; ApplicationTypeVersion: string;
          applicationTypeName: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceTypeInfoByName
  ## Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationTypeVersion: string (required)
  ##                         : The version of the application type.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  var path_564524 = newJObject()
  var query_564525 = newJObject()
  add(path_564524, "serviceTypeName", newJString(serviceTypeName))
  add(query_564525, "api-version", newJString(apiVersion))
  add(query_564525, "ApplicationTypeVersion", newJString(ApplicationTypeVersion))
  add(query_564525, "timeout", newJInt(timeout))
  add(path_564524, "applicationTypeName", newJString(applicationTypeName))
  result = call_564523.call(path_564524, query_564525, nil, nil, nil)

var getServiceTypeInfoByName* = Call_GetServiceTypeInfoByName_564514(
    name: "getServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetServiceTypeInfoByName_564515, base: "",
    url: url_GetServiceTypeInfoByName_564516, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UnprovisionApplicationType_564526 = ref object of OpenApiRestCall_563566
proc url_UnprovisionApplicationType_564528(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationTypeName" in path,
        "`applicationTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ApplicationTypes/"),
               (kind: VariableSegment, value: "applicationTypeName"),
               (kind: ConstantSegment, value: "/$/Unprovision")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UnprovisionApplicationType_564527(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationTypeName: JString (required)
  ##                      : The name of the application type.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationTypeName` field"
  var valid_564529 = path.getOrDefault("applicationTypeName")
  valid_564529 = validateParameter(valid_564529, JString, required = true,
                                 default = nil)
  if valid_564529 != nil:
    section.add "applicationTypeName", valid_564529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564530 = query.getOrDefault("api-version")
  valid_564530 = validateParameter(valid_564530, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564530 != nil:
    section.add "api-version", valid_564530
  var valid_564531 = query.getOrDefault("timeout")
  valid_564531 = validateParameter(valid_564531, JInt, required = false,
                                 default = newJInt(60))
  if valid_564531 != nil:
    section.add "timeout", valid_564531
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564533: Call_UnprovisionApplicationType_564526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ## 
  let valid = call_564533.validator(path, query, header, formData, body)
  let scheme = call_564533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564533.url(scheme.get, call_564533.host, call_564533.base,
                         call_564533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564533, url, valid)

proc call*(call_564534: Call_UnprovisionApplicationType_564526;
          UnprovisionApplicationTypeDescriptionInfo: JsonNode;
          applicationTypeName: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## unprovisionApplicationType
  ## This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
  ##   UnprovisionApplicationTypeDescriptionInfo: JObject (required)
  ##                                            : The relative path for the application package in the image store specified during the prior copy operation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationTypeName: string (required)
  ##                      : The name of the application type.
  var path_564535 = newJObject()
  var query_564536 = newJObject()
  var body_564537 = newJObject()
  if UnprovisionApplicationTypeDescriptionInfo != nil:
    body_564537 = UnprovisionApplicationTypeDescriptionInfo
  add(query_564536, "api-version", newJString(apiVersion))
  add(query_564536, "timeout", newJInt(timeout))
  add(path_564535, "applicationTypeName", newJString(applicationTypeName))
  result = call_564534.call(path_564535, query_564536, nil, nil, body_564537)

var unprovisionApplicationType* = Call_UnprovisionApplicationType_564526(
    name: "unprovisionApplicationType", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ApplicationTypes/{applicationTypeName}/$/Unprovision",
    validator: validate_UnprovisionApplicationType_564527, base: "",
    url: url_UnprovisionApplicationType_564528,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfoList_564538 = ref object of OpenApiRestCall_563566
proc url_GetApplicationInfoList_564540(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationInfoList_564539(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDefinitionKindFilter: JInt
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationTypeName: JString
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  var valid_564541 = query.getOrDefault("ContinuationToken")
  valid_564541 = validateParameter(valid_564541, JString, required = false,
                                 default = nil)
  if valid_564541 != nil:
    section.add "ContinuationToken", valid_564541
  var valid_564542 = query.getOrDefault("MaxResults")
  valid_564542 = validateParameter(valid_564542, JInt, required = false,
                                 default = newJInt(0))
  if valid_564542 != nil:
    section.add "MaxResults", valid_564542
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564543 = query.getOrDefault("api-version")
  valid_564543 = validateParameter(valid_564543, JString, required = true,
                                 default = newJString("6.1"))
  if valid_564543 != nil:
    section.add "api-version", valid_564543
  var valid_564544 = query.getOrDefault("ApplicationDefinitionKindFilter")
  valid_564544 = validateParameter(valid_564544, JInt, required = false,
                                 default = newJInt(0))
  if valid_564544 != nil:
    section.add "ApplicationDefinitionKindFilter", valid_564544
  var valid_564545 = query.getOrDefault("timeout")
  valid_564545 = validateParameter(valid_564545, JInt, required = false,
                                 default = newJInt(60))
  if valid_564545 != nil:
    section.add "timeout", valid_564545
  var valid_564546 = query.getOrDefault("ApplicationTypeName")
  valid_564546 = validateParameter(valid_564546, JString, required = false,
                                 default = nil)
  if valid_564546 != nil:
    section.add "ApplicationTypeName", valid_564546
  var valid_564547 = query.getOrDefault("ExcludeApplicationParameters")
  valid_564547 = validateParameter(valid_564547, JBool, required = false,
                                 default = newJBool(false))
  if valid_564547 != nil:
    section.add "ExcludeApplicationParameters", valid_564547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564548: Call_GetApplicationInfoList_564538; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ## 
  let valid = call_564548.validator(path, query, header, formData, body)
  let scheme = call_564548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564548.url(scheme.get, call_564548.host, call_564548.base,
                         call_564548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564548, url, valid)

proc call*(call_564549: Call_GetApplicationInfoList_564538;
          ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.1"; ApplicationDefinitionKindFilter: int = 0;
          timeout: int = 60; ApplicationTypeName: string = "";
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfoList
  ## Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDefinitionKindFilter: int
  ##                                  : Used to filter on ApplicationDefinitionKind, which is the mechanism used to define a Service Fabric application.
  ## - Default - Default value, which performs the same function as selecting "All". The value is 0.
  ## - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.
  ## - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.
  ## - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationTypeName: string
  ##                      : The application type name used to filter the applications to query for. This value should not contain the application type version.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  var query_564550 = newJObject()
  add(query_564550, "ContinuationToken", newJString(ContinuationToken))
  add(query_564550, "MaxResults", newJInt(MaxResults))
  add(query_564550, "api-version", newJString(apiVersion))
  add(query_564550, "ApplicationDefinitionKindFilter",
      newJInt(ApplicationDefinitionKindFilter))
  add(query_564550, "timeout", newJInt(timeout))
  add(query_564550, "ApplicationTypeName", newJString(ApplicationTypeName))
  add(query_564550, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  result = call_564549.call(nil, query_564550, nil, nil, nil)

var getApplicationInfoList* = Call_GetApplicationInfoList_564538(
    name: "getApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications",
    validator: validate_GetApplicationInfoList_564539, base: "",
    url: url_GetApplicationInfoList_564540, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateApplication_564551 = ref object of OpenApiRestCall_563566
proc url_CreateApplication_564553(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateApplication_564552(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a Service Fabric application using the specified description.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564554 = query.getOrDefault("api-version")
  valid_564554 = validateParameter(valid_564554, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564554 != nil:
    section.add "api-version", valid_564554
  var valid_564555 = query.getOrDefault("timeout")
  valid_564555 = validateParameter(valid_564555, JInt, required = false,
                                 default = newJInt(60))
  if valid_564555 != nil:
    section.add "timeout", valid_564555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564557: Call_CreateApplication_564551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric application using the specified description.
  ## 
  let valid = call_564557.validator(path, query, header, formData, body)
  let scheme = call_564557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564557.url(scheme.get, call_564557.host, call_564557.base,
                         call_564557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564557, url, valid)

proc call*(call_564558: Call_CreateApplication_564551;
          ApplicationDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## createApplication
  ## Creates a Service Fabric application using the specified description.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationDescription: JObject (required)
  ##                         : Description for creating an application.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564559 = newJObject()
  var body_564560 = newJObject()
  add(query_564559, "api-version", newJString(apiVersion))
  if ApplicationDescription != nil:
    body_564560 = ApplicationDescription
  add(query_564559, "timeout", newJInt(timeout))
  result = call_564558.call(nil, query_564559, nil, nil, body_564560)

var createApplication* = Call_CreateApplication_564551(name: "createApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/$/Create", validator: validate_CreateApplication_564552,
    base: "", url: url_CreateApplication_564553,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationInfo_564561 = ref object of OpenApiRestCall_563566
proc url_GetApplicationInfo_564563(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationInfo_564562(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564564 = path.getOrDefault("applicationId")
  valid_564564 = validateParameter(valid_564564, JString, required = true,
                                 default = nil)
  if valid_564564 != nil:
    section.add "applicationId", valid_564564
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ExcludeApplicationParameters: JBool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564565 = query.getOrDefault("api-version")
  valid_564565 = validateParameter(valid_564565, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564565 != nil:
    section.add "api-version", valid_564565
  var valid_564566 = query.getOrDefault("timeout")
  valid_564566 = validateParameter(valid_564566, JInt, required = false,
                                 default = newJInt(60))
  if valid_564566 != nil:
    section.add "timeout", valid_564566
  var valid_564567 = query.getOrDefault("ExcludeApplicationParameters")
  valid_564567 = validateParameter(valid_564567, JBool, required = false,
                                 default = newJBool(false))
  if valid_564567 != nil:
    section.add "ExcludeApplicationParameters", valid_564567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564568: Call_GetApplicationInfo_564561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ## 
  let valid = call_564568.validator(path, query, header, formData, body)
  let scheme = call_564568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564568.url(scheme.get, call_564568.host, call_564568.base,
                         call_564568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564568, url, valid)

proc call*(call_564569: Call_GetApplicationInfo_564561; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60;
          ExcludeApplicationParameters: bool = false): Recallable =
  ## getApplicationInfo
  ## Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ExcludeApplicationParameters: bool
  ##                               : The flag that specifies whether application parameters will be excluded from the result.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564570 = newJObject()
  var query_564571 = newJObject()
  add(query_564571, "api-version", newJString(apiVersion))
  add(query_564571, "timeout", newJInt(timeout))
  add(query_564571, "ExcludeApplicationParameters",
      newJBool(ExcludeApplicationParameters))
  add(path_564570, "applicationId", newJString(applicationId))
  result = call_564569.call(path_564570, query_564571, nil, nil, nil)

var getApplicationInfo* = Call_GetApplicationInfo_564561(
    name: "getApplicationInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}",
    validator: validate_GetApplicationInfo_564562, base: "",
    url: url_GetApplicationInfo_564563, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteApplication_564572 = ref object of OpenApiRestCall_563566
proc url_DeleteApplication_564574(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteApplication_564573(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564575 = path.getOrDefault("applicationId")
  valid_564575 = validateParameter(valid_564575, JString, required = true,
                                 default = nil)
  if valid_564575 != nil:
    section.add "applicationId", valid_564575
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564576 = query.getOrDefault("api-version")
  valid_564576 = validateParameter(valid_564576, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564576 != nil:
    section.add "api-version", valid_564576
  var valid_564577 = query.getOrDefault("timeout")
  valid_564577 = validateParameter(valid_564577, JInt, required = false,
                                 default = newJInt(60))
  if valid_564577 != nil:
    section.add "timeout", valid_564577
  var valid_564578 = query.getOrDefault("ForceRemove")
  valid_564578 = validateParameter(valid_564578, JBool, required = false, default = nil)
  if valid_564578 != nil:
    section.add "ForceRemove", valid_564578
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564579: Call_DeleteApplication_564572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ## 
  let valid = call_564579.validator(path, query, header, formData, body)
  let scheme = call_564579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564579.url(scheme.get, call_564579.host, call_564579.base,
                         call_564579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564579, url, valid)

proc call*(call_564580: Call_DeleteApplication_564572; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60; ForceRemove: bool = false): Recallable =
  ## deleteApplication
  ## An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564581 = newJObject()
  var query_564582 = newJObject()
  add(query_564582, "api-version", newJString(apiVersion))
  add(query_564582, "timeout", newJInt(timeout))
  add(query_564582, "ForceRemove", newJBool(ForceRemove))
  add(path_564581, "applicationId", newJString(applicationId))
  result = call_564580.call(path_564581, query_564582, nil, nil, nil)

var deleteApplication* = Call_DeleteApplication_564572(name: "deleteApplication",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/Delete",
    validator: validate_DeleteApplication_564573, base: "",
    url: url_DeleteApplication_564574, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableApplicationBackup_564583 = ref object of OpenApiRestCall_563566
proc url_DisableApplicationBackup_564585(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableApplicationBackup_564584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564586 = path.getOrDefault("applicationId")
  valid_564586 = validateParameter(valid_564586, JString, required = true,
                                 default = nil)
  if valid_564586 != nil:
    section.add "applicationId", valid_564586
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564587 = query.getOrDefault("api-version")
  valid_564587 = validateParameter(valid_564587, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564587 != nil:
    section.add "api-version", valid_564587
  var valid_564588 = query.getOrDefault("timeout")
  valid_564588 = validateParameter(valid_564588, JInt, required = false,
                                 default = newJInt(60))
  if valid_564588 != nil:
    section.add "timeout", valid_564588
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564590: Call_DisableApplicationBackup_564583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ## 
  let valid = call_564590.validator(path, query, header, formData, body)
  let scheme = call_564590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564590.url(scheme.get, call_564590.host, call_564590.base,
                         call_564590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564590, url, valid)

proc call*(call_564591: Call_DisableApplicationBackup_564583;
          applicationId: string; apiVersion: string = "6.4";
          DisableBackupDescription: JsonNode = nil; timeout: int = 60): Recallable =
  ## disableApplicationBackup
  ## Disables periodic backup of Service Fabric application which was previously enabled.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564592 = newJObject()
  var query_564593 = newJObject()
  var body_564594 = newJObject()
  add(query_564593, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_564594 = DisableBackupDescription
  add(query_564593, "timeout", newJInt(timeout))
  add(path_564592, "applicationId", newJString(applicationId))
  result = call_564591.call(path_564592, query_564593, nil, nil, body_564594)

var disableApplicationBackup* = Call_DisableApplicationBackup_564583(
    name: "disableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/DisableBackup",
    validator: validate_DisableApplicationBackup_564584, base: "",
    url: url_DisableApplicationBackup_564585, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableApplicationBackup_564595 = ref object of OpenApiRestCall_563566
proc url_EnableApplicationBackup_564597(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableApplicationBackup_564596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564598 = path.getOrDefault("applicationId")
  valid_564598 = validateParameter(valid_564598, JString, required = true,
                                 default = nil)
  if valid_564598 != nil:
    section.add "applicationId", valid_564598
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564599 = query.getOrDefault("api-version")
  valid_564599 = validateParameter(valid_564599, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564599 != nil:
    section.add "api-version", valid_564599
  var valid_564600 = query.getOrDefault("timeout")
  valid_564600 = validateParameter(valid_564600, JInt, required = false,
                                 default = newJInt(60))
  if valid_564600 != nil:
    section.add "timeout", valid_564600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564602: Call_EnableApplicationBackup_564595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_564602.validator(path, query, header, formData, body)
  let scheme = call_564602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564602.url(scheme.get, call_564602.host, call_564602.base,
                         call_564602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564602, url, valid)

proc call*(call_564603: Call_EnableApplicationBackup_564595;
          EnableBackupDescription: JsonNode; applicationId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## enableApplicationBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description. 
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564604 = newJObject()
  var query_564605 = newJObject()
  var body_564606 = newJObject()
  add(query_564605, "api-version", newJString(apiVersion))
  add(query_564605, "timeout", newJInt(timeout))
  if EnableBackupDescription != nil:
    body_564606 = EnableBackupDescription
  add(path_564604, "applicationId", newJString(applicationId))
  result = call_564603.call(path_564604, query_564605, nil, nil, body_564606)

var enableApplicationBackup* = Call_EnableApplicationBackup_564595(
    name: "enableApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/EnableBackup",
    validator: validate_EnableApplicationBackup_564596, base: "",
    url: url_EnableApplicationBackup_564597, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupConfigurationInfo_564607 = ref object of OpenApiRestCall_563566
proc url_GetApplicationBackupConfigurationInfo_564609(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupConfigurationInfo_564608(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564610 = path.getOrDefault("applicationId")
  valid_564610 = validateParameter(valid_564610, JString, required = true,
                                 default = nil)
  if valid_564610 != nil:
    section.add "applicationId", valid_564610
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564611 = query.getOrDefault("ContinuationToken")
  valid_564611 = validateParameter(valid_564611, JString, required = false,
                                 default = nil)
  if valid_564611 != nil:
    section.add "ContinuationToken", valid_564611
  var valid_564612 = query.getOrDefault("MaxResults")
  valid_564612 = validateParameter(valid_564612, JInt, required = false,
                                 default = newJInt(0))
  if valid_564612 != nil:
    section.add "MaxResults", valid_564612
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564613 = query.getOrDefault("api-version")
  valid_564613 = validateParameter(valid_564613, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564613 != nil:
    section.add "api-version", valid_564613
  var valid_564614 = query.getOrDefault("timeout")
  valid_564614 = validateParameter(valid_564614, JInt, required = false,
                                 default = newJInt(60))
  if valid_564614 != nil:
    section.add "timeout", valid_564614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564615: Call_GetApplicationBackupConfigurationInfo_564607;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ## 
  let valid = call_564615.validator(path, query, header, formData, body)
  let scheme = call_564615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564615.url(scheme.get, call_564615.host, call_564615.base,
                         call_564615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564615, url, valid)

proc call*(call_564616: Call_GetApplicationBackupConfigurationInfo_564607;
          applicationId: string; ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getApplicationBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564617 = newJObject()
  var query_564618 = newJObject()
  add(query_564618, "ContinuationToken", newJString(ContinuationToken))
  add(query_564618, "MaxResults", newJInt(MaxResults))
  add(query_564618, "api-version", newJString(apiVersion))
  add(query_564618, "timeout", newJInt(timeout))
  add(path_564617, "applicationId", newJString(applicationId))
  result = call_564616.call(path_564617, query_564618, nil, nil, nil)

var getApplicationBackupConfigurationInfo* = Call_GetApplicationBackupConfigurationInfo_564607(
    name: "getApplicationBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackupConfigurationInfo",
    validator: validate_GetApplicationBackupConfigurationInfo_564608, base: "",
    url: url_GetApplicationBackupConfigurationInfo_564609,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationBackupList_564619 = ref object of OpenApiRestCall_563566
proc url_GetApplicationBackupList_564621(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationBackupList_564620(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564622 = path.getOrDefault("applicationId")
  valid_564622 = validateParameter(valid_564622, JString, required = true,
                                 default = nil)
  if valid_564622 != nil:
    section.add "applicationId", valid_564622
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_564623 = query.getOrDefault("ContinuationToken")
  valid_564623 = validateParameter(valid_564623, JString, required = false,
                                 default = nil)
  if valid_564623 != nil:
    section.add "ContinuationToken", valid_564623
  var valid_564624 = query.getOrDefault("MaxResults")
  valid_564624 = validateParameter(valid_564624, JInt, required = false,
                                 default = newJInt(0))
  if valid_564624 != nil:
    section.add "MaxResults", valid_564624
  var valid_564625 = query.getOrDefault("StartDateTimeFilter")
  valid_564625 = validateParameter(valid_564625, JString, required = false,
                                 default = nil)
  if valid_564625 != nil:
    section.add "StartDateTimeFilter", valid_564625
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564626 = query.getOrDefault("api-version")
  valid_564626 = validateParameter(valid_564626, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564626 != nil:
    section.add "api-version", valid_564626
  var valid_564627 = query.getOrDefault("timeout")
  valid_564627 = validateParameter(valid_564627, JInt, required = false,
                                 default = newJInt(60))
  if valid_564627 != nil:
    section.add "timeout", valid_564627
  var valid_564628 = query.getOrDefault("Latest")
  valid_564628 = validateParameter(valid_564628, JBool, required = false,
                                 default = newJBool(false))
  if valid_564628 != nil:
    section.add "Latest", valid_564628
  var valid_564629 = query.getOrDefault("EndDateTimeFilter")
  valid_564629 = validateParameter(valid_564629, JString, required = false,
                                 default = nil)
  if valid_564629 != nil:
    section.add "EndDateTimeFilter", valid_564629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564630: Call_GetApplicationBackupList_564619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_564630.validator(path, query, header, formData, body)
  let scheme = call_564630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564630.url(scheme.get, call_564630.host, call_564630.base,
                         call_564630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564630, url, valid)

proc call*(call_564631: Call_GetApplicationBackupList_564619;
          applicationId: string; ContinuationToken: string = ""; MaxResults: int = 0;
          StartDateTimeFilter: string = ""; apiVersion: string = "6.4";
          timeout: int = 60; Latest: bool = false; EndDateTimeFilter: string = ""): Recallable =
  ## getApplicationBackupList
  ## Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564632 = newJObject()
  var query_564633 = newJObject()
  add(query_564633, "ContinuationToken", newJString(ContinuationToken))
  add(query_564633, "MaxResults", newJInt(MaxResults))
  add(query_564633, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_564633, "api-version", newJString(apiVersion))
  add(query_564633, "timeout", newJInt(timeout))
  add(query_564633, "Latest", newJBool(Latest))
  add(query_564633, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  add(path_564632, "applicationId", newJString(applicationId))
  result = call_564631.call(path_564632, query_564633, nil, nil, nil)

var getApplicationBackupList* = Call_GetApplicationBackupList_564619(
    name: "getApplicationBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetBackups",
    validator: validate_GetApplicationBackupList_564620, base: "",
    url: url_GetApplicationBackupList_564621, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealthUsingPolicy_564648 = ref object of OpenApiRestCall_563566
proc url_GetApplicationHealthUsingPolicy_564650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealthUsingPolicy_564649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564651 = path.getOrDefault("applicationId")
  valid_564651 = validateParameter(valid_564651, JString, required = true,
                                 default = nil)
  if valid_564651 != nil:
    section.add "applicationId", valid_564651
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564652 = query.getOrDefault("api-version")
  valid_564652 = validateParameter(valid_564652, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564652 != nil:
    section.add "api-version", valid_564652
  var valid_564653 = query.getOrDefault("ExcludeHealthStatistics")
  valid_564653 = validateParameter(valid_564653, JBool, required = false,
                                 default = newJBool(false))
  if valid_564653 != nil:
    section.add "ExcludeHealthStatistics", valid_564653
  var valid_564654 = query.getOrDefault("timeout")
  valid_564654 = validateParameter(valid_564654, JInt, required = false,
                                 default = newJInt(60))
  if valid_564654 != nil:
    section.add "timeout", valid_564654
  var valid_564655 = query.getOrDefault("ServicesHealthStateFilter")
  valid_564655 = validateParameter(valid_564655, JInt, required = false,
                                 default = newJInt(0))
  if valid_564655 != nil:
    section.add "ServicesHealthStateFilter", valid_564655
  var valid_564656 = query.getOrDefault("EventsHealthStateFilter")
  valid_564656 = validateParameter(valid_564656, JInt, required = false,
                                 default = newJInt(0))
  if valid_564656 != nil:
    section.add "EventsHealthStateFilter", valid_564656
  var valid_564657 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_564657 = validateParameter(valid_564657, JInt, required = false,
                                 default = newJInt(0))
  if valid_564657 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_564657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564659: Call_GetApplicationHealthUsingPolicy_564648;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ## 
  let valid = call_564659.validator(path, query, header, formData, body)
  let scheme = call_564659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564659.url(scheme.get, call_564659.host, call_564659.base,
                         call_564659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564659, url, valid)

proc call*(call_564660: Call_GetApplicationHealthUsingPolicy_564648;
          applicationId: string; ApplicationHealthPolicy: JsonNode = nil;
          apiVersion: string = "6.0"; ExcludeHealthStatistics: bool = false;
          timeout: int = 60; ServicesHealthStateFilter: int = 0;
          EventsHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealthUsingPolicy
  ## Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_564661 = newJObject()
  var query_564662 = newJObject()
  var body_564663 = newJObject()
  add(path_564661, "applicationId", newJString(applicationId))
  if ApplicationHealthPolicy != nil:
    body_564663 = ApplicationHealthPolicy
  add(query_564662, "api-version", newJString(apiVersion))
  add(query_564662, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_564662, "timeout", newJInt(timeout))
  add(query_564662, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_564662, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_564662, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_564660.call(path_564661, query_564662, nil, nil, body_564663)

var getApplicationHealthUsingPolicy* = Call_GetApplicationHealthUsingPolicy_564648(
    name: "getApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealthUsingPolicy_564649, base: "",
    url: url_GetApplicationHealthUsingPolicy_564650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationHealth_564634 = ref object of OpenApiRestCall_563566
proc url_GetApplicationHealth_564636(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationHealth_564635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564637 = path.getOrDefault("applicationId")
  valid_564637 = validateParameter(valid_564637, JString, required = true,
                                 default = nil)
  if valid_564637 != nil:
    section.add "applicationId", valid_564637
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServicesHealthStateFilter: JInt
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: JInt
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564638 = query.getOrDefault("api-version")
  valid_564638 = validateParameter(valid_564638, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564638 != nil:
    section.add "api-version", valid_564638
  var valid_564639 = query.getOrDefault("ExcludeHealthStatistics")
  valid_564639 = validateParameter(valid_564639, JBool, required = false,
                                 default = newJBool(false))
  if valid_564639 != nil:
    section.add "ExcludeHealthStatistics", valid_564639
  var valid_564640 = query.getOrDefault("timeout")
  valid_564640 = validateParameter(valid_564640, JInt, required = false,
                                 default = newJInt(60))
  if valid_564640 != nil:
    section.add "timeout", valid_564640
  var valid_564641 = query.getOrDefault("ServicesHealthStateFilter")
  valid_564641 = validateParameter(valid_564641, JInt, required = false,
                                 default = newJInt(0))
  if valid_564641 != nil:
    section.add "ServicesHealthStateFilter", valid_564641
  var valid_564642 = query.getOrDefault("EventsHealthStateFilter")
  valid_564642 = validateParameter(valid_564642, JInt, required = false,
                                 default = newJInt(0))
  if valid_564642 != nil:
    section.add "EventsHealthStateFilter", valid_564642
  var valid_564643 = query.getOrDefault("DeployedApplicationsHealthStateFilter")
  valid_564643 = validateParameter(valid_564643, JInt, required = false,
                                 default = newJInt(0))
  if valid_564643 != nil:
    section.add "DeployedApplicationsHealthStateFilter", valid_564643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564644: Call_GetApplicationHealth_564634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ## 
  let valid = call_564644.validator(path, query, header, formData, body)
  let scheme = call_564644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564644.url(scheme.get, call_564644.host, call_564644.base,
                         call_564644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564644, url, valid)

proc call*(call_564645: Call_GetApplicationHealth_564634; applicationId: string;
          apiVersion: string = "6.0"; ExcludeHealthStatistics: bool = false;
          timeout: int = 60; ServicesHealthStateFilter: int = 0;
          EventsHealthStateFilter: int = 0;
          DeployedApplicationsHealthStateFilter: int = 0): Recallable =
  ## getApplicationHealth
  ## Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServicesHealthStateFilter: int
  ##                            : Allows filtering of the services health state objects returned in the result of services health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only services that match the filter are returned. All services are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   DeployedApplicationsHealthStateFilter: int
  ##                                        : Allows filtering of the deployed applications health state objects returned in the result of application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.
  ## All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_564646 = newJObject()
  var query_564647 = newJObject()
  add(path_564646, "applicationId", newJString(applicationId))
  add(query_564647, "api-version", newJString(apiVersion))
  add(query_564647, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_564647, "timeout", newJInt(timeout))
  add(query_564647, "ServicesHealthStateFilter",
      newJInt(ServicesHealthStateFilter))
  add(query_564647, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_564647, "DeployedApplicationsHealthStateFilter",
      newJInt(DeployedApplicationsHealthStateFilter))
  result = call_564645.call(path_564646, query_564647, nil, nil, nil)

var getApplicationHealth* = Call_GetApplicationHealth_564634(
    name: "getApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/GetHealth",
    validator: validate_GetApplicationHealth_564635, base: "",
    url: url_GetApplicationHealth_564636, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationLoadInfo_564664 = ref object of OpenApiRestCall_563566
proc url_GetApplicationLoadInfo_564666(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationLoadInfo_564665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564667 = path.getOrDefault("applicationId")
  valid_564667 = validateParameter(valid_564667, JString, required = true,
                                 default = nil)
  if valid_564667 != nil:
    section.add "applicationId", valid_564667
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564668 = query.getOrDefault("api-version")
  valid_564668 = validateParameter(valid_564668, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564668 != nil:
    section.add "api-version", valid_564668
  var valid_564669 = query.getOrDefault("timeout")
  valid_564669 = validateParameter(valid_564669, JInt, required = false,
                                 default = newJInt(60))
  if valid_564669 != nil:
    section.add "timeout", valid_564669
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564670: Call_GetApplicationLoadInfo_564664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ## 
  let valid = call_564670.validator(path, query, header, formData, body)
  let scheme = call_564670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564670.url(scheme.get, call_564670.host, call_564670.base,
                         call_564670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564670, url, valid)

proc call*(call_564671: Call_GetApplicationLoadInfo_564664; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getApplicationLoadInfo
  ## Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564672 = newJObject()
  var query_564673 = newJObject()
  add(query_564673, "api-version", newJString(apiVersion))
  add(query_564673, "timeout", newJInt(timeout))
  add(path_564672, "applicationId", newJString(applicationId))
  result = call_564671.call(path_564672, query_564673, nil, nil, nil)

var getApplicationLoadInfo* = Call_GetApplicationLoadInfo_564664(
    name: "getApplicationLoadInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetLoadInformation",
    validator: validate_GetApplicationLoadInfo_564665, base: "",
    url: url_GetApplicationLoadInfo_564666, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfoList_564674 = ref object of OpenApiRestCall_563566
proc url_GetServiceInfoList_564676(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfoList_564675(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564677 = path.getOrDefault("applicationId")
  valid_564677 = validateParameter(valid_564677, JString, required = true,
                                 default = nil)
  if valid_564677 != nil:
    section.add "applicationId", valid_564677
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: JString
  ##                  : The service type name used to filter the services to query for.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564678 = query.getOrDefault("ContinuationToken")
  valid_564678 = validateParameter(valid_564678, JString, required = false,
                                 default = nil)
  if valid_564678 != nil:
    section.add "ContinuationToken", valid_564678
  var valid_564679 = query.getOrDefault("ServiceTypeName")
  valid_564679 = validateParameter(valid_564679, JString, required = false,
                                 default = nil)
  if valid_564679 != nil:
    section.add "ServiceTypeName", valid_564679
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564680 = query.getOrDefault("api-version")
  valid_564680 = validateParameter(valid_564680, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564680 != nil:
    section.add "api-version", valid_564680
  var valid_564681 = query.getOrDefault("timeout")
  valid_564681 = validateParameter(valid_564681, JInt, required = false,
                                 default = newJInt(60))
  if valid_564681 != nil:
    section.add "timeout", valid_564681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564682: Call_GetServiceInfoList_564674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about all services belonging to the application specified by the application ID.
  ## 
  let valid = call_564682.validator(path, query, header, formData, body)
  let scheme = call_564682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564682.url(scheme.get, call_564682.host, call_564682.base,
                         call_564682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564682, url, valid)

proc call*(call_564683: Call_GetServiceInfoList_564674; applicationId: string;
          ContinuationToken: string = ""; ServiceTypeName: string = "";
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceInfoList
  ## Returns the information about all services belonging to the application specified by the application ID.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   ServiceTypeName: string
  ##                  : The service type name used to filter the services to query for.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564684 = newJObject()
  var query_564685 = newJObject()
  add(query_564685, "ContinuationToken", newJString(ContinuationToken))
  add(query_564685, "ServiceTypeName", newJString(ServiceTypeName))
  add(query_564685, "api-version", newJString(apiVersion))
  add(query_564685, "timeout", newJInt(timeout))
  add(path_564684, "applicationId", newJString(applicationId))
  result = call_564683.call(path_564684, query_564685, nil, nil, nil)

var getServiceInfoList* = Call_GetServiceInfoList_564674(
    name: "getServiceInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices",
    validator: validate_GetServiceInfoList_564675, base: "",
    url: url_GetServiceInfoList_564676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateService_564686 = ref object of OpenApiRestCall_563566
proc url_CreateService_564688(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/$/Create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateService_564687(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564689 = path.getOrDefault("applicationId")
  valid_564689 = validateParameter(valid_564689, JString, required = true,
                                 default = nil)
  if valid_564689 != nil:
    section.add "applicationId", valid_564689
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564690 = query.getOrDefault("api-version")
  valid_564690 = validateParameter(valid_564690, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564690 != nil:
    section.add "api-version", valid_564690
  var valid_564691 = query.getOrDefault("timeout")
  valid_564691 = validateParameter(valid_564691, JInt, required = false,
                                 default = newJInt(60))
  if valid_564691 != nil:
    section.add "timeout", valid_564691
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564693: Call_CreateService_564686; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ## 
  let valid = call_564693.validator(path, query, header, formData, body)
  let scheme = call_564693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564693.url(scheme.get, call_564693.host, call_564693.base,
                         call_564693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564693, url, valid)

proc call*(call_564694: Call_CreateService_564686; ServiceDescription: JsonNode;
          applicationId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## createService
  ## This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
  ##   ServiceDescription: JObject (required)
  ##                     : The information necessary to create a service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564695 = newJObject()
  var query_564696 = newJObject()
  var body_564697 = newJObject()
  if ServiceDescription != nil:
    body_564697 = ServiceDescription
  add(query_564696, "api-version", newJString(apiVersion))
  add(query_564696, "timeout", newJInt(timeout))
  add(path_564695, "applicationId", newJString(applicationId))
  result = call_564694.call(path_564695, query_564696, nil, nil, body_564697)

var createService* = Call_CreateService_564686(name: "createService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/Create",
    validator: validate_CreateService_564687, base: "", url: url_CreateService_564688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateServiceFromTemplate_564698 = ref object of OpenApiRestCall_563566
proc url_CreateServiceFromTemplate_564700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetServices/$/CreateFromTemplate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_CreateServiceFromTemplate_564699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564701 = path.getOrDefault("applicationId")
  valid_564701 = validateParameter(valid_564701, JString, required = true,
                                 default = nil)
  if valid_564701 != nil:
    section.add "applicationId", valid_564701
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564702 = query.getOrDefault("api-version")
  valid_564702 = validateParameter(valid_564702, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564702 != nil:
    section.add "api-version", valid_564702
  var valid_564703 = query.getOrDefault("timeout")
  valid_564703 = validateParameter(valid_564703, JInt, required = false,
                                 default = newJInt(60))
  if valid_564703 != nil:
    section.add "timeout", valid_564703
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564705: Call_CreateServiceFromTemplate_564698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ## 
  let valid = call_564705.validator(path, query, header, formData, body)
  let scheme = call_564705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564705.url(scheme.get, call_564705.host, call_564705.base,
                         call_564705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564705, url, valid)

proc call*(call_564706: Call_CreateServiceFromTemplate_564698;
          ServiceFromTemplateDescription: JsonNode; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## createServiceFromTemplate
  ## Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceFromTemplateDescription: JObject (required)
  ##                                 : Describes the service that needs to be created from the template defined in the application manifest.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564707 = newJObject()
  var query_564708 = newJObject()
  var body_564709 = newJObject()
  add(query_564708, "api-version", newJString(apiVersion))
  if ServiceFromTemplateDescription != nil:
    body_564709 = ServiceFromTemplateDescription
  add(query_564708, "timeout", newJInt(timeout))
  add(path_564707, "applicationId", newJString(applicationId))
  result = call_564706.call(path_564707, query_564708, nil, nil, body_564709)

var createServiceFromTemplate* = Call_CreateServiceFromTemplate_564698(
    name: "createServiceFromTemplate", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate",
    validator: validate_CreateServiceFromTemplate_564699, base: "",
    url: url_CreateServiceFromTemplate_564700,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceInfo_564710 = ref object of OpenApiRestCall_563566
proc url_GetServiceInfo_564712(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServices/"),
               (kind: VariableSegment, value: "serviceId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceInfo_564711(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_564713 = path.getOrDefault("serviceId")
  valid_564713 = validateParameter(valid_564713, JString, required = true,
                                 default = nil)
  if valid_564713 != nil:
    section.add "serviceId", valid_564713
  var valid_564714 = path.getOrDefault("applicationId")
  valid_564714 = validateParameter(valid_564714, JString, required = true,
                                 default = nil)
  if valid_564714 != nil:
    section.add "applicationId", valid_564714
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564715 = query.getOrDefault("api-version")
  valid_564715 = validateParameter(valid_564715, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564715 != nil:
    section.add "api-version", valid_564715
  var valid_564716 = query.getOrDefault("timeout")
  valid_564716 = validateParameter(valid_564716, JInt, required = false,
                                 default = newJInt(60))
  if valid_564716 != nil:
    section.add "timeout", valid_564716
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564717: Call_GetServiceInfo_564710; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ## 
  let valid = call_564717.validator(path, query, header, formData, body)
  let scheme = call_564717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564717.url(scheme.get, call_564717.host, call_564717.base,
                         call_564717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564717, url, valid)

proc call*(call_564718: Call_GetServiceInfo_564710; serviceId: string;
          applicationId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceInfo
  ## Returns the information about the specified service belonging to the specified Service Fabric application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564719 = newJObject()
  var query_564720 = newJObject()
  add(query_564720, "api-version", newJString(apiVersion))
  add(query_564720, "timeout", newJInt(timeout))
  add(path_564719, "serviceId", newJString(serviceId))
  add(path_564719, "applicationId", newJString(applicationId))
  result = call_564718.call(path_564719, query_564720, nil, nil, nil)

var getServiceInfo* = Call_GetServiceInfo_564710(name: "getServiceInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetServices/{serviceId}",
    validator: validate_GetServiceInfo_564711, base: "", url: url_GetServiceInfo_564712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationUpgrade_564721 = ref object of OpenApiRestCall_563566
proc url_GetApplicationUpgrade_564723(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationUpgrade_564722(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564724 = path.getOrDefault("applicationId")
  valid_564724 = validateParameter(valid_564724, JString, required = true,
                                 default = nil)
  if valid_564724 != nil:
    section.add "applicationId", valid_564724
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564725 = query.getOrDefault("api-version")
  valid_564725 = validateParameter(valid_564725, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564725 != nil:
    section.add "api-version", valid_564725
  var valid_564726 = query.getOrDefault("timeout")
  valid_564726 = validateParameter(valid_564726, JInt, required = false,
                                 default = newJInt(60))
  if valid_564726 != nil:
    section.add "timeout", valid_564726
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564727: Call_GetApplicationUpgrade_564721; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_564727.validator(path, query, header, formData, body)
  let scheme = call_564727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564727.url(scheme.get, call_564727.host, call_564727.base,
                         call_564727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564727, url, valid)

proc call*(call_564728: Call_GetApplicationUpgrade_564721; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getApplicationUpgrade
  ## Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564729 = newJObject()
  var query_564730 = newJObject()
  add(query_564730, "api-version", newJString(apiVersion))
  add(query_564730, "timeout", newJInt(timeout))
  add(path_564729, "applicationId", newJString(applicationId))
  result = call_564728.call(path_564729, query_564730, nil, nil, nil)

var getApplicationUpgrade* = Call_GetApplicationUpgrade_564721(
    name: "getApplicationUpgrade", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/GetUpgradeProgress",
    validator: validate_GetApplicationUpgrade_564722, base: "",
    url: url_GetApplicationUpgrade_564723, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationUpgrade_564731 = ref object of OpenApiRestCall_563566
proc url_ResumeApplicationUpgrade_564733(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/MoveToNextUpgradeDomain")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationUpgrade_564732(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564734 = path.getOrDefault("applicationId")
  valid_564734 = validateParameter(valid_564734, JString, required = true,
                                 default = nil)
  if valid_564734 != nil:
    section.add "applicationId", valid_564734
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564735 = query.getOrDefault("api-version")
  valid_564735 = validateParameter(valid_564735, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564735 != nil:
    section.add "api-version", valid_564735
  var valid_564736 = query.getOrDefault("timeout")
  valid_564736 = validateParameter(valid_564736, JInt, required = false,
                                 default = newJInt(60))
  if valid_564736 != nil:
    section.add "timeout", valid_564736
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564738: Call_ResumeApplicationUpgrade_564731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ## 
  let valid = call_564738.validator(path, query, header, formData, body)
  let scheme = call_564738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564738.url(scheme.get, call_564738.host, call_564738.base,
                         call_564738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564738, url, valid)

proc call*(call_564739: Call_ResumeApplicationUpgrade_564731;
          ResumeApplicationUpgradeDescription: JsonNode; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## resumeApplicationUpgrade
  ## Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ResumeApplicationUpgradeDescription: JObject (required)
  ##                                      : Describes the parameters for resuming an application upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564740 = newJObject()
  var query_564741 = newJObject()
  var body_564742 = newJObject()
  add(query_564741, "api-version", newJString(apiVersion))
  if ResumeApplicationUpgradeDescription != nil:
    body_564742 = ResumeApplicationUpgradeDescription
  add(query_564741, "timeout", newJInt(timeout))
  add(path_564740, "applicationId", newJString(applicationId))
  result = call_564739.call(path_564740, query_564741, nil, nil, body_564742)

var resumeApplicationUpgrade* = Call_ResumeApplicationUpgrade_564731(
    name: "resumeApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/MoveToNextUpgradeDomain",
    validator: validate_ResumeApplicationUpgrade_564732, base: "",
    url: url_ResumeApplicationUpgrade_564733, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportApplicationHealth_564743 = ref object of OpenApiRestCall_563566
proc url_ReportApplicationHealth_564745(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportApplicationHealth_564744(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564746 = path.getOrDefault("applicationId")
  valid_564746 = validateParameter(valid_564746, JString, required = true,
                                 default = nil)
  if valid_564746 != nil:
    section.add "applicationId", valid_564746
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564747 = query.getOrDefault("Immediate")
  valid_564747 = validateParameter(valid_564747, JBool, required = false,
                                 default = newJBool(false))
  if valid_564747 != nil:
    section.add "Immediate", valid_564747
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564748 = query.getOrDefault("api-version")
  valid_564748 = validateParameter(valid_564748, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564748 != nil:
    section.add "api-version", valid_564748
  var valid_564749 = query.getOrDefault("timeout")
  valid_564749 = validateParameter(valid_564749, JInt, required = false,
                                 default = newJInt(60))
  if valid_564749 != nil:
    section.add "timeout", valid_564749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564751: Call_ReportApplicationHealth_564743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_564751.validator(path, query, header, formData, body)
  let scheme = call_564751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564751.url(scheme.get, call_564751.host, call_564751.base,
                         call_564751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564751, url, valid)

proc call*(call_564752: Call_ReportApplicationHealth_564743;
          HealthInformation: JsonNode; applicationId: string;
          Immediate: bool = false; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## reportApplicationHealth
  ## Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564753 = newJObject()
  var query_564754 = newJObject()
  var body_564755 = newJObject()
  add(query_564754, "Immediate", newJBool(Immediate))
  if HealthInformation != nil:
    body_564755 = HealthInformation
  add(query_564754, "api-version", newJString(apiVersion))
  add(query_564754, "timeout", newJInt(timeout))
  add(path_564753, "applicationId", newJString(applicationId))
  result = call_564752.call(path_564753, query_564754, nil, nil, body_564755)

var reportApplicationHealth* = Call_ReportApplicationHealth_564743(
    name: "reportApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ReportHealth",
    validator: validate_ReportApplicationHealth_564744, base: "",
    url: url_ReportApplicationHealth_564745, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeApplicationBackup_564756 = ref object of OpenApiRestCall_563566
proc url_ResumeApplicationBackup_564758(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeApplicationBackup_564757(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564759 = path.getOrDefault("applicationId")
  valid_564759 = validateParameter(valid_564759, JString, required = true,
                                 default = nil)
  if valid_564759 != nil:
    section.add "applicationId", valid_564759
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564760 = query.getOrDefault("api-version")
  valid_564760 = validateParameter(valid_564760, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564760 != nil:
    section.add "api-version", valid_564760
  var valid_564761 = query.getOrDefault("timeout")
  valid_564761 = validateParameter(valid_564761, JInt, required = false,
                                 default = newJInt(60))
  if valid_564761 != nil:
    section.add "timeout", valid_564761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564762: Call_ResumeApplicationBackup_564756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_564762.validator(path, query, header, formData, body)
  let scheme = call_564762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564762.url(scheme.get, call_564762.host, call_564762.base,
                         call_564762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564762, url, valid)

proc call*(call_564763: Call_ResumeApplicationBackup_564756; applicationId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## resumeApplicationBackup
  ## The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564764 = newJObject()
  var query_564765 = newJObject()
  add(query_564765, "api-version", newJString(apiVersion))
  add(query_564765, "timeout", newJInt(timeout))
  add(path_564764, "applicationId", newJString(applicationId))
  result = call_564763.call(path_564764, query_564765, nil, nil, nil)

var resumeApplicationBackup* = Call_ResumeApplicationBackup_564756(
    name: "resumeApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/ResumeBackup",
    validator: validate_ResumeApplicationBackup_564757, base: "",
    url: url_ResumeApplicationBackup_564758, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RollbackApplicationUpgrade_564766 = ref object of OpenApiRestCall_563566
proc url_RollbackApplicationUpgrade_564768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RollbackApplicationUpgrade_564767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564769 = path.getOrDefault("applicationId")
  valid_564769 = validateParameter(valid_564769, JString, required = true,
                                 default = nil)
  if valid_564769 != nil:
    section.add "applicationId", valid_564769
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564770 = query.getOrDefault("api-version")
  valid_564770 = validateParameter(valid_564770, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564770 != nil:
    section.add "api-version", valid_564770
  var valid_564771 = query.getOrDefault("timeout")
  valid_564771 = validateParameter(valid_564771, JInt, required = false,
                                 default = newJInt(60))
  if valid_564771 != nil:
    section.add "timeout", valid_564771
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564772: Call_RollbackApplicationUpgrade_564766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ## 
  let valid = call_564772.validator(path, query, header, formData, body)
  let scheme = call_564772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564772.url(scheme.get, call_564772.host, call_564772.base,
                         call_564772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564772, url, valid)

proc call*(call_564773: Call_RollbackApplicationUpgrade_564766;
          applicationId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## rollbackApplicationUpgrade
  ## Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564774 = newJObject()
  var query_564775 = newJObject()
  add(query_564775, "api-version", newJString(apiVersion))
  add(query_564775, "timeout", newJInt(timeout))
  add(path_564774, "applicationId", newJString(applicationId))
  result = call_564773.call(path_564774, query_564775, nil, nil, nil)

var rollbackApplicationUpgrade* = Call_RollbackApplicationUpgrade_564766(
    name: "rollbackApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/RollbackUpgrade",
    validator: validate_RollbackApplicationUpgrade_564767, base: "",
    url: url_RollbackApplicationUpgrade_564768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendApplicationBackup_564776 = ref object of OpenApiRestCall_563566
proc url_SuspendApplicationBackup_564778(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendApplicationBackup_564777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564779 = path.getOrDefault("applicationId")
  valid_564779 = validateParameter(valid_564779, JString, required = true,
                                 default = nil)
  if valid_564779 != nil:
    section.add "applicationId", valid_564779
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564780 = query.getOrDefault("api-version")
  valid_564780 = validateParameter(valid_564780, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564780 != nil:
    section.add "api-version", valid_564780
  var valid_564781 = query.getOrDefault("timeout")
  valid_564781 = validateParameter(valid_564781, JInt, required = false,
                                 default = newJInt(60))
  if valid_564781 != nil:
    section.add "timeout", valid_564781
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564782: Call_SuspendApplicationBackup_564776; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ## 
  let valid = call_564782.validator(path, query, header, formData, body)
  let scheme = call_564782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564782.url(scheme.get, call_564782.host, call_564782.base,
                         call_564782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564782, url, valid)

proc call*(call_564783: Call_SuspendApplicationBackup_564776;
          applicationId: string; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## suspendApplicationBackup
  ## The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application's hierarchy. It means all the services and partitions under this application are now suspended for backup.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564784 = newJObject()
  var query_564785 = newJObject()
  add(query_564785, "api-version", newJString(apiVersion))
  add(query_564785, "timeout", newJInt(timeout))
  add(path_564784, "applicationId", newJString(applicationId))
  result = call_564783.call(path_564784, query_564785, nil, nil, nil)

var suspendApplicationBackup* = Call_SuspendApplicationBackup_564776(
    name: "suspendApplicationBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/SuspendBackup",
    validator: validate_SuspendApplicationBackup_564777, base: "",
    url: url_SuspendApplicationBackup_564778, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateApplicationUpgrade_564786 = ref object of OpenApiRestCall_563566
proc url_UpdateApplicationUpgrade_564788(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/UpdateUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateApplicationUpgrade_564787(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564789 = path.getOrDefault("applicationId")
  valid_564789 = validateParameter(valid_564789, JString, required = true,
                                 default = nil)
  if valid_564789 != nil:
    section.add "applicationId", valid_564789
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564790 = query.getOrDefault("api-version")
  valid_564790 = validateParameter(valid_564790, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564790 != nil:
    section.add "api-version", valid_564790
  var valid_564791 = query.getOrDefault("timeout")
  valid_564791 = validateParameter(valid_564791, JInt, required = false,
                                 default = newJInt(60))
  if valid_564791 != nil:
    section.add "timeout", valid_564791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564793: Call_UpdateApplicationUpgrade_564786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ## 
  let valid = call_564793.validator(path, query, header, formData, body)
  let scheme = call_564793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564793.url(scheme.get, call_564793.host, call_564793.base,
                         call_564793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564793, url, valid)

proc call*(call_564794: Call_UpdateApplicationUpgrade_564786;
          ApplicationUpgradeUpdateDescription: JsonNode; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## updateApplicationUpgrade
  ## Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ApplicationUpgradeUpdateDescription: JObject (required)
  ##                                      : Parameters for updating an existing application upgrade.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564795 = newJObject()
  var query_564796 = newJObject()
  var body_564797 = newJObject()
  add(query_564796, "api-version", newJString(apiVersion))
  if ApplicationUpgradeUpdateDescription != nil:
    body_564797 = ApplicationUpgradeUpdateDescription
  add(query_564796, "timeout", newJInt(timeout))
  add(path_564795, "applicationId", newJString(applicationId))
  result = call_564794.call(path_564795, query_564796, nil, nil, body_564797)

var updateApplicationUpgrade* = Call_UpdateApplicationUpgrade_564786(
    name: "updateApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Applications/{applicationId}/$/UpdateUpgrade",
    validator: validate_UpdateApplicationUpgrade_564787, base: "",
    url: url_UpdateApplicationUpgrade_564788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartApplicationUpgrade_564798 = ref object of OpenApiRestCall_563566
proc url_StartApplicationUpgrade_564800(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartApplicationUpgrade_564799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564801 = path.getOrDefault("applicationId")
  valid_564801 = validateParameter(valid_564801, JString, required = true,
                                 default = nil)
  if valid_564801 != nil:
    section.add "applicationId", valid_564801
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564802 = query.getOrDefault("api-version")
  valid_564802 = validateParameter(valid_564802, JString, required = true,
                                 default = newJString("6.0"))
  if valid_564802 != nil:
    section.add "api-version", valid_564802
  var valid_564803 = query.getOrDefault("timeout")
  valid_564803 = validateParameter(valid_564803, JInt, required = false,
                                 default = newJInt(60))
  if valid_564803 != nil:
    section.add "timeout", valid_564803
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564805: Call_StartApplicationUpgrade_564798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ## 
  let valid = call_564805.validator(path, query, header, formData, body)
  let scheme = call_564805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564805.url(scheme.get, call_564805.host, call_564805.base,
                         call_564805.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564805, url, valid)

proc call*(call_564806: Call_StartApplicationUpgrade_564798;
          ApplicationUpgradeDescription: JsonNode; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## startApplicationUpgrade
  ## Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ApplicationUpgradeDescription: JObject (required)
  ##                                : Parameters for an application upgrade.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564807 = newJObject()
  var query_564808 = newJObject()
  var body_564809 = newJObject()
  add(query_564808, "api-version", newJString(apiVersion))
  add(query_564808, "timeout", newJInt(timeout))
  if ApplicationUpgradeDescription != nil:
    body_564809 = ApplicationUpgradeDescription
  add(path_564807, "applicationId", newJString(applicationId))
  result = call_564806.call(path_564807, query_564808, nil, nil, body_564809)

var startApplicationUpgrade* = Call_StartApplicationUpgrade_564798(
    name: "startApplicationUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Applications/{applicationId}/$/Upgrade",
    validator: validate_StartApplicationUpgrade_564799, base: "",
    url: url_StartApplicationUpgrade_564800, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupsFromBackupLocation_564810 = ref object of OpenApiRestCall_563566
proc url_GetBackupsFromBackupLocation_564812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupsFromBackupLocation_564811(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564813 = query.getOrDefault("ContinuationToken")
  valid_564813 = validateParameter(valid_564813, JString, required = false,
                                 default = nil)
  if valid_564813 != nil:
    section.add "ContinuationToken", valid_564813
  var valid_564814 = query.getOrDefault("MaxResults")
  valid_564814 = validateParameter(valid_564814, JInt, required = false,
                                 default = newJInt(0))
  if valid_564814 != nil:
    section.add "MaxResults", valid_564814
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564815 = query.getOrDefault("api-version")
  valid_564815 = validateParameter(valid_564815, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564815 != nil:
    section.add "api-version", valid_564815
  var valid_564816 = query.getOrDefault("timeout")
  valid_564816 = validateParameter(valid_564816, JInt, required = false,
                                 default = newJInt(60))
  if valid_564816 != nil:
    section.add "timeout", valid_564816
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564818: Call_GetBackupsFromBackupLocation_564810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ## 
  let valid = call_564818.validator(path, query, header, formData, body)
  let scheme = call_564818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564818.url(scheme.get, call_564818.host, call_564818.base,
                         call_564818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564818, url, valid)

proc call*(call_564819: Call_GetBackupsFromBackupLocation_564810;
          GetBackupByStorageQueryDescription: JsonNode;
          ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getBackupsFromBackupLocation
  ## Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   GetBackupByStorageQueryDescription: JObject (required)
  ##                                     : Describes the filters and backup storage details to be used for enumerating backups.
  var query_564820 = newJObject()
  var body_564821 = newJObject()
  add(query_564820, "ContinuationToken", newJString(ContinuationToken))
  add(query_564820, "MaxResults", newJInt(MaxResults))
  add(query_564820, "api-version", newJString(apiVersion))
  add(query_564820, "timeout", newJInt(timeout))
  if GetBackupByStorageQueryDescription != nil:
    body_564821 = GetBackupByStorageQueryDescription
  result = call_564819.call(nil, query_564820, nil, nil, body_564821)

var getBackupsFromBackupLocation* = Call_GetBackupsFromBackupLocation_564810(
    name: "getBackupsFromBackupLocation", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/$/GetBackups",
    validator: validate_GetBackupsFromBackupLocation_564811, base: "",
    url: url_GetBackupsFromBackupLocation_564812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyList_564822 = ref object of OpenApiRestCall_563566
proc url_GetBackupPolicyList_564824(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBackupPolicyList_564823(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Get a list of all the backup policies configured.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564825 = query.getOrDefault("ContinuationToken")
  valid_564825 = validateParameter(valid_564825, JString, required = false,
                                 default = nil)
  if valid_564825 != nil:
    section.add "ContinuationToken", valid_564825
  var valid_564826 = query.getOrDefault("MaxResults")
  valid_564826 = validateParameter(valid_564826, JInt, required = false,
                                 default = newJInt(0))
  if valid_564826 != nil:
    section.add "MaxResults", valid_564826
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564827 = query.getOrDefault("api-version")
  valid_564827 = validateParameter(valid_564827, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564827 != nil:
    section.add "api-version", valid_564827
  var valid_564828 = query.getOrDefault("timeout")
  valid_564828 = validateParameter(valid_564828, JInt, required = false,
                                 default = newJInt(60))
  if valid_564828 != nil:
    section.add "timeout", valid_564828
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564829: Call_GetBackupPolicyList_564822; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a list of all the backup policies configured.
  ## 
  let valid = call_564829.validator(path, query, header, formData, body)
  let scheme = call_564829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564829.url(scheme.get, call_564829.host, call_564829.base,
                         call_564829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564829, url, valid)

proc call*(call_564830: Call_GetBackupPolicyList_564822;
          ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getBackupPolicyList
  ## Get a list of all the backup policies configured.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564831 = newJObject()
  add(query_564831, "ContinuationToken", newJString(ContinuationToken))
  add(query_564831, "MaxResults", newJInt(MaxResults))
  add(query_564831, "api-version", newJString(apiVersion))
  add(query_564831, "timeout", newJInt(timeout))
  result = call_564830.call(nil, query_564831, nil, nil, nil)

var getBackupPolicyList* = Call_GetBackupPolicyList_564822(
    name: "getBackupPolicyList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies",
    validator: validate_GetBackupPolicyList_564823, base: "",
    url: url_GetBackupPolicyList_564824, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBackupPolicy_564832 = ref object of OpenApiRestCall_563566
proc url_CreateBackupPolicy_564834(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateBackupPolicy_564833(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564835 = query.getOrDefault("api-version")
  valid_564835 = validateParameter(valid_564835, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564835 != nil:
    section.add "api-version", valid_564835
  var valid_564836 = query.getOrDefault("timeout")
  valid_564836 = validateParameter(valid_564836, JInt, required = false,
                                 default = newJInt(60))
  if valid_564836 != nil:
    section.add "timeout", valid_564836
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564838: Call_CreateBackupPolicy_564832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ## 
  let valid = call_564838.validator(path, query, header, formData, body)
  let scheme = call_564838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564838.url(scheme.get, call_564838.host, call_564838.base,
                         call_564838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564838, url, valid)

proc call*(call_564839: Call_CreateBackupPolicy_564832;
          BackupPolicyDescription: JsonNode; apiVersion: string = "6.4";
          timeout: int = 60): Recallable =
  ## createBackupPolicy
  ## Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  var query_564840 = newJObject()
  var body_564841 = newJObject()
  add(query_564840, "api-version", newJString(apiVersion))
  add(query_564840, "timeout", newJInt(timeout))
  if BackupPolicyDescription != nil:
    body_564841 = BackupPolicyDescription
  result = call_564839.call(nil, query_564840, nil, nil, body_564841)

var createBackupPolicy* = Call_CreateBackupPolicy_564832(
    name: "createBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/$/Create",
    validator: validate_CreateBackupPolicy_564833, base: "",
    url: url_CreateBackupPolicy_564834, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBackupPolicyByName_564842 = ref object of OpenApiRestCall_563566
proc url_GetBackupPolicyByName_564844(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetBackupPolicyByName_564843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_564845 = path.getOrDefault("backupPolicyName")
  valid_564845 = validateParameter(valid_564845, JString, required = true,
                                 default = nil)
  if valid_564845 != nil:
    section.add "backupPolicyName", valid_564845
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564846 = query.getOrDefault("api-version")
  valid_564846 = validateParameter(valid_564846, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564846 != nil:
    section.add "api-version", valid_564846
  var valid_564847 = query.getOrDefault("timeout")
  valid_564847 = validateParameter(valid_564847, JInt, required = false,
                                 default = newJInt(60))
  if valid_564847 != nil:
    section.add "timeout", valid_564847
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564848: Call_GetBackupPolicyByName_564842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a particular backup policy identified by {backupPolicyName}
  ## 
  let valid = call_564848.validator(path, query, header, formData, body)
  let scheme = call_564848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564848.url(scheme.get, call_564848.host, call_564848.base,
                         call_564848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564848, url, valid)

proc call*(call_564849: Call_GetBackupPolicyByName_564842;
          backupPolicyName: string; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getBackupPolicyByName
  ## Gets a particular backup policy identified by {backupPolicyName}
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_564850 = newJObject()
  var query_564851 = newJObject()
  add(query_564851, "api-version", newJString(apiVersion))
  add(query_564851, "timeout", newJInt(timeout))
  add(path_564850, "backupPolicyName", newJString(backupPolicyName))
  result = call_564849.call(path_564850, query_564851, nil, nil, nil)

var getBackupPolicyByName* = Call_GetBackupPolicyByName_564842(
    name: "getBackupPolicyByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}",
    validator: validate_GetBackupPolicyByName_564843, base: "",
    url: url_GetBackupPolicyByName_564844, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBackupPolicy_564852 = ref object of OpenApiRestCall_563566
proc url_DeleteBackupPolicy_564854(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteBackupPolicy_564853(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_564855 = path.getOrDefault("backupPolicyName")
  valid_564855 = validateParameter(valid_564855, JString, required = true,
                                 default = nil)
  if valid_564855 != nil:
    section.add "backupPolicyName", valid_564855
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564856 = query.getOrDefault("api-version")
  valid_564856 = validateParameter(valid_564856, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564856 != nil:
    section.add "api-version", valid_564856
  var valid_564857 = query.getOrDefault("timeout")
  valid_564857 = validateParameter(valid_564857, JInt, required = false,
                                 default = newJInt(60))
  if valid_564857 != nil:
    section.add "timeout", valid_564857
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564858: Call_DeleteBackupPolicy_564852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ## 
  let valid = call_564858.validator(path, query, header, formData, body)
  let scheme = call_564858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564858.url(scheme.get, call_564858.host, call_564858.base,
                         call_564858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564858, url, valid)

proc call*(call_564859: Call_DeleteBackupPolicy_564852; backupPolicyName: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## deleteBackupPolicy
  ## Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_564860 = newJObject()
  var query_564861 = newJObject()
  add(query_564861, "api-version", newJString(apiVersion))
  add(query_564861, "timeout", newJInt(timeout))
  add(path_564860, "backupPolicyName", newJString(backupPolicyName))
  result = call_564859.call(path_564860, query_564861, nil, nil, nil)

var deleteBackupPolicy* = Call_DeleteBackupPolicy_564852(
    name: "deleteBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete",
    validator: validate_DeleteBackupPolicy_564853, base: "",
    url: url_DeleteBackupPolicy_564854, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAllEntitiesBackedUpByPolicy_564862 = ref object of OpenApiRestCall_563566
proc url_GetAllEntitiesBackedUpByPolicy_564864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/GetBackupEnabledEntities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetAllEntitiesBackedUpByPolicy_564863(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_564865 = path.getOrDefault("backupPolicyName")
  valid_564865 = validateParameter(valid_564865, JString, required = true,
                                 default = nil)
  if valid_564865 != nil:
    section.add "backupPolicyName", valid_564865
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564866 = query.getOrDefault("ContinuationToken")
  valid_564866 = validateParameter(valid_564866, JString, required = false,
                                 default = nil)
  if valid_564866 != nil:
    section.add "ContinuationToken", valid_564866
  var valid_564867 = query.getOrDefault("MaxResults")
  valid_564867 = validateParameter(valid_564867, JInt, required = false,
                                 default = newJInt(0))
  if valid_564867 != nil:
    section.add "MaxResults", valid_564867
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564868 = query.getOrDefault("api-version")
  valid_564868 = validateParameter(valid_564868, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564868 != nil:
    section.add "api-version", valid_564868
  var valid_564869 = query.getOrDefault("timeout")
  valid_564869 = validateParameter(valid_564869, JInt, required = false,
                                 default = newJInt(60))
  if valid_564869 != nil:
    section.add "timeout", valid_564869
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564870: Call_GetAllEntitiesBackedUpByPolicy_564862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ## 
  let valid = call_564870.validator(path, query, header, formData, body)
  let scheme = call_564870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564870.url(scheme.get, call_564870.host, call_564870.base,
                         call_564870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564870, url, valid)

proc call*(call_564871: Call_GetAllEntitiesBackedUpByPolicy_564862;
          backupPolicyName: string; ContinuationToken: string = "";
          MaxResults: int = 0; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getAllEntitiesBackedUpByPolicy
  ## Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_564872 = newJObject()
  var query_564873 = newJObject()
  add(query_564873, "ContinuationToken", newJString(ContinuationToken))
  add(query_564873, "MaxResults", newJInt(MaxResults))
  add(query_564873, "api-version", newJString(apiVersion))
  add(query_564873, "timeout", newJInt(timeout))
  add(path_564872, "backupPolicyName", newJString(backupPolicyName))
  result = call_564871.call(path_564872, query_564873, nil, nil, nil)

var getAllEntitiesBackedUpByPolicy* = Call_GetAllEntitiesBackedUpByPolicy_564862(
    name: "getAllEntitiesBackedUpByPolicy", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities",
    validator: validate_GetAllEntitiesBackedUpByPolicy_564863, base: "",
    url: url_GetAllEntitiesBackedUpByPolicy_564864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBackupPolicy_564874 = ref object of OpenApiRestCall_563566
proc url_UpdateBackupPolicy_564876(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "backupPolicyName" in path,
        "`backupPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/BackupRestore/BackupPolicies/"),
               (kind: VariableSegment, value: "backupPolicyName"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateBackupPolicy_564875(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   backupPolicyName: JString (required)
  ##                   : The name of the backup policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `backupPolicyName` field"
  var valid_564877 = path.getOrDefault("backupPolicyName")
  valid_564877 = validateParameter(valid_564877, JString, required = true,
                                 default = nil)
  if valid_564877 != nil:
    section.add "backupPolicyName", valid_564877
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564878 = query.getOrDefault("api-version")
  valid_564878 = validateParameter(valid_564878, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564878 != nil:
    section.add "api-version", valid_564878
  var valid_564879 = query.getOrDefault("timeout")
  valid_564879 = validateParameter(valid_564879, JInt, required = false,
                                 default = newJInt(60))
  if valid_564879 != nil:
    section.add "timeout", valid_564879
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564881: Call_UpdateBackupPolicy_564874; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the backup policy identified by {backupPolicyName}
  ## 
  let valid = call_564881.validator(path, query, header, formData, body)
  let scheme = call_564881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564881.url(scheme.get, call_564881.host, call_564881.base,
                         call_564881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564881, url, valid)

proc call*(call_564882: Call_UpdateBackupPolicy_564874;
          BackupPolicyDescription: JsonNode; backupPolicyName: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## updateBackupPolicy
  ## Updates the backup policy identified by {backupPolicyName}
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   BackupPolicyDescription: JObject (required)
  ##                          : Describes the backup policy.
  ##   backupPolicyName: string (required)
  ##                   : The name of the backup policy.
  var path_564883 = newJObject()
  var query_564884 = newJObject()
  var body_564885 = newJObject()
  add(query_564884, "api-version", newJString(apiVersion))
  add(query_564884, "timeout", newJInt(timeout))
  if BackupPolicyDescription != nil:
    body_564885 = BackupPolicyDescription
  add(path_564883, "backupPolicyName", newJString(backupPolicyName))
  result = call_564882.call(path_564883, query_564884, nil, nil, body_564885)

var updateBackupPolicy* = Call_UpdateBackupPolicy_564874(
    name: "updateBackupPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update",
    validator: validate_UpdateBackupPolicy_564875, base: "",
    url: url_UpdateBackupPolicy_564876, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatusList_564886 = ref object of OpenApiRestCall_563566
proc url_GetComposeDeploymentStatusList_564888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetComposeDeploymentStatusList_564887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_564889 = query.getOrDefault("ContinuationToken")
  valid_564889 = validateParameter(valid_564889, JString, required = false,
                                 default = nil)
  if valid_564889 != nil:
    section.add "ContinuationToken", valid_564889
  var valid_564890 = query.getOrDefault("MaxResults")
  valid_564890 = validateParameter(valid_564890, JInt, required = false,
                                 default = newJInt(0))
  if valid_564890 != nil:
    section.add "MaxResults", valid_564890
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564891 = query.getOrDefault("api-version")
  valid_564891 = validateParameter(valid_564891, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_564891 != nil:
    section.add "api-version", valid_564891
  var valid_564892 = query.getOrDefault("timeout")
  valid_564892 = validateParameter(valid_564892, JInt, required = false,
                                 default = newJInt(60))
  if valid_564892 != nil:
    section.add "timeout", valid_564892
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564893: Call_GetComposeDeploymentStatusList_564886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ## 
  let valid = call_564893.validator(path, query, header, formData, body)
  let scheme = call_564893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564893.url(scheme.get, call_564893.host, call_564893.base,
                         call_564893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564893, url, valid)

proc call*(call_564894: Call_GetComposeDeploymentStatusList_564886;
          ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.0-preview"; timeout: int = 60): Recallable =
  ## getComposeDeploymentStatusList
  ## Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564895 = newJObject()
  add(query_564895, "ContinuationToken", newJString(ContinuationToken))
  add(query_564895, "MaxResults", newJInt(MaxResults))
  add(query_564895, "api-version", newJString(apiVersion))
  add(query_564895, "timeout", newJInt(timeout))
  result = call_564894.call(nil, query_564895, nil, nil, nil)

var getComposeDeploymentStatusList* = Call_GetComposeDeploymentStatusList_564886(
    name: "getComposeDeploymentStatusList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments",
    validator: validate_GetComposeDeploymentStatusList_564887, base: "",
    url: url_GetComposeDeploymentStatusList_564888,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateComposeDeployment_564896 = ref object of OpenApiRestCall_563566
proc url_CreateComposeDeployment_564898(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateComposeDeployment_564897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564899 = query.getOrDefault("api-version")
  valid_564899 = validateParameter(valid_564899, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_564899 != nil:
    section.add "api-version", valid_564899
  var valid_564900 = query.getOrDefault("timeout")
  valid_564900 = validateParameter(valid_564900, JInt, required = false,
                                 default = newJInt(60))
  if valid_564900 != nil:
    section.add "timeout", valid_564900
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564902: Call_CreateComposeDeployment_564896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ## 
  let valid = call_564902.validator(path, query, header, formData, body)
  let scheme = call_564902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564902.url(scheme.get, call_564902.host, call_564902.base,
                         call_564902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564902, url, valid)

proc call*(call_564903: Call_CreateComposeDeployment_564896;
          CreateComposeDeploymentDescription: JsonNode;
          apiVersion: string = "6.0-preview"; timeout: int = 60): Recallable =
  ## createComposeDeployment
  ## Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   CreateComposeDeploymentDescription: JObject (required)
  ##                                     : Describes the compose deployment that needs to be created.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_564904 = newJObject()
  var body_564905 = newJObject()
  add(query_564904, "api-version", newJString(apiVersion))
  if CreateComposeDeploymentDescription != nil:
    body_564905 = CreateComposeDeploymentDescription
  add(query_564904, "timeout", newJInt(timeout))
  result = call_564903.call(nil, query_564904, nil, nil, body_564905)

var createComposeDeployment* = Call_CreateComposeDeployment_564896(
    name: "createComposeDeployment", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/ComposeDeployments/$/Create",
    validator: validate_CreateComposeDeployment_564897, base: "",
    url: url_CreateComposeDeployment_564898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentStatus_564906 = ref object of OpenApiRestCall_563566
proc url_GetComposeDeploymentStatus_564908(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentStatus_564907(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_564909 = path.getOrDefault("deploymentName")
  valid_564909 = validateParameter(valid_564909, JString, required = true,
                                 default = nil)
  if valid_564909 != nil:
    section.add "deploymentName", valid_564909
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564910 = query.getOrDefault("api-version")
  valid_564910 = validateParameter(valid_564910, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_564910 != nil:
    section.add "api-version", valid_564910
  var valid_564911 = query.getOrDefault("timeout")
  valid_564911 = validateParameter(valid_564911, JInt, required = false,
                                 default = newJInt(60))
  if valid_564911 != nil:
    section.add "timeout", valid_564911
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564912: Call_GetComposeDeploymentStatus_564906; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ## 
  let valid = call_564912.validator(path, query, header, formData, body)
  let scheme = call_564912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564912.url(scheme.get, call_564912.host, call_564912.base,
                         call_564912.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564912, url, valid)

proc call*(call_564913: Call_GetComposeDeploymentStatus_564906;
          deploymentName: string; apiVersion: string = "6.0-preview";
          timeout: int = 60): Recallable =
  ## getComposeDeploymentStatus
  ## Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_564914 = newJObject()
  var query_564915 = newJObject()
  add(query_564915, "api-version", newJString(apiVersion))
  add(path_564914, "deploymentName", newJString(deploymentName))
  add(query_564915, "timeout", newJInt(timeout))
  result = call_564913.call(path_564914, query_564915, nil, nil, nil)

var getComposeDeploymentStatus* = Call_GetComposeDeploymentStatus_564906(
    name: "getComposeDeploymentStatus", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ComposeDeployments/{deploymentName}",
    validator: validate_GetComposeDeploymentStatus_564907, base: "",
    url: url_GetComposeDeploymentStatus_564908,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveComposeDeployment_564916 = ref object of OpenApiRestCall_563566
proc url_RemoveComposeDeployment_564918(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveComposeDeployment_564917(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_564919 = path.getOrDefault("deploymentName")
  valid_564919 = validateParameter(valid_564919, JString, required = true,
                                 default = nil)
  if valid_564919 != nil:
    section.add "deploymentName", valid_564919
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564920 = query.getOrDefault("api-version")
  valid_564920 = validateParameter(valid_564920, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_564920 != nil:
    section.add "api-version", valid_564920
  var valid_564921 = query.getOrDefault("timeout")
  valid_564921 = validateParameter(valid_564921, JInt, required = false,
                                 default = newJInt(60))
  if valid_564921 != nil:
    section.add "timeout", valid_564921
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564922: Call_RemoveComposeDeployment_564916; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing Service Fabric compose deployment.
  ## 
  let valid = call_564922.validator(path, query, header, formData, body)
  let scheme = call_564922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564922.url(scheme.get, call_564922.host, call_564922.base,
                         call_564922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564922, url, valid)

proc call*(call_564923: Call_RemoveComposeDeployment_564916;
          deploymentName: string; apiVersion: string = "6.0-preview";
          timeout: int = 60): Recallable =
  ## removeComposeDeployment
  ## Deletes an existing Service Fabric compose deployment.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_564924 = newJObject()
  var query_564925 = newJObject()
  add(query_564925, "api-version", newJString(apiVersion))
  add(path_564924, "deploymentName", newJString(deploymentName))
  add(query_564925, "timeout", newJInt(timeout))
  result = call_564923.call(path_564924, query_564925, nil, nil, nil)

var removeComposeDeployment* = Call_RemoveComposeDeployment_564916(
    name: "removeComposeDeployment", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Delete",
    validator: validate_RemoveComposeDeployment_564917, base: "",
    url: url_RemoveComposeDeployment_564918, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetComposeDeploymentUpgradeProgress_564926 = ref object of OpenApiRestCall_563566
proc url_GetComposeDeploymentUpgradeProgress_564928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/GetUpgradeProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetComposeDeploymentUpgradeProgress_564927(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_564929 = path.getOrDefault("deploymentName")
  valid_564929 = validateParameter(valid_564929, JString, required = true,
                                 default = nil)
  if valid_564929 != nil:
    section.add "deploymentName", valid_564929
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564930 = query.getOrDefault("api-version")
  valid_564930 = validateParameter(valid_564930, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_564930 != nil:
    section.add "api-version", valid_564930
  var valid_564931 = query.getOrDefault("timeout")
  valid_564931 = validateParameter(valid_564931, JInt, required = false,
                                 default = newJInt(60))
  if valid_564931 != nil:
    section.add "timeout", valid_564931
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564932: Call_GetComposeDeploymentUpgradeProgress_564926;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ## 
  let valid = call_564932.validator(path, query, header, formData, body)
  let scheme = call_564932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564932.url(scheme.get, call_564932.host, call_564932.base,
                         call_564932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564932, url, valid)

proc call*(call_564933: Call_GetComposeDeploymentUpgradeProgress_564926;
          deploymentName: string; apiVersion: string = "6.0-preview";
          timeout: int = 60): Recallable =
  ## getComposeDeploymentUpgradeProgress
  ## Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_564934 = newJObject()
  var query_564935 = newJObject()
  add(query_564935, "api-version", newJString(apiVersion))
  add(path_564934, "deploymentName", newJString(deploymentName))
  add(query_564935, "timeout", newJInt(timeout))
  result = call_564933.call(path_564934, query_564935, nil, nil, nil)

var getComposeDeploymentUpgradeProgress* = Call_GetComposeDeploymentUpgradeProgress_564926(
    name: "getComposeDeploymentUpgradeProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress",
    validator: validate_GetComposeDeploymentUpgradeProgress_564927, base: "",
    url: url_GetComposeDeploymentUpgradeProgress_564928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartRollbackComposeDeploymentUpgrade_564936 = ref object of OpenApiRestCall_563566
proc url_StartRollbackComposeDeploymentUpgrade_564938(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/RollbackUpgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartRollbackComposeDeploymentUpgrade_564937(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_564939 = path.getOrDefault("deploymentName")
  valid_564939 = validateParameter(valid_564939, JString, required = true,
                                 default = nil)
  if valid_564939 != nil:
    section.add "deploymentName", valid_564939
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564940 = query.getOrDefault("api-version")
  valid_564940 = validateParameter(valid_564940, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_564940 != nil:
    section.add "api-version", valid_564940
  var valid_564941 = query.getOrDefault("timeout")
  valid_564941 = validateParameter(valid_564941, JInt, required = false,
                                 default = newJInt(60))
  if valid_564941 != nil:
    section.add "timeout", valid_564941
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564942: Call_StartRollbackComposeDeploymentUpgrade_564936;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Rollback a service fabric compose deployment upgrade.
  ## 
  let valid = call_564942.validator(path, query, header, formData, body)
  let scheme = call_564942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564942.url(scheme.get, call_564942.host, call_564942.base,
                         call_564942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564942, url, valid)

proc call*(call_564943: Call_StartRollbackComposeDeploymentUpgrade_564936;
          deploymentName: string; apiVersion: string = "6.4-preview";
          timeout: int = 60): Recallable =
  ## startRollbackComposeDeploymentUpgrade
  ## Rollback a service fabric compose deployment upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_564944 = newJObject()
  var query_564945 = newJObject()
  add(query_564945, "api-version", newJString(apiVersion))
  add(path_564944, "deploymentName", newJString(deploymentName))
  add(query_564945, "timeout", newJInt(timeout))
  result = call_564943.call(path_564944, query_564945, nil, nil, nil)

var startRollbackComposeDeploymentUpgrade* = Call_StartRollbackComposeDeploymentUpgrade_564936(
    name: "startRollbackComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade",
    validator: validate_StartRollbackComposeDeploymentUpgrade_564937, base: "",
    url: url_StartRollbackComposeDeploymentUpgrade_564938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartComposeDeploymentUpgrade_564946 = ref object of OpenApiRestCall_563566
proc url_StartComposeDeploymentUpgrade_564948(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "deploymentName" in path, "`deploymentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ComposeDeployments/"),
               (kind: VariableSegment, value: "deploymentName"),
               (kind: ConstantSegment, value: "/$/Upgrade")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartComposeDeploymentUpgrade_564947(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   deploymentName: JString (required)
  ##                 : The identity of the deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `deploymentName` field"
  var valid_564949 = path.getOrDefault("deploymentName")
  valid_564949 = validateParameter(valid_564949, JString, required = true,
                                 default = nil)
  if valid_564949 != nil:
    section.add "deploymentName", valid_564949
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564950 = query.getOrDefault("api-version")
  valid_564950 = validateParameter(valid_564950, JString, required = true,
                                 default = newJString("6.0-preview"))
  if valid_564950 != nil:
    section.add "api-version", valid_564950
  var valid_564951 = query.getOrDefault("timeout")
  valid_564951 = validateParameter(valid_564951, JInt, required = false,
                                 default = newJInt(60))
  if valid_564951 != nil:
    section.add "timeout", valid_564951
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564953: Call_StartComposeDeploymentUpgrade_564946; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ## 
  let valid = call_564953.validator(path, query, header, formData, body)
  let scheme = call_564953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564953.url(scheme.get, call_564953.host, call_564953.base,
                         call_564953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564953, url, valid)

proc call*(call_564954: Call_StartComposeDeploymentUpgrade_564946;
          deploymentName: string; ComposeDeploymentUpgradeDescription: JsonNode;
          apiVersion: string = "6.0-preview"; timeout: int = 60): Recallable =
  ## startComposeDeploymentUpgrade
  ## Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '"6.0-preview'.
  ##   deploymentName: string (required)
  ##                 : The identity of the deployment.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ComposeDeploymentUpgradeDescription: JObject (required)
  ##                                      : Parameters for upgrading compose deployment.
  var path_564955 = newJObject()
  var query_564956 = newJObject()
  var body_564957 = newJObject()
  add(query_564956, "api-version", newJString(apiVersion))
  add(path_564955, "deploymentName", newJString(deploymentName))
  add(query_564956, "timeout", newJInt(timeout))
  if ComposeDeploymentUpgradeDescription != nil:
    body_564957 = ComposeDeploymentUpgradeDescription
  result = call_564954.call(path_564955, query_564956, nil, nil, body_564957)

var startComposeDeploymentUpgrade* = Call_StartComposeDeploymentUpgrade_564946(
    name: "startComposeDeploymentUpgrade", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/ComposeDeployments/{deploymentName}/$/Upgrade",
    validator: validate_StartComposeDeploymentUpgrade_564947, base: "",
    url: url_StartComposeDeploymentUpgrade_564948,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationsEventList_564958 = ref object of OpenApiRestCall_563566
proc url_GetApplicationsEventList_564960(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplicationsEventList_564959(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564961 = query.getOrDefault("api-version")
  valid_564961 = validateParameter(valid_564961, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564961 != nil:
    section.add "api-version", valid_564961
  var valid_564962 = query.getOrDefault("timeout")
  valid_564962 = validateParameter(valid_564962, JInt, required = false,
                                 default = newJInt(60))
  if valid_564962 != nil:
    section.add "timeout", valid_564962
  var valid_564963 = query.getOrDefault("EndTimeUtc")
  valid_564963 = validateParameter(valid_564963, JString, required = true,
                                 default = nil)
  if valid_564963 != nil:
    section.add "EndTimeUtc", valid_564963
  var valid_564964 = query.getOrDefault("EventsTypesFilter")
  valid_564964 = validateParameter(valid_564964, JString, required = false,
                                 default = nil)
  if valid_564964 != nil:
    section.add "EventsTypesFilter", valid_564964
  var valid_564965 = query.getOrDefault("SkipCorrelationLookup")
  valid_564965 = validateParameter(valid_564965, JBool, required = false, default = nil)
  if valid_564965 != nil:
    section.add "SkipCorrelationLookup", valid_564965
  var valid_564966 = query.getOrDefault("StartTimeUtc")
  valid_564966 = validateParameter(valid_564966, JString, required = true,
                                 default = nil)
  if valid_564966 != nil:
    section.add "StartTimeUtc", valid_564966
  var valid_564967 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_564967 = validateParameter(valid_564967, JBool, required = false, default = nil)
  if valid_564967 != nil:
    section.add "ExcludeAnalysisEvents", valid_564967
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564968: Call_GetApplicationsEventList_564958; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_564968.validator(path, query, header, formData, body)
  let scheme = call_564968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564968.url(scheme.get, call_564968.host, call_564968.base,
                         call_564968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564968, url, valid)

proc call*(call_564969: Call_GetApplicationsEventList_564958; EndTimeUtc: string;
          StartTimeUtc: string; apiVersion: string = "6.4"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationsEventList
  ## The response is list of ApplicationEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var query_564970 = newJObject()
  add(query_564970, "api-version", newJString(apiVersion))
  add(query_564970, "timeout", newJInt(timeout))
  add(query_564970, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_564970, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_564970, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_564970, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_564970, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_564969.call(nil, query_564970, nil, nil, nil)

var getApplicationsEventList* = Call_GetApplicationsEventList_564958(
    name: "getApplicationsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Applications/Events",
    validator: validate_GetApplicationsEventList_564959, base: "",
    url: url_GetApplicationsEventList_564960, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationEventList_564971 = ref object of OpenApiRestCall_563566
proc url_GetApplicationEventList_564973(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Applications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationEventList_564972(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ApplicationEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `applicationId` field"
  var valid_564974 = path.getOrDefault("applicationId")
  valid_564974 = validateParameter(valid_564974, JString, required = true,
                                 default = nil)
  if valid_564974 != nil:
    section.add "applicationId", valid_564974
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564975 = query.getOrDefault("api-version")
  valid_564975 = validateParameter(valid_564975, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564975 != nil:
    section.add "api-version", valid_564975
  var valid_564976 = query.getOrDefault("timeout")
  valid_564976 = validateParameter(valid_564976, JInt, required = false,
                                 default = newJInt(60))
  if valid_564976 != nil:
    section.add "timeout", valid_564976
  var valid_564977 = query.getOrDefault("EndTimeUtc")
  valid_564977 = validateParameter(valid_564977, JString, required = true,
                                 default = nil)
  if valid_564977 != nil:
    section.add "EndTimeUtc", valid_564977
  var valid_564978 = query.getOrDefault("EventsTypesFilter")
  valid_564978 = validateParameter(valid_564978, JString, required = false,
                                 default = nil)
  if valid_564978 != nil:
    section.add "EventsTypesFilter", valid_564978
  var valid_564979 = query.getOrDefault("SkipCorrelationLookup")
  valid_564979 = validateParameter(valid_564979, JBool, required = false, default = nil)
  if valid_564979 != nil:
    section.add "SkipCorrelationLookup", valid_564979
  var valid_564980 = query.getOrDefault("StartTimeUtc")
  valid_564980 = validateParameter(valid_564980, JString, required = true,
                                 default = nil)
  if valid_564980 != nil:
    section.add "StartTimeUtc", valid_564980
  var valid_564981 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_564981 = validateParameter(valid_564981, JBool, required = false, default = nil)
  if valid_564981 != nil:
    section.add "ExcludeAnalysisEvents", valid_564981
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564982: Call_GetApplicationEventList_564971; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ApplicationEvent objects.
  ## 
  let valid = call_564982.validator(path, query, header, formData, body)
  let scheme = call_564982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564982.url(scheme.get, call_564982.host, call_564982.base,
                         call_564982.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564982, url, valid)

proc call*(call_564983: Call_GetApplicationEventList_564971; EndTimeUtc: string;
          StartTimeUtc: string; applicationId: string; apiVersion: string = "6.4";
          timeout: int = 60; EventsTypesFilter: string = "";
          SkipCorrelationLookup: bool = false; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getApplicationEventList
  ## The response is list of ApplicationEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_564984 = newJObject()
  var query_564985 = newJObject()
  add(query_564985, "api-version", newJString(apiVersion))
  add(query_564985, "timeout", newJInt(timeout))
  add(query_564985, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_564985, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_564985, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_564985, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_564985, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  add(path_564984, "applicationId", newJString(applicationId))
  result = call_564983.call(path_564984, query_564985, nil, nil, nil)

var getApplicationEventList* = Call_GetApplicationEventList_564971(
    name: "getApplicationEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Applications/{applicationId}/$/Events",
    validator: validate_GetApplicationEventList_564972, base: "",
    url: url_GetApplicationEventList_564973, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClusterEventList_564986 = ref object of OpenApiRestCall_563566
proc url_GetClusterEventList_564988(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetClusterEventList_564987(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ClusterEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564989 = query.getOrDefault("api-version")
  valid_564989 = validateParameter(valid_564989, JString, required = true,
                                 default = newJString("6.4"))
  if valid_564989 != nil:
    section.add "api-version", valid_564989
  var valid_564990 = query.getOrDefault("timeout")
  valid_564990 = validateParameter(valid_564990, JInt, required = false,
                                 default = newJInt(60))
  if valid_564990 != nil:
    section.add "timeout", valid_564990
  var valid_564991 = query.getOrDefault("EndTimeUtc")
  valid_564991 = validateParameter(valid_564991, JString, required = true,
                                 default = nil)
  if valid_564991 != nil:
    section.add "EndTimeUtc", valid_564991
  var valid_564992 = query.getOrDefault("EventsTypesFilter")
  valid_564992 = validateParameter(valid_564992, JString, required = false,
                                 default = nil)
  if valid_564992 != nil:
    section.add "EventsTypesFilter", valid_564992
  var valid_564993 = query.getOrDefault("SkipCorrelationLookup")
  valid_564993 = validateParameter(valid_564993, JBool, required = false, default = nil)
  if valid_564993 != nil:
    section.add "SkipCorrelationLookup", valid_564993
  var valid_564994 = query.getOrDefault("StartTimeUtc")
  valid_564994 = validateParameter(valid_564994, JString, required = true,
                                 default = nil)
  if valid_564994 != nil:
    section.add "StartTimeUtc", valid_564994
  var valid_564995 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_564995 = validateParameter(valid_564995, JBool, required = false, default = nil)
  if valid_564995 != nil:
    section.add "ExcludeAnalysisEvents", valid_564995
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564996: Call_GetClusterEventList_564986; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ClusterEvent objects.
  ## 
  let valid = call_564996.validator(path, query, header, formData, body)
  let scheme = call_564996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564996.url(scheme.get, call_564996.host, call_564996.base,
                         call_564996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564996, url, valid)

proc call*(call_564997: Call_GetClusterEventList_564986; EndTimeUtc: string;
          StartTimeUtc: string; apiVersion: string = "6.4"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getClusterEventList
  ## The response is list of ClusterEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var query_564998 = newJObject()
  add(query_564998, "api-version", newJString(apiVersion))
  add(query_564998, "timeout", newJInt(timeout))
  add(query_564998, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_564998, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_564998, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_564998, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_564998, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_564997.call(nil, query_564998, nil, nil, nil)

var getClusterEventList* = Call_GetClusterEventList_564986(
    name: "getClusterEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Cluster/Events",
    validator: validate_GetClusterEventList_564987, base: "",
    url: url_GetClusterEventList_564988, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainersEventList_564999 = ref object of OpenApiRestCall_563566
proc url_GetContainersEventList_565001(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetContainersEventList_565000(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565002 = query.getOrDefault("api-version")
  valid_565002 = validateParameter(valid_565002, JString, required = true,
                                 default = newJString("6.2-preview"))
  if valid_565002 != nil:
    section.add "api-version", valid_565002
  var valid_565003 = query.getOrDefault("timeout")
  valid_565003 = validateParameter(valid_565003, JInt, required = false,
                                 default = newJInt(60))
  if valid_565003 != nil:
    section.add "timeout", valid_565003
  var valid_565004 = query.getOrDefault("EndTimeUtc")
  valid_565004 = validateParameter(valid_565004, JString, required = true,
                                 default = nil)
  if valid_565004 != nil:
    section.add "EndTimeUtc", valid_565004
  var valid_565005 = query.getOrDefault("EventsTypesFilter")
  valid_565005 = validateParameter(valid_565005, JString, required = false,
                                 default = nil)
  if valid_565005 != nil:
    section.add "EventsTypesFilter", valid_565005
  var valid_565006 = query.getOrDefault("SkipCorrelationLookup")
  valid_565006 = validateParameter(valid_565006, JBool, required = false, default = nil)
  if valid_565006 != nil:
    section.add "SkipCorrelationLookup", valid_565006
  var valid_565007 = query.getOrDefault("StartTimeUtc")
  valid_565007 = validateParameter(valid_565007, JString, required = true,
                                 default = nil)
  if valid_565007 != nil:
    section.add "StartTimeUtc", valid_565007
  var valid_565008 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565008 = validateParameter(valid_565008, JBool, required = false, default = nil)
  if valid_565008 != nil:
    section.add "ExcludeAnalysisEvents", valid_565008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565009: Call_GetContainersEventList_564999; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ContainerInstanceEvent objects.
  ## 
  let valid = call_565009.validator(path, query, header, formData, body)
  let scheme = call_565009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565009.url(scheme.get, call_565009.host, call_565009.base,
                         call_565009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565009, url, valid)

proc call*(call_565010: Call_GetContainersEventList_564999; EndTimeUtc: string;
          StartTimeUtc: string; apiVersion: string = "6.2-preview"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getContainersEventList
  ## The response is list of ContainerInstanceEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2-preview'.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var query_565011 = newJObject()
  add(query_565011, "api-version", newJString(apiVersion))
  add(query_565011, "timeout", newJInt(timeout))
  add(query_565011, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565011, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565011, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_565011, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565011, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565010.call(nil, query_565011, nil, nil, nil)

var getContainersEventList* = Call_GetContainersEventList_564999(
    name: "getContainersEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Containers/Events",
    validator: validate_GetContainersEventList_565000, base: "",
    url: url_GetContainersEventList_565001, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCorrelatedEventList_565012 = ref object of OpenApiRestCall_563566
proc url_GetCorrelatedEventList_565014(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "eventInstanceId" in path, "`eventInstanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/CorrelatedEvents/"),
               (kind: VariableSegment, value: "eventInstanceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetCorrelatedEventList_565013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of FabricEvents.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   eventInstanceId: JString (required)
  ##                  : The EventInstanceId.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `eventInstanceId` field"
  var valid_565015 = path.getOrDefault("eventInstanceId")
  valid_565015 = validateParameter(valid_565015, JString, required = true,
                                 default = nil)
  if valid_565015 != nil:
    section.add "eventInstanceId", valid_565015
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565016 = query.getOrDefault("api-version")
  valid_565016 = validateParameter(valid_565016, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565016 != nil:
    section.add "api-version", valid_565016
  var valid_565017 = query.getOrDefault("timeout")
  valid_565017 = validateParameter(valid_565017, JInt, required = false,
                                 default = newJInt(60))
  if valid_565017 != nil:
    section.add "timeout", valid_565017
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565018: Call_GetCorrelatedEventList_565012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of FabricEvents.
  ## 
  let valid = call_565018.validator(path, query, header, formData, body)
  let scheme = call_565018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565018.url(scheme.get, call_565018.host, call_565018.base,
                         call_565018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565018, url, valid)

proc call*(call_565019: Call_GetCorrelatedEventList_565012;
          eventInstanceId: string; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getCorrelatedEventList
  ## The response is list of FabricEvents.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   eventInstanceId: string (required)
  ##                  : The EventInstanceId.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_565020 = newJObject()
  var query_565021 = newJObject()
  add(query_565021, "api-version", newJString(apiVersion))
  add(path_565020, "eventInstanceId", newJString(eventInstanceId))
  add(query_565021, "timeout", newJInt(timeout))
  result = call_565019.call(path_565020, query_565021, nil, nil, nil)

var getCorrelatedEventList* = Call_GetCorrelatedEventList_565012(
    name: "getCorrelatedEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events",
    validator: validate_GetCorrelatedEventList_565013, base: "",
    url: url_GetCorrelatedEventList_565014, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodesEventList_565022 = ref object of OpenApiRestCall_563566
proc url_GetNodesEventList_565024(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodesEventList_565023(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565025 = query.getOrDefault("api-version")
  valid_565025 = validateParameter(valid_565025, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565025 != nil:
    section.add "api-version", valid_565025
  var valid_565026 = query.getOrDefault("timeout")
  valid_565026 = validateParameter(valid_565026, JInt, required = false,
                                 default = newJInt(60))
  if valid_565026 != nil:
    section.add "timeout", valid_565026
  var valid_565027 = query.getOrDefault("EndTimeUtc")
  valid_565027 = validateParameter(valid_565027, JString, required = true,
                                 default = nil)
  if valid_565027 != nil:
    section.add "EndTimeUtc", valid_565027
  var valid_565028 = query.getOrDefault("EventsTypesFilter")
  valid_565028 = validateParameter(valid_565028, JString, required = false,
                                 default = nil)
  if valid_565028 != nil:
    section.add "EventsTypesFilter", valid_565028
  var valid_565029 = query.getOrDefault("SkipCorrelationLookup")
  valid_565029 = validateParameter(valid_565029, JBool, required = false, default = nil)
  if valid_565029 != nil:
    section.add "SkipCorrelationLookup", valid_565029
  var valid_565030 = query.getOrDefault("StartTimeUtc")
  valid_565030 = validateParameter(valid_565030, JString, required = true,
                                 default = nil)
  if valid_565030 != nil:
    section.add "StartTimeUtc", valid_565030
  var valid_565031 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565031 = validateParameter(valid_565031, JBool, required = false, default = nil)
  if valid_565031 != nil:
    section.add "ExcludeAnalysisEvents", valid_565031
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565032: Call_GetNodesEventList_565022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_565032.validator(path, query, header, formData, body)
  let scheme = call_565032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565032.url(scheme.get, call_565032.host, call_565032.base,
                         call_565032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565032, url, valid)

proc call*(call_565033: Call_GetNodesEventList_565022; EndTimeUtc: string;
          StartTimeUtc: string; apiVersion: string = "6.4"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodesEventList
  ## The response is list of NodeEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var query_565034 = newJObject()
  add(query_565034, "api-version", newJString(apiVersion))
  add(query_565034, "timeout", newJInt(timeout))
  add(query_565034, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565034, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565034, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_565034, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565034, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565033.call(nil, query_565034, nil, nil, nil)

var getNodesEventList* = Call_GetNodesEventList_565022(name: "getNodesEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/Events", validator: validate_GetNodesEventList_565023,
    base: "", url: url_GetNodesEventList_565024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeEventList_565035 = ref object of OpenApiRestCall_563566
proc url_GetNodeEventList_565037(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeEventList_565036(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## The response is list of NodeEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565038 = path.getOrDefault("nodeName")
  valid_565038 = validateParameter(valid_565038, JString, required = true,
                                 default = nil)
  if valid_565038 != nil:
    section.add "nodeName", valid_565038
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565039 = query.getOrDefault("api-version")
  valid_565039 = validateParameter(valid_565039, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565039 != nil:
    section.add "api-version", valid_565039
  var valid_565040 = query.getOrDefault("timeout")
  valid_565040 = validateParameter(valid_565040, JInt, required = false,
                                 default = newJInt(60))
  if valid_565040 != nil:
    section.add "timeout", valid_565040
  var valid_565041 = query.getOrDefault("EndTimeUtc")
  valid_565041 = validateParameter(valid_565041, JString, required = true,
                                 default = nil)
  if valid_565041 != nil:
    section.add "EndTimeUtc", valid_565041
  var valid_565042 = query.getOrDefault("EventsTypesFilter")
  valid_565042 = validateParameter(valid_565042, JString, required = false,
                                 default = nil)
  if valid_565042 != nil:
    section.add "EventsTypesFilter", valid_565042
  var valid_565043 = query.getOrDefault("SkipCorrelationLookup")
  valid_565043 = validateParameter(valid_565043, JBool, required = false, default = nil)
  if valid_565043 != nil:
    section.add "SkipCorrelationLookup", valid_565043
  var valid_565044 = query.getOrDefault("StartTimeUtc")
  valid_565044 = validateParameter(valid_565044, JString, required = true,
                                 default = nil)
  if valid_565044 != nil:
    section.add "StartTimeUtc", valid_565044
  var valid_565045 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565045 = validateParameter(valid_565045, JBool, required = false, default = nil)
  if valid_565045 != nil:
    section.add "ExcludeAnalysisEvents", valid_565045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565046: Call_GetNodeEventList_565035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of NodeEvent objects.
  ## 
  let valid = call_565046.validator(path, query, header, formData, body)
  let scheme = call_565046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565046.url(scheme.get, call_565046.host, call_565046.base,
                         call_565046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565046, url, valid)

proc call*(call_565047: Call_GetNodeEventList_565035; EndTimeUtc: string;
          nodeName: string; StartTimeUtc: string; apiVersion: string = "6.4";
          timeout: int = 60; EventsTypesFilter: string = "";
          SkipCorrelationLookup: bool = false; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getNodeEventList
  ## The response is list of NodeEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var path_565048 = newJObject()
  var query_565049 = newJObject()
  add(query_565049, "api-version", newJString(apiVersion))
  add(query_565049, "timeout", newJInt(timeout))
  add(query_565049, "EndTimeUtc", newJString(EndTimeUtc))
  add(path_565048, "nodeName", newJString(nodeName))
  add(query_565049, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565049, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_565049, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565049, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565047.call(path_565048, query_565049, nil, nil, nil)

var getNodeEventList* = Call_GetNodeEventList_565035(name: "getNodeEventList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/EventsStore/Nodes/{nodeName}/$/Events",
    validator: validate_GetNodeEventList_565036, base: "",
    url: url_GetNodeEventList_565037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionsEventList_565050 = ref object of OpenApiRestCall_563566
proc url_GetPartitionsEventList_565052(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPartitionsEventList_565051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565053 = query.getOrDefault("api-version")
  valid_565053 = validateParameter(valid_565053, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565053 != nil:
    section.add "api-version", valid_565053
  var valid_565054 = query.getOrDefault("timeout")
  valid_565054 = validateParameter(valid_565054, JInt, required = false,
                                 default = newJInt(60))
  if valid_565054 != nil:
    section.add "timeout", valid_565054
  var valid_565055 = query.getOrDefault("EndTimeUtc")
  valid_565055 = validateParameter(valid_565055, JString, required = true,
                                 default = nil)
  if valid_565055 != nil:
    section.add "EndTimeUtc", valid_565055
  var valid_565056 = query.getOrDefault("EventsTypesFilter")
  valid_565056 = validateParameter(valid_565056, JString, required = false,
                                 default = nil)
  if valid_565056 != nil:
    section.add "EventsTypesFilter", valid_565056
  var valid_565057 = query.getOrDefault("SkipCorrelationLookup")
  valid_565057 = validateParameter(valid_565057, JBool, required = false, default = nil)
  if valid_565057 != nil:
    section.add "SkipCorrelationLookup", valid_565057
  var valid_565058 = query.getOrDefault("StartTimeUtc")
  valid_565058 = validateParameter(valid_565058, JString, required = true,
                                 default = nil)
  if valid_565058 != nil:
    section.add "StartTimeUtc", valid_565058
  var valid_565059 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565059 = validateParameter(valid_565059, JBool, required = false, default = nil)
  if valid_565059 != nil:
    section.add "ExcludeAnalysisEvents", valid_565059
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565060: Call_GetPartitionsEventList_565050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_565060.validator(path, query, header, formData, body)
  let scheme = call_565060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565060.url(scheme.get, call_565060.host, call_565060.base,
                         call_565060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565060, url, valid)

proc call*(call_565061: Call_GetPartitionsEventList_565050; EndTimeUtc: string;
          StartTimeUtc: string; apiVersion: string = "6.4"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionsEventList
  ## The response is list of PartitionEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var query_565062 = newJObject()
  add(query_565062, "api-version", newJString(apiVersion))
  add(query_565062, "timeout", newJInt(timeout))
  add(query_565062, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565062, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565062, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_565062, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565062, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565061.call(nil, query_565062, nil, nil, nil)

var getPartitionsEventList* = Call_GetPartitionsEventList_565050(
    name: "getPartitionsEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/Events",
    validator: validate_GetPartitionsEventList_565051, base: "",
    url: url_GetPartitionsEventList_565052, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionEventList_565063 = ref object of OpenApiRestCall_563566
proc url_GetPartitionEventList_565065(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionEventList_565064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of PartitionEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565066 = path.getOrDefault("partitionId")
  valid_565066 = validateParameter(valid_565066, JString, required = true,
                                 default = nil)
  if valid_565066 != nil:
    section.add "partitionId", valid_565066
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565067 = query.getOrDefault("api-version")
  valid_565067 = validateParameter(valid_565067, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565067 != nil:
    section.add "api-version", valid_565067
  var valid_565068 = query.getOrDefault("timeout")
  valid_565068 = validateParameter(valid_565068, JInt, required = false,
                                 default = newJInt(60))
  if valid_565068 != nil:
    section.add "timeout", valid_565068
  var valid_565069 = query.getOrDefault("EndTimeUtc")
  valid_565069 = validateParameter(valid_565069, JString, required = true,
                                 default = nil)
  if valid_565069 != nil:
    section.add "EndTimeUtc", valid_565069
  var valid_565070 = query.getOrDefault("EventsTypesFilter")
  valid_565070 = validateParameter(valid_565070, JString, required = false,
                                 default = nil)
  if valid_565070 != nil:
    section.add "EventsTypesFilter", valid_565070
  var valid_565071 = query.getOrDefault("SkipCorrelationLookup")
  valid_565071 = validateParameter(valid_565071, JBool, required = false, default = nil)
  if valid_565071 != nil:
    section.add "SkipCorrelationLookup", valid_565071
  var valid_565072 = query.getOrDefault("StartTimeUtc")
  valid_565072 = validateParameter(valid_565072, JString, required = true,
                                 default = nil)
  if valid_565072 != nil:
    section.add "StartTimeUtc", valid_565072
  var valid_565073 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565073 = validateParameter(valid_565073, JBool, required = false, default = nil)
  if valid_565073 != nil:
    section.add "ExcludeAnalysisEvents", valid_565073
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565074: Call_GetPartitionEventList_565063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of PartitionEvent objects.
  ## 
  let valid = call_565074.validator(path, query, header, formData, body)
  let scheme = call_565074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565074.url(scheme.get, call_565074.host, call_565074.base,
                         call_565074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565074, url, valid)

proc call*(call_565075: Call_GetPartitionEventList_565063; EndTimeUtc: string;
          partitionId: string; StartTimeUtc: string; apiVersion: string = "6.4";
          timeout: int = 60; EventsTypesFilter: string = "";
          SkipCorrelationLookup: bool = false; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionEventList
  ## The response is list of PartitionEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var path_565076 = newJObject()
  var query_565077 = newJObject()
  add(query_565077, "api-version", newJString(apiVersion))
  add(query_565077, "timeout", newJInt(timeout))
  add(query_565077, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565077, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565077, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(path_565076, "partitionId", newJString(partitionId))
  add(query_565077, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565077, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565075.call(path_565076, query_565077, nil, nil, nil)

var getPartitionEventList* = Call_GetPartitionEventList_565063(
    name: "getPartitionEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Events",
    validator: validate_GetPartitionEventList_565064, base: "",
    url: url_GetPartitionEventList_565065, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicasEventList_565078 = ref object of OpenApiRestCall_563566
proc url_GetPartitionReplicasEventList_565080(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicasEventList_565079(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565081 = path.getOrDefault("partitionId")
  valid_565081 = validateParameter(valid_565081, JString, required = true,
                                 default = nil)
  if valid_565081 != nil:
    section.add "partitionId", valid_565081
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565082 = query.getOrDefault("api-version")
  valid_565082 = validateParameter(valid_565082, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565082 != nil:
    section.add "api-version", valid_565082
  var valid_565083 = query.getOrDefault("timeout")
  valid_565083 = validateParameter(valid_565083, JInt, required = false,
                                 default = newJInt(60))
  if valid_565083 != nil:
    section.add "timeout", valid_565083
  var valid_565084 = query.getOrDefault("EndTimeUtc")
  valid_565084 = validateParameter(valid_565084, JString, required = true,
                                 default = nil)
  if valid_565084 != nil:
    section.add "EndTimeUtc", valid_565084
  var valid_565085 = query.getOrDefault("EventsTypesFilter")
  valid_565085 = validateParameter(valid_565085, JString, required = false,
                                 default = nil)
  if valid_565085 != nil:
    section.add "EventsTypesFilter", valid_565085
  var valid_565086 = query.getOrDefault("SkipCorrelationLookup")
  valid_565086 = validateParameter(valid_565086, JBool, required = false, default = nil)
  if valid_565086 != nil:
    section.add "SkipCorrelationLookup", valid_565086
  var valid_565087 = query.getOrDefault("StartTimeUtc")
  valid_565087 = validateParameter(valid_565087, JString, required = true,
                                 default = nil)
  if valid_565087 != nil:
    section.add "StartTimeUtc", valid_565087
  var valid_565088 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565088 = validateParameter(valid_565088, JBool, required = false, default = nil)
  if valid_565088 != nil:
    section.add "ExcludeAnalysisEvents", valid_565088
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565089: Call_GetPartitionReplicasEventList_565078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_565089.validator(path, query, header, formData, body)
  let scheme = call_565089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565089.url(scheme.get, call_565089.host, call_565089.base,
                         call_565089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565089, url, valid)

proc call*(call_565090: Call_GetPartitionReplicasEventList_565078;
          EndTimeUtc: string; partitionId: string; StartTimeUtc: string;
          apiVersion: string = "6.4"; timeout: int = 60; EventsTypesFilter: string = "";
          SkipCorrelationLookup: bool = false; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicasEventList
  ## The response is list of ReplicaEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var path_565091 = newJObject()
  var query_565092 = newJObject()
  add(query_565092, "api-version", newJString(apiVersion))
  add(query_565092, "timeout", newJInt(timeout))
  add(query_565092, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565092, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565092, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(path_565091, "partitionId", newJString(partitionId))
  add(query_565092, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565092, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565090.call(path_565091, query_565092, nil, nil, nil)

var getPartitionReplicasEventList* = Call_GetPartitionReplicasEventList_565078(
    name: "getPartitionReplicasEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Partitions/{partitionId}/$/Replicas/Events",
    validator: validate_GetPartitionReplicasEventList_565079, base: "",
    url: url_GetPartitionReplicasEventList_565080,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionReplicaEventList_565093 = ref object of OpenApiRestCall_563566
proc url_GetPartitionReplicaEventList_565095(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Replicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionReplicaEventList_565094(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ReplicaEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_565096 = path.getOrDefault("replicaId")
  valid_565096 = validateParameter(valid_565096, JString, required = true,
                                 default = nil)
  if valid_565096 != nil:
    section.add "replicaId", valid_565096
  var valid_565097 = path.getOrDefault("partitionId")
  valid_565097 = validateParameter(valid_565097, JString, required = true,
                                 default = nil)
  if valid_565097 != nil:
    section.add "partitionId", valid_565097
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565098 = query.getOrDefault("api-version")
  valid_565098 = validateParameter(valid_565098, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565098 != nil:
    section.add "api-version", valid_565098
  var valid_565099 = query.getOrDefault("timeout")
  valid_565099 = validateParameter(valid_565099, JInt, required = false,
                                 default = newJInt(60))
  if valid_565099 != nil:
    section.add "timeout", valid_565099
  var valid_565100 = query.getOrDefault("EndTimeUtc")
  valid_565100 = validateParameter(valid_565100, JString, required = true,
                                 default = nil)
  if valid_565100 != nil:
    section.add "EndTimeUtc", valid_565100
  var valid_565101 = query.getOrDefault("EventsTypesFilter")
  valid_565101 = validateParameter(valid_565101, JString, required = false,
                                 default = nil)
  if valid_565101 != nil:
    section.add "EventsTypesFilter", valid_565101
  var valid_565102 = query.getOrDefault("SkipCorrelationLookup")
  valid_565102 = validateParameter(valid_565102, JBool, required = false, default = nil)
  if valid_565102 != nil:
    section.add "SkipCorrelationLookup", valid_565102
  var valid_565103 = query.getOrDefault("StartTimeUtc")
  valid_565103 = validateParameter(valid_565103, JString, required = true,
                                 default = nil)
  if valid_565103 != nil:
    section.add "StartTimeUtc", valid_565103
  var valid_565104 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565104 = validateParameter(valid_565104, JBool, required = false, default = nil)
  if valid_565104 != nil:
    section.add "ExcludeAnalysisEvents", valid_565104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565105: Call_GetPartitionReplicaEventList_565093; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ReplicaEvent objects.
  ## 
  let valid = call_565105.validator(path, query, header, formData, body)
  let scheme = call_565105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565105.url(scheme.get, call_565105.host, call_565105.base,
                         call_565105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565105, url, valid)

proc call*(call_565106: Call_GetPartitionReplicaEventList_565093;
          replicaId: string; EndTimeUtc: string; partitionId: string;
          StartTimeUtc: string; apiVersion: string = "6.4"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getPartitionReplicaEventList
  ## The response is list of ReplicaEvent objects.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var path_565107 = newJObject()
  var query_565108 = newJObject()
  add(path_565107, "replicaId", newJString(replicaId))
  add(query_565108, "api-version", newJString(apiVersion))
  add(query_565108, "timeout", newJInt(timeout))
  add(query_565108, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565108, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565108, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(path_565107, "partitionId", newJString(partitionId))
  add(query_565108, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565108, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565106.call(path_565107, query_565108, nil, nil, nil)

var getPartitionReplicaEventList* = Call_GetPartitionReplicaEventList_565093(
    name: "getPartitionReplicaEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events",
    validator: validate_GetPartitionReplicaEventList_565094, base: "",
    url: url_GetPartitionReplicaEventList_565095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServicesEventList_565109 = ref object of OpenApiRestCall_563566
proc url_GetServicesEventList_565111(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetServicesEventList_565110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565112 = query.getOrDefault("api-version")
  valid_565112 = validateParameter(valid_565112, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565112 != nil:
    section.add "api-version", valid_565112
  var valid_565113 = query.getOrDefault("timeout")
  valid_565113 = validateParameter(valid_565113, JInt, required = false,
                                 default = newJInt(60))
  if valid_565113 != nil:
    section.add "timeout", valid_565113
  var valid_565114 = query.getOrDefault("EndTimeUtc")
  valid_565114 = validateParameter(valid_565114, JString, required = true,
                                 default = nil)
  if valid_565114 != nil:
    section.add "EndTimeUtc", valid_565114
  var valid_565115 = query.getOrDefault("EventsTypesFilter")
  valid_565115 = validateParameter(valid_565115, JString, required = false,
                                 default = nil)
  if valid_565115 != nil:
    section.add "EventsTypesFilter", valid_565115
  var valid_565116 = query.getOrDefault("SkipCorrelationLookup")
  valid_565116 = validateParameter(valid_565116, JBool, required = false, default = nil)
  if valid_565116 != nil:
    section.add "SkipCorrelationLookup", valid_565116
  var valid_565117 = query.getOrDefault("StartTimeUtc")
  valid_565117 = validateParameter(valid_565117, JString, required = true,
                                 default = nil)
  if valid_565117 != nil:
    section.add "StartTimeUtc", valid_565117
  var valid_565118 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565118 = validateParameter(valid_565118, JBool, required = false, default = nil)
  if valid_565118 != nil:
    section.add "ExcludeAnalysisEvents", valid_565118
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565119: Call_GetServicesEventList_565109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_565119.validator(path, query, header, formData, body)
  let scheme = call_565119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565119.url(scheme.get, call_565119.host, call_565119.base,
                         call_565119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565119, url, valid)

proc call*(call_565120: Call_GetServicesEventList_565109; EndTimeUtc: string;
          StartTimeUtc: string; apiVersion: string = "6.4"; timeout: int = 60;
          EventsTypesFilter: string = ""; SkipCorrelationLookup: bool = false;
          ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServicesEventList
  ## The response is list of ServiceEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var query_565121 = newJObject()
  add(query_565121, "api-version", newJString(apiVersion))
  add(query_565121, "timeout", newJInt(timeout))
  add(query_565121, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565121, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565121, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(query_565121, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565121, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565120.call(nil, query_565121, nil, nil, nil)

var getServicesEventList* = Call_GetServicesEventList_565109(
    name: "getServicesEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/EventsStore/Services/Events",
    validator: validate_GetServicesEventList_565110, base: "",
    url: url_GetServicesEventList_565111, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceEventList_565122 = ref object of OpenApiRestCall_563566
proc url_GetServiceEventList_565124(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/EventsStore/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Events")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceEventList_565123(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The response is list of ServiceEvent objects.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_565125 = path.getOrDefault("serviceId")
  valid_565125 = validateParameter(valid_565125, JString, required = true,
                                 default = nil)
  if valid_565125 != nil:
    section.add "serviceId", valid_565125
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: JString
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: JBool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   StartTimeUtc: JString (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: JBool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565126 = query.getOrDefault("api-version")
  valid_565126 = validateParameter(valid_565126, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565126 != nil:
    section.add "api-version", valid_565126
  var valid_565127 = query.getOrDefault("timeout")
  valid_565127 = validateParameter(valid_565127, JInt, required = false,
                                 default = newJInt(60))
  if valid_565127 != nil:
    section.add "timeout", valid_565127
  var valid_565128 = query.getOrDefault("EndTimeUtc")
  valid_565128 = validateParameter(valid_565128, JString, required = true,
                                 default = nil)
  if valid_565128 != nil:
    section.add "EndTimeUtc", valid_565128
  var valid_565129 = query.getOrDefault("EventsTypesFilter")
  valid_565129 = validateParameter(valid_565129, JString, required = false,
                                 default = nil)
  if valid_565129 != nil:
    section.add "EventsTypesFilter", valid_565129
  var valid_565130 = query.getOrDefault("SkipCorrelationLookup")
  valid_565130 = validateParameter(valid_565130, JBool, required = false, default = nil)
  if valid_565130 != nil:
    section.add "SkipCorrelationLookup", valid_565130
  var valid_565131 = query.getOrDefault("StartTimeUtc")
  valid_565131 = validateParameter(valid_565131, JString, required = true,
                                 default = nil)
  if valid_565131 != nil:
    section.add "StartTimeUtc", valid_565131
  var valid_565132 = query.getOrDefault("ExcludeAnalysisEvents")
  valid_565132 = validateParameter(valid_565132, JBool, required = false, default = nil)
  if valid_565132 != nil:
    section.add "ExcludeAnalysisEvents", valid_565132
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565133: Call_GetServiceEventList_565122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response is list of ServiceEvent objects.
  ## 
  let valid = call_565133.validator(path, query, header, formData, body)
  let scheme = call_565133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565133.url(scheme.get, call_565133.host, call_565133.base,
                         call_565133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565133, url, valid)

proc call*(call_565134: Call_GetServiceEventList_565122; EndTimeUtc: string;
          serviceId: string; StartTimeUtc: string; apiVersion: string = "6.4";
          timeout: int = 60; EventsTypesFilter: string = "";
          SkipCorrelationLookup: bool = false; ExcludeAnalysisEvents: bool = false): Recallable =
  ## getServiceEventList
  ## The response is list of ServiceEvent objects.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string (required)
  ##             : The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   EventsTypesFilter: string
  ##                    : This is a comma separated string specifying the types of FabricEvents that should only be included in the response.
  ##   SkipCorrelationLookup: bool
  ##                        : This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   StartTimeUtc: string (required)
  ##               : The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
  ##   ExcludeAnalysisEvents: bool
  ##                        : This param disables the retrieval of AnalysisEvents if true is passed.
  var path_565135 = newJObject()
  var query_565136 = newJObject()
  add(query_565136, "api-version", newJString(apiVersion))
  add(query_565136, "timeout", newJInt(timeout))
  add(query_565136, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_565136, "EventsTypesFilter", newJString(EventsTypesFilter))
  add(query_565136, "SkipCorrelationLookup", newJBool(SkipCorrelationLookup))
  add(path_565135, "serviceId", newJString(serviceId))
  add(query_565136, "StartTimeUtc", newJString(StartTimeUtc))
  add(query_565136, "ExcludeAnalysisEvents", newJBool(ExcludeAnalysisEvents))
  result = call_565134.call(path_565135, query_565136, nil, nil, nil)

var getServiceEventList* = Call_GetServiceEventList_565122(
    name: "getServiceEventList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/EventsStore/Services/{serviceId}/$/Events",
    validator: validate_GetServiceEventList_565123, base: "",
    url: url_GetServiceEventList_565124, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFaultOperationList_565137 = ref object of OpenApiRestCall_563566
proc url_GetFaultOperationList_565139(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFaultOperationList_565138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   TypeFilter: JInt (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: JInt (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565140 = query.getOrDefault("api-version")
  valid_565140 = validateParameter(valid_565140, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565140 != nil:
    section.add "api-version", valid_565140
  var valid_565141 = query.getOrDefault("timeout")
  valid_565141 = validateParameter(valid_565141, JInt, required = false,
                                 default = newJInt(60))
  if valid_565141 != nil:
    section.add "timeout", valid_565141
  var valid_565142 = query.getOrDefault("TypeFilter")
  valid_565142 = validateParameter(valid_565142, JInt, required = true,
                                 default = newJInt(65535))
  if valid_565142 != nil:
    section.add "TypeFilter", valid_565142
  var valid_565143 = query.getOrDefault("StateFilter")
  valid_565143 = validateParameter(valid_565143, JInt, required = true,
                                 default = newJInt(65535))
  if valid_565143 != nil:
    section.add "StateFilter", valid_565143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565144: Call_GetFaultOperationList_565137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of user-induced fault operations filtered by provided input.
  ## 
  let valid = call_565144.validator(path, query, header, formData, body)
  let scheme = call_565144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565144.url(scheme.get, call_565144.host, call_565144.base,
                         call_565144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565144, url, valid)

proc call*(call_565145: Call_GetFaultOperationList_565137;
          apiVersion: string = "6.0"; timeout: int = 60; TypeFilter: int = 65535;
          StateFilter: int = 65535): Recallable =
  ## getFaultOperationList
  ## Gets the list of user-induced fault operations filtered by provided input.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   TypeFilter: int (required)
  ##             : Used to filter on OperationType for user-induced operations.
  ## 
  ## - 65535 - select all
  ## - 1 - select PartitionDataLoss.
  ## - 2 - select PartitionQuorumLoss.
  ## - 4 - select PartitionRestart.
  ## - 8 - select NodeTransition.
  ##   StateFilter: int (required)
  ##              : Used to filter on OperationState's for user-induced operations.
  ## 
  ## - 65535 - select All
  ## - 1 - select Running
  ## - 2 - select RollingBack
  ## - 8 - select Completed
  ## - 16 - select Faulted
  ## - 32 - select Cancelled
  ## - 64 - select ForceCancelled
  var query_565146 = newJObject()
  add(query_565146, "api-version", newJString(apiVersion))
  add(query_565146, "timeout", newJInt(timeout))
  add(query_565146, "TypeFilter", newJInt(TypeFilter))
  add(query_565146, "StateFilter", newJInt(StateFilter))
  result = call_565145.call(nil, query_565146, nil, nil, nil)

var getFaultOperationList* = Call_GetFaultOperationList_565137(
    name: "getFaultOperationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/",
    validator: validate_GetFaultOperationList_565138, base: "",
    url: url_GetFaultOperationList_565139, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelOperation_565147 = ref object of OpenApiRestCall_563566
proc url_CancelOperation_565149(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CancelOperation_565148(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Force: JBool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565150 = query.getOrDefault("OperationId")
  valid_565150 = validateParameter(valid_565150, JString, required = true,
                                 default = nil)
  if valid_565150 != nil:
    section.add "OperationId", valid_565150
  var valid_565151 = query.getOrDefault("api-version")
  valid_565151 = validateParameter(valid_565151, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565151 != nil:
    section.add "api-version", valid_565151
  var valid_565152 = query.getOrDefault("Force")
  valid_565152 = validateParameter(valid_565152, JBool, required = true,
                                 default = newJBool(false))
  if valid_565152 != nil:
    section.add "Force", valid_565152
  var valid_565153 = query.getOrDefault("timeout")
  valid_565153 = validateParameter(valid_565153, JInt, required = false,
                                 default = newJInt(60))
  if valid_565153 != nil:
    section.add "timeout", valid_565153
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565154: Call_CancelOperation_565147; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ## 
  let valid = call_565154.validator(path, query, header, formData, body)
  let scheme = call_565154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565154.url(scheme.get, call_565154.host, call_565154.base,
                         call_565154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565154, url, valid)

proc call*(call_565155: Call_CancelOperation_565147; OperationId: string;
          apiVersion: string = "6.0"; Force: bool = false; timeout: int = 60): Recallable =
  ## cancelOperation
  ## The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
  ## 
  ## If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
  ## may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already
  ## been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.
  ## Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the
  ## test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.
  ## It will not restore the target partition's data, if the command progressed far enough to cause data loss.
  ## 
  ## Important note:  if this API is invoked with force==true, internal state may be left behind.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Force: bool (required)
  ##        : Indicates whether to gracefully roll back and clean up internal system state modified by executing the user-induced operation.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565156 = newJObject()
  add(query_565156, "OperationId", newJString(OperationId))
  add(query_565156, "api-version", newJString(apiVersion))
  add(query_565156, "Force", newJBool(Force))
  add(query_565156, "timeout", newJInt(timeout))
  result = call_565155.call(nil, query_565156, nil, nil, nil)

var cancelOperation* = Call_CancelOperation_565147(name: "cancelOperation",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/$/Cancel",
    validator: validate_CancelOperation_565148, base: "", url: url_CancelOperation_565149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeTransitionProgress_565157 = ref object of OpenApiRestCall_563566
proc url_GetNodeTransitionProgress_565159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetTransitionProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeTransitionProgress_565158(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565160 = path.getOrDefault("nodeName")
  valid_565160 = validateParameter(valid_565160, JString, required = true,
                                 default = nil)
  if valid_565160 != nil:
    section.add "nodeName", valid_565160
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565161 = query.getOrDefault("OperationId")
  valid_565161 = validateParameter(valid_565161, JString, required = true,
                                 default = nil)
  if valid_565161 != nil:
    section.add "OperationId", valid_565161
  var valid_565162 = query.getOrDefault("api-version")
  valid_565162 = validateParameter(valid_565162, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565162 != nil:
    section.add "api-version", valid_565162
  var valid_565163 = query.getOrDefault("timeout")
  valid_565163 = validateParameter(valid_565163, JInt, required = false,
                                 default = newJInt(60))
  if valid_565163 != nil:
    section.add "timeout", valid_565163
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565164: Call_GetNodeTransitionProgress_565157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ## 
  let valid = call_565164.validator(path, query, header, formData, body)
  let scheme = call_565164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565164.url(scheme.get, call_565164.host, call_565164.base,
                         call_565164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565164, url, valid)

proc call*(call_565165: Call_GetNodeTransitionProgress_565157; OperationId: string;
          nodeName: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getNodeTransitionProgress
  ## Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565166 = newJObject()
  var query_565167 = newJObject()
  add(query_565167, "OperationId", newJString(OperationId))
  add(query_565167, "api-version", newJString(apiVersion))
  add(query_565167, "timeout", newJInt(timeout))
  add(path_565166, "nodeName", newJString(nodeName))
  result = call_565165.call(path_565166, query_565167, nil, nil, nil)

var getNodeTransitionProgress* = Call_GetNodeTransitionProgress_565157(
    name: "getNodeTransitionProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/GetTransitionProgress",
    validator: validate_GetNodeTransitionProgress_565158, base: "",
    url: url_GetNodeTransitionProgress_565159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartNodeTransition_565168 = ref object of OpenApiRestCall_563566
proc url_StartNodeTransition_565170(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/StartTransition/")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartNodeTransition_565169(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565171 = path.getOrDefault("nodeName")
  valid_565171 = validateParameter(valid_565171, JString, required = true,
                                 default = nil)
  if valid_565171 != nil:
    section.add "nodeName", valid_565171
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   NodeInstanceId: JString (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StopDurationInSeconds: JInt (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   NodeTransitionType: JString (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565172 = query.getOrDefault("OperationId")
  valid_565172 = validateParameter(valid_565172, JString, required = true,
                                 default = nil)
  if valid_565172 != nil:
    section.add "OperationId", valid_565172
  var valid_565173 = query.getOrDefault("NodeInstanceId")
  valid_565173 = validateParameter(valid_565173, JString, required = true,
                                 default = nil)
  if valid_565173 != nil:
    section.add "NodeInstanceId", valid_565173
  var valid_565174 = query.getOrDefault("api-version")
  valid_565174 = validateParameter(valid_565174, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565174 != nil:
    section.add "api-version", valid_565174
  var valid_565175 = query.getOrDefault("StopDurationInSeconds")
  valid_565175 = validateParameter(valid_565175, JInt, required = true, default = nil)
  if valid_565175 != nil:
    section.add "StopDurationInSeconds", valid_565175
  var valid_565176 = query.getOrDefault("timeout")
  valid_565176 = validateParameter(valid_565176, JInt, required = false,
                                 default = newJInt(60))
  if valid_565176 != nil:
    section.add "timeout", valid_565176
  var valid_565177 = query.getOrDefault("NodeTransitionType")
  valid_565177 = validateParameter(valid_565177, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_565177 != nil:
    section.add "NodeTransitionType", valid_565177
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565178: Call_StartNodeTransition_565168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ## 
  let valid = call_565178.validator(path, query, header, formData, body)
  let scheme = call_565178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565178.url(scheme.get, call_565178.host, call_565178.base,
                         call_565178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565178, url, valid)

proc call*(call_565179: Call_StartNodeTransition_565168; OperationId: string;
          NodeInstanceId: string; StopDurationInSeconds: int; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60;
          NodeTransitionType: string = "Invalid"): Recallable =
  ## startNodeTransition
  ## Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in "Start" for the NodeTransitionType parameter.
  ## To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.
  ## Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   NodeInstanceId: string (required)
  ##                 : The node instance ID of the target node.  This can be determined through GetNodeInfo API.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   StopDurationInSeconds: int (required)
  ##                        : The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   NodeTransitionType: string (required)
  ##                     : Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.
  var path_565180 = newJObject()
  var query_565181 = newJObject()
  add(query_565181, "OperationId", newJString(OperationId))
  add(query_565181, "NodeInstanceId", newJString(NodeInstanceId))
  add(query_565181, "api-version", newJString(apiVersion))
  add(query_565181, "StopDurationInSeconds", newJInt(StopDurationInSeconds))
  add(query_565181, "timeout", newJInt(timeout))
  add(path_565180, "nodeName", newJString(nodeName))
  add(query_565181, "NodeTransitionType", newJString(NodeTransitionType))
  result = call_565179.call(path_565180, query_565181, nil, nil, nil)

var startNodeTransition* = Call_StartNodeTransition_565168(
    name: "startNodeTransition", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Faults/Nodes/{nodeName}/$/StartTransition/",
    validator: validate_StartNodeTransition_565169, base: "",
    url: url_StartNodeTransition_565170, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDataLossProgress_565182 = ref object of OpenApiRestCall_563566
proc url_GetDataLossProgress_565184(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetDataLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDataLossProgress_565183(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565185 = path.getOrDefault("partitionId")
  valid_565185 = validateParameter(valid_565185, JString, required = true,
                                 default = nil)
  if valid_565185 != nil:
    section.add "partitionId", valid_565185
  var valid_565186 = path.getOrDefault("serviceId")
  valid_565186 = validateParameter(valid_565186, JString, required = true,
                                 default = nil)
  if valid_565186 != nil:
    section.add "serviceId", valid_565186
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565187 = query.getOrDefault("OperationId")
  valid_565187 = validateParameter(valid_565187, JString, required = true,
                                 default = nil)
  if valid_565187 != nil:
    section.add "OperationId", valid_565187
  var valid_565188 = query.getOrDefault("api-version")
  valid_565188 = validateParameter(valid_565188, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565188 != nil:
    section.add "api-version", valid_565188
  var valid_565189 = query.getOrDefault("timeout")
  valid_565189 = validateParameter(valid_565189, JInt, required = false,
                                 default = newJInt(60))
  if valid_565189 != nil:
    section.add "timeout", valid_565189
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565190: Call_GetDataLossProgress_565182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ## 
  let valid = call_565190.validator(path, query, header, formData, body)
  let scheme = call_565190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565190.url(scheme.get, call_565190.host, call_565190.base,
                         call_565190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565190, url, valid)

proc call*(call_565191: Call_GetDataLossProgress_565182; OperationId: string;
          partitionId: string; serviceId: string; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getDataLossProgress
  ## Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_565192 = newJObject()
  var query_565193 = newJObject()
  add(query_565193, "OperationId", newJString(OperationId))
  add(query_565193, "api-version", newJString(apiVersion))
  add(query_565193, "timeout", newJInt(timeout))
  add(path_565192, "partitionId", newJString(partitionId))
  add(path_565192, "serviceId", newJString(serviceId))
  result = call_565191.call(path_565192, query_565193, nil, nil, nil)

var getDataLossProgress* = Call_GetDataLossProgress_565182(
    name: "getDataLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress",
    validator: validate_GetDataLossProgress_565183, base: "",
    url: url_GetDataLossProgress_565184, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetQuorumLossProgress_565194 = ref object of OpenApiRestCall_563566
proc url_GetQuorumLossProgress_565196(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetQuorumLossProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetQuorumLossProgress_565195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565197 = path.getOrDefault("partitionId")
  valid_565197 = validateParameter(valid_565197, JString, required = true,
                                 default = nil)
  if valid_565197 != nil:
    section.add "partitionId", valid_565197
  var valid_565198 = path.getOrDefault("serviceId")
  valid_565198 = validateParameter(valid_565198, JString, required = true,
                                 default = nil)
  if valid_565198 != nil:
    section.add "serviceId", valid_565198
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565199 = query.getOrDefault("OperationId")
  valid_565199 = validateParameter(valid_565199, JString, required = true,
                                 default = nil)
  if valid_565199 != nil:
    section.add "OperationId", valid_565199
  var valid_565200 = query.getOrDefault("api-version")
  valid_565200 = validateParameter(valid_565200, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565200 != nil:
    section.add "api-version", valid_565200
  var valid_565201 = query.getOrDefault("timeout")
  valid_565201 = validateParameter(valid_565201, JInt, required = false,
                                 default = newJInt(60))
  if valid_565201 != nil:
    section.add "timeout", valid_565201
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565202: Call_GetQuorumLossProgress_565194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ## 
  let valid = call_565202.validator(path, query, header, formData, body)
  let scheme = call_565202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565202.url(scheme.get, call_565202.host, call_565202.base,
                         call_565202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565202, url, valid)

proc call*(call_565203: Call_GetQuorumLossProgress_565194; OperationId: string;
          partitionId: string; serviceId: string; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getQuorumLossProgress
  ## Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_565204 = newJObject()
  var query_565205 = newJObject()
  add(query_565205, "OperationId", newJString(OperationId))
  add(query_565205, "api-version", newJString(apiVersion))
  add(query_565205, "timeout", newJInt(timeout))
  add(path_565204, "partitionId", newJString(partitionId))
  add(path_565204, "serviceId", newJString(serviceId))
  result = call_565203.call(path_565204, query_565205, nil, nil, nil)

var getQuorumLossProgress* = Call_GetQuorumLossProgress_565194(
    name: "getQuorumLossProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress",
    validator: validate_GetQuorumLossProgress_565195, base: "",
    url: url_GetQuorumLossProgress_565196, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestartProgress_565206 = ref object of OpenApiRestCall_563566
proc url_GetPartitionRestartProgress_565208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestartProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestartProgress_565207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565209 = path.getOrDefault("partitionId")
  valid_565209 = validateParameter(valid_565209, JString, required = true,
                                 default = nil)
  if valid_565209 != nil:
    section.add "partitionId", valid_565209
  var valid_565210 = path.getOrDefault("serviceId")
  valid_565210 = validateParameter(valid_565210, JString, required = true,
                                 default = nil)
  if valid_565210 != nil:
    section.add "serviceId", valid_565210
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565211 = query.getOrDefault("OperationId")
  valid_565211 = validateParameter(valid_565211, JString, required = true,
                                 default = nil)
  if valid_565211 != nil:
    section.add "OperationId", valid_565211
  var valid_565212 = query.getOrDefault("api-version")
  valid_565212 = validateParameter(valid_565212, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565212 != nil:
    section.add "api-version", valid_565212
  var valid_565213 = query.getOrDefault("timeout")
  valid_565213 = validateParameter(valid_565213, JInt, required = false,
                                 default = newJInt(60))
  if valid_565213 != nil:
    section.add "timeout", valid_565213
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565214: Call_GetPartitionRestartProgress_565206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ## 
  let valid = call_565214.validator(path, query, header, formData, body)
  let scheme = call_565214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565214.url(scheme.get, call_565214.host, call_565214.base,
                         call_565214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565214, url, valid)

proc call*(call_565215: Call_GetPartitionRestartProgress_565206;
          OperationId: string; partitionId: string; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getPartitionRestartProgress
  ## Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_565216 = newJObject()
  var query_565217 = newJObject()
  add(query_565217, "OperationId", newJString(OperationId))
  add(query_565217, "api-version", newJString(apiVersion))
  add(query_565217, "timeout", newJInt(timeout))
  add(path_565216, "partitionId", newJString(partitionId))
  add(path_565216, "serviceId", newJString(serviceId))
  result = call_565215.call(path_565216, query_565217, nil, nil, nil)

var getPartitionRestartProgress* = Call_GetPartitionRestartProgress_565206(
    name: "getPartitionRestartProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress",
    validator: validate_GetPartitionRestartProgress_565207, base: "",
    url: url_GetPartitionRestartProgress_565208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartDataLoss_565218 = ref object of OpenApiRestCall_563566
proc url_StartDataLoss_565220(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartDataLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartDataLoss_565219(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565221 = path.getOrDefault("partitionId")
  valid_565221 = validateParameter(valid_565221, JString, required = true,
                                 default = nil)
  if valid_565221 != nil:
    section.add "partitionId", valid_565221
  var valid_565222 = path.getOrDefault("serviceId")
  valid_565222 = validateParameter(valid_565222, JString, required = true,
                                 default = nil)
  if valid_565222 != nil:
    section.add "serviceId", valid_565222
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   DataLossMode: JString (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565223 = query.getOrDefault("OperationId")
  valid_565223 = validateParameter(valid_565223, JString, required = true,
                                 default = nil)
  if valid_565223 != nil:
    section.add "OperationId", valid_565223
  var valid_565224 = query.getOrDefault("DataLossMode")
  valid_565224 = validateParameter(valid_565224, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_565224 != nil:
    section.add "DataLossMode", valid_565224
  var valid_565225 = query.getOrDefault("api-version")
  valid_565225 = validateParameter(valid_565225, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565225 != nil:
    section.add "api-version", valid_565225
  var valid_565226 = query.getOrDefault("timeout")
  valid_565226 = validateParameter(valid_565226, JInt, required = false,
                                 default = newJInt(60))
  if valid_565226 != nil:
    section.add "timeout", valid_565226
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565227: Call_StartDataLoss_565218; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  let valid = call_565227.validator(path, query, header, formData, body)
  let scheme = call_565227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565227.url(scheme.get, call_565227.host, call_565227.base,
                         call_565227.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565227, url, valid)

proc call*(call_565228: Call_StartDataLoss_565218; OperationId: string;
          partitionId: string; serviceId: string; DataLossMode: string = "Invalid";
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## startDataLoss
  ## This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
  ## Actual data loss will depend on the specified DataLossMode.
  ## 
  ## - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.
  ## - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
  ## 
  ## This API should only be called with a stateful service as the target.
  ## 
  ## Calling this API with a system service as the target is not advised.
  ## 
  ## Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.
  ## It will not restore data if the command has progressed far enough to cause data loss.
  ## 
  ## Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   DataLossMode: string (required)
  ##               : This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_565229 = newJObject()
  var query_565230 = newJObject()
  add(query_565230, "OperationId", newJString(OperationId))
  add(query_565230, "DataLossMode", newJString(DataLossMode))
  add(query_565230, "api-version", newJString(apiVersion))
  add(query_565230, "timeout", newJInt(timeout))
  add(path_565229, "partitionId", newJString(partitionId))
  add(path_565229, "serviceId", newJString(serviceId))
  result = call_565228.call(path_565229, query_565230, nil, nil, nil)

var startDataLoss* = Call_StartDataLoss_565218(name: "startDataLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss",
    validator: validate_StartDataLoss_565219, base: "", url: url_StartDataLoss_565220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartQuorumLoss_565231 = ref object of OpenApiRestCall_563566
proc url_StartQuorumLoss_565233(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartQuorumLoss")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartQuorumLoss_565232(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565234 = path.getOrDefault("partitionId")
  valid_565234 = validateParameter(valid_565234, JString, required = true,
                                 default = nil)
  if valid_565234 != nil:
    section.add "partitionId", valid_565234
  var valid_565235 = path.getOrDefault("serviceId")
  valid_565235 = validateParameter(valid_565235, JString, required = true,
                                 default = nil)
  if valid_565235 != nil:
    section.add "serviceId", valid_565235
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   QuorumLossDuration: JInt (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   QuorumLossMode: JString (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565236 = query.getOrDefault("OperationId")
  valid_565236 = validateParameter(valid_565236, JString, required = true,
                                 default = nil)
  if valid_565236 != nil:
    section.add "OperationId", valid_565236
  var valid_565237 = query.getOrDefault("api-version")
  valid_565237 = validateParameter(valid_565237, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565237 != nil:
    section.add "api-version", valid_565237
  var valid_565238 = query.getOrDefault("timeout")
  valid_565238 = validateParameter(valid_565238, JInt, required = false,
                                 default = newJInt(60))
  if valid_565238 != nil:
    section.add "timeout", valid_565238
  var valid_565239 = query.getOrDefault("QuorumLossDuration")
  valid_565239 = validateParameter(valid_565239, JInt, required = true, default = nil)
  if valid_565239 != nil:
    section.add "QuorumLossDuration", valid_565239
  var valid_565240 = query.getOrDefault("QuorumLossMode")
  valid_565240 = validateParameter(valid_565240, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_565240 != nil:
    section.add "QuorumLossMode", valid_565240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565241: Call_StartQuorumLoss_565231; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ## 
  let valid = call_565241.validator(path, query, header, formData, body)
  let scheme = call_565241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565241.url(scheme.get, call_565241.host, call_565241.base,
                         call_565241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565241, url, valid)

proc call*(call_565242: Call_StartQuorumLoss_565231; OperationId: string;
          partitionId: string; QuorumLossDuration: int; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60;
          QuorumLossMode: string = "Invalid"): Recallable =
  ## startQuorumLoss
  ## This API is useful for a temporary quorum loss situation on your service.
  ## 
  ## Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.
  ## 
  ## This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   QuorumLossDuration: int (required)
  ##                     : The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   QuorumLossMode: string (required)
  ##                 : This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.
  var path_565243 = newJObject()
  var query_565244 = newJObject()
  add(query_565244, "OperationId", newJString(OperationId))
  add(query_565244, "api-version", newJString(apiVersion))
  add(query_565244, "timeout", newJInt(timeout))
  add(path_565243, "partitionId", newJString(partitionId))
  add(query_565244, "QuorumLossDuration", newJInt(QuorumLossDuration))
  add(path_565243, "serviceId", newJString(serviceId))
  add(query_565244, "QuorumLossMode", newJString(QuorumLossMode))
  result = call_565242.call(path_565243, query_565244, nil, nil, nil)

var startQuorumLoss* = Call_StartQuorumLoss_565231(name: "startQuorumLoss",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss",
    validator: validate_StartQuorumLoss_565232, base: "", url: url_StartQuorumLoss_565233,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartPartitionRestart_565245 = ref object of OpenApiRestCall_563566
proc url_StartPartitionRestart_565247(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Faults/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/StartRestart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StartPartitionRestart_565246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565248 = path.getOrDefault("partitionId")
  valid_565248 = validateParameter(valid_565248, JString, required = true,
                                 default = nil)
  if valid_565248 != nil:
    section.add "partitionId", valid_565248
  var valid_565249 = path.getOrDefault("serviceId")
  valid_565249 = validateParameter(valid_565249, JString, required = true,
                                 default = nil)
  if valid_565249 != nil:
    section.add "serviceId", valid_565249
  result.add "path", section
  ## parameters in `query` object:
  ##   OperationId: JString (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: JString (required)
  ##                       : Describe which partitions to restart.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OperationId` field"
  var valid_565250 = query.getOrDefault("OperationId")
  valid_565250 = validateParameter(valid_565250, JString, required = true,
                                 default = nil)
  if valid_565250 != nil:
    section.add "OperationId", valid_565250
  var valid_565251 = query.getOrDefault("api-version")
  valid_565251 = validateParameter(valid_565251, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565251 != nil:
    section.add "api-version", valid_565251
  var valid_565252 = query.getOrDefault("RestartPartitionMode")
  valid_565252 = validateParameter(valid_565252, JString, required = true,
                                 default = newJString("Invalid"))
  if valid_565252 != nil:
    section.add "RestartPartitionMode", valid_565252
  var valid_565253 = query.getOrDefault("timeout")
  valid_565253 = validateParameter(valid_565253, JInt, required = false,
                                 default = newJInt(60))
  if valid_565253 != nil:
    section.add "timeout", valid_565253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565254: Call_StartPartitionRestart_565245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ## 
  let valid = call_565254.validator(path, query, header, formData, body)
  let scheme = call_565254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565254.url(scheme.get, call_565254.host, call_565254.base,
                         call_565254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565254, url, valid)

proc call*(call_565255: Call_StartPartitionRestart_565245; OperationId: string;
          partitionId: string; serviceId: string; apiVersion: string = "6.0";
          RestartPartitionMode: string = "Invalid"; timeout: int = 60): Recallable =
  ## startPartitionRestart
  ## This API is useful for testing failover.
  ## 
  ## If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
  ## 
  ## Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
  ##   OperationId: string (required)
  ##              : A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   RestartPartitionMode: string (required)
  ##                       : Describe which partitions to restart.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_565256 = newJObject()
  var query_565257 = newJObject()
  add(query_565257, "OperationId", newJString(OperationId))
  add(query_565257, "api-version", newJString(apiVersion))
  add(query_565257, "RestartPartitionMode", newJString(RestartPartitionMode))
  add(query_565257, "timeout", newJInt(timeout))
  add(path_565256, "partitionId", newJString(partitionId))
  add(path_565256, "serviceId", newJString(serviceId))
  result = call_565255.call(path_565256, query_565257, nil, nil, nil)

var startPartitionRestart* = Call_StartPartitionRestart_565245(
    name: "startPartitionRestart", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart",
    validator: validate_StartPartitionRestart_565246, base: "",
    url: url_StartPartitionRestart_565247, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreRootContent_565258 = ref object of OpenApiRestCall_563566
proc url_GetImageStoreRootContent_565260(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreRootContent_565259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565261 = query.getOrDefault("api-version")
  valid_565261 = validateParameter(valid_565261, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565261 != nil:
    section.add "api-version", valid_565261
  var valid_565262 = query.getOrDefault("timeout")
  valid_565262 = validateParameter(valid_565262, JInt, required = false,
                                 default = newJInt(60))
  if valid_565262 != nil:
    section.add "timeout", valid_565262
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565263: Call_GetImageStoreRootContent_565258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the root of the image store.
  ## 
  let valid = call_565263.validator(path, query, header, formData, body)
  let scheme = call_565263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565263.url(scheme.get, call_565263.host, call_565263.base,
                         call_565263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565263, url, valid)

proc call*(call_565264: Call_GetImageStoreRootContent_565258;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getImageStoreRootContent
  ## Returns the information about the image store content at the root of the image store.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565265 = newJObject()
  add(query_565265, "api-version", newJString(apiVersion))
  add(query_565265, "timeout", newJInt(timeout))
  result = call_565264.call(nil, query_565265, nil, nil, nil)

var getImageStoreRootContent* = Call_GetImageStoreRootContent_565258(
    name: "getImageStoreRootContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore",
    validator: validate_GetImageStoreRootContent_565259, base: "",
    url: url_GetImageStoreRootContent_565260, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CommitImageStoreUploadSession_565266 = ref object of OpenApiRestCall_563566
proc url_CommitImageStoreUploadSession_565268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CommitImageStoreUploadSession_565267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `session-id` field"
  var valid_565269 = query.getOrDefault("session-id")
  valid_565269 = validateParameter(valid_565269, JString, required = true,
                                 default = nil)
  if valid_565269 != nil:
    section.add "session-id", valid_565269
  var valid_565270 = query.getOrDefault("api-version")
  valid_565270 = validateParameter(valid_565270, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565270 != nil:
    section.add "api-version", valid_565270
  var valid_565271 = query.getOrDefault("timeout")
  valid_565271 = validateParameter(valid_565271, JInt, required = false,
                                 default = newJInt(60))
  if valid_565271 != nil:
    section.add "timeout", valid_565271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565272: Call_CommitImageStoreUploadSession_565266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ## 
  let valid = call_565272.validator(path, query, header, formData, body)
  let scheme = call_565272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565272.url(scheme.get, call_565272.host, call_565272.base,
                         call_565272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565272, url, valid)

proc call*(call_565273: Call_CommitImageStoreUploadSession_565266;
          sessionId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## commitImageStoreUploadSession
  ## When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565274 = newJObject()
  add(query_565274, "session-id", newJString(sessionId))
  add(query_565274, "api-version", newJString(apiVersion))
  add(query_565274, "timeout", newJInt(timeout))
  result = call_565273.call(nil, query_565274, nil, nil, nil)

var commitImageStoreUploadSession* = Call_CommitImageStoreUploadSession_565266(
    name: "commitImageStoreUploadSession", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/CommitUploadSession",
    validator: validate_CommitImageStoreUploadSession_565267, base: "",
    url: url_CommitImageStoreUploadSession_565268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CopyImageStoreContent_565275 = ref object of OpenApiRestCall_563566
proc url_CopyImageStoreContent_565277(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CopyImageStoreContent_565276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565278 = query.getOrDefault("api-version")
  valid_565278 = validateParameter(valid_565278, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565278 != nil:
    section.add "api-version", valid_565278
  var valid_565279 = query.getOrDefault("timeout")
  valid_565279 = validateParameter(valid_565279, JInt, required = false,
                                 default = newJInt(60))
  if valid_565279 != nil:
    section.add "timeout", valid_565279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565281: Call_CopyImageStoreContent_565275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ## 
  let valid = call_565281.validator(path, query, header, formData, body)
  let scheme = call_565281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565281.url(scheme.get, call_565281.host, call_565281.base,
                         call_565281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565281, url, valid)

proc call*(call_565282: Call_CopyImageStoreContent_565275;
          ImageStoreCopyDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## copyImageStoreContent
  ## Copies the image store content from the source image store relative path to the destination image store relative path.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ImageStoreCopyDescription: JObject (required)
  ##                            : Describes the copy description for the image store.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565283 = newJObject()
  var body_565284 = newJObject()
  add(query_565283, "api-version", newJString(apiVersion))
  if ImageStoreCopyDescription != nil:
    body_565284 = ImageStoreCopyDescription
  add(query_565283, "timeout", newJInt(timeout))
  result = call_565282.call(nil, query_565283, nil, nil, body_565284)

var copyImageStoreContent* = Call_CopyImageStoreContent_565275(
    name: "copyImageStoreContent", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/ImageStore/$/Copy",
    validator: validate_CopyImageStoreContent_565276, base: "",
    url: url_CopyImageStoreContent_565277, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreUploadSession_565285 = ref object of OpenApiRestCall_563566
proc url_DeleteImageStoreUploadSession_565287(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DeleteImageStoreUploadSession_565286(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `session-id` field"
  var valid_565288 = query.getOrDefault("session-id")
  valid_565288 = validateParameter(valid_565288, JString, required = true,
                                 default = nil)
  if valid_565288 != nil:
    section.add "session-id", valid_565288
  var valid_565289 = query.getOrDefault("api-version")
  valid_565289 = validateParameter(valid_565289, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565289 != nil:
    section.add "api-version", valid_565289
  var valid_565290 = query.getOrDefault("timeout")
  valid_565290 = validateParameter(valid_565290, JInt, required = false,
                                 default = newJInt(60))
  if valid_565290 != nil:
    section.add "timeout", valid_565290
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565291: Call_DeleteImageStoreUploadSession_565285; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ## 
  let valid = call_565291.validator(path, query, header, formData, body)
  let scheme = call_565291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565291.url(scheme.get, call_565291.host, call_565291.base,
                         call_565291.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565291, url, valid)

proc call*(call_565292: Call_DeleteImageStoreUploadSession_565285;
          sessionId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## deleteImageStoreUploadSession
  ## The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565293 = newJObject()
  add(query_565293, "session-id", newJString(sessionId))
  add(query_565293, "api-version", newJString(apiVersion))
  add(query_565293, "timeout", newJInt(timeout))
  result = call_565292.call(nil, query_565293, nil, nil, nil)

var deleteImageStoreUploadSession* = Call_DeleteImageStoreUploadSession_565285(
    name: "deleteImageStoreUploadSession", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/$/DeleteUploadSession",
    validator: validate_DeleteImageStoreUploadSession_565286, base: "",
    url: url_DeleteImageStoreUploadSession_565287,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionById_565294 = ref object of OpenApiRestCall_563566
proc url_GetImageStoreUploadSessionById_565296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImageStoreUploadSessionById_565295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `session-id` field"
  var valid_565297 = query.getOrDefault("session-id")
  valid_565297 = validateParameter(valid_565297, JString, required = true,
                                 default = nil)
  if valid_565297 != nil:
    section.add "session-id", valid_565297
  var valid_565298 = query.getOrDefault("api-version")
  valid_565298 = validateParameter(valid_565298, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565298 != nil:
    section.add "api-version", valid_565298
  var valid_565299 = query.getOrDefault("timeout")
  valid_565299 = validateParameter(valid_565299, JInt, required = false,
                                 default = newJInt(60))
  if valid_565299 != nil:
    section.add "timeout", valid_565299
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565300: Call_GetImageStoreUploadSessionById_565294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_565300.validator(path, query, header, formData, body)
  let scheme = call_565300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565300.url(scheme.get, call_565300.host, call_565300.base,
                         call_565300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565300, url, valid)

proc call*(call_565301: Call_GetImageStoreUploadSessionById_565294;
          sessionId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getImageStoreUploadSessionById
  ## Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565302 = newJObject()
  add(query_565302, "session-id", newJString(sessionId))
  add(query_565302, "api-version", newJString(apiVersion))
  add(query_565302, "timeout", newJInt(timeout))
  result = call_565301.call(nil, query_565302, nil, nil, nil)

var getImageStoreUploadSessionById* = Call_GetImageStoreUploadSessionById_565294(
    name: "getImageStoreUploadSessionById", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionById_565295, base: "",
    url: url_GetImageStoreUploadSessionById_565296,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFile_565313 = ref object of OpenApiRestCall_563566
proc url_UploadFile_565315(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFile_565314(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_565316 = path.getOrDefault("contentPath")
  valid_565316 = validateParameter(valid_565316, JString, required = true,
                                 default = nil)
  if valid_565316 != nil:
    section.add "contentPath", valid_565316
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565317 = query.getOrDefault("api-version")
  valid_565317 = validateParameter(valid_565317, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565317 != nil:
    section.add "api-version", valid_565317
  var valid_565318 = query.getOrDefault("timeout")
  valid_565318 = validateParameter(valid_565318, JInt, required = false,
                                 default = newJInt(60))
  if valid_565318 != nil:
    section.add "timeout", valid_565318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565319: Call_UploadFile_565313; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ## 
  let valid = call_565319.validator(path, query, header, formData, body)
  let scheme = call_565319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565319.url(scheme.get, call_565319.host, call_565319.base,
                         call_565319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565319, url, valid)

proc call*(call_565320: Call_UploadFile_565313; contentPath: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## uploadFile
  ## Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_565321 = newJObject()
  var query_565322 = newJObject()
  add(query_565322, "api-version", newJString(apiVersion))
  add(path_565321, "contentPath", newJString(contentPath))
  add(query_565322, "timeout", newJInt(timeout))
  result = call_565320.call(path_565321, query_565322, nil, nil, nil)

var uploadFile* = Call_UploadFile_565313(name: "uploadFile",
                                      meth: HttpMethod.HttpPut,
                                      host: "azure.local:19080",
                                      route: "/ImageStore/{contentPath}",
                                      validator: validate_UploadFile_565314,
                                      base: "", url: url_UploadFile_565315,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreContent_565303 = ref object of OpenApiRestCall_563566
proc url_GetImageStoreContent_565305(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreContent_565304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_565306 = path.getOrDefault("contentPath")
  valid_565306 = validateParameter(valid_565306, JString, required = true,
                                 default = nil)
  if valid_565306 != nil:
    section.add "contentPath", valid_565306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565307 = query.getOrDefault("api-version")
  valid_565307 = validateParameter(valid_565307, JString, required = true,
                                 default = newJString("6.2"))
  if valid_565307 != nil:
    section.add "api-version", valid_565307
  var valid_565308 = query.getOrDefault("timeout")
  valid_565308 = validateParameter(valid_565308, JInt, required = false,
                                 default = newJInt(60))
  if valid_565308 != nil:
    section.add "timeout", valid_565308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565309: Call_GetImageStoreContent_565303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ## 
  let valid = call_565309.validator(path, query, header, formData, body)
  let scheme = call_565309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565309.url(scheme.get, call_565309.host, call_565309.base,
                         call_565309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565309, url, valid)

proc call*(call_565310: Call_GetImageStoreContent_565303; contentPath: string;
          apiVersion: string = "6.2"; timeout: int = 60): Recallable =
  ## getImageStoreContent
  ## Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_565311 = newJObject()
  var query_565312 = newJObject()
  add(query_565312, "api-version", newJString(apiVersion))
  add(path_565311, "contentPath", newJString(contentPath))
  add(query_565312, "timeout", newJInt(timeout))
  result = call_565310.call(path_565311, query_565312, nil, nil, nil)

var getImageStoreContent* = Call_GetImageStoreContent_565303(
    name: "getImageStoreContent", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_GetImageStoreContent_565304, base: "",
    url: url_GetImageStoreContent_565305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteImageStoreContent_565323 = ref object of OpenApiRestCall_563566
proc url_DeleteImageStoreContent_565325(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteImageStoreContent_565324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_565326 = path.getOrDefault("contentPath")
  valid_565326 = validateParameter(valid_565326, JString, required = true,
                                 default = nil)
  if valid_565326 != nil:
    section.add "contentPath", valid_565326
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565327 = query.getOrDefault("api-version")
  valid_565327 = validateParameter(valid_565327, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565327 != nil:
    section.add "api-version", valid_565327
  var valid_565328 = query.getOrDefault("timeout")
  valid_565328 = validateParameter(valid_565328, JInt, required = false,
                                 default = newJInt(60))
  if valid_565328 != nil:
    section.add "timeout", valid_565328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565329: Call_DeleteImageStoreContent_565323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ## 
  let valid = call_565329.validator(path, query, header, formData, body)
  let scheme = call_565329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565329.url(scheme.get, call_565329.host, call_565329.base,
                         call_565329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565329, url, valid)

proc call*(call_565330: Call_DeleteImageStoreContent_565323; contentPath: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## deleteImageStoreContent
  ## Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_565331 = newJObject()
  var query_565332 = newJObject()
  add(query_565332, "api-version", newJString(apiVersion))
  add(path_565331, "contentPath", newJString(contentPath))
  add(query_565332, "timeout", newJInt(timeout))
  result = call_565330.call(path_565331, query_565332, nil, nil, nil)

var deleteImageStoreContent* = Call_DeleteImageStoreContent_565323(
    name: "deleteImageStoreContent", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/ImageStore/{contentPath}",
    validator: validate_DeleteImageStoreContent_565324, base: "",
    url: url_DeleteImageStoreContent_565325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImageStoreUploadSessionByPath_565333 = ref object of OpenApiRestCall_563566
proc url_GetImageStoreUploadSessionByPath_565335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/GetUploadSession")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetImageStoreUploadSessionByPath_565334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_565336 = path.getOrDefault("contentPath")
  valid_565336 = validateParameter(valid_565336, JString, required = true,
                                 default = nil)
  if valid_565336 != nil:
    section.add "contentPath", valid_565336
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565337 = query.getOrDefault("api-version")
  valid_565337 = validateParameter(valid_565337, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565337 != nil:
    section.add "api-version", valid_565337
  var valid_565338 = query.getOrDefault("timeout")
  valid_565338 = validateParameter(valid_565338, JInt, required = false,
                                 default = newJInt(60))
  if valid_565338 != nil:
    section.add "timeout", valid_565338
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565339: Call_GetImageStoreUploadSessionByPath_565333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ## 
  let valid = call_565339.validator(path, query, header, formData, body)
  let scheme = call_565339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565339.url(scheme.get, call_565339.host, call_565339.base,
                         call_565339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565339, url, valid)

proc call*(call_565340: Call_GetImageStoreUploadSessionByPath_565333;
          contentPath: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getImageStoreUploadSessionByPath
  ## Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_565341 = newJObject()
  var query_565342 = newJObject()
  add(query_565342, "api-version", newJString(apiVersion))
  add(path_565341, "contentPath", newJString(contentPath))
  add(query_565342, "timeout", newJInt(timeout))
  result = call_565340.call(path_565341, query_565342, nil, nil, nil)

var getImageStoreUploadSessionByPath* = Call_GetImageStoreUploadSessionByPath_565333(
    name: "getImageStoreUploadSessionByPath", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/GetUploadSession",
    validator: validate_GetImageStoreUploadSessionByPath_565334, base: "",
    url: url_GetImageStoreUploadSessionByPath_565335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UploadFileChunk_565343 = ref object of OpenApiRestCall_563566
proc url_UploadFileChunk_565345(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "contentPath" in path, "`contentPath` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/ImageStore/"),
               (kind: VariableSegment, value: "contentPath"),
               (kind: ConstantSegment, value: "/$/UploadChunk")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UploadFileChunk_565344(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   contentPath: JString (required)
  ##              : Relative path to file or folder in the image store from its root.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `contentPath` field"
  var valid_565346 = path.getOrDefault("contentPath")
  valid_565346 = validateParameter(valid_565346, JString, required = true,
                                 default = nil)
  if valid_565346 != nil:
    section.add "contentPath", valid_565346
  result.add "path", section
  ## parameters in `query` object:
  ##   session-id: JString (required)
  ##             : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `session-id` field"
  var valid_565347 = query.getOrDefault("session-id")
  valid_565347 = validateParameter(valid_565347, JString, required = true,
                                 default = nil)
  if valid_565347 != nil:
    section.add "session-id", valid_565347
  var valid_565348 = query.getOrDefault("api-version")
  valid_565348 = validateParameter(valid_565348, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565348 != nil:
    section.add "api-version", valid_565348
  var valid_565349 = query.getOrDefault("timeout")
  valid_565349 = validateParameter(valid_565349, JInt, required = false,
                                 default = newJInt(60))
  if valid_565349 != nil:
    section.add "timeout", valid_565349
  result.add "query", section
  ## parameters in `header` object:
  ##   Content-Range: JString (required)
  ##                : When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like "bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
  section = newJObject()
  assert header != nil,
        "header argument is necessary due to required `Content-Range` field"
  var valid_565350 = header.getOrDefault("Content-Range")
  valid_565350 = validateParameter(valid_565350, JString, required = true,
                                 default = nil)
  if valid_565350 != nil:
    section.add "Content-Range", valid_565350
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565351: Call_UploadFileChunk_565343; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ## 
  let valid = call_565351.validator(path, query, header, formData, body)
  let scheme = call_565351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565351.url(scheme.get, call_565351.host, call_565351.base,
                         call_565351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565351, url, valid)

proc call*(call_565352: Call_UploadFileChunk_565343; sessionId: string;
          contentPath: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## uploadFileChunk
  ## Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.
  ## 
  ## To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
  ##   sessionId: string (required)
  ##            : A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   contentPath: string (required)
  ##              : Relative path to file or folder in the image store from its root.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var path_565353 = newJObject()
  var query_565354 = newJObject()
  add(query_565354, "session-id", newJString(sessionId))
  add(query_565354, "api-version", newJString(apiVersion))
  add(path_565353, "contentPath", newJString(contentPath))
  add(query_565354, "timeout", newJInt(timeout))
  result = call_565352.call(path_565353, query_565354, nil, nil, nil)

var uploadFileChunk* = Call_UploadFileChunk_565343(name: "uploadFileChunk",
    meth: HttpMethod.HttpPut, host: "azure.local:19080",
    route: "/ImageStore/{contentPath}/$/UploadChunk",
    validator: validate_UploadFileChunk_565344, base: "", url: url_UploadFileChunk_565345,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateName_565355 = ref object of OpenApiRestCall_563566
proc url_CreateName_565357(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_CreateName_565356(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates the specified Service Fabric name.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565358 = query.getOrDefault("api-version")
  valid_565358 = validateParameter(valid_565358, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565358 != nil:
    section.add "api-version", valid_565358
  var valid_565359 = query.getOrDefault("timeout")
  valid_565359 = validateParameter(valid_565359, JInt, required = false,
                                 default = newJInt(60))
  if valid_565359 != nil:
    section.add "timeout", valid_565359
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565361: Call_CreateName_565355; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates the specified Service Fabric name.
  ## 
  let valid = call_565361.validator(path, query, header, formData, body)
  let scheme = call_565361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565361.url(scheme.get, call_565361.host, call_565361.base,
                         call_565361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565361, url, valid)

proc call*(call_565362: Call_CreateName_565355; NameDescription: JsonNode;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## createName
  ## Creates the specified Service Fabric name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NameDescription: JObject (required)
  ##                  : Describes the Service Fabric name to be created.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565363 = newJObject()
  var body_565364 = newJObject()
  add(query_565363, "api-version", newJString(apiVersion))
  if NameDescription != nil:
    body_565364 = NameDescription
  add(query_565363, "timeout", newJInt(timeout))
  result = call_565362.call(nil, query_565363, nil, nil, body_565364)

var createName* = Call_CreateName_565355(name: "createName",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Names/$/Create",
                                      validator: validate_CreateName_565356,
                                      base: "", url: url_CreateName_565357,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNameExistsInfo_565365 = ref object of OpenApiRestCall_563566
proc url_GetNameExistsInfo_565367(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNameExistsInfo_565366(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565368 = path.getOrDefault("nameId")
  valid_565368 = validateParameter(valid_565368, JString, required = true,
                                 default = nil)
  if valid_565368 != nil:
    section.add "nameId", valid_565368
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565369 = query.getOrDefault("api-version")
  valid_565369 = validateParameter(valid_565369, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565369 != nil:
    section.add "api-version", valid_565369
  var valid_565370 = query.getOrDefault("timeout")
  valid_565370 = validateParameter(valid_565370, JInt, required = false,
                                 default = newJInt(60))
  if valid_565370 != nil:
    section.add "timeout", valid_565370
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565371: Call_GetNameExistsInfo_565365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns whether the specified Service Fabric name exists.
  ## 
  let valid = call_565371.validator(path, query, header, formData, body)
  let scheme = call_565371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565371.url(scheme.get, call_565371.host, call_565371.base,
                         call_565371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565371, url, valid)

proc call*(call_565372: Call_GetNameExistsInfo_565365; nameId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getNameExistsInfo
  ## Returns whether the specified Service Fabric name exists.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565373 = newJObject()
  var query_565374 = newJObject()
  add(query_565374, "api-version", newJString(apiVersion))
  add(query_565374, "timeout", newJInt(timeout))
  add(path_565373, "nameId", newJString(nameId))
  result = call_565372.call(path_565373, query_565374, nil, nil, nil)

var getNameExistsInfo* = Call_GetNameExistsInfo_565365(name: "getNameExistsInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Names/{nameId}",
    validator: validate_GetNameExistsInfo_565366, base: "",
    url: url_GetNameExistsInfo_565367, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteName_565375 = ref object of OpenApiRestCall_563566
proc url_DeleteName_565377(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteName_565376(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565378 = path.getOrDefault("nameId")
  valid_565378 = validateParameter(valid_565378, JString, required = true,
                                 default = nil)
  if valid_565378 != nil:
    section.add "nameId", valid_565378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565379 = query.getOrDefault("api-version")
  valid_565379 = validateParameter(valid_565379, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565379 != nil:
    section.add "api-version", valid_565379
  var valid_565380 = query.getOrDefault("timeout")
  valid_565380 = validateParameter(valid_565380, JInt, required = false,
                                 default = newJInt(60))
  if valid_565380 != nil:
    section.add "timeout", valid_565380
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565381: Call_DeleteName_565375; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ## 
  let valid = call_565381.validator(path, query, header, formData, body)
  let scheme = call_565381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565381.url(scheme.get, call_565381.host, call_565381.base,
                         call_565381.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565381, url, valid)

proc call*(call_565382: Call_DeleteName_565375; nameId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## deleteName
  ## Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565383 = newJObject()
  var query_565384 = newJObject()
  add(query_565384, "api-version", newJString(apiVersion))
  add(query_565384, "timeout", newJInt(timeout))
  add(path_565383, "nameId", newJString(nameId))
  result = call_565382.call(path_565383, query_565384, nil, nil, nil)

var deleteName* = Call_DeleteName_565375(name: "deleteName",
                                      meth: HttpMethod.HttpDelete,
                                      host: "azure.local:19080",
                                      route: "/Names/{nameId}",
                                      validator: validate_DeleteName_565376,
                                      base: "", url: url_DeleteName_565377,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfoList_565385 = ref object of OpenApiRestCall_563566
proc url_GetPropertyInfoList_565387(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfoList_565386(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565388 = path.getOrDefault("nameId")
  valid_565388 = validateParameter(valid_565388, JString, required = true,
                                 default = nil)
  if valid_565388 != nil:
    section.add "nameId", valid_565388
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   IncludeValues: JBool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  section = newJObject()
  var valid_565389 = query.getOrDefault("ContinuationToken")
  valid_565389 = validateParameter(valid_565389, JString, required = false,
                                 default = nil)
  if valid_565389 != nil:
    section.add "ContinuationToken", valid_565389
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565390 = query.getOrDefault("api-version")
  valid_565390 = validateParameter(valid_565390, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565390 != nil:
    section.add "api-version", valid_565390
  var valid_565391 = query.getOrDefault("timeout")
  valid_565391 = validateParameter(valid_565391, JInt, required = false,
                                 default = newJInt(60))
  if valid_565391 != nil:
    section.add "timeout", valid_565391
  var valid_565392 = query.getOrDefault("IncludeValues")
  valid_565392 = validateParameter(valid_565392, JBool, required = false,
                                 default = newJBool(false))
  if valid_565392 != nil:
    section.add "IncludeValues", valid_565392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565393: Call_GetPropertyInfoList_565385; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ## 
  let valid = call_565393.validator(path, query, header, formData, body)
  let scheme = call_565393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565393.url(scheme.get, call_565393.host, call_565393.base,
                         call_565393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565393, url, valid)

proc call*(call_565394: Call_GetPropertyInfoList_565385; nameId: string;
          ContinuationToken: string = ""; apiVersion: string = "6.0"; timeout: int = 60;
          IncludeValues: bool = false): Recallable =
  ## getPropertyInfoList
  ## A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   IncludeValues: bool
  ##                : Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565395 = newJObject()
  var query_565396 = newJObject()
  add(query_565396, "ContinuationToken", newJString(ContinuationToken))
  add(query_565396, "api-version", newJString(apiVersion))
  add(query_565396, "timeout", newJInt(timeout))
  add(query_565396, "IncludeValues", newJBool(IncludeValues))
  add(path_565395, "nameId", newJString(nameId))
  result = call_565394.call(path_565395, query_565396, nil, nil, nil)

var getPropertyInfoList* = Call_GetPropertyInfoList_565385(
    name: "getPropertyInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Names/{nameId}/$/GetProperties",
    validator: validate_GetPropertyInfoList_565386, base: "",
    url: url_GetPropertyInfoList_565387, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SubmitPropertyBatch_565397 = ref object of OpenApiRestCall_563566
proc url_SubmitPropertyBatch_565399(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperties/$/SubmitBatch")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SubmitPropertyBatch_565398(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565400 = path.getOrDefault("nameId")
  valid_565400 = validateParameter(valid_565400, JString, required = true,
                                 default = nil)
  if valid_565400 != nil:
    section.add "nameId", valid_565400
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565401 = query.getOrDefault("api-version")
  valid_565401 = validateParameter(valid_565401, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565401 != nil:
    section.add "api-version", valid_565401
  var valid_565402 = query.getOrDefault("timeout")
  valid_565402 = validateParameter(valid_565402, JInt, required = false,
                                 default = newJInt(60))
  if valid_565402 != nil:
    section.add "timeout", valid_565402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565404: Call_SubmitPropertyBatch_565397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ## 
  let valid = call_565404.validator(path, query, header, formData, body)
  let scheme = call_565404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565404.url(scheme.get, call_565404.host, call_565404.base,
                         call_565404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565404, url, valid)

proc call*(call_565405: Call_SubmitPropertyBatch_565397;
          PropertyBatchDescriptionList: JsonNode; nameId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## submitPropertyBatch
  ## Submits a batch of property operations. Either all or none of the operations will be committed.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PropertyBatchDescriptionList: JObject (required)
  ##                               : Describes the property batch operations to be submitted.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565406 = newJObject()
  var query_565407 = newJObject()
  var body_565408 = newJObject()
  add(query_565407, "api-version", newJString(apiVersion))
  if PropertyBatchDescriptionList != nil:
    body_565408 = PropertyBatchDescriptionList
  add(query_565407, "timeout", newJInt(timeout))
  add(path_565406, "nameId", newJString(nameId))
  result = call_565405.call(path_565406, query_565407, nil, nil, body_565408)

var submitPropertyBatch* = Call_SubmitPropertyBatch_565397(
    name: "submitPropertyBatch", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperties/$/SubmitBatch",
    validator: validate_SubmitPropertyBatch_565398, base: "",
    url: url_SubmitPropertyBatch_565399, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutProperty_565420 = ref object of OpenApiRestCall_563566
proc url_PutProperty_565422(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_PutProperty_565421(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565423 = path.getOrDefault("nameId")
  valid_565423 = validateParameter(valid_565423, JString, required = true,
                                 default = nil)
  if valid_565423 != nil:
    section.add "nameId", valid_565423
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565424 = query.getOrDefault("api-version")
  valid_565424 = validateParameter(valid_565424, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565424 != nil:
    section.add "api-version", valid_565424
  var valid_565425 = query.getOrDefault("timeout")
  valid_565425 = validateParameter(valid_565425, JInt, required = false,
                                 default = newJInt(60))
  if valid_565425 != nil:
    section.add "timeout", valid_565425
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565427: Call_PutProperty_565420; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates or updates the specified Service Fabric property under a given name.
  ## 
  let valid = call_565427.validator(path, query, header, formData, body)
  let scheme = call_565427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565427.url(scheme.get, call_565427.host, call_565427.base,
                         call_565427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565427, url, valid)

proc call*(call_565428: Call_PutProperty_565420; PropertyDescription: JsonNode;
          nameId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## putProperty
  ## Creates or updates the specified Service Fabric property under a given name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PropertyDescription: JObject (required)
  ##                      : Describes the Service Fabric property to be created.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565429 = newJObject()
  var query_565430 = newJObject()
  var body_565431 = newJObject()
  add(query_565430, "api-version", newJString(apiVersion))
  add(query_565430, "timeout", newJInt(timeout))
  if PropertyDescription != nil:
    body_565431 = PropertyDescription
  add(path_565429, "nameId", newJString(nameId))
  result = call_565428.call(path_565429, query_565430, nil, nil, body_565431)

var putProperty* = Call_PutProperty_565420(name: "putProperty",
                                        meth: HttpMethod.HttpPut,
                                        host: "azure.local:19080",
                                        route: "/Names/{nameId}/$/GetProperty",
                                        validator: validate_PutProperty_565421,
                                        base: "", url: url_PutProperty_565422,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPropertyInfo_565409 = ref object of OpenApiRestCall_563566
proc url_GetPropertyInfo_565411(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPropertyInfo_565410(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565412 = path.getOrDefault("nameId")
  valid_565412 = validateParameter(valid_565412, JString, required = true,
                                 default = nil)
  if valid_565412 != nil:
    section.add "nameId", valid_565412
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565413 = query.getOrDefault("api-version")
  valid_565413 = validateParameter(valid_565413, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565413 != nil:
    section.add "api-version", valid_565413
  var valid_565414 = query.getOrDefault("timeout")
  valid_565414 = validateParameter(valid_565414, JInt, required = false,
                                 default = newJInt(60))
  if valid_565414 != nil:
    section.add "timeout", valid_565414
  var valid_565415 = query.getOrDefault("PropertyName")
  valid_565415 = validateParameter(valid_565415, JString, required = true,
                                 default = nil)
  if valid_565415 != nil:
    section.add "PropertyName", valid_565415
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565416: Call_GetPropertyInfo_565409; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ## 
  let valid = call_565416.validator(path, query, header, formData, body)
  let scheme = call_565416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565416.url(scheme.get, call_565416.host, call_565416.base,
                         call_565416.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565416, url, valid)

proc call*(call_565417: Call_GetPropertyInfo_565409; PropertyName: string;
          nameId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getPropertyInfo
  ## Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565418 = newJObject()
  var query_565419 = newJObject()
  add(query_565419, "api-version", newJString(apiVersion))
  add(query_565419, "timeout", newJInt(timeout))
  add(query_565419, "PropertyName", newJString(PropertyName))
  add(path_565418, "nameId", newJString(nameId))
  result = call_565417.call(path_565418, query_565419, nil, nil, nil)

var getPropertyInfo* = Call_GetPropertyInfo_565409(name: "getPropertyInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_GetPropertyInfo_565410,
    base: "", url: url_GetPropertyInfo_565411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProperty_565432 = ref object of OpenApiRestCall_563566
proc url_DeleteProperty_565434(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetProperty")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteProperty_565433(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565435 = path.getOrDefault("nameId")
  valid_565435 = validateParameter(valid_565435, JString, required = true,
                                 default = nil)
  if valid_565435 != nil:
    section.add "nameId", valid_565435
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PropertyName: JString (required)
  ##               : Specifies the name of the property to get.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565436 = query.getOrDefault("api-version")
  valid_565436 = validateParameter(valid_565436, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565436 != nil:
    section.add "api-version", valid_565436
  var valid_565437 = query.getOrDefault("timeout")
  valid_565437 = validateParameter(valid_565437, JInt, required = false,
                                 default = newJInt(60))
  if valid_565437 != nil:
    section.add "timeout", valid_565437
  var valid_565438 = query.getOrDefault("PropertyName")
  valid_565438 = validateParameter(valid_565438, JString, required = true,
                                 default = nil)
  if valid_565438 != nil:
    section.add "PropertyName", valid_565438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565439: Call_DeleteProperty_565432; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ## 
  let valid = call_565439.validator(path, query, header, formData, body)
  let scheme = call_565439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565439.url(scheme.get, call_565439.host, call_565439.base,
                         call_565439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565439, url, valid)

proc call*(call_565440: Call_DeleteProperty_565432; PropertyName: string;
          nameId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## deleteProperty
  ## Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PropertyName: string (required)
  ##               : Specifies the name of the property to get.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565441 = newJObject()
  var query_565442 = newJObject()
  add(query_565442, "api-version", newJString(apiVersion))
  add(query_565442, "timeout", newJInt(timeout))
  add(query_565442, "PropertyName", newJString(PropertyName))
  add(path_565441, "nameId", newJString(nameId))
  result = call_565440.call(path_565441, query_565442, nil, nil, nil)

var deleteProperty* = Call_DeleteProperty_565432(name: "deleteProperty",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetProperty", validator: validate_DeleteProperty_565433,
    base: "", url: url_DeleteProperty_565434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSubNameInfoList_565443 = ref object of OpenApiRestCall_563566
proc url_GetSubNameInfoList_565445(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nameId" in path, "`nameId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Names/"),
               (kind: VariableSegment, value: "nameId"),
               (kind: ConstantSegment, value: "/$/GetSubNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetSubNameInfoList_565444(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nameId: JString (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nameId` field"
  var valid_565446 = path.getOrDefault("nameId")
  valid_565446 = validateParameter(valid_565446, JString, required = true,
                                 default = nil)
  if valid_565446 != nil:
    section.add "nameId", valid_565446
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   Recursive: JBool
  ##            : Allows specifying that the search performed should be recursive.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_565447 = query.getOrDefault("ContinuationToken")
  valid_565447 = validateParameter(valid_565447, JString, required = false,
                                 default = nil)
  if valid_565447 != nil:
    section.add "ContinuationToken", valid_565447
  var valid_565448 = query.getOrDefault("Recursive")
  valid_565448 = validateParameter(valid_565448, JBool, required = false,
                                 default = newJBool(false))
  if valid_565448 != nil:
    section.add "Recursive", valid_565448
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565449 = query.getOrDefault("api-version")
  valid_565449 = validateParameter(valid_565449, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565449 != nil:
    section.add "api-version", valid_565449
  var valid_565450 = query.getOrDefault("timeout")
  valid_565450 = validateParameter(valid_565450, JInt, required = false,
                                 default = newJInt(60))
  if valid_565450 != nil:
    section.add "timeout", valid_565450
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565451: Call_GetSubNameInfoList_565443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ## 
  let valid = call_565451.validator(path, query, header, formData, body)
  let scheme = call_565451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565451.url(scheme.get, call_565451.host, call_565451.base,
                         call_565451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565451, url, valid)

proc call*(call_565452: Call_GetSubNameInfoList_565443; nameId: string;
          ContinuationToken: string = ""; Recursive: bool = false;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getSubNameInfoList
  ## Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   Recursive: bool
  ##            : Allows specifying that the search performed should be recursive.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nameId: string (required)
  ##         : The Service Fabric name, without the 'fabric:' URI scheme.
  var path_565453 = newJObject()
  var query_565454 = newJObject()
  add(query_565454, "ContinuationToken", newJString(ContinuationToken))
  add(query_565454, "Recursive", newJBool(Recursive))
  add(query_565454, "api-version", newJString(apiVersion))
  add(query_565454, "timeout", newJInt(timeout))
  add(path_565453, "nameId", newJString(nameId))
  result = call_565452.call(path_565453, query_565454, nil, nil, nil)

var getSubNameInfoList* = Call_GetSubNameInfoList_565443(
    name: "getSubNameInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Names/{nameId}/$/GetSubNames",
    validator: validate_GetSubNameInfoList_565444, base: "",
    url: url_GetSubNameInfoList_565445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfoList_565455 = ref object of OpenApiRestCall_563566
proc url_GetNodeInfoList_565457(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetNodeInfoList_565456(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: JString
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_565458 = query.getOrDefault("ContinuationToken")
  valid_565458 = validateParameter(valid_565458, JString, required = false,
                                 default = nil)
  if valid_565458 != nil:
    section.add "ContinuationToken", valid_565458
  var valid_565459 = query.getOrDefault("MaxResults")
  valid_565459 = validateParameter(valid_565459, JInt, required = false,
                                 default = newJInt(0))
  if valid_565459 != nil:
    section.add "MaxResults", valid_565459
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565460 = query.getOrDefault("api-version")
  valid_565460 = validateParameter(valid_565460, JString, required = true,
                                 default = newJString("6.3"))
  if valid_565460 != nil:
    section.add "api-version", valid_565460
  var valid_565461 = query.getOrDefault("NodeStatusFilter")
  valid_565461 = validateParameter(valid_565461, JString, required = false,
                                 default = newJString("default"))
  if valid_565461 != nil:
    section.add "NodeStatusFilter", valid_565461
  var valid_565462 = query.getOrDefault("timeout")
  valid_565462 = validateParameter(valid_565462, JInt, required = false,
                                 default = newJInt(60))
  if valid_565462 != nil:
    section.add "timeout", valid_565462
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565463: Call_GetNodeInfoList_565455; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ## 
  let valid = call_565463.validator(path, query, header, formData, body)
  let scheme = call_565463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565463.url(scheme.get, call_565463.host, call_565463.base,
                         call_565463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565463, url, valid)

proc call*(call_565464: Call_GetNodeInfoList_565455;
          ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.3"; NodeStatusFilter: string = "default";
          timeout: int = 60): Recallable =
  ## getNodeInfoList
  ## The response includes the name, status, ID, health, uptime, and other details about the nodes.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.3'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   NodeStatusFilter: string
  ##                   : Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the specified filter value will be returned. The filter value can be one of the following.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_565465 = newJObject()
  add(query_565465, "ContinuationToken", newJString(ContinuationToken))
  add(query_565465, "MaxResults", newJInt(MaxResults))
  add(query_565465, "api-version", newJString(apiVersion))
  add(query_565465, "NodeStatusFilter", newJString(NodeStatusFilter))
  add(query_565465, "timeout", newJInt(timeout))
  result = call_565464.call(nil, query_565465, nil, nil, nil)

var getNodeInfoList* = Call_GetNodeInfoList_565455(name: "getNodeInfoList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Nodes",
    validator: validate_GetNodeInfoList_565456, base: "", url: url_GetNodeInfoList_565457,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeInfo_565466 = ref object of OpenApiRestCall_563566
proc url_GetNodeInfo_565468(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeInfo_565467(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565469 = path.getOrDefault("nodeName")
  valid_565469 = validateParameter(valid_565469, JString, required = true,
                                 default = nil)
  if valid_565469 != nil:
    section.add "nodeName", valid_565469
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565470 = query.getOrDefault("api-version")
  valid_565470 = validateParameter(valid_565470, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565470 != nil:
    section.add "api-version", valid_565470
  var valid_565471 = query.getOrDefault("timeout")
  valid_565471 = validateParameter(valid_565471, JInt, required = false,
                                 default = newJInt(60))
  if valid_565471 != nil:
    section.add "timeout", valid_565471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565472: Call_GetNodeInfo_565466; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ## 
  let valid = call_565472.validator(path, query, header, formData, body)
  let scheme = call_565472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565472.url(scheme.get, call_565472.host, call_565472.base,
                         call_565472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565472, url, valid)

proc call*(call_565473: Call_GetNodeInfo_565466; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getNodeInfo
  ## The response includes the name, status, ID, health, uptime, and other details about the node.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565474 = newJObject()
  var query_565475 = newJObject()
  add(query_565475, "api-version", newJString(apiVersion))
  add(query_565475, "timeout", newJInt(timeout))
  add(path_565474, "nodeName", newJString(nodeName))
  result = call_565473.call(path_565474, query_565475, nil, nil, nil)

var getNodeInfo* = Call_GetNodeInfo_565466(name: "getNodeInfo",
                                        meth: HttpMethod.HttpGet,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}",
                                        validator: validate_GetNodeInfo_565467,
                                        base: "", url: url_GetNodeInfo_565468,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableNode_565476 = ref object of OpenApiRestCall_563566
proc url_EnableNode_565478(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Activate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableNode_565477(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565479 = path.getOrDefault("nodeName")
  valid_565479 = validateParameter(valid_565479, JString, required = true,
                                 default = nil)
  if valid_565479 != nil:
    section.add "nodeName", valid_565479
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565480 = query.getOrDefault("api-version")
  valid_565480 = validateParameter(valid_565480, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565480 != nil:
    section.add "api-version", valid_565480
  var valid_565481 = query.getOrDefault("timeout")
  valid_565481 = validateParameter(valid_565481, JInt, required = false,
                                 default = newJInt(60))
  if valid_565481 != nil:
    section.add "timeout", valid_565481
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565482: Call_EnableNode_565476; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ## 
  let valid = call_565482.validator(path, query, header, formData, body)
  let scheme = call_565482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565482.url(scheme.get, call_565482.host, call_565482.base,
                         call_565482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565482, url, valid)

proc call*(call_565483: Call_EnableNode_565476; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## enableNode
  ## Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565484 = newJObject()
  var query_565485 = newJObject()
  add(query_565485, "api-version", newJString(apiVersion))
  add(query_565485, "timeout", newJInt(timeout))
  add(path_565484, "nodeName", newJString(nodeName))
  result = call_565483.call(path_565484, query_565485, nil, nil, nil)

var enableNode* = Call_EnableNode_565476(name: "enableNode",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Nodes/{nodeName}/$/Activate",
                                      validator: validate_EnableNode_565477,
                                      base: "", url: url_EnableNode_565478,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableNode_565486 = ref object of OpenApiRestCall_563566
proc url_DisableNode_565488(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Deactivate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableNode_565487(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565489 = path.getOrDefault("nodeName")
  valid_565489 = validateParameter(valid_565489, JString, required = true,
                                 default = nil)
  if valid_565489 != nil:
    section.add "nodeName", valid_565489
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565490 = query.getOrDefault("api-version")
  valid_565490 = validateParameter(valid_565490, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565490 != nil:
    section.add "api-version", valid_565490
  var valid_565491 = query.getOrDefault("timeout")
  valid_565491 = validateParameter(valid_565491, JInt, required = false,
                                 default = newJInt(60))
  if valid_565491 != nil:
    section.add "timeout", valid_565491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565493: Call_DisableNode_565486; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ## 
  let valid = call_565493.validator(path, query, header, formData, body)
  let scheme = call_565493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565493.url(scheme.get, call_565493.host, call_565493.base,
                         call_565493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565493, url, valid)

proc call*(call_565494: Call_DisableNode_565486;
          DeactivationIntentDescription: JsonNode; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## disableNode
  ## Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
  ##   DeactivationIntentDescription: JObject (required)
  ##                                : Describes the intent or reason for deactivating the node.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565495 = newJObject()
  var query_565496 = newJObject()
  var body_565497 = newJObject()
  if DeactivationIntentDescription != nil:
    body_565497 = DeactivationIntentDescription
  add(query_565496, "api-version", newJString(apiVersion))
  add(query_565496, "timeout", newJInt(timeout))
  add(path_565495, "nodeName", newJString(nodeName))
  result = call_565494.call(path_565495, query_565496, nil, nil, body_565497)

var disableNode* = Call_DisableNode_565486(name: "disableNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080", route: "/Nodes/{nodeName}/$/Deactivate",
                                        validator: validate_DisableNode_565487,
                                        base: "", url: url_DisableNode_565488,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeployServicePackageToNode_565498 = ref object of OpenApiRestCall_563566
proc url_DeployServicePackageToNode_565500(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/DeployServicePackage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeployServicePackageToNode_565499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565501 = path.getOrDefault("nodeName")
  valid_565501 = validateParameter(valid_565501, JString, required = true,
                                 default = nil)
  if valid_565501 != nil:
    section.add "nodeName", valid_565501
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565502 = query.getOrDefault("api-version")
  valid_565502 = validateParameter(valid_565502, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565502 != nil:
    section.add "api-version", valid_565502
  var valid_565503 = query.getOrDefault("timeout")
  valid_565503 = validateParameter(valid_565503, JInt, required = false,
                                 default = newJInt(60))
  if valid_565503 != nil:
    section.add "timeout", valid_565503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565505: Call_DeployServicePackageToNode_565498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ## 
  let valid = call_565505.validator(path, query, header, formData, body)
  let scheme = call_565505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565505.url(scheme.get, call_565505.host, call_565505.base,
                         call_565505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565505, url, valid)

proc call*(call_565506: Call_DeployServicePackageToNode_565498;
          DeployServicePackageToNodeDescription: JsonNode; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## deployServicePackageToNode
  ## This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployServicePackageToNodeDescription: JObject (required)
  ##                                        : Describes information for deploying a service package to a Service Fabric node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565507 = newJObject()
  var query_565508 = newJObject()
  var body_565509 = newJObject()
  add(query_565508, "api-version", newJString(apiVersion))
  if DeployServicePackageToNodeDescription != nil:
    body_565509 = DeployServicePackageToNodeDescription
  add(query_565508, "timeout", newJInt(timeout))
  add(path_565507, "nodeName", newJString(nodeName))
  result = call_565506.call(path_565507, query_565508, nil, nil, body_565509)

var deployServicePackageToNode* = Call_DeployServicePackageToNode_565498(
    name: "deployServicePackageToNode", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/DeployServicePackage",
    validator: validate_DeployServicePackageToNode_565499, base: "",
    url: url_DeployServicePackageToNode_565500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfoList_565510 = ref object of OpenApiRestCall_563566
proc url_GetDeployedApplicationInfoList_565512(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfoList_565511(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565513 = path.getOrDefault("nodeName")
  valid_565513 = validateParameter(valid_565513, JString, required = true,
                                 default = nil)
  if valid_565513 != nil:
    section.add "nodeName", valid_565513
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  section = newJObject()
  var valid_565514 = query.getOrDefault("ContinuationToken")
  valid_565514 = validateParameter(valid_565514, JString, required = false,
                                 default = nil)
  if valid_565514 != nil:
    section.add "ContinuationToken", valid_565514
  var valid_565515 = query.getOrDefault("MaxResults")
  valid_565515 = validateParameter(valid_565515, JInt, required = false,
                                 default = newJInt(0))
  if valid_565515 != nil:
    section.add "MaxResults", valid_565515
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565516 = query.getOrDefault("api-version")
  valid_565516 = validateParameter(valid_565516, JString, required = true,
                                 default = newJString("6.1"))
  if valid_565516 != nil:
    section.add "api-version", valid_565516
  var valid_565517 = query.getOrDefault("timeout")
  valid_565517 = validateParameter(valid_565517, JInt, required = false,
                                 default = newJInt(60))
  if valid_565517 != nil:
    section.add "timeout", valid_565517
  var valid_565518 = query.getOrDefault("IncludeHealthState")
  valid_565518 = validateParameter(valid_565518, JBool, required = false,
                                 default = newJBool(false))
  if valid_565518 != nil:
    section.add "IncludeHealthState", valid_565518
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565519: Call_GetDeployedApplicationInfoList_565510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_565519.validator(path, query, header, formData, body)
  let scheme = call_565519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565519.url(scheme.get, call_565519.host, call_565519.base,
                         call_565519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565519, url, valid)

proc call*(call_565520: Call_GetDeployedApplicationInfoList_565510;
          nodeName: string; ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.1"; timeout: int = 60;
          IncludeHealthState: bool = false): Recallable =
  ## getDeployedApplicationInfoList
  ## Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  var path_565521 = newJObject()
  var query_565522 = newJObject()
  add(query_565522, "ContinuationToken", newJString(ContinuationToken))
  add(query_565522, "MaxResults", newJInt(MaxResults))
  add(query_565522, "api-version", newJString(apiVersion))
  add(query_565522, "timeout", newJInt(timeout))
  add(path_565521, "nodeName", newJString(nodeName))
  add(query_565522, "IncludeHealthState", newJBool(IncludeHealthState))
  result = call_565520.call(path_565521, query_565522, nil, nil, nil)

var getDeployedApplicationInfoList* = Call_GetDeployedApplicationInfoList_565510(
    name: "getDeployedApplicationInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications",
    validator: validate_GetDeployedApplicationInfoList_565511, base: "",
    url: url_GetDeployedApplicationInfoList_565512,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationInfo_565523 = ref object of OpenApiRestCall_563566
proc url_GetDeployedApplicationInfo_565525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationInfo_565524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565526 = path.getOrDefault("nodeName")
  valid_565526 = validateParameter(valid_565526, JString, required = true,
                                 default = nil)
  if valid_565526 != nil:
    section.add "nodeName", valid_565526
  var valid_565527 = path.getOrDefault("applicationId")
  valid_565527 = validateParameter(valid_565527, JString, required = true,
                                 default = nil)
  if valid_565527 != nil:
    section.add "applicationId", valid_565527
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   IncludeHealthState: JBool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565528 = query.getOrDefault("api-version")
  valid_565528 = validateParameter(valid_565528, JString, required = true,
                                 default = newJString("6.1"))
  if valid_565528 != nil:
    section.add "api-version", valid_565528
  var valid_565529 = query.getOrDefault("timeout")
  valid_565529 = validateParameter(valid_565529, JInt, required = false,
                                 default = newJInt(60))
  if valid_565529 != nil:
    section.add "timeout", valid_565529
  var valid_565530 = query.getOrDefault("IncludeHealthState")
  valid_565530 = validateParameter(valid_565530, JBool, required = false,
                                 default = newJBool(false))
  if valid_565530 != nil:
    section.add "IncludeHealthState", valid_565530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565531: Call_GetDeployedApplicationInfo_565523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ## 
  let valid = call_565531.validator(path, query, header, formData, body)
  let scheme = call_565531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565531.url(scheme.get, call_565531.host, call_565531.base,
                         call_565531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565531, url, valid)

proc call*(call_565532: Call_GetDeployedApplicationInfo_565523; nodeName: string;
          applicationId: string; apiVersion: string = "6.1"; timeout: int = 60;
          IncludeHealthState: bool = false): Recallable =
  ## getDeployedApplicationInfo
  ## This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.1'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   IncludeHealthState: bool
  ##                     : Include the health state of an entity.
  ## If this parameter is false or not specified, then the health state returned is "Unknown".
  ## When set to true, the query goes in parallel to the node and the health system service before the results are merged.
  ## As a result, the query is more expensive and may take a longer time.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565533 = newJObject()
  var query_565534 = newJObject()
  add(query_565534, "api-version", newJString(apiVersion))
  add(query_565534, "timeout", newJInt(timeout))
  add(path_565533, "nodeName", newJString(nodeName))
  add(query_565534, "IncludeHealthState", newJBool(IncludeHealthState))
  add(path_565533, "applicationId", newJString(applicationId))
  result = call_565532.call(path_565533, query_565534, nil, nil, nil)

var getDeployedApplicationInfo* = Call_GetDeployedApplicationInfo_565523(
    name: "getDeployedApplicationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}",
    validator: validate_GetDeployedApplicationInfo_565524, base: "",
    url: url_GetDeployedApplicationInfo_565525,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedCodePackageInfoList_565535 = ref object of OpenApiRestCall_563566
proc url_GetDeployedCodePackageInfoList_565537(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedCodePackageInfoList_565536(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565538 = path.getOrDefault("nodeName")
  valid_565538 = validateParameter(valid_565538, JString, required = true,
                                 default = nil)
  if valid_565538 != nil:
    section.add "nodeName", valid_565538
  var valid_565539 = path.getOrDefault("applicationId")
  valid_565539 = validateParameter(valid_565539, JString, required = true,
                                 default = nil)
  if valid_565539 != nil:
    section.add "applicationId", valid_565539
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodePackageName: JString
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565540 = query.getOrDefault("api-version")
  valid_565540 = validateParameter(valid_565540, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565540 != nil:
    section.add "api-version", valid_565540
  var valid_565541 = query.getOrDefault("timeout")
  valid_565541 = validateParameter(valid_565541, JInt, required = false,
                                 default = newJInt(60))
  if valid_565541 != nil:
    section.add "timeout", valid_565541
  var valid_565542 = query.getOrDefault("CodePackageName")
  valid_565542 = validateParameter(valid_565542, JString, required = false,
                                 default = nil)
  if valid_565542 != nil:
    section.add "CodePackageName", valid_565542
  var valid_565543 = query.getOrDefault("ServiceManifestName")
  valid_565543 = validateParameter(valid_565543, JString, required = false,
                                 default = nil)
  if valid_565543 != nil:
    section.add "ServiceManifestName", valid_565543
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565544: Call_GetDeployedCodePackageInfoList_565535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_565544.validator(path, query, header, formData, body)
  let scheme = call_565544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565544.url(scheme.get, call_565544.host, call_565544.base,
                         call_565544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565544, url, valid)

proc call*(call_565545: Call_GetDeployedCodePackageInfoList_565535;
          nodeName: string; applicationId: string; apiVersion: string = "6.0";
          timeout: int = 60; CodePackageName: string = "";
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedCodePackageInfoList
  ## Gets the list of code packages deployed on a Service Fabric node for the given application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   CodePackageName: string
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565546 = newJObject()
  var query_565547 = newJObject()
  add(query_565547, "api-version", newJString(apiVersion))
  add(query_565547, "timeout", newJInt(timeout))
  add(path_565546, "nodeName", newJString(nodeName))
  add(query_565547, "CodePackageName", newJString(CodePackageName))
  add(query_565547, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_565546, "applicationId", newJString(applicationId))
  result = call_565545.call(path_565546, query_565547, nil, nil, nil)

var getDeployedCodePackageInfoList* = Call_GetDeployedCodePackageInfoList_565535(
    name: "getDeployedCodePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages",
    validator: validate_GetDeployedCodePackageInfoList_565536, base: "",
    url: url_GetDeployedCodePackageInfoList_565537,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InvokeContainerApi_565548 = ref object of OpenApiRestCall_563566
proc url_InvokeContainerApi_565550(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerApi")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_InvokeContainerApi_565549(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565551 = path.getOrDefault("nodeName")
  valid_565551 = validateParameter(valid_565551, JString, required = true,
                                 default = nil)
  if valid_565551 != nil:
    section.add "nodeName", valid_565551
  var valid_565552 = path.getOrDefault("applicationId")
  valid_565552 = validateParameter(valid_565552, JString, required = true,
                                 default = nil)
  if valid_565552 != nil:
    section.add "applicationId", valid_565552
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   CodePackageInstanceId: JString (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565553 = query.getOrDefault("api-version")
  valid_565553 = validateParameter(valid_565553, JString, required = true,
                                 default = newJString("6.2"))
  if valid_565553 != nil:
    section.add "api-version", valid_565553
  var valid_565554 = query.getOrDefault("CodePackageInstanceId")
  valid_565554 = validateParameter(valid_565554, JString, required = true,
                                 default = nil)
  if valid_565554 != nil:
    section.add "CodePackageInstanceId", valid_565554
  var valid_565555 = query.getOrDefault("timeout")
  valid_565555 = validateParameter(valid_565555, JInt, required = false,
                                 default = newJInt(60))
  if valid_565555 != nil:
    section.add "timeout", valid_565555
  var valid_565556 = query.getOrDefault("CodePackageName")
  valid_565556 = validateParameter(valid_565556, JString, required = true,
                                 default = nil)
  if valid_565556 != nil:
    section.add "CodePackageName", valid_565556
  var valid_565557 = query.getOrDefault("ServiceManifestName")
  valid_565557 = validateParameter(valid_565557, JString, required = true,
                                 default = nil)
  if valid_565557 != nil:
    section.add "ServiceManifestName", valid_565557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565559: Call_InvokeContainerApi_565548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_565559.validator(path, query, header, formData, body)
  let scheme = call_565559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565559.url(scheme.get, call_565559.host, call_565559.base,
                         call_565559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565559, url, valid)

proc call*(call_565560: Call_InvokeContainerApi_565548;
          ContainerApiRequestBody: JsonNode; CodePackageInstanceId: string;
          nodeName: string; CodePackageName: string; ServiceManifestName: string;
          applicationId: string; apiVersion: string = "6.2"; timeout: int = 60): Recallable =
  ## invokeContainerApi
  ## Invoke container API on a container deployed on a Service Fabric node for the given code package.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ContainerApiRequestBody: JObject (required)
  ##                          : Parameters for making container API call
  ##   CodePackageInstanceId: string (required)
  ##                        : ID that uniquely identifies a code package instance deployed on a service fabric node.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565561 = newJObject()
  var query_565562 = newJObject()
  var body_565563 = newJObject()
  add(query_565562, "api-version", newJString(apiVersion))
  if ContainerApiRequestBody != nil:
    body_565563 = ContainerApiRequestBody
  add(query_565562, "CodePackageInstanceId", newJString(CodePackageInstanceId))
  add(query_565562, "timeout", newJInt(timeout))
  add(path_565561, "nodeName", newJString(nodeName))
  add(query_565562, "CodePackageName", newJString(CodePackageName))
  add(query_565562, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_565561, "applicationId", newJString(applicationId))
  result = call_565560.call(path_565561, query_565562, nil, nil, body_565563)

var invokeContainerApi* = Call_InvokeContainerApi_565548(
    name: "invokeContainerApi", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi",
    validator: validate_InvokeContainerApi_565549, base: "",
    url: url_InvokeContainerApi_565550, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetContainerLogsDeployedOnNode_565564 = ref object of OpenApiRestCall_563566
proc url_GetContainerLogsDeployedOnNode_565566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"), (
        kind: ConstantSegment, value: "/$/GetCodePackages/$/ContainerLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetContainerLogsDeployedOnNode_565565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565567 = path.getOrDefault("nodeName")
  valid_565567 = validateParameter(valid_565567, JString, required = true,
                                 default = nil)
  if valid_565567 != nil:
    section.add "nodeName", valid_565567
  var valid_565568 = path.getOrDefault("applicationId")
  valid_565568 = validateParameter(valid_565568, JString, required = true,
                                 default = nil)
  if valid_565568 != nil:
    section.add "applicationId", valid_565568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Previous: JBool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   CodePackageName: JString (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   ServiceManifestName: JString (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565569 = query.getOrDefault("api-version")
  valid_565569 = validateParameter(valid_565569, JString, required = true,
                                 default = newJString("6.2"))
  if valid_565569 != nil:
    section.add "api-version", valid_565569
  var valid_565570 = query.getOrDefault("Previous")
  valid_565570 = validateParameter(valid_565570, JBool, required = false,
                                 default = newJBool(false))
  if valid_565570 != nil:
    section.add "Previous", valid_565570
  var valid_565571 = query.getOrDefault("timeout")
  valid_565571 = validateParameter(valid_565571, JInt, required = false,
                                 default = newJInt(60))
  if valid_565571 != nil:
    section.add "timeout", valid_565571
  var valid_565572 = query.getOrDefault("CodePackageName")
  valid_565572 = validateParameter(valid_565572, JString, required = true,
                                 default = nil)
  if valid_565572 != nil:
    section.add "CodePackageName", valid_565572
  var valid_565573 = query.getOrDefault("Tail")
  valid_565573 = validateParameter(valid_565573, JString, required = false,
                                 default = nil)
  if valid_565573 != nil:
    section.add "Tail", valid_565573
  var valid_565574 = query.getOrDefault("ServiceManifestName")
  valid_565574 = validateParameter(valid_565574, JString, required = true,
                                 default = nil)
  if valid_565574 != nil:
    section.add "ServiceManifestName", valid_565574
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565575: Call_GetContainerLogsDeployedOnNode_565564; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ## 
  let valid = call_565575.validator(path, query, header, formData, body)
  let scheme = call_565575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565575.url(scheme.get, call_565575.host, call_565575.base,
                         call_565575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565575, url, valid)

proc call*(call_565576: Call_GetContainerLogsDeployedOnNode_565564;
          nodeName: string; CodePackageName: string; ServiceManifestName: string;
          applicationId: string; apiVersion: string = "6.2"; Previous: bool = false;
          timeout: int = 60; Tail: string = ""): Recallable =
  ## getContainerLogsDeployedOnNode
  ## Gets the container logs for container deployed on a Service Fabric node for the given code package.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   Previous: bool
  ##           : Specifies whether to get container logs from exited/dead containers of the code package instance.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   CodePackageName: string (required)
  ##                  : The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   ServiceManifestName: string (required)
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565577 = newJObject()
  var query_565578 = newJObject()
  add(query_565578, "api-version", newJString(apiVersion))
  add(query_565578, "Previous", newJBool(Previous))
  add(query_565578, "timeout", newJInt(timeout))
  add(path_565577, "nodeName", newJString(nodeName))
  add(query_565578, "CodePackageName", newJString(CodePackageName))
  add(query_565578, "Tail", newJString(Tail))
  add(query_565578, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_565577, "applicationId", newJString(applicationId))
  result = call_565576.call(path_565577, query_565578, nil, nil, nil)

var getContainerLogsDeployedOnNode* = Call_GetContainerLogsDeployedOnNode_565564(
    name: "getContainerLogsDeployedOnNode", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs",
    validator: validate_GetContainerLogsDeployedOnNode_565565, base: "",
    url: url_GetContainerLogsDeployedOnNode_565566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartDeployedCodePackage_565579 = ref object of OpenApiRestCall_563566
proc url_RestartDeployedCodePackage_565581(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetCodePackages/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartDeployedCodePackage_565580(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565582 = path.getOrDefault("nodeName")
  valid_565582 = validateParameter(valid_565582, JString, required = true,
                                 default = nil)
  if valid_565582 != nil:
    section.add "nodeName", valid_565582
  var valid_565583 = path.getOrDefault("applicationId")
  valid_565583 = validateParameter(valid_565583, JString, required = true,
                                 default = nil)
  if valid_565583 != nil:
    section.add "applicationId", valid_565583
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565584 = query.getOrDefault("api-version")
  valid_565584 = validateParameter(valid_565584, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565584 != nil:
    section.add "api-version", valid_565584
  var valid_565585 = query.getOrDefault("timeout")
  valid_565585 = validateParameter(valid_565585, JInt, required = false,
                                 default = newJInt(60))
  if valid_565585 != nil:
    section.add "timeout", valid_565585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565587: Call_RestartDeployedCodePackage_565579; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ## 
  let valid = call_565587.validator(path, query, header, formData, body)
  let scheme = call_565587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565587.url(scheme.get, call_565587.host, call_565587.base,
                         call_565587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565587, url, valid)

proc call*(call_565588: Call_RestartDeployedCodePackage_565579; nodeName: string;
          RestartDeployedCodePackageDescription: JsonNode; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## restartDeployedCodePackage
  ## Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   RestartDeployedCodePackageDescription: JObject (required)
  ##                                        : Describes the deployed code package on Service Fabric node to restart.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565589 = newJObject()
  var query_565590 = newJObject()
  var body_565591 = newJObject()
  add(query_565590, "api-version", newJString(apiVersion))
  add(query_565590, "timeout", newJInt(timeout))
  add(path_565589, "nodeName", newJString(nodeName))
  if RestartDeployedCodePackageDescription != nil:
    body_565591 = RestartDeployedCodePackageDescription
  add(path_565589, "applicationId", newJString(applicationId))
  result = call_565588.call(path_565589, query_565590, nil, nil, body_565591)

var restartDeployedCodePackage* = Call_RestartDeployedCodePackage_565579(
    name: "restartDeployedCodePackage", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart",
    validator: validate_RestartDeployedCodePackage_565580, base: "",
    url: url_RestartDeployedCodePackage_565581,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealthUsingPolicy_565606 = ref object of OpenApiRestCall_563566
proc url_GetDeployedApplicationHealthUsingPolicy_565608(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealthUsingPolicy_565607(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565609 = path.getOrDefault("nodeName")
  valid_565609 = validateParameter(valid_565609, JString, required = true,
                                 default = nil)
  if valid_565609 != nil:
    section.add "nodeName", valid_565609
  var valid_565610 = path.getOrDefault("applicationId")
  valid_565610 = validateParameter(valid_565610, JString, required = true,
                                 default = nil)
  if valid_565610 != nil:
    section.add "applicationId", valid_565610
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565611 = query.getOrDefault("api-version")
  valid_565611 = validateParameter(valid_565611, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565611 != nil:
    section.add "api-version", valid_565611
  var valid_565612 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_565612 = validateParameter(valid_565612, JInt, required = false,
                                 default = newJInt(0))
  if valid_565612 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_565612
  var valid_565613 = query.getOrDefault("ExcludeHealthStatistics")
  valid_565613 = validateParameter(valid_565613, JBool, required = false,
                                 default = newJBool(false))
  if valid_565613 != nil:
    section.add "ExcludeHealthStatistics", valid_565613
  var valid_565614 = query.getOrDefault("timeout")
  valid_565614 = validateParameter(valid_565614, JInt, required = false,
                                 default = newJInt(60))
  if valid_565614 != nil:
    section.add "timeout", valid_565614
  var valid_565615 = query.getOrDefault("EventsHealthStateFilter")
  valid_565615 = validateParameter(valid_565615, JInt, required = false,
                                 default = newJInt(0))
  if valid_565615 != nil:
    section.add "EventsHealthStateFilter", valid_565615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565617: Call_GetDeployedApplicationHealthUsingPolicy_565606;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ## 
  let valid = call_565617.validator(path, query, header, formData, body)
  let scheme = call_565617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565617.url(scheme.get, call_565617.host, call_565617.base,
                         call_565617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565617, url, valid)

proc call*(call_565618: Call_GetDeployedApplicationHealthUsingPolicy_565606;
          nodeName: string; applicationId: string;
          ApplicationHealthPolicy: JsonNode = nil; apiVersion: string = "6.0";
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealthUsingPolicy
  ## Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565619 = newJObject()
  var query_565620 = newJObject()
  var body_565621 = newJObject()
  if ApplicationHealthPolicy != nil:
    body_565621 = ApplicationHealthPolicy
  add(query_565620, "api-version", newJString(apiVersion))
  add(query_565620, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_565620, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_565620, "timeout", newJInt(timeout))
  add(path_565619, "nodeName", newJString(nodeName))
  add(query_565620, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_565619, "applicationId", newJString(applicationId))
  result = call_565618.call(path_565619, query_565620, nil, nil, body_565621)

var getDeployedApplicationHealthUsingPolicy* = Call_GetDeployedApplicationHealthUsingPolicy_565606(
    name: "getDeployedApplicationHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealthUsingPolicy_565607, base: "",
    url: url_GetDeployedApplicationHealthUsingPolicy_565608,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedApplicationHealth_565592 = ref object of OpenApiRestCall_563566
proc url_GetDeployedApplicationHealth_565594(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedApplicationHealth_565593(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565595 = path.getOrDefault("nodeName")
  valid_565595 = validateParameter(valid_565595, JString, required = true,
                                 default = nil)
  if valid_565595 != nil:
    section.add "nodeName", valid_565595
  var valid_565596 = path.getOrDefault("applicationId")
  valid_565596 = validateParameter(valid_565596, JString, required = true,
                                 default = nil)
  if valid_565596 != nil:
    section.add "applicationId", valid_565596
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: JInt
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565597 = query.getOrDefault("api-version")
  valid_565597 = validateParameter(valid_565597, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565597 != nil:
    section.add "api-version", valid_565597
  var valid_565598 = query.getOrDefault("DeployedServicePackagesHealthStateFilter")
  valid_565598 = validateParameter(valid_565598, JInt, required = false,
                                 default = newJInt(0))
  if valid_565598 != nil:
    section.add "DeployedServicePackagesHealthStateFilter", valid_565598
  var valid_565599 = query.getOrDefault("ExcludeHealthStatistics")
  valid_565599 = validateParameter(valid_565599, JBool, required = false,
                                 default = newJBool(false))
  if valid_565599 != nil:
    section.add "ExcludeHealthStatistics", valid_565599
  var valid_565600 = query.getOrDefault("timeout")
  valid_565600 = validateParameter(valid_565600, JInt, required = false,
                                 default = newJInt(60))
  if valid_565600 != nil:
    section.add "timeout", valid_565600
  var valid_565601 = query.getOrDefault("EventsHealthStateFilter")
  valid_565601 = validateParameter(valid_565601, JInt, required = false,
                                 default = newJInt(0))
  if valid_565601 != nil:
    section.add "EventsHealthStateFilter", valid_565601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565602: Call_GetDeployedApplicationHealth_565592; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ## 
  let valid = call_565602.validator(path, query, header, formData, body)
  let scheme = call_565602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565602.url(scheme.get, call_565602.host, call_565602.base,
                         call_565602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565602, url, valid)

proc call*(call_565603: Call_GetDeployedApplicationHealth_565592; nodeName: string;
          applicationId: string; apiVersion: string = "6.0";
          DeployedServicePackagesHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedApplicationHealth
  ## Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DeployedServicePackagesHealthStateFilter: int
  ##                                           : Allows filtering of the deployed service package health state objects returned in the result of deployed application health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.
  ## If not specified, all entries are returned.
  ## The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.
  ## For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565604 = newJObject()
  var query_565605 = newJObject()
  add(query_565605, "api-version", newJString(apiVersion))
  add(query_565605, "DeployedServicePackagesHealthStateFilter",
      newJInt(DeployedServicePackagesHealthStateFilter))
  add(query_565605, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_565605, "timeout", newJInt(timeout))
  add(path_565604, "nodeName", newJString(nodeName))
  add(query_565605, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_565604, "applicationId", newJString(applicationId))
  result = call_565603.call(path_565604, query_565605, nil, nil, nil)

var getDeployedApplicationHealth* = Call_GetDeployedApplicationHealth_565592(
    name: "getDeployedApplicationHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
    validator: validate_GetDeployedApplicationHealth_565593, base: "",
    url: url_GetDeployedApplicationHealth_565594,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaInfoList_565622 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServiceReplicaInfoList_565624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaInfoList_565623(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565625 = path.getOrDefault("nodeName")
  valid_565625 = validateParameter(valid_565625, JString, required = true,
                                 default = nil)
  if valid_565625 != nil:
    section.add "nodeName", valid_565625
  var valid_565626 = path.getOrDefault("applicationId")
  valid_565626 = validateParameter(valid_565626, JString, required = true,
                                 default = nil)
  if valid_565626 != nil:
    section.add "applicationId", valid_565626
  result.add "path", section
  ## parameters in `query` object:
  ##   PartitionId: JString
  ##              : The identity of the partition.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceManifestName: JString
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  section = newJObject()
  var valid_565627 = query.getOrDefault("PartitionId")
  valid_565627 = validateParameter(valid_565627, JString, required = false,
                                 default = nil)
  if valid_565627 != nil:
    section.add "PartitionId", valid_565627
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565628 = query.getOrDefault("api-version")
  valid_565628 = validateParameter(valid_565628, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565628 != nil:
    section.add "api-version", valid_565628
  var valid_565629 = query.getOrDefault("timeout")
  valid_565629 = validateParameter(valid_565629, JInt, required = false,
                                 default = newJInt(60))
  if valid_565629 != nil:
    section.add "timeout", valid_565629
  var valid_565630 = query.getOrDefault("ServiceManifestName")
  valid_565630 = validateParameter(valid_565630, JString, required = false,
                                 default = nil)
  if valid_565630 != nil:
    section.add "ServiceManifestName", valid_565630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565631: Call_GetDeployedServiceReplicaInfoList_565622;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ## 
  let valid = call_565631.validator(path, query, header, formData, body)
  let scheme = call_565631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565631.url(scheme.get, call_565631.host, call_565631.base,
                         call_565631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565631, url, valid)

proc call*(call_565632: Call_GetDeployedServiceReplicaInfoList_565622;
          nodeName: string; applicationId: string; PartitionId: string = "";
          apiVersion: string = "6.0"; timeout: int = 60;
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceReplicaInfoList
  ## Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
  ##   PartitionId: string
  ##              : The identity of the partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of a service manifest registered as part of an application type in a Service Fabric cluster.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565633 = newJObject()
  var query_565634 = newJObject()
  add(query_565634, "PartitionId", newJString(PartitionId))
  add(query_565634, "api-version", newJString(apiVersion))
  add(query_565634, "timeout", newJInt(timeout))
  add(path_565633, "nodeName", newJString(nodeName))
  add(query_565634, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_565633, "applicationId", newJString(applicationId))
  result = call_565632.call(path_565633, query_565634, nil, nil, nil)

var getDeployedServiceReplicaInfoList* = Call_GetDeployedServiceReplicaInfoList_565622(
    name: "getDeployedServiceReplicaInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaInfoList_565623, base: "",
    url: url_GetDeployedServiceReplicaInfoList_565624,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoList_565635 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServicePackageInfoList_565637(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoList_565636(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565638 = path.getOrDefault("nodeName")
  valid_565638 = validateParameter(valid_565638, JString, required = true,
                                 default = nil)
  if valid_565638 != nil:
    section.add "nodeName", valid_565638
  var valid_565639 = path.getOrDefault("applicationId")
  valid_565639 = validateParameter(valid_565639, JString, required = true,
                                 default = nil)
  if valid_565639 != nil:
    section.add "applicationId", valid_565639
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565640 = query.getOrDefault("api-version")
  valid_565640 = validateParameter(valid_565640, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565640 != nil:
    section.add "api-version", valid_565640
  var valid_565641 = query.getOrDefault("timeout")
  valid_565641 = validateParameter(valid_565641, JInt, required = false,
                                 default = newJInt(60))
  if valid_565641 != nil:
    section.add "timeout", valid_565641
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565642: Call_GetDeployedServicePackageInfoList_565635;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ## 
  let valid = call_565642.validator(path, query, header, formData, body)
  let scheme = call_565642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565642.url(scheme.get, call_565642.host, call_565642.base,
                         call_565642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565642, url, valid)

proc call*(call_565643: Call_GetDeployedServicePackageInfoList_565635;
          nodeName: string; applicationId: string; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getDeployedServicePackageInfoList
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565644 = newJObject()
  var query_565645 = newJObject()
  add(query_565645, "api-version", newJString(apiVersion))
  add(query_565645, "timeout", newJInt(timeout))
  add(path_565644, "nodeName", newJString(nodeName))
  add(path_565644, "applicationId", newJString(applicationId))
  result = call_565643.call(path_565644, query_565645, nil, nil, nil)

var getDeployedServicePackageInfoList* = Call_GetDeployedServicePackageInfoList_565635(
    name: "getDeployedServicePackageInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages",
    validator: validate_GetDeployedServicePackageInfoList_565636, base: "",
    url: url_GetDeployedServicePackageInfoList_565637,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageInfoListByName_565646 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServicePackageInfoListByName_565648(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageInfoListByName_565647(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `servicePackageName` field"
  var valid_565649 = path.getOrDefault("servicePackageName")
  valid_565649 = validateParameter(valid_565649, JString, required = true,
                                 default = nil)
  if valid_565649 != nil:
    section.add "servicePackageName", valid_565649
  var valid_565650 = path.getOrDefault("nodeName")
  valid_565650 = validateParameter(valid_565650, JString, required = true,
                                 default = nil)
  if valid_565650 != nil:
    section.add "nodeName", valid_565650
  var valid_565651 = path.getOrDefault("applicationId")
  valid_565651 = validateParameter(valid_565651, JString, required = true,
                                 default = nil)
  if valid_565651 != nil:
    section.add "applicationId", valid_565651
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565652 = query.getOrDefault("api-version")
  valid_565652 = validateParameter(valid_565652, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565652 != nil:
    section.add "api-version", valid_565652
  var valid_565653 = query.getOrDefault("timeout")
  valid_565653 = validateParameter(valid_565653, JInt, required = false,
                                 default = newJInt(60))
  if valid_565653 != nil:
    section.add "timeout", valid_565653
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565654: Call_GetDeployedServicePackageInfoListByName_565646;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ## 
  let valid = call_565654.validator(path, query, header, formData, body)
  let scheme = call_565654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565654.url(scheme.get, call_565654.host, call_565654.base,
                         call_565654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565654, url, valid)

proc call*(call_565655: Call_GetDeployedServicePackageInfoListByName_565646;
          servicePackageName: string; nodeName: string; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getDeployedServicePackageInfoListByName
  ## Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565656 = newJObject()
  var query_565657 = newJObject()
  add(path_565656, "servicePackageName", newJString(servicePackageName))
  add(query_565657, "api-version", newJString(apiVersion))
  add(query_565657, "timeout", newJInt(timeout))
  add(path_565656, "nodeName", newJString(nodeName))
  add(path_565656, "applicationId", newJString(applicationId))
  result = call_565655.call(path_565656, query_565657, nil, nil, nil)

var getDeployedServicePackageInfoListByName* = Call_GetDeployedServicePackageInfoListByName_565646(
    name: "getDeployedServicePackageInfoListByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}",
    validator: validate_GetDeployedServicePackageInfoListByName_565647, base: "",
    url: url_GetDeployedServicePackageInfoListByName_565648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealthUsingPolicy_565671 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServicePackageHealthUsingPolicy_565673(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealthUsingPolicy_565672(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `servicePackageName` field"
  var valid_565674 = path.getOrDefault("servicePackageName")
  valid_565674 = validateParameter(valid_565674, JString, required = true,
                                 default = nil)
  if valid_565674 != nil:
    section.add "servicePackageName", valid_565674
  var valid_565675 = path.getOrDefault("nodeName")
  valid_565675 = validateParameter(valid_565675, JString, required = true,
                                 default = nil)
  if valid_565675 != nil:
    section.add "nodeName", valid_565675
  var valid_565676 = path.getOrDefault("applicationId")
  valid_565676 = validateParameter(valid_565676, JString, required = true,
                                 default = nil)
  if valid_565676 != nil:
    section.add "applicationId", valid_565676
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565677 = query.getOrDefault("api-version")
  valid_565677 = validateParameter(valid_565677, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565677 != nil:
    section.add "api-version", valid_565677
  var valid_565678 = query.getOrDefault("timeout")
  valid_565678 = validateParameter(valid_565678, JInt, required = false,
                                 default = newJInt(60))
  if valid_565678 != nil:
    section.add "timeout", valid_565678
  var valid_565679 = query.getOrDefault("EventsHealthStateFilter")
  valid_565679 = validateParameter(valid_565679, JInt, required = false,
                                 default = newJInt(0))
  if valid_565679 != nil:
    section.add "EventsHealthStateFilter", valid_565679
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565681: Call_GetDeployedServicePackageHealthUsingPolicy_565671;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ## 
  let valid = call_565681.validator(path, query, header, formData, body)
  let scheme = call_565681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565681.url(scheme.get, call_565681.host, call_565681.base,
                         call_565681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565681, url, valid)

proc call*(call_565682: Call_GetDeployedServicePackageHealthUsingPolicy_565671;
          servicePackageName: string; nodeName: string; applicationId: string;
          ApplicationHealthPolicy: JsonNode = nil; apiVersion: string = "6.0";
          timeout: int = 60; EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealthUsingPolicy
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565683 = newJObject()
  var query_565684 = newJObject()
  var body_565685 = newJObject()
  if ApplicationHealthPolicy != nil:
    body_565685 = ApplicationHealthPolicy
  add(path_565683, "servicePackageName", newJString(servicePackageName))
  add(query_565684, "api-version", newJString(apiVersion))
  add(query_565684, "timeout", newJInt(timeout))
  add(path_565683, "nodeName", newJString(nodeName))
  add(query_565684, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_565683, "applicationId", newJString(applicationId))
  result = call_565682.call(path_565683, query_565684, nil, nil, body_565685)

var getDeployedServicePackageHealthUsingPolicy* = Call_GetDeployedServicePackageHealthUsingPolicy_565671(
    name: "getDeployedServicePackageHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealthUsingPolicy_565672,
    base: "", url: url_GetDeployedServicePackageHealthUsingPolicy_565673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServicePackageHealth_565658 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServicePackageHealth_565660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServicePackageHealth_565659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `servicePackageName` field"
  var valid_565661 = path.getOrDefault("servicePackageName")
  valid_565661 = validateParameter(valid_565661, JString, required = true,
                                 default = nil)
  if valid_565661 != nil:
    section.add "servicePackageName", valid_565661
  var valid_565662 = path.getOrDefault("nodeName")
  valid_565662 = validateParameter(valid_565662, JString, required = true,
                                 default = nil)
  if valid_565662 != nil:
    section.add "nodeName", valid_565662
  var valid_565663 = path.getOrDefault("applicationId")
  valid_565663 = validateParameter(valid_565663, JString, required = true,
                                 default = nil)
  if valid_565663 != nil:
    section.add "applicationId", valid_565663
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565664 = query.getOrDefault("api-version")
  valid_565664 = validateParameter(valid_565664, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565664 != nil:
    section.add "api-version", valid_565664
  var valid_565665 = query.getOrDefault("timeout")
  valid_565665 = validateParameter(valid_565665, JInt, required = false,
                                 default = newJInt(60))
  if valid_565665 != nil:
    section.add "timeout", valid_565665
  var valid_565666 = query.getOrDefault("EventsHealthStateFilter")
  valid_565666 = validateParameter(valid_565666, JInt, required = false,
                                 default = newJInt(0))
  if valid_565666 != nil:
    section.add "EventsHealthStateFilter", valid_565666
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565667: Call_GetDeployedServicePackageHealth_565658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ## 
  let valid = call_565667.validator(path, query, header, formData, body)
  let scheme = call_565667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565667.url(scheme.get, call_565667.host, call_565667.base,
                         call_565667.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565667, url, valid)

proc call*(call_565668: Call_GetDeployedServicePackageHealth_565658;
          servicePackageName: string; nodeName: string; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getDeployedServicePackageHealth
  ## Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565669 = newJObject()
  var query_565670 = newJObject()
  add(path_565669, "servicePackageName", newJString(servicePackageName))
  add(query_565670, "api-version", newJString(apiVersion))
  add(query_565670, "timeout", newJInt(timeout))
  add(path_565669, "nodeName", newJString(nodeName))
  add(query_565670, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_565669, "applicationId", newJString(applicationId))
  result = call_565668.call(path_565669, query_565670, nil, nil, nil)

var getDeployedServicePackageHealth* = Call_GetDeployedServicePackageHealth_565658(
    name: "getDeployedServicePackageHealth", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
    validator: validate_GetDeployedServicePackageHealth_565659, base: "",
    url: url_GetDeployedServicePackageHealth_565660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedServicePackageHealth_565686 = ref object of OpenApiRestCall_563566
proc url_ReportDeployedServicePackageHealth_565688(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "servicePackageName" in path,
        "`servicePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServicePackages/"),
               (kind: VariableSegment, value: "servicePackageName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedServicePackageHealth_565687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   servicePackageName: JString (required)
  ##                     : The name of the service package.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `servicePackageName` field"
  var valid_565689 = path.getOrDefault("servicePackageName")
  valid_565689 = validateParameter(valid_565689, JString, required = true,
                                 default = nil)
  if valid_565689 != nil:
    section.add "servicePackageName", valid_565689
  var valid_565690 = path.getOrDefault("nodeName")
  valid_565690 = validateParameter(valid_565690, JString, required = true,
                                 default = nil)
  if valid_565690 != nil:
    section.add "nodeName", valid_565690
  var valid_565691 = path.getOrDefault("applicationId")
  valid_565691 = validateParameter(valid_565691, JString, required = true,
                                 default = nil)
  if valid_565691 != nil:
    section.add "applicationId", valid_565691
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_565692 = query.getOrDefault("Immediate")
  valid_565692 = validateParameter(valid_565692, JBool, required = false,
                                 default = newJBool(false))
  if valid_565692 != nil:
    section.add "Immediate", valid_565692
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565693 = query.getOrDefault("api-version")
  valid_565693 = validateParameter(valid_565693, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565693 != nil:
    section.add "api-version", valid_565693
  var valid_565694 = query.getOrDefault("timeout")
  valid_565694 = validateParameter(valid_565694, JInt, required = false,
                                 default = newJInt(60))
  if valid_565694 != nil:
    section.add "timeout", valid_565694
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565696: Call_ReportDeployedServicePackageHealth_565686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_565696.validator(path, query, header, formData, body)
  let scheme = call_565696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565696.url(scheme.get, call_565696.host, call_565696.base,
                         call_565696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565696, url, valid)

proc call*(call_565697: Call_ReportDeployedServicePackageHealth_565686;
          servicePackageName: string; HealthInformation: JsonNode; nodeName: string;
          applicationId: string; Immediate: bool = false; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## reportDeployedServicePackageHealth
  ## Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   servicePackageName: string (required)
  ##                     : The name of the service package.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565698 = newJObject()
  var query_565699 = newJObject()
  var body_565700 = newJObject()
  add(query_565699, "Immediate", newJBool(Immediate))
  add(path_565698, "servicePackageName", newJString(servicePackageName))
  if HealthInformation != nil:
    body_565700 = HealthInformation
  add(query_565699, "api-version", newJString(apiVersion))
  add(query_565699, "timeout", newJInt(timeout))
  add(path_565698, "nodeName", newJString(nodeName))
  add(path_565698, "applicationId", newJString(applicationId))
  result = call_565697.call(path_565698, query_565699, nil, nil, body_565700)

var reportDeployedServicePackageHealth* = Call_ReportDeployedServicePackageHealth_565686(
    name: "reportDeployedServicePackageHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth",
    validator: validate_ReportDeployedServicePackageHealth_565687, base: "",
    url: url_ReportDeployedServicePackageHealth_565688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoList_565701 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServiceTypeInfoList_565703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoList_565702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565704 = path.getOrDefault("nodeName")
  valid_565704 = validateParameter(valid_565704, JString, required = true,
                                 default = nil)
  if valid_565704 != nil:
    section.add "nodeName", valid_565704
  var valid_565705 = path.getOrDefault("applicationId")
  valid_565705 = validateParameter(valid_565705, JString, required = true,
                                 default = nil)
  if valid_565705 != nil:
    section.add "applicationId", valid_565705
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565706 = query.getOrDefault("api-version")
  valid_565706 = validateParameter(valid_565706, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565706 != nil:
    section.add "api-version", valid_565706
  var valid_565707 = query.getOrDefault("timeout")
  valid_565707 = validateParameter(valid_565707, JInt, required = false,
                                 default = newJInt(60))
  if valid_565707 != nil:
    section.add "timeout", valid_565707
  var valid_565708 = query.getOrDefault("ServiceManifestName")
  valid_565708 = validateParameter(valid_565708, JString, required = false,
                                 default = nil)
  if valid_565708 != nil:
    section.add "ServiceManifestName", valid_565708
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565709: Call_GetDeployedServiceTypeInfoList_565701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ## 
  let valid = call_565709.validator(path, query, header, formData, body)
  let scheme = call_565709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565709.url(scheme.get, call_565709.host, call_565709.base,
                         call_565709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565709, url, valid)

proc call*(call_565710: Call_GetDeployedServiceTypeInfoList_565701;
          nodeName: string; applicationId: string; apiVersion: string = "6.0";
          timeout: int = 60; ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoList
  ## Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565711 = newJObject()
  var query_565712 = newJObject()
  add(query_565712, "api-version", newJString(apiVersion))
  add(query_565712, "timeout", newJInt(timeout))
  add(path_565711, "nodeName", newJString(nodeName))
  add(query_565712, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_565711, "applicationId", newJString(applicationId))
  result = call_565710.call(path_565711, query_565712, nil, nil, nil)

var getDeployedServiceTypeInfoList* = Call_GetDeployedServiceTypeInfoList_565701(
    name: "getDeployedServiceTypeInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes",
    validator: validate_GetDeployedServiceTypeInfoList_565702, base: "",
    url: url_GetDeployedServiceTypeInfoList_565703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceTypeInfoByName_565713 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServiceTypeInfoByName_565715(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  assert "serviceTypeName" in path, "`serviceTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/GetServiceTypes/"),
               (kind: VariableSegment, value: "serviceTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceTypeInfoByName_565714(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceTypeName: JString (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serviceTypeName` field"
  var valid_565716 = path.getOrDefault("serviceTypeName")
  valid_565716 = validateParameter(valid_565716, JString, required = true,
                                 default = nil)
  if valid_565716 != nil:
    section.add "serviceTypeName", valid_565716
  var valid_565717 = path.getOrDefault("nodeName")
  valid_565717 = validateParameter(valid_565717, JString, required = true,
                                 default = nil)
  if valid_565717 != nil:
    section.add "nodeName", valid_565717
  var valid_565718 = path.getOrDefault("applicationId")
  valid_565718 = validateParameter(valid_565718, JString, required = true,
                                 default = nil)
  if valid_565718 != nil:
    section.add "applicationId", valid_565718
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ServiceManifestName: JString
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565719 = query.getOrDefault("api-version")
  valid_565719 = validateParameter(valid_565719, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565719 != nil:
    section.add "api-version", valid_565719
  var valid_565720 = query.getOrDefault("timeout")
  valid_565720 = validateParameter(valid_565720, JInt, required = false,
                                 default = newJInt(60))
  if valid_565720 != nil:
    section.add "timeout", valid_565720
  var valid_565721 = query.getOrDefault("ServiceManifestName")
  valid_565721 = validateParameter(valid_565721, JString, required = false,
                                 default = nil)
  if valid_565721 != nil:
    section.add "ServiceManifestName", valid_565721
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565722: Call_GetDeployedServiceTypeInfoByName_565713;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ## 
  let valid = call_565722.validator(path, query, header, formData, body)
  let scheme = call_565722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565722.url(scheme.get, call_565722.host, call_565722.base,
                         call_565722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565722, url, valid)

proc call*(call_565723: Call_GetDeployedServiceTypeInfoByName_565713;
          serviceTypeName: string; nodeName: string; applicationId: string;
          apiVersion: string = "6.0"; timeout: int = 60;
          ServiceManifestName: string = ""): Recallable =
  ## getDeployedServiceTypeInfoByName
  ## Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
  ##   serviceTypeName: string (required)
  ##                  : Specifies the name of a Service Fabric service type.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   ServiceManifestName: string
  ##                      : The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565724 = newJObject()
  var query_565725 = newJObject()
  add(path_565724, "serviceTypeName", newJString(serviceTypeName))
  add(query_565725, "api-version", newJString(apiVersion))
  add(query_565725, "timeout", newJInt(timeout))
  add(path_565724, "nodeName", newJString(nodeName))
  add(query_565725, "ServiceManifestName", newJString(ServiceManifestName))
  add(path_565724, "applicationId", newJString(applicationId))
  result = call_565723.call(path_565724, query_565725, nil, nil, nil)

var getDeployedServiceTypeInfoByName* = Call_GetDeployedServiceTypeInfoByName_565713(
    name: "getDeployedServiceTypeInfoByName", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}",
    validator: validate_GetDeployedServiceTypeInfoByName_565714, base: "",
    url: url_GetDeployedServiceTypeInfoByName_565715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportDeployedApplicationHealth_565726 = ref object of OpenApiRestCall_563566
proc url_ReportDeployedApplicationHealth_565728(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "applicationId" in path, "`applicationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetApplications/"),
               (kind: VariableSegment, value: "applicationId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportDeployedApplicationHealth_565727(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   applicationId: JString (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565729 = path.getOrDefault("nodeName")
  valid_565729 = validateParameter(valid_565729, JString, required = true,
                                 default = nil)
  if valid_565729 != nil:
    section.add "nodeName", valid_565729
  var valid_565730 = path.getOrDefault("applicationId")
  valid_565730 = validateParameter(valid_565730, JString, required = true,
                                 default = nil)
  if valid_565730 != nil:
    section.add "applicationId", valid_565730
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_565731 = query.getOrDefault("Immediate")
  valid_565731 = validateParameter(valid_565731, JBool, required = false,
                                 default = newJBool(false))
  if valid_565731 != nil:
    section.add "Immediate", valid_565731
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565732 = query.getOrDefault("api-version")
  valid_565732 = validateParameter(valid_565732, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565732 != nil:
    section.add "api-version", valid_565732
  var valid_565733 = query.getOrDefault("timeout")
  valid_565733 = validateParameter(valid_565733, JInt, required = false,
                                 default = newJInt(60))
  if valid_565733 != nil:
    section.add "timeout", valid_565733
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565735: Call_ReportDeployedApplicationHealth_565726;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_565735.validator(path, query, header, formData, body)
  let scheme = call_565735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565735.url(scheme.get, call_565735.host, call_565735.base,
                         call_565735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565735, url, valid)

proc call*(call_565736: Call_ReportDeployedApplicationHealth_565726;
          HealthInformation: JsonNode; nodeName: string; applicationId: string;
          Immediate: bool = false; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## reportDeployedApplicationHealth
  ## Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   applicationId: string (required)
  ##                : The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
  var path_565737 = newJObject()
  var query_565738 = newJObject()
  var body_565739 = newJObject()
  add(query_565738, "Immediate", newJBool(Immediate))
  if HealthInformation != nil:
    body_565739 = HealthInformation
  add(query_565738, "api-version", newJString(apiVersion))
  add(query_565738, "timeout", newJInt(timeout))
  add(path_565737, "nodeName", newJString(nodeName))
  add(path_565737, "applicationId", newJString(applicationId))
  result = call_565736.call(path_565737, query_565738, nil, nil, body_565739)

var reportDeployedApplicationHealth* = Call_ReportDeployedApplicationHealth_565726(
    name: "reportDeployedApplicationHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth",
    validator: validate_ReportDeployedApplicationHealth_565727, base: "",
    url: url_ReportDeployedApplicationHealth_565728,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealthUsingPolicy_565751 = ref object of OpenApiRestCall_563566
proc url_GetNodeHealthUsingPolicy_565753(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealthUsingPolicy_565752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565754 = path.getOrDefault("nodeName")
  valid_565754 = validateParameter(valid_565754, JString, required = true,
                                 default = nil)
  if valid_565754 != nil:
    section.add "nodeName", valid_565754
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565755 = query.getOrDefault("api-version")
  valid_565755 = validateParameter(valid_565755, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565755 != nil:
    section.add "api-version", valid_565755
  var valid_565756 = query.getOrDefault("timeout")
  valid_565756 = validateParameter(valid_565756, JInt, required = false,
                                 default = newJInt(60))
  if valid_565756 != nil:
    section.add "timeout", valid_565756
  var valid_565757 = query.getOrDefault("EventsHealthStateFilter")
  valid_565757 = validateParameter(valid_565757, JInt, required = false,
                                 default = newJInt(0))
  if valid_565757 != nil:
    section.add "EventsHealthStateFilter", valid_565757
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565759: Call_GetNodeHealthUsingPolicy_565751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_565759.validator(path, query, header, formData, body)
  let scheme = call_565759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565759.url(scheme.get, call_565759.host, call_565759.base,
                         call_565759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565759, url, valid)

proc call*(call_565760: Call_GetNodeHealthUsingPolicy_565751; nodeName: string;
          apiVersion: string = "6.0"; ClusterHealthPolicy: JsonNode = nil;
          timeout: int = 60; EventsHealthStateFilter: int = 0): Recallable =
  ## getNodeHealthUsingPolicy
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ClusterHealthPolicy: JObject
  ##                      : Describes the health policies used to evaluate the health of a cluster or node. If not present, the health evaluation uses the health policy from cluster manifest or the default health policy.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_565761 = newJObject()
  var query_565762 = newJObject()
  var body_565763 = newJObject()
  add(query_565762, "api-version", newJString(apiVersion))
  if ClusterHealthPolicy != nil:
    body_565763 = ClusterHealthPolicy
  add(query_565762, "timeout", newJInt(timeout))
  add(path_565761, "nodeName", newJString(nodeName))
  add(query_565762, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_565760.call(path_565761, query_565762, nil, nil, body_565763)

var getNodeHealthUsingPolicy* = Call_GetNodeHealthUsingPolicy_565751(
    name: "getNodeHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetHealth",
    validator: validate_GetNodeHealthUsingPolicy_565752, base: "",
    url: url_GetNodeHealthUsingPolicy_565753, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeHealth_565740 = ref object of OpenApiRestCall_563566
proc url_GetNodeHealth_565742(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeHealth_565741(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565743 = path.getOrDefault("nodeName")
  valid_565743 = validateParameter(valid_565743, JString, required = true,
                                 default = nil)
  if valid_565743 != nil:
    section.add "nodeName", valid_565743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565744 = query.getOrDefault("api-version")
  valid_565744 = validateParameter(valid_565744, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565744 != nil:
    section.add "api-version", valid_565744
  var valid_565745 = query.getOrDefault("timeout")
  valid_565745 = validateParameter(valid_565745, JInt, required = false,
                                 default = newJInt(60))
  if valid_565745 != nil:
    section.add "timeout", valid_565745
  var valid_565746 = query.getOrDefault("EventsHealthStateFilter")
  valid_565746 = validateParameter(valid_565746, JInt, required = false,
                                 default = newJInt(0))
  if valid_565746 != nil:
    section.add "EventsHealthStateFilter", valid_565746
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565747: Call_GetNodeHealth_565740; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ## 
  let valid = call_565747.validator(path, query, header, formData, body)
  let scheme = call_565747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565747.url(scheme.get, call_565747.host, call_565747.base,
                         call_565747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565747, url, valid)

proc call*(call_565748: Call_GetNodeHealth_565740; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getNodeHealth
  ## Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_565749 = newJObject()
  var query_565750 = newJObject()
  add(query_565750, "api-version", newJString(apiVersion))
  add(query_565750, "timeout", newJInt(timeout))
  add(path_565749, "nodeName", newJString(nodeName))
  add(query_565750, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_565748.call(path_565749, query_565750, nil, nil, nil)

var getNodeHealth* = Call_GetNodeHealth_565740(name: "getNodeHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetHealth", validator: validate_GetNodeHealth_565741,
    base: "", url: url_GetNodeHealth_565742, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetNodeLoadInfo_565764 = ref object of OpenApiRestCall_563566
proc url_GetNodeLoadInfo_565766(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetNodeLoadInfo_565765(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565767 = path.getOrDefault("nodeName")
  valid_565767 = validateParameter(valid_565767, JString, required = true,
                                 default = nil)
  if valid_565767 != nil:
    section.add "nodeName", valid_565767
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565768 = query.getOrDefault("api-version")
  valid_565768 = validateParameter(valid_565768, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565768 != nil:
    section.add "api-version", valid_565768
  var valid_565769 = query.getOrDefault("timeout")
  valid_565769 = validateParameter(valid_565769, JInt, required = false,
                                 default = newJInt(60))
  if valid_565769 != nil:
    section.add "timeout", valid_565769
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565770: Call_GetNodeLoadInfo_565764; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ## 
  let valid = call_565770.validator(path, query, header, formData, body)
  let scheme = call_565770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565770.url(scheme.get, call_565770.host, call_565770.base,
                         call_565770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565770, url, valid)

proc call*(call_565771: Call_GetNodeLoadInfo_565764; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getNodeLoadInfo
  ## Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565772 = newJObject()
  var query_565773 = newJObject()
  add(query_565773, "api-version", newJString(apiVersion))
  add(query_565773, "timeout", newJInt(timeout))
  add(path_565772, "nodeName", newJString(nodeName))
  result = call_565771.call(path_565772, query_565773, nil, nil, nil)

var getNodeLoadInfo* = Call_GetNodeLoadInfo_565764(name: "getNodeLoadInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetLoadInformation",
    validator: validate_GetNodeLoadInfo_565765, base: "", url: url_GetNodeLoadInfo_565766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfoByPartitionId_565774 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServiceReplicaDetailInfoByPartitionId_565776(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfoByPartitionId_565775(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565777 = path.getOrDefault("nodeName")
  valid_565777 = validateParameter(valid_565777, JString, required = true,
                                 default = nil)
  if valid_565777 != nil:
    section.add "nodeName", valid_565777
  var valid_565778 = path.getOrDefault("partitionId")
  valid_565778 = validateParameter(valid_565778, JString, required = true,
                                 default = nil)
  if valid_565778 != nil:
    section.add "partitionId", valid_565778
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565779 = query.getOrDefault("api-version")
  valid_565779 = validateParameter(valid_565779, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565779 != nil:
    section.add "api-version", valid_565779
  var valid_565780 = query.getOrDefault("timeout")
  valid_565780 = validateParameter(valid_565780, JInt, required = false,
                                 default = newJInt(60))
  if valid_565780 != nil:
    section.add "timeout", valid_565780
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565781: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_565774;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_565781.validator(path, query, header, formData, body)
  let scheme = call_565781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565781.url(scheme.get, call_565781.host, call_565781.base,
                         call_565781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565781, url, valid)

proc call*(call_565782: Call_GetDeployedServiceReplicaDetailInfoByPartitionId_565774;
          nodeName: string; partitionId: string; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## getDeployedServiceReplicaDetailInfoByPartitionId
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565783 = newJObject()
  var query_565784 = newJObject()
  add(query_565784, "api-version", newJString(apiVersion))
  add(query_565784, "timeout", newJInt(timeout))
  add(path_565783, "nodeName", newJString(nodeName))
  add(path_565783, "partitionId", newJString(partitionId))
  result = call_565782.call(path_565783, query_565784, nil, nil, nil)

var getDeployedServiceReplicaDetailInfoByPartitionId* = Call_GetDeployedServiceReplicaDetailInfoByPartitionId_565774(
    name: "getDeployedServiceReplicaDetailInfoByPartitionId",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas",
    validator: validate_GetDeployedServiceReplicaDetailInfoByPartitionId_565775,
    base: "", url: url_GetDeployedServiceReplicaDetailInfoByPartitionId_565776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveReplica_565785 = ref object of OpenApiRestCall_563566
proc url_RemoveReplica_565787(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveReplica_565786(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_565788 = path.getOrDefault("replicaId")
  valid_565788 = validateParameter(valid_565788, JString, required = true,
                                 default = nil)
  if valid_565788 != nil:
    section.add "replicaId", valid_565788
  var valid_565789 = path.getOrDefault("nodeName")
  valid_565789 = validateParameter(valid_565789, JString, required = true,
                                 default = nil)
  if valid_565789 != nil:
    section.add "nodeName", valid_565789
  var valid_565790 = path.getOrDefault("partitionId")
  valid_565790 = validateParameter(valid_565790, JString, required = true,
                                 default = nil)
  if valid_565790 != nil:
    section.add "partitionId", valid_565790
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565791 = query.getOrDefault("api-version")
  valid_565791 = validateParameter(valid_565791, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565791 != nil:
    section.add "api-version", valid_565791
  var valid_565792 = query.getOrDefault("timeout")
  valid_565792 = validateParameter(valid_565792, JInt, required = false,
                                 default = newJInt(60))
  if valid_565792 != nil:
    section.add "timeout", valid_565792
  var valid_565793 = query.getOrDefault("ForceRemove")
  valid_565793 = validateParameter(valid_565793, JBool, required = false, default = nil)
  if valid_565793 != nil:
    section.add "ForceRemove", valid_565793
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565794: Call_RemoveReplica_565785; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ## 
  let valid = call_565794.validator(path, query, header, formData, body)
  let scheme = call_565794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565794.url(scheme.get, call_565794.host, call_565794.base,
                         call_565794.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565794, url, valid)

proc call*(call_565795: Call_RemoveReplica_565785; replicaId: string;
          nodeName: string; partitionId: string; apiVersion: string = "6.0";
          timeout: int = 60; ForceRemove: bool = false): Recallable =
  ## removeReplica
  ## This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  var path_565796 = newJObject()
  var query_565797 = newJObject()
  add(path_565796, "replicaId", newJString(replicaId))
  add(query_565797, "api-version", newJString(apiVersion))
  add(query_565797, "timeout", newJInt(timeout))
  add(path_565796, "nodeName", newJString(nodeName))
  add(path_565796, "partitionId", newJString(partitionId))
  add(query_565797, "ForceRemove", newJBool(ForceRemove))
  result = call_565795.call(path_565796, query_565797, nil, nil, nil)

var removeReplica* = Call_RemoveReplica_565785(name: "removeReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete",
    validator: validate_RemoveReplica_565786, base: "", url: url_RemoveReplica_565787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployedServiceReplicaDetailInfo_565798 = ref object of OpenApiRestCall_563566
proc url_GetDeployedServiceReplicaDetailInfo_565800(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetDetail")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetDeployedServiceReplicaDetailInfo_565799(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_565801 = path.getOrDefault("replicaId")
  valid_565801 = validateParameter(valid_565801, JString, required = true,
                                 default = nil)
  if valid_565801 != nil:
    section.add "replicaId", valid_565801
  var valid_565802 = path.getOrDefault("nodeName")
  valid_565802 = validateParameter(valid_565802, JString, required = true,
                                 default = nil)
  if valid_565802 != nil:
    section.add "nodeName", valid_565802
  var valid_565803 = path.getOrDefault("partitionId")
  valid_565803 = validateParameter(valid_565803, JString, required = true,
                                 default = nil)
  if valid_565803 != nil:
    section.add "partitionId", valid_565803
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565804 = query.getOrDefault("api-version")
  valid_565804 = validateParameter(valid_565804, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565804 != nil:
    section.add "api-version", valid_565804
  var valid_565805 = query.getOrDefault("timeout")
  valid_565805 = validateParameter(valid_565805, JInt, required = false,
                                 default = newJInt(60))
  if valid_565805 != nil:
    section.add "timeout", valid_565805
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565806: Call_GetDeployedServiceReplicaDetailInfo_565798;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ## 
  let valid = call_565806.validator(path, query, header, formData, body)
  let scheme = call_565806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565806.url(scheme.get, call_565806.host, call_565806.base,
                         call_565806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565806, url, valid)

proc call*(call_565807: Call_GetDeployedServiceReplicaDetailInfo_565798;
          replicaId: string; nodeName: string; partitionId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getDeployedServiceReplicaDetailInfo
  ## Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565808 = newJObject()
  var query_565809 = newJObject()
  add(path_565808, "replicaId", newJString(replicaId))
  add(query_565809, "api-version", newJString(apiVersion))
  add(query_565809, "timeout", newJInt(timeout))
  add(path_565808, "nodeName", newJString(nodeName))
  add(path_565808, "partitionId", newJString(partitionId))
  result = call_565807.call(path_565808, query_565809, nil, nil, nil)

var getDeployedServiceReplicaDetailInfo* = Call_GetDeployedServiceReplicaDetailInfo_565798(
    name: "getDeployedServiceReplicaDetailInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail",
    validator: validate_GetDeployedServiceReplicaDetailInfo_565799, base: "",
    url: url_GetDeployedServiceReplicaDetailInfo_565800,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartReplica_565810 = ref object of OpenApiRestCall_563566
proc url_RestartReplica_565812(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/GetPartitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartReplica_565811(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   nodeName: JString (required)
  ##           : The name of the node.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_565813 = path.getOrDefault("replicaId")
  valid_565813 = validateParameter(valid_565813, JString, required = true,
                                 default = nil)
  if valid_565813 != nil:
    section.add "replicaId", valid_565813
  var valid_565814 = path.getOrDefault("nodeName")
  valid_565814 = validateParameter(valid_565814, JString, required = true,
                                 default = nil)
  if valid_565814 != nil:
    section.add "nodeName", valid_565814
  var valid_565815 = path.getOrDefault("partitionId")
  valid_565815 = validateParameter(valid_565815, JString, required = true,
                                 default = nil)
  if valid_565815 != nil:
    section.add "partitionId", valid_565815
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565816 = query.getOrDefault("api-version")
  valid_565816 = validateParameter(valid_565816, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565816 != nil:
    section.add "api-version", valid_565816
  var valid_565817 = query.getOrDefault("timeout")
  valid_565817 = validateParameter(valid_565817, JInt, required = false,
                                 default = newJInt(60))
  if valid_565817 != nil:
    section.add "timeout", valid_565817
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565818: Call_RestartReplica_565810; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ## 
  let valid = call_565818.validator(path, query, header, formData, body)
  let scheme = call_565818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565818.url(scheme.get, call_565818.host, call_565818.base,
                         call_565818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565818, url, valid)

proc call*(call_565819: Call_RestartReplica_565810; replicaId: string;
          nodeName: string; partitionId: string; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## restartReplica
  ## Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565820 = newJObject()
  var query_565821 = newJObject()
  add(path_565820, "replicaId", newJString(replicaId))
  add(query_565821, "api-version", newJString(apiVersion))
  add(query_565821, "timeout", newJInt(timeout))
  add(path_565820, "nodeName", newJString(nodeName))
  add(path_565820, "partitionId", newJString(partitionId))
  result = call_565819.call(path_565820, query_565821, nil, nil, nil)

var restartReplica* = Call_RestartReplica_565810(name: "restartReplica",
    meth: HttpMethod.HttpPost, host: "azure.local:19080", route: "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart",
    validator: validate_RestartReplica_565811, base: "", url: url_RestartReplica_565812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveNodeState_565822 = ref object of OpenApiRestCall_563566
proc url_RemoveNodeState_565824(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/RemoveNodeState")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RemoveNodeState_565823(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565825 = path.getOrDefault("nodeName")
  valid_565825 = validateParameter(valid_565825, JString, required = true,
                                 default = nil)
  if valid_565825 != nil:
    section.add "nodeName", valid_565825
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565826 = query.getOrDefault("api-version")
  valid_565826 = validateParameter(valid_565826, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565826 != nil:
    section.add "api-version", valid_565826
  var valid_565827 = query.getOrDefault("timeout")
  valid_565827 = validateParameter(valid_565827, JInt, required = false,
                                 default = newJInt(60))
  if valid_565827 != nil:
    section.add "timeout", valid_565827
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565828: Call_RemoveNodeState_565822; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ## 
  let valid = call_565828.validator(path, query, header, formData, body)
  let scheme = call_565828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565828.url(scheme.get, call_565828.host, call_565828.base,
                         call_565828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565828, url, valid)

proc call*(call_565829: Call_RemoveNodeState_565822; nodeName: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## removeNodeState
  ## This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565830 = newJObject()
  var query_565831 = newJObject()
  add(query_565831, "api-version", newJString(apiVersion))
  add(query_565831, "timeout", newJInt(timeout))
  add(path_565830, "nodeName", newJString(nodeName))
  result = call_565829.call(path_565830, query_565831, nil, nil, nil)

var removeNodeState* = Call_RemoveNodeState_565822(name: "removeNodeState",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/RemoveNodeState",
    validator: validate_RemoveNodeState_565823, base: "", url: url_RemoveNodeState_565824,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportNodeHealth_565832 = ref object of OpenApiRestCall_563566
proc url_ReportNodeHealth_565834(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportNodeHealth_565833(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565835 = path.getOrDefault("nodeName")
  valid_565835 = validateParameter(valid_565835, JString, required = true,
                                 default = nil)
  if valid_565835 != nil:
    section.add "nodeName", valid_565835
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_565836 = query.getOrDefault("Immediate")
  valid_565836 = validateParameter(valid_565836, JBool, required = false,
                                 default = newJBool(false))
  if valid_565836 != nil:
    section.add "Immediate", valid_565836
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565837 = query.getOrDefault("api-version")
  valid_565837 = validateParameter(valid_565837, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565837 != nil:
    section.add "api-version", valid_565837
  var valid_565838 = query.getOrDefault("timeout")
  valid_565838 = validateParameter(valid_565838, JInt, required = false,
                                 default = newJInt(60))
  if valid_565838 != nil:
    section.add "timeout", valid_565838
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565840: Call_ReportNodeHealth_565832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_565840.validator(path, query, header, formData, body)
  let scheme = call_565840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565840.url(scheme.get, call_565840.host, call_565840.base,
                         call_565840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565840, url, valid)

proc call*(call_565841: Call_ReportNodeHealth_565832; HealthInformation: JsonNode;
          nodeName: string; Immediate: bool = false; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## reportNodeHealth
  ## Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway node, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  var path_565842 = newJObject()
  var query_565843 = newJObject()
  var body_565844 = newJObject()
  add(query_565843, "Immediate", newJBool(Immediate))
  if HealthInformation != nil:
    body_565844 = HealthInformation
  add(query_565843, "api-version", newJString(apiVersion))
  add(query_565843, "timeout", newJInt(timeout))
  add(path_565842, "nodeName", newJString(nodeName))
  result = call_565841.call(path_565842, query_565843, nil, nil, body_565844)

var reportNodeHealth* = Call_ReportNodeHealth_565832(name: "reportNodeHealth",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Nodes/{nodeName}/$/ReportHealth",
    validator: validate_ReportNodeHealth_565833, base: "",
    url: url_ReportNodeHealth_565834, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestartNode_565845 = ref object of OpenApiRestCall_563566
proc url_RestartNode_565847(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "nodeName" in path, "`nodeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Nodes/"),
               (kind: VariableSegment, value: "nodeName"),
               (kind: ConstantSegment, value: "/$/Restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestartNode_565846(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   nodeName: JString (required)
  ##           : The name of the node.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `nodeName` field"
  var valid_565848 = path.getOrDefault("nodeName")
  valid_565848 = validateParameter(valid_565848, JString, required = true,
                                 default = nil)
  if valid_565848 != nil:
    section.add "nodeName", valid_565848
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565849 = query.getOrDefault("api-version")
  valid_565849 = validateParameter(valid_565849, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565849 != nil:
    section.add "api-version", valid_565849
  var valid_565850 = query.getOrDefault("timeout")
  valid_565850 = validateParameter(valid_565850, JInt, required = false,
                                 default = newJInt(60))
  if valid_565850 != nil:
    section.add "timeout", valid_565850
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565852: Call_RestartNode_565845; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts a Service Fabric cluster node that is already started.
  ## 
  let valid = call_565852.validator(path, query, header, formData, body)
  let scheme = call_565852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565852.url(scheme.get, call_565852.host, call_565852.base,
                         call_565852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565852, url, valid)

proc call*(call_565853: Call_RestartNode_565845; nodeName: string;
          RestartNodeDescription: JsonNode; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## restartNode
  ## Restarts a Service Fabric cluster node that is already started.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   nodeName: string (required)
  ##           : The name of the node.
  ##   RestartNodeDescription: JObject (required)
  ##                         : The instance of the node to be restarted and a flag indicating the need to take dump of the fabric process.
  var path_565854 = newJObject()
  var query_565855 = newJObject()
  var body_565856 = newJObject()
  add(query_565855, "api-version", newJString(apiVersion))
  add(query_565855, "timeout", newJInt(timeout))
  add(path_565854, "nodeName", newJString(nodeName))
  if RestartNodeDescription != nil:
    body_565856 = RestartNodeDescription
  result = call_565853.call(path_565854, query_565855, nil, nil, body_565856)

var restartNode* = Call_RestartNode_565845(name: "restartNode",
                                        meth: HttpMethod.HttpPost,
                                        host: "azure.local:19080",
                                        route: "/Nodes/{nodeName}/$/Restart",
                                        validator: validate_RestartNode_565846,
                                        base: "", url: url_RestartNode_565847,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfo_565857 = ref object of OpenApiRestCall_563566
proc url_GetPartitionInfo_565859(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfo_565858(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565860 = path.getOrDefault("partitionId")
  valid_565860 = validateParameter(valid_565860, JString, required = true,
                                 default = nil)
  if valid_565860 != nil:
    section.add "partitionId", valid_565860
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565861 = query.getOrDefault("api-version")
  valid_565861 = validateParameter(valid_565861, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565861 != nil:
    section.add "api-version", valid_565861
  var valid_565862 = query.getOrDefault("timeout")
  valid_565862 = validateParameter(valid_565862, JInt, required = false,
                                 default = newJInt(60))
  if valid_565862 != nil:
    section.add "timeout", valid_565862
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565863: Call_GetPartitionInfo_565857; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_565863.validator(path, query, header, formData, body)
  let scheme = call_565863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565863.url(scheme.get, call_565863.host, call_565863.base,
                         call_565863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565863, url, valid)

proc call*(call_565864: Call_GetPartitionInfo_565857; partitionId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getPartitionInfo
  ## Gets the information about the specified partition. The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565865 = newJObject()
  var query_565866 = newJObject()
  add(query_565866, "api-version", newJString(apiVersion))
  add(query_565866, "timeout", newJInt(timeout))
  add(path_565865, "partitionId", newJString(partitionId))
  result = call_565864.call(path_565865, query_565866, nil, nil, nil)

var getPartitionInfo* = Call_GetPartitionInfo_565857(name: "getPartitionInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}", validator: validate_GetPartitionInfo_565858,
    base: "", url: url_GetPartitionInfo_565859, schemes: {Scheme.Https, Scheme.Http})
type
  Call_BackupPartition_565867 = ref object of OpenApiRestCall_563566
proc url_BackupPartition_565869(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_BackupPartition_565868(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565870 = path.getOrDefault("partitionId")
  valid_565870 = validateParameter(valid_565870, JString, required = true,
                                 default = nil)
  if valid_565870 != nil:
    section.add "partitionId", valid_565870
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   BackupTimeout: JInt
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565871 = query.getOrDefault("api-version")
  valid_565871 = validateParameter(valid_565871, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565871 != nil:
    section.add "api-version", valid_565871
  var valid_565872 = query.getOrDefault("timeout")
  valid_565872 = validateParameter(valid_565872, JInt, required = false,
                                 default = newJInt(60))
  if valid_565872 != nil:
    section.add "timeout", valid_565872
  var valid_565873 = query.getOrDefault("BackupTimeout")
  valid_565873 = validateParameter(valid_565873, JInt, required = false,
                                 default = newJInt(10))
  if valid_565873 != nil:
    section.add "BackupTimeout", valid_565873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565875: Call_BackupPartition_565867; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ## 
  let valid = call_565875.validator(path, query, header, formData, body)
  let scheme = call_565875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565875.url(scheme.get, call_565875.host, call_565875.base,
                         call_565875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565875, url, valid)

proc call*(call_565876: Call_BackupPartition_565867; partitionId: string;
          BackupPartitionDescription: JsonNode = nil; apiVersion: string = "6.4";
          timeout: int = 60; BackupTimeout: int = 10): Recallable =
  ## backupPartition
  ## Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation. 
  ## In case, the operation times out, specify a greater backup timeout value in the query parameter.
  ##   BackupPartitionDescription: JObject
  ##                             : Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   BackupTimeout: int
  ##                : Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565877 = newJObject()
  var query_565878 = newJObject()
  var body_565879 = newJObject()
  if BackupPartitionDescription != nil:
    body_565879 = BackupPartitionDescription
  add(query_565878, "api-version", newJString(apiVersion))
  add(query_565878, "timeout", newJInt(timeout))
  add(query_565878, "BackupTimeout", newJInt(BackupTimeout))
  add(path_565877, "partitionId", newJString(partitionId))
  result = call_565876.call(path_565877, query_565878, nil, nil, body_565879)

var backupPartition* = Call_BackupPartition_565867(name: "backupPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Backup",
    validator: validate_BackupPartition_565868, base: "", url: url_BackupPartition_565869,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisablePartitionBackup_565880 = ref object of OpenApiRestCall_563566
proc url_DisablePartitionBackup_565882(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisablePartitionBackup_565881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565883 = path.getOrDefault("partitionId")
  valid_565883 = validateParameter(valid_565883, JString, required = true,
                                 default = nil)
  if valid_565883 != nil:
    section.add "partitionId", valid_565883
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565884 = query.getOrDefault("api-version")
  valid_565884 = validateParameter(valid_565884, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565884 != nil:
    section.add "api-version", valid_565884
  var valid_565885 = query.getOrDefault("timeout")
  valid_565885 = validateParameter(valid_565885, JInt, required = false,
                                 default = newJInt(60))
  if valid_565885 != nil:
    section.add "timeout", valid_565885
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565887: Call_DisablePartitionBackup_565880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ## 
  let valid = call_565887.validator(path, query, header, formData, body)
  let scheme = call_565887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565887.url(scheme.get, call_565887.host, call_565887.base,
                         call_565887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565887, url, valid)

proc call*(call_565888: Call_DisablePartitionBackup_565880; partitionId: string;
          apiVersion: string = "6.4"; DisableBackupDescription: JsonNode = nil;
          timeout: int = 60): Recallable =
  ## disablePartitionBackup
  ## Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled. 
  ## In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565889 = newJObject()
  var query_565890 = newJObject()
  var body_565891 = newJObject()
  add(query_565890, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_565891 = DisableBackupDescription
  add(query_565890, "timeout", newJInt(timeout))
  add(path_565889, "partitionId", newJString(partitionId))
  result = call_565888.call(path_565889, query_565890, nil, nil, body_565891)

var disablePartitionBackup* = Call_DisablePartitionBackup_565880(
    name: "disablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/DisableBackup",
    validator: validate_DisablePartitionBackup_565881, base: "",
    url: url_DisablePartitionBackup_565882, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnablePartitionBackup_565892 = ref object of OpenApiRestCall_563566
proc url_EnablePartitionBackup_565894(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnablePartitionBackup_565893(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565895 = path.getOrDefault("partitionId")
  valid_565895 = validateParameter(valid_565895, JString, required = true,
                                 default = nil)
  if valid_565895 != nil:
    section.add "partitionId", valid_565895
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565896 = query.getOrDefault("api-version")
  valid_565896 = validateParameter(valid_565896, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565896 != nil:
    section.add "api-version", valid_565896
  var valid_565897 = query.getOrDefault("timeout")
  valid_565897 = validateParameter(valid_565897, JInt, required = false,
                                 default = newJInt(60))
  if valid_565897 != nil:
    section.add "timeout", valid_565897
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565899: Call_EnablePartitionBackup_565892; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_565899.validator(path, query, header, formData, body)
  let scheme = call_565899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565899.url(scheme.get, call_565899.host, call_565899.base,
                         call_565899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565899, url, valid)

proc call*(call_565900: Call_EnablePartitionBackup_565892;
          EnableBackupDescription: JsonNode; partitionId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## enablePartitionBackup
  ## Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition.
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565901 = newJObject()
  var query_565902 = newJObject()
  var body_565903 = newJObject()
  add(query_565902, "api-version", newJString(apiVersion))
  add(query_565902, "timeout", newJInt(timeout))
  if EnableBackupDescription != nil:
    body_565903 = EnableBackupDescription
  add(path_565901, "partitionId", newJString(partitionId))
  result = call_565900.call(path_565901, query_565902, nil, nil, body_565903)

var enablePartitionBackup* = Call_EnablePartitionBackup_565892(
    name: "enablePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/EnableBackup",
    validator: validate_EnablePartitionBackup_565893, base: "",
    url: url_EnablePartitionBackup_565894, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupConfigurationInfo_565904 = ref object of OpenApiRestCall_563566
proc url_GetPartitionBackupConfigurationInfo_565906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupConfigurationInfo_565905(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565907 = path.getOrDefault("partitionId")
  valid_565907 = validateParameter(valid_565907, JString, required = true,
                                 default = nil)
  if valid_565907 != nil:
    section.add "partitionId", valid_565907
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565908 = query.getOrDefault("api-version")
  valid_565908 = validateParameter(valid_565908, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565908 != nil:
    section.add "api-version", valid_565908
  var valid_565909 = query.getOrDefault("timeout")
  valid_565909 = validateParameter(valid_565909, JInt, required = false,
                                 default = newJInt(60))
  if valid_565909 != nil:
    section.add "timeout", valid_565909
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565910: Call_GetPartitionBackupConfigurationInfo_565904;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ## 
  let valid = call_565910.validator(path, query, header, formData, body)
  let scheme = call_565910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565910.url(scheme.get, call_565910.host, call_565910.base,
                         call_565910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565910, url, valid)

proc call*(call_565911: Call_GetPartitionBackupConfigurationInfo_565904;
          partitionId: string; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getPartitionBackupConfigurationInfo
  ## Gets the Service Fabric Backup configuration information for the specified partition.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565912 = newJObject()
  var query_565913 = newJObject()
  add(query_565913, "api-version", newJString(apiVersion))
  add(query_565913, "timeout", newJInt(timeout))
  add(path_565912, "partitionId", newJString(partitionId))
  result = call_565911.call(path_565912, query_565913, nil, nil, nil)

var getPartitionBackupConfigurationInfo* = Call_GetPartitionBackupConfigurationInfo_565904(
    name: "getPartitionBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupConfigurationInfo",
    validator: validate_GetPartitionBackupConfigurationInfo_565905, base: "",
    url: url_GetPartitionBackupConfigurationInfo_565906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupProgress_565914 = ref object of OpenApiRestCall_563566
proc url_GetPartitionBackupProgress_565916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackupProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupProgress_565915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565917 = path.getOrDefault("partitionId")
  valid_565917 = validateParameter(valid_565917, JString, required = true,
                                 default = nil)
  if valid_565917 != nil:
    section.add "partitionId", valid_565917
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565918 = query.getOrDefault("api-version")
  valid_565918 = validateParameter(valid_565918, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565918 != nil:
    section.add "api-version", valid_565918
  var valid_565919 = query.getOrDefault("timeout")
  valid_565919 = validateParameter(valid_565919, JInt, required = false,
                                 default = newJInt(60))
  if valid_565919 != nil:
    section.add "timeout", valid_565919
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565920: Call_GetPartitionBackupProgress_565914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ## 
  let valid = call_565920.validator(path, query, header, formData, body)
  let scheme = call_565920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565920.url(scheme.get, call_565920.host, call_565920.base,
                         call_565920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565920, url, valid)

proc call*(call_565921: Call_GetPartitionBackupProgress_565914;
          partitionId: string; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getPartitionBackupProgress
  ## Returns information about the state of the latest backup along with details or failure reason in case of completion.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565922 = newJObject()
  var query_565923 = newJObject()
  add(query_565923, "api-version", newJString(apiVersion))
  add(query_565923, "timeout", newJInt(timeout))
  add(path_565922, "partitionId", newJString(partitionId))
  result = call_565921.call(path_565922, query_565923, nil, nil, nil)

var getPartitionBackupProgress* = Call_GetPartitionBackupProgress_565914(
    name: "getPartitionBackupProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetBackupProgress",
    validator: validate_GetPartitionBackupProgress_565915, base: "",
    url: url_GetPartitionBackupProgress_565916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionBackupList_565924 = ref object of OpenApiRestCall_563566
proc url_GetPartitionBackupList_565926(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionBackupList_565925(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565927 = path.getOrDefault("partitionId")
  valid_565927 = validateParameter(valid_565927, JString, required = true,
                                 default = nil)
  if valid_565927 != nil:
    section.add "partitionId", valid_565927
  result.add "path", section
  ## parameters in `query` object:
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_565928 = query.getOrDefault("StartDateTimeFilter")
  valid_565928 = validateParameter(valid_565928, JString, required = false,
                                 default = nil)
  if valid_565928 != nil:
    section.add "StartDateTimeFilter", valid_565928
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565929 = query.getOrDefault("api-version")
  valid_565929 = validateParameter(valid_565929, JString, required = true,
                                 default = newJString("6.4"))
  if valid_565929 != nil:
    section.add "api-version", valid_565929
  var valid_565930 = query.getOrDefault("timeout")
  valid_565930 = validateParameter(valid_565930, JInt, required = false,
                                 default = newJInt(60))
  if valid_565930 != nil:
    section.add "timeout", valid_565930
  var valid_565931 = query.getOrDefault("Latest")
  valid_565931 = validateParameter(valid_565931, JBool, required = false,
                                 default = newJBool(false))
  if valid_565931 != nil:
    section.add "Latest", valid_565931
  var valid_565932 = query.getOrDefault("EndDateTimeFilter")
  valid_565932 = validateParameter(valid_565932, JString, required = false,
                                 default = nil)
  if valid_565932 != nil:
    section.add "EndDateTimeFilter", valid_565932
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565933: Call_GetPartitionBackupList_565924; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ## 
  let valid = call_565933.validator(path, query, header, formData, body)
  let scheme = call_565933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565933.url(scheme.get, call_565933.host, call_565933.base,
                         call_565933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565933, url, valid)

proc call*(call_565934: Call_GetPartitionBackupList_565924; partitionId: string;
          StartDateTimeFilter: string = ""; apiVersion: string = "6.4";
          timeout: int = 60; Latest: bool = false; EndDateTimeFilter: string = ""): Recallable =
  ## getPartitionBackupList
  ## Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  var path_565935 = newJObject()
  var query_565936 = newJObject()
  add(query_565936, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_565936, "api-version", newJString(apiVersion))
  add(query_565936, "timeout", newJInt(timeout))
  add(path_565935, "partitionId", newJString(partitionId))
  add(query_565936, "Latest", newJBool(Latest))
  add(query_565936, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  result = call_565934.call(path_565935, query_565936, nil, nil, nil)

var getPartitionBackupList* = Call_GetPartitionBackupList_565924(
    name: "getPartitionBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetBackups",
    validator: validate_GetPartitionBackupList_565925, base: "",
    url: url_GetPartitionBackupList_565926, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealthUsingPolicy_565950 = ref object of OpenApiRestCall_563566
proc url_GetPartitionHealthUsingPolicy_565952(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealthUsingPolicy_565951(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565953 = path.getOrDefault("partitionId")
  valid_565953 = validateParameter(valid_565953, JString, required = true,
                                 default = nil)
  if valid_565953 != nil:
    section.add "partitionId", valid_565953
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565954 = query.getOrDefault("api-version")
  valid_565954 = validateParameter(valid_565954, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565954 != nil:
    section.add "api-version", valid_565954
  var valid_565955 = query.getOrDefault("ExcludeHealthStatistics")
  valid_565955 = validateParameter(valid_565955, JBool, required = false,
                                 default = newJBool(false))
  if valid_565955 != nil:
    section.add "ExcludeHealthStatistics", valid_565955
  var valid_565956 = query.getOrDefault("timeout")
  valid_565956 = validateParameter(valid_565956, JInt, required = false,
                                 default = newJInt(60))
  if valid_565956 != nil:
    section.add "timeout", valid_565956
  var valid_565957 = query.getOrDefault("EventsHealthStateFilter")
  valid_565957 = validateParameter(valid_565957, JInt, required = false,
                                 default = newJInt(0))
  if valid_565957 != nil:
    section.add "EventsHealthStateFilter", valid_565957
  var valid_565958 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_565958 = validateParameter(valid_565958, JInt, required = false,
                                 default = newJInt(0))
  if valid_565958 != nil:
    section.add "ReplicasHealthStateFilter", valid_565958
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565960: Call_GetPartitionHealthUsingPolicy_565950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_565960.validator(path, query, header, formData, body)
  let scheme = call_565960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565960.url(scheme.get, call_565960.host, call_565960.base,
                         call_565960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565960, url, valid)

proc call*(call_565961: Call_GetPartitionHealthUsingPolicy_565950;
          partitionId: string; ApplicationHealthPolicy: JsonNode = nil;
          apiVersion: string = "6.0"; ExcludeHealthStatistics: bool = false;
          timeout: int = 60; EventsHealthStateFilter: int = 0;
          ReplicasHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealthUsingPolicy
  ## Gets the health information of the specified partition.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_565962 = newJObject()
  var query_565963 = newJObject()
  var body_565964 = newJObject()
  if ApplicationHealthPolicy != nil:
    body_565964 = ApplicationHealthPolicy
  add(query_565963, "api-version", newJString(apiVersion))
  add(query_565963, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_565963, "timeout", newJInt(timeout))
  add(path_565962, "partitionId", newJString(partitionId))
  add(query_565963, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_565963, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  result = call_565961.call(path_565962, query_565963, nil, nil, body_565964)

var getPartitionHealthUsingPolicy* = Call_GetPartitionHealthUsingPolicy_565950(
    name: "getPartitionHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealthUsingPolicy_565951, base: "",
    url: url_GetPartitionHealthUsingPolicy_565952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionHealth_565937 = ref object of OpenApiRestCall_563566
proc url_GetPartitionHealth_565939(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionHealth_565938(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565940 = path.getOrDefault("partitionId")
  valid_565940 = validateParameter(valid_565940, JString, required = true,
                                 default = nil)
  if valid_565940 != nil:
    section.add "partitionId", valid_565940
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ReplicasHealthStateFilter: JInt
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565941 = query.getOrDefault("api-version")
  valid_565941 = validateParameter(valid_565941, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565941 != nil:
    section.add "api-version", valid_565941
  var valid_565942 = query.getOrDefault("ExcludeHealthStatistics")
  valid_565942 = validateParameter(valid_565942, JBool, required = false,
                                 default = newJBool(false))
  if valid_565942 != nil:
    section.add "ExcludeHealthStatistics", valid_565942
  var valid_565943 = query.getOrDefault("timeout")
  valid_565943 = validateParameter(valid_565943, JInt, required = false,
                                 default = newJInt(60))
  if valid_565943 != nil:
    section.add "timeout", valid_565943
  var valid_565944 = query.getOrDefault("EventsHealthStateFilter")
  valid_565944 = validateParameter(valid_565944, JInt, required = false,
                                 default = newJInt(0))
  if valid_565944 != nil:
    section.add "EventsHealthStateFilter", valid_565944
  var valid_565945 = query.getOrDefault("ReplicasHealthStateFilter")
  valid_565945 = validateParameter(valid_565945, JInt, required = false,
                                 default = newJInt(0))
  if valid_565945 != nil:
    section.add "ReplicasHealthStateFilter", valid_565945
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565946: Call_GetPartitionHealth_565937; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_565946.validator(path, query, header, formData, body)
  let scheme = call_565946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565946.url(scheme.get, call_565946.host, call_565946.base,
                         call_565946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565946, url, valid)

proc call*(call_565947: Call_GetPartitionHealth_565937; partitionId: string;
          apiVersion: string = "6.0"; ExcludeHealthStatistics: bool = false;
          timeout: int = 60; EventsHealthStateFilter: int = 0;
          ReplicasHealthStateFilter: int = 0): Recallable =
  ## getPartitionHealth
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.
  ## If you specify a partition that does not exist in the health store, this request returns an error.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ReplicasHealthStateFilter: int
  ##                            : Allows filtering the collection of ReplicaHealthState objects on the partition. The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If not specified, all entries will be returned.The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible values for this parameter include integer value of one of the following health states.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_565948 = newJObject()
  var query_565949 = newJObject()
  add(query_565949, "api-version", newJString(apiVersion))
  add(query_565949, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_565949, "timeout", newJInt(timeout))
  add(path_565948, "partitionId", newJString(partitionId))
  add(query_565949, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(query_565949, "ReplicasHealthStateFilter",
      newJInt(ReplicasHealthStateFilter))
  result = call_565947.call(path_565948, query_565949, nil, nil, nil)

var getPartitionHealth* = Call_GetPartitionHealth_565937(
    name: "getPartitionHealth", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetHealth",
    validator: validate_GetPartitionHealth_565938, base: "",
    url: url_GetPartitionHealth_565939, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionLoadInformation_565965 = ref object of OpenApiRestCall_563566
proc url_GetPartitionLoadInformation_565967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetLoadInformation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionLoadInformation_565966(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565968 = path.getOrDefault("partitionId")
  valid_565968 = validateParameter(valid_565968, JString, required = true,
                                 default = nil)
  if valid_565968 != nil:
    section.add "partitionId", valid_565968
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565969 = query.getOrDefault("api-version")
  valid_565969 = validateParameter(valid_565969, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565969 != nil:
    section.add "api-version", valid_565969
  var valid_565970 = query.getOrDefault("timeout")
  valid_565970 = validateParameter(valid_565970, JInt, required = false,
                                 default = newJInt(60))
  if valid_565970 != nil:
    section.add "timeout", valid_565970
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565971: Call_GetPartitionLoadInformation_565965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ## 
  let valid = call_565971.validator(path, query, header, formData, body)
  let scheme = call_565971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565971.url(scheme.get, call_565971.host, call_565971.base,
                         call_565971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565971, url, valid)

proc call*(call_565972: Call_GetPartitionLoadInformation_565965;
          partitionId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getPartitionLoadInformation
  ## Returns information about the load of a specified partition.
  ## The response includes a list of load reports for a Service Fabric partition.
  ## Each report includes the load metric name, value, and last reported time in UTC.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565973 = newJObject()
  var query_565974 = newJObject()
  add(query_565974, "api-version", newJString(apiVersion))
  add(query_565974, "timeout", newJInt(timeout))
  add(path_565973, "partitionId", newJString(partitionId))
  result = call_565972.call(path_565973, query_565974, nil, nil, nil)

var getPartitionLoadInformation* = Call_GetPartitionLoadInformation_565965(
    name: "getPartitionLoadInformation", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetLoadInformation",
    validator: validate_GetPartitionLoadInformation_565966, base: "",
    url: url_GetPartitionLoadInformation_565967,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfoList_565975 = ref object of OpenApiRestCall_563566
proc url_GetReplicaInfoList_565977(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfoList_565976(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_565978 = path.getOrDefault("partitionId")
  valid_565978 = validateParameter(valid_565978, JString, required = true,
                                 default = nil)
  if valid_565978 != nil:
    section.add "partitionId", valid_565978
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_565979 = query.getOrDefault("ContinuationToken")
  valid_565979 = validateParameter(valid_565979, JString, required = false,
                                 default = nil)
  if valid_565979 != nil:
    section.add "ContinuationToken", valid_565979
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565980 = query.getOrDefault("api-version")
  valid_565980 = validateParameter(valid_565980, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565980 != nil:
    section.add "api-version", valid_565980
  var valid_565981 = query.getOrDefault("timeout")
  valid_565981 = validateParameter(valid_565981, JInt, required = false,
                                 default = newJInt(60))
  if valid_565981 != nil:
    section.add "timeout", valid_565981
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565982: Call_GetReplicaInfoList_565975; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_565982.validator(path, query, header, formData, body)
  let scheme = call_565982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565982.url(scheme.get, call_565982.host, call_565982.base,
                         call_565982.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565982, url, valid)

proc call*(call_565983: Call_GetReplicaInfoList_565975; partitionId: string;
          ContinuationToken: string = ""; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getReplicaInfoList
  ## The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565984 = newJObject()
  var query_565985 = newJObject()
  add(query_565985, "ContinuationToken", newJString(ContinuationToken))
  add(query_565985, "api-version", newJString(apiVersion))
  add(query_565985, "timeout", newJInt(timeout))
  add(path_565984, "partitionId", newJString(partitionId))
  result = call_565983.call(path_565984, query_565985, nil, nil, nil)

var getReplicaInfoList* = Call_GetReplicaInfoList_565975(
    name: "getReplicaInfoList", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas",
    validator: validate_GetReplicaInfoList_565976, base: "",
    url: url_GetReplicaInfoList_565977, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaInfo_565986 = ref object of OpenApiRestCall_563566
proc url_GetReplicaInfo_565988(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaInfo_565987(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_565989 = path.getOrDefault("replicaId")
  valid_565989 = validateParameter(valid_565989, JString, required = true,
                                 default = nil)
  if valid_565989 != nil:
    section.add "replicaId", valid_565989
  var valid_565990 = path.getOrDefault("partitionId")
  valid_565990 = validateParameter(valid_565990, JString, required = true,
                                 default = nil)
  if valid_565990 != nil:
    section.add "partitionId", valid_565990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565991 = query.getOrDefault("api-version")
  valid_565991 = validateParameter(valid_565991, JString, required = true,
                                 default = newJString("6.0"))
  if valid_565991 != nil:
    section.add "api-version", valid_565991
  var valid_565992 = query.getOrDefault("timeout")
  valid_565992 = validateParameter(valid_565992, JInt, required = false,
                                 default = newJInt(60))
  if valid_565992 != nil:
    section.add "timeout", valid_565992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565993: Call_GetReplicaInfo_565986; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ## 
  let valid = call_565993.validator(path, query, header, formData, body)
  let scheme = call_565993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565993.url(scheme.get, call_565993.host, call_565993.base,
                         call_565993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565993, url, valid)

proc call*(call_565994: Call_GetReplicaInfo_565986; replicaId: string;
          partitionId: string; apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getReplicaInfo
  ## The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_565995 = newJObject()
  var query_565996 = newJObject()
  add(path_565995, "replicaId", newJString(replicaId))
  add(query_565996, "api-version", newJString(apiVersion))
  add(query_565996, "timeout", newJInt(timeout))
  add(path_565995, "partitionId", newJString(partitionId))
  result = call_565994.call(path_565995, query_565996, nil, nil, nil)

var getReplicaInfo* = Call_GetReplicaInfo_565986(name: "getReplicaInfo",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}",
    validator: validate_GetReplicaInfo_565987, base: "", url: url_GetReplicaInfo_565988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealthUsingPolicy_566009 = ref object of OpenApiRestCall_563566
proc url_GetReplicaHealthUsingPolicy_566011(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealthUsingPolicy_566010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_566012 = path.getOrDefault("replicaId")
  valid_566012 = validateParameter(valid_566012, JString, required = true,
                                 default = nil)
  if valid_566012 != nil:
    section.add "replicaId", valid_566012
  var valid_566013 = path.getOrDefault("partitionId")
  valid_566013 = validateParameter(valid_566013, JString, required = true,
                                 default = nil)
  if valid_566013 != nil:
    section.add "partitionId", valid_566013
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566014 = query.getOrDefault("api-version")
  valid_566014 = validateParameter(valid_566014, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566014 != nil:
    section.add "api-version", valid_566014
  var valid_566015 = query.getOrDefault("timeout")
  valid_566015 = validateParameter(valid_566015, JInt, required = false,
                                 default = newJInt(60))
  if valid_566015 != nil:
    section.add "timeout", valid_566015
  var valid_566016 = query.getOrDefault("EventsHealthStateFilter")
  valid_566016 = validateParameter(valid_566016, JInt, required = false,
                                 default = newJInt(0))
  if valid_566016 != nil:
    section.add "EventsHealthStateFilter", valid_566016
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566018: Call_GetReplicaHealthUsingPolicy_566009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ## 
  let valid = call_566018.validator(path, query, header, formData, body)
  let scheme = call_566018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566018.url(scheme.get, call_566018.host, call_566018.base,
                         call_566018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566018, url, valid)

proc call*(call_566019: Call_GetReplicaHealthUsingPolicy_566009; replicaId: string;
          partitionId: string; ApplicationHealthPolicy: JsonNode = nil;
          apiVersion: string = "6.0"; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealthUsingPolicy
  ## Gets the health of a Service Fabric stateful service replica or stateless service instance.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.
  ## Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_566020 = newJObject()
  var query_566021 = newJObject()
  var body_566022 = newJObject()
  add(path_566020, "replicaId", newJString(replicaId))
  if ApplicationHealthPolicy != nil:
    body_566022 = ApplicationHealthPolicy
  add(query_566021, "api-version", newJString(apiVersion))
  add(query_566021, "timeout", newJInt(timeout))
  add(path_566020, "partitionId", newJString(partitionId))
  add(query_566021, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_566019.call(path_566020, query_566021, nil, nil, body_566022)

var getReplicaHealthUsingPolicy* = Call_GetReplicaHealthUsingPolicy_566009(
    name: "getReplicaHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealthUsingPolicy_566010, base: "",
    url: url_GetReplicaHealthUsingPolicy_566011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReplicaHealth_565997 = ref object of OpenApiRestCall_563566
proc url_GetReplicaHealth_565999(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetReplicaHealth_565998(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_566000 = path.getOrDefault("replicaId")
  valid_566000 = validateParameter(valid_566000, JString, required = true,
                                 default = nil)
  if valid_566000 != nil:
    section.add "replicaId", valid_566000
  var valid_566001 = path.getOrDefault("partitionId")
  valid_566001 = validateParameter(valid_566001, JString, required = true,
                                 default = nil)
  if valid_566001 != nil:
    section.add "partitionId", valid_566001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566002 = query.getOrDefault("api-version")
  valid_566002 = validateParameter(valid_566002, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566002 != nil:
    section.add "api-version", valid_566002
  var valid_566003 = query.getOrDefault("timeout")
  valid_566003 = validateParameter(valid_566003, JInt, required = false,
                                 default = newJInt(60))
  if valid_566003 != nil:
    section.add "timeout", valid_566003
  var valid_566004 = query.getOrDefault("EventsHealthStateFilter")
  valid_566004 = validateParameter(valid_566004, JInt, required = false,
                                 default = newJInt(0))
  if valid_566004 != nil:
    section.add "EventsHealthStateFilter", valid_566004
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566005: Call_GetReplicaHealth_565997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ## 
  let valid = call_566005.validator(path, query, header, formData, body)
  let scheme = call_566005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566005.url(scheme.get, call_566005.host, call_566005.base,
                         call_566005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566005, url, valid)

proc call*(call_566006: Call_GetReplicaHealth_565997; replicaId: string;
          partitionId: string; apiVersion: string = "6.0"; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getReplicaHealth
  ## Gets the health of a Service Fabric replica.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  var path_566007 = newJObject()
  var query_566008 = newJObject()
  add(path_566007, "replicaId", newJString(replicaId))
  add(query_566008, "api-version", newJString(apiVersion))
  add(query_566008, "timeout", newJInt(timeout))
  add(path_566007, "partitionId", newJString(partitionId))
  add(query_566008, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  result = call_566006.call(path_566007, query_566008, nil, nil, nil)

var getReplicaHealth* = Call_GetReplicaHealth_565997(name: "getReplicaHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
    validator: validate_GetReplicaHealth_565998, base: "",
    url: url_GetReplicaHealth_565999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportReplicaHealth_566023 = ref object of OpenApiRestCall_563566
proc url_ReportReplicaHealth_566025(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  assert "replicaId" in path, "`replicaId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetReplicas/"),
               (kind: VariableSegment, value: "replicaId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportReplicaHealth_566024(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaId: JString (required)
  ##            : The identifier of the replica.
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `replicaId` field"
  var valid_566026 = path.getOrDefault("replicaId")
  valid_566026 = validateParameter(valid_566026, JString, required = true,
                                 default = nil)
  if valid_566026 != nil:
    section.add "replicaId", valid_566026
  var valid_566027 = path.getOrDefault("partitionId")
  valid_566027 = validateParameter(valid_566027, JString, required = true,
                                 default = nil)
  if valid_566027 != nil:
    section.add "partitionId", valid_566027
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   ReplicaHealthReportServiceKind: JString (required)
  ##                                 : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_566028 = query.getOrDefault("Immediate")
  valid_566028 = validateParameter(valid_566028, JBool, required = false,
                                 default = newJBool(false))
  if valid_566028 != nil:
    section.add "Immediate", valid_566028
  assert query != nil, "query argument is necessary due to required `ReplicaHealthReportServiceKind` field"
  var valid_566029 = query.getOrDefault("ReplicaHealthReportServiceKind")
  valid_566029 = validateParameter(valid_566029, JString, required = true,
                                 default = newJString("Stateful"))
  if valid_566029 != nil:
    section.add "ReplicaHealthReportServiceKind", valid_566029
  var valid_566030 = query.getOrDefault("api-version")
  valid_566030 = validateParameter(valid_566030, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566030 != nil:
    section.add "api-version", valid_566030
  var valid_566031 = query.getOrDefault("timeout")
  valid_566031 = validateParameter(valid_566031, JInt, required = false,
                                 default = newJInt(60))
  if valid_566031 != nil:
    section.add "timeout", valid_566031
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566033: Call_ReportReplicaHealth_566023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_566033.validator(path, query, header, formData, body)
  let scheme = call_566033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566033.url(scheme.get, call_566033.host, call_566033.base,
                         call_566033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566033, url, valid)

proc call*(call_566034: Call_ReportReplicaHealth_566023; replicaId: string;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          ReplicaHealthReportServiceKind: string = "Stateful";
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## reportReplicaHealth
  ## Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
  ##   replicaId: string (required)
  ##            : The identifier of the replica.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   ReplicaHealthReportServiceKind: string (required)
  ##                                 : The kind of service replica (Stateless or Stateful) for which the health is being reported. Following are the possible values.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566035 = newJObject()
  var query_566036 = newJObject()
  var body_566037 = newJObject()
  add(path_566035, "replicaId", newJString(replicaId))
  add(query_566036, "Immediate", newJBool(Immediate))
  add(query_566036, "ReplicaHealthReportServiceKind",
      newJString(ReplicaHealthReportServiceKind))
  if HealthInformation != nil:
    body_566037 = HealthInformation
  add(query_566036, "api-version", newJString(apiVersion))
  add(query_566036, "timeout", newJInt(timeout))
  add(path_566035, "partitionId", newJString(partitionId))
  result = call_566034.call(path_566035, query_566036, nil, nil, body_566037)

var reportReplicaHealth* = Call_ReportReplicaHealth_566023(
    name: "reportReplicaHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth",
    validator: validate_ReportReplicaHealth_566024, base: "",
    url: url_ReportReplicaHealth_566025, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionRestoreProgress_566038 = ref object of OpenApiRestCall_563566
proc url_GetPartitionRestoreProgress_566040(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetRestoreProgress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionRestoreProgress_566039(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566041 = path.getOrDefault("partitionId")
  valid_566041 = validateParameter(valid_566041, JString, required = true,
                                 default = nil)
  if valid_566041 != nil:
    section.add "partitionId", valid_566041
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566042 = query.getOrDefault("api-version")
  valid_566042 = validateParameter(valid_566042, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566042 != nil:
    section.add "api-version", valid_566042
  var valid_566043 = query.getOrDefault("timeout")
  valid_566043 = validateParameter(valid_566043, JInt, required = false,
                                 default = newJInt(60))
  if valid_566043 != nil:
    section.add "timeout", valid_566043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566044: Call_GetPartitionRestoreProgress_566038; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ## 
  let valid = call_566044.validator(path, query, header, formData, body)
  let scheme = call_566044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566044.url(scheme.get, call_566044.host, call_566044.base,
                         call_566044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566044, url, valid)

proc call*(call_566045: Call_GetPartitionRestoreProgress_566038;
          partitionId: string; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getPartitionRestoreProgress
  ## Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566046 = newJObject()
  var query_566047 = newJObject()
  add(query_566047, "api-version", newJString(apiVersion))
  add(query_566047, "timeout", newJInt(timeout))
  add(path_566046, "partitionId", newJString(partitionId))
  result = call_566045.call(path_566046, query_566047, nil, nil, nil)

var getPartitionRestoreProgress* = Call_GetPartitionRestoreProgress_566038(
    name: "getPartitionRestoreProgress", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetRestoreProgress",
    validator: validate_GetPartitionRestoreProgress_566039, base: "",
    url: url_GetPartitionRestoreProgress_566040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceNameInfo_566048 = ref object of OpenApiRestCall_563566
proc url_GetServiceNameInfo_566050(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/GetServiceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceNameInfo_566049(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566051 = path.getOrDefault("partitionId")
  valid_566051 = validateParameter(valid_566051, JString, required = true,
                                 default = nil)
  if valid_566051 != nil:
    section.add "partitionId", valid_566051
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566052 = query.getOrDefault("api-version")
  valid_566052 = validateParameter(valid_566052, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566052 != nil:
    section.add "api-version", valid_566052
  var valid_566053 = query.getOrDefault("timeout")
  valid_566053 = validateParameter(valid_566053, JInt, required = false,
                                 default = newJInt(60))
  if valid_566053 != nil:
    section.add "timeout", valid_566053
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566054: Call_GetServiceNameInfo_566048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ## 
  let valid = call_566054.validator(path, query, header, formData, body)
  let scheme = call_566054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566054.url(scheme.get, call_566054.host, call_566054.base,
                         call_566054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566054, url, valid)

proc call*(call_566055: Call_GetServiceNameInfo_566048; partitionId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceNameInfo
  ## Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist in the cluster.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566056 = newJObject()
  var query_566057 = newJObject()
  add(query_566057, "api-version", newJString(apiVersion))
  add(query_566057, "timeout", newJInt(timeout))
  add(path_566056, "partitionId", newJString(partitionId))
  result = call_566055.call(path_566056, query_566057, nil, nil, nil)

var getServiceNameInfo* = Call_GetServiceNameInfo_566048(
    name: "getServiceNameInfo", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/GetServiceName",
    validator: validate_GetServiceNameInfo_566049, base: "",
    url: url_GetServiceNameInfo_566050, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverPartition_566058 = ref object of OpenApiRestCall_563566
proc url_RecoverPartition_566060(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverPartition_566059(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566061 = path.getOrDefault("partitionId")
  valid_566061 = validateParameter(valid_566061, JString, required = true,
                                 default = nil)
  if valid_566061 != nil:
    section.add "partitionId", valid_566061
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566062 = query.getOrDefault("api-version")
  valid_566062 = validateParameter(valid_566062, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566062 != nil:
    section.add "api-version", valid_566062
  var valid_566063 = query.getOrDefault("timeout")
  valid_566063 = validateParameter(valid_566063, JInt, required = false,
                                 default = newJInt(60))
  if valid_566063 != nil:
    section.add "timeout", valid_566063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566064: Call_RecoverPartition_566058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_566064.validator(path, query, header, formData, body)
  let scheme = call_566064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566064.url(scheme.get, call_566064.host, call_566064.base,
                         call_566064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566064, url, valid)

proc call*(call_566065: Call_RecoverPartition_566058; partitionId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## recoverPartition
  ## This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566066 = newJObject()
  var query_566067 = newJObject()
  add(query_566067, "api-version", newJString(apiVersion))
  add(query_566067, "timeout", newJInt(timeout))
  add(path_566066, "partitionId", newJString(partitionId))
  result = call_566065.call(path_566066, query_566067, nil, nil, nil)

var recoverPartition* = Call_RecoverPartition_566058(name: "recoverPartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Recover",
    validator: validate_RecoverPartition_566059, base: "",
    url: url_RecoverPartition_566060, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportPartitionHealth_566068 = ref object of OpenApiRestCall_563566
proc url_ReportPartitionHealth_566070(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportPartitionHealth_566069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566071 = path.getOrDefault("partitionId")
  valid_566071 = validateParameter(valid_566071, JString, required = true,
                                 default = nil)
  if valid_566071 != nil:
    section.add "partitionId", valid_566071
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_566072 = query.getOrDefault("Immediate")
  valid_566072 = validateParameter(valid_566072, JBool, required = false,
                                 default = newJBool(false))
  if valid_566072 != nil:
    section.add "Immediate", valid_566072
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566073 = query.getOrDefault("api-version")
  valid_566073 = validateParameter(valid_566073, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566073 != nil:
    section.add "api-version", valid_566073
  var valid_566074 = query.getOrDefault("timeout")
  valid_566074 = validateParameter(valid_566074, JInt, required = false,
                                 default = newJInt(60))
  if valid_566074 != nil:
    section.add "timeout", valid_566074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566076: Call_ReportPartitionHealth_566068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_566076.validator(path, query, header, formData, body)
  let scheme = call_566076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566076.url(scheme.get, call_566076.host, call_566076.base,
                         call_566076.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566076, url, valid)

proc call*(call_566077: Call_ReportPartitionHealth_566068;
          HealthInformation: JsonNode; partitionId: string; Immediate: bool = false;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## reportPartitionHealth
  ## Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566078 = newJObject()
  var query_566079 = newJObject()
  var body_566080 = newJObject()
  add(query_566079, "Immediate", newJBool(Immediate))
  if HealthInformation != nil:
    body_566080 = HealthInformation
  add(query_566079, "api-version", newJString(apiVersion))
  add(query_566079, "timeout", newJInt(timeout))
  add(path_566078, "partitionId", newJString(partitionId))
  result = call_566077.call(path_566078, query_566079, nil, nil, body_566080)

var reportPartitionHealth* = Call_ReportPartitionHealth_566068(
    name: "reportPartitionHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ReportHealth",
    validator: validate_ReportPartitionHealth_566069, base: "",
    url: url_ReportPartitionHealth_566070, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResetPartitionLoad_566081 = ref object of OpenApiRestCall_563566
proc url_ResetPartitionLoad_566083(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResetLoad")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResetPartitionLoad_566082(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566084 = path.getOrDefault("partitionId")
  valid_566084 = validateParameter(valid_566084, JString, required = true,
                                 default = nil)
  if valid_566084 != nil:
    section.add "partitionId", valid_566084
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566085 = query.getOrDefault("api-version")
  valid_566085 = validateParameter(valid_566085, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566085 != nil:
    section.add "api-version", valid_566085
  var valid_566086 = query.getOrDefault("timeout")
  valid_566086 = validateParameter(valid_566086, JInt, required = false,
                                 default = newJInt(60))
  if valid_566086 != nil:
    section.add "timeout", valid_566086
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566087: Call_ResetPartitionLoad_566081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ## 
  let valid = call_566087.validator(path, query, header, formData, body)
  let scheme = call_566087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566087.url(scheme.get, call_566087.host, call_566087.base,
                         call_566087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566087, url, valid)

proc call*(call_566088: Call_ResetPartitionLoad_566081; partitionId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## resetPartitionLoad
  ## Resets the current load of a Service Fabric partition to the default load for the service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566089 = newJObject()
  var query_566090 = newJObject()
  add(query_566090, "api-version", newJString(apiVersion))
  add(query_566090, "timeout", newJInt(timeout))
  add(path_566089, "partitionId", newJString(partitionId))
  result = call_566088.call(path_566089, query_566090, nil, nil, nil)

var resetPartitionLoad* = Call_ResetPartitionLoad_566081(
    name: "resetPartitionLoad", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResetLoad",
    validator: validate_ResetPartitionLoad_566082, base: "",
    url: url_ResetPartitionLoad_566083, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestorePartition_566091 = ref object of OpenApiRestCall_563566
proc url_RestorePartition_566093(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/Restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RestorePartition_566092(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566094 = path.getOrDefault("partitionId")
  valid_566094 = validateParameter(valid_566094, JString, required = true,
                                 default = nil)
  if valid_566094 != nil:
    section.add "partitionId", valid_566094
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreTimeout: JInt
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_566095 = query.getOrDefault("RestoreTimeout")
  valid_566095 = validateParameter(valid_566095, JInt, required = false,
                                 default = newJInt(10))
  if valid_566095 != nil:
    section.add "RestoreTimeout", valid_566095
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566096 = query.getOrDefault("api-version")
  valid_566096 = validateParameter(valid_566096, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566096 != nil:
    section.add "api-version", valid_566096
  var valid_566097 = query.getOrDefault("timeout")
  valid_566097 = validateParameter(valid_566097, JInt, required = false,
                                 default = newJInt(60))
  if valid_566097 != nil:
    section.add "timeout", valid_566097
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566099: Call_RestorePartition_566091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ## 
  let valid = call_566099.validator(path, query, header, formData, body)
  let scheme = call_566099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566099.url(scheme.get, call_566099.host, call_566099.base,
                         call_566099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566099, url, valid)

proc call*(call_566100: Call_RestorePartition_566091;
          RestorePartitionDescription: JsonNode; partitionId: string;
          RestoreTimeout: int = 10; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## restorePartition
  ## Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation. 
  ## In case, the operation times out, specify a greater restore timeout value in the query parameter.
  ##   RestoreTimeout: int
  ##                 : Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   RestorePartitionDescription: JObject (required)
  ##                              : Describes the parameters to restore the partition.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566101 = newJObject()
  var query_566102 = newJObject()
  var body_566103 = newJObject()
  add(query_566102, "RestoreTimeout", newJInt(RestoreTimeout))
  add(query_566102, "api-version", newJString(apiVersion))
  add(query_566102, "timeout", newJInt(timeout))
  if RestorePartitionDescription != nil:
    body_566103 = RestorePartitionDescription
  add(path_566101, "partitionId", newJString(partitionId))
  result = call_566100.call(path_566101, query_566102, nil, nil, body_566103)

var restorePartition* = Call_RestorePartition_566091(name: "restorePartition",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Partitions/{partitionId}/$/Restore",
    validator: validate_RestorePartition_566092, base: "",
    url: url_RestorePartition_566093, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumePartitionBackup_566104 = ref object of OpenApiRestCall_563566
proc url_ResumePartitionBackup_566106(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumePartitionBackup_566105(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566107 = path.getOrDefault("partitionId")
  valid_566107 = validateParameter(valid_566107, JString, required = true,
                                 default = nil)
  if valid_566107 != nil:
    section.add "partitionId", valid_566107
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566108 = query.getOrDefault("api-version")
  valid_566108 = validateParameter(valid_566108, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566108 != nil:
    section.add "api-version", valid_566108
  var valid_566109 = query.getOrDefault("timeout")
  valid_566109 = validateParameter(valid_566109, JInt, required = false,
                                 default = newJInt(60))
  if valid_566109 != nil:
    section.add "timeout", valid_566109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566110: Call_ResumePartitionBackup_566104; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_566110.validator(path, query, header, formData, body)
  let scheme = call_566110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566110.url(scheme.get, call_566110.host, call_566110.base,
                         call_566110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566110, url, valid)

proc call*(call_566111: Call_ResumePartitionBackup_566104; partitionId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## resumePartitionBackup
  ## The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566112 = newJObject()
  var query_566113 = newJObject()
  add(query_566113, "api-version", newJString(apiVersion))
  add(query_566113, "timeout", newJInt(timeout))
  add(path_566112, "partitionId", newJString(partitionId))
  result = call_566111.call(path_566112, query_566113, nil, nil, nil)

var resumePartitionBackup* = Call_ResumePartitionBackup_566104(
    name: "resumePartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/ResumeBackup",
    validator: validate_ResumePartitionBackup_566105, base: "",
    url: url_ResumePartitionBackup_566106, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendPartitionBackup_566114 = ref object of OpenApiRestCall_563566
proc url_SuspendPartitionBackup_566116(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "partitionId" in path, "`partitionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Partitions/"),
               (kind: VariableSegment, value: "partitionId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendPartitionBackup_566115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   partitionId: JString (required)
  ##              : The identity of the partition.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `partitionId` field"
  var valid_566117 = path.getOrDefault("partitionId")
  valid_566117 = validateParameter(valid_566117, JString, required = true,
                                 default = nil)
  if valid_566117 != nil:
    section.add "partitionId", valid_566117
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566118 = query.getOrDefault("api-version")
  valid_566118 = validateParameter(valid_566118, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566118 != nil:
    section.add "api-version", valid_566118
  var valid_566119 = query.getOrDefault("timeout")
  valid_566119 = validateParameter(valid_566119, JInt, required = false,
                                 default = newJInt(60))
  if valid_566119 != nil:
    section.add "timeout", valid_566119
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566120: Call_SuspendPartitionBackup_566114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ## 
  let valid = call_566120.validator(path, query, header, formData, body)
  let scheme = call_566120.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566120.url(scheme.get, call_566120.host, call_566120.base,
                         call_566120.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566120, url, valid)

proc call*(call_566121: Call_SuspendPartitionBackup_566114; partitionId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## suspendPartitionBackup
  ## The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   partitionId: string (required)
  ##              : The identity of the partition.
  var path_566122 = newJObject()
  var query_566123 = newJObject()
  add(query_566123, "api-version", newJString(apiVersion))
  add(query_566123, "timeout", newJInt(timeout))
  add(path_566122, "partitionId", newJString(partitionId))
  result = call_566121.call(path_566122, query_566123, nil, nil, nil)

var suspendPartitionBackup* = Call_SuspendPartitionBackup_566114(
    name: "suspendPartitionBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Partitions/{partitionId}/$/SuspendBackup",
    validator: validate_SuspendPartitionBackup_566115, base: "",
    url: url_SuspendPartitionBackup_566116, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationList_566124 = ref object of OpenApiRestCall_563566
proc url_MeshApplicationList_566126(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshApplicationList_566125(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566127 = query.getOrDefault("api-version")
  valid_566127 = validateParameter(valid_566127, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566127 != nil:
    section.add "api-version", valid_566127
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566128: Call_MeshApplicationList_566124; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ## 
  let valid = call_566128.validator(path, query, header, formData, body)
  let scheme = call_566128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566128.url(scheme.get, call_566128.host, call_566128.base,
                         call_566128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566128, url, valid)

proc call*(call_566129: Call_MeshApplicationList_566124;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationList
  ## Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_566130 = newJObject()
  add(query_566130, "api-version", newJString(apiVersion))
  result = call_566129.call(nil, query_566130, nil, nil, nil)

var meshApplicationList* = Call_MeshApplicationList_566124(
    name: "meshApplicationList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications",
    validator: validate_MeshApplicationList_566125, base: "",
    url: url_MeshApplicationList_566126, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationCreateOrUpdate_566140 = ref object of OpenApiRestCall_563566
proc url_MeshApplicationCreateOrUpdate_566142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationCreateOrUpdate_566141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_566143 = path.getOrDefault("applicationResourceName")
  valid_566143 = validateParameter(valid_566143, JString, required = true,
                                 default = nil)
  if valid_566143 != nil:
    section.add "applicationResourceName", valid_566143
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566144 = query.getOrDefault("api-version")
  valid_566144 = validateParameter(valid_566144, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566144 != nil:
    section.add "api-version", valid_566144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566146: Call_MeshApplicationCreateOrUpdate_566140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_566146.validator(path, query, header, formData, body)
  let scheme = call_566146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566146.url(scheme.get, call_566146.host, call_566146.base,
                         call_566146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566146, url, valid)

proc call*(call_566147: Call_MeshApplicationCreateOrUpdate_566140;
          applicationResourceDescription: JsonNode;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationCreateOrUpdate
  ## Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceDescription: JObject (required)
  ##                                 : Description for creating a Application resource.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_566148 = newJObject()
  var query_566149 = newJObject()
  var body_566150 = newJObject()
  add(query_566149, "api-version", newJString(apiVersion))
  if applicationResourceDescription != nil:
    body_566150 = applicationResourceDescription
  add(path_566148, "applicationResourceName", newJString(applicationResourceName))
  result = call_566147.call(path_566148, query_566149, nil, nil, body_566150)

var meshApplicationCreateOrUpdate* = Call_MeshApplicationCreateOrUpdate_566140(
    name: "meshApplicationCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationCreateOrUpdate_566141, base: "",
    url: url_MeshApplicationCreateOrUpdate_566142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationGet_566131 = ref object of OpenApiRestCall_563566
proc url_MeshApplicationGet_566133(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationGet_566132(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_566134 = path.getOrDefault("applicationResourceName")
  valid_566134 = validateParameter(valid_566134, JString, required = true,
                                 default = nil)
  if valid_566134 != nil:
    section.add "applicationResourceName", valid_566134
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566135 = query.getOrDefault("api-version")
  valid_566135 = validateParameter(valid_566135, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566135 != nil:
    section.add "api-version", valid_566135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566136: Call_MeshApplicationGet_566131; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ## 
  let valid = call_566136.validator(path, query, header, formData, body)
  let scheme = call_566136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566136.url(scheme.get, call_566136.host, call_566136.base,
                         call_566136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566136, url, valid)

proc call*(call_566137: Call_MeshApplicationGet_566131;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationGet
  ## Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_566138 = newJObject()
  var query_566139 = newJObject()
  add(query_566139, "api-version", newJString(apiVersion))
  add(path_566138, "applicationResourceName", newJString(applicationResourceName))
  result = call_566137.call(path_566138, query_566139, nil, nil, nil)

var meshApplicationGet* = Call_MeshApplicationGet_566131(
    name: "meshApplicationGet", meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationGet_566132, base: "",
    url: url_MeshApplicationGet_566133, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshApplicationDelete_566151 = ref object of OpenApiRestCall_563566
proc url_MeshApplicationDelete_566153(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshApplicationDelete_566152(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the Application resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_566154 = path.getOrDefault("applicationResourceName")
  valid_566154 = validateParameter(valid_566154, JString, required = true,
                                 default = nil)
  if valid_566154 != nil:
    section.add "applicationResourceName", valid_566154
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566155 = query.getOrDefault("api-version")
  valid_566155 = validateParameter(valid_566155, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566155 != nil:
    section.add "api-version", valid_566155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566156: Call_MeshApplicationDelete_566151; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Application resource identified by the name.
  ## 
  let valid = call_566156.validator(path, query, header, formData, body)
  let scheme = call_566156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566156.url(scheme.get, call_566156.host, call_566156.base,
                         call_566156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566156, url, valid)

proc call*(call_566157: Call_MeshApplicationDelete_566151;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshApplicationDelete
  ## Deletes the Application resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_566158 = newJObject()
  var query_566159 = newJObject()
  add(query_566159, "api-version", newJString(apiVersion))
  add(path_566158, "applicationResourceName", newJString(applicationResourceName))
  result = call_566157.call(path_566158, query_566159, nil, nil, nil)

var meshApplicationDelete* = Call_MeshApplicationDelete_566151(
    name: "meshApplicationDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}",
    validator: validate_MeshApplicationDelete_566152, base: "",
    url: url_MeshApplicationDelete_566153, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceList_566160 = ref object of OpenApiRestCall_563566
proc url_MeshServiceList_566162(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceList_566161(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_566163 = path.getOrDefault("applicationResourceName")
  valid_566163 = validateParameter(valid_566163, JString, required = true,
                                 default = nil)
  if valid_566163 != nil:
    section.add "applicationResourceName", valid_566163
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566164 = query.getOrDefault("api-version")
  valid_566164 = validateParameter(valid_566164, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566164 != nil:
    section.add "api-version", valid_566164
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566165: Call_MeshServiceList_566160; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ## 
  let valid = call_566165.validator(path, query, header, formData, body)
  let scheme = call_566165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566165.url(scheme.get, call_566165.host, call_566165.base,
                         call_566165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566165, url, valid)

proc call*(call_566166: Call_MeshServiceList_566160;
          applicationResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceList
  ## Gets the information about all services of an application resource. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  var path_566167 = newJObject()
  var query_566168 = newJObject()
  add(query_566168, "api-version", newJString(apiVersion))
  add(path_566167, "applicationResourceName", newJString(applicationResourceName))
  result = call_566166.call(path_566167, query_566168, nil, nil, nil)

var meshServiceList* = Call_MeshServiceList_566160(name: "meshServiceList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Applications/{applicationResourceName}/Services",
    validator: validate_MeshServiceList_566161, base: "", url: url_MeshServiceList_566162,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceGet_566169 = ref object of OpenApiRestCall_563566
proc url_MeshServiceGet_566171(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceGet_566170(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_566172 = path.getOrDefault("applicationResourceName")
  valid_566172 = validateParameter(valid_566172, JString, required = true,
                                 default = nil)
  if valid_566172 != nil:
    section.add "applicationResourceName", valid_566172
  var valid_566173 = path.getOrDefault("serviceResourceName")
  valid_566173 = validateParameter(valid_566173, JString, required = true,
                                 default = nil)
  if valid_566173 != nil:
    section.add "serviceResourceName", valid_566173
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566174 = query.getOrDefault("api-version")
  valid_566174 = validateParameter(valid_566174, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566174 != nil:
    section.add "api-version", valid_566174
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566175: Call_MeshServiceGet_566169; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ## 
  let valid = call_566175.validator(path, query, header, formData, body)
  let scheme = call_566175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566175.url(scheme.get, call_566175.host, call_566175.base,
                         call_566175.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566175, url, valid)

proc call*(call_566176: Call_MeshServiceGet_566169;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceGet
  ## Gets the information about the Service resource with the given name. The information include the description and other properties of the Service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_566177 = newJObject()
  var query_566178 = newJObject()
  add(query_566178, "api-version", newJString(apiVersion))
  add(path_566177, "applicationResourceName", newJString(applicationResourceName))
  add(path_566177, "serviceResourceName", newJString(serviceResourceName))
  result = call_566176.call(path_566177, query_566178, nil, nil, nil)

var meshServiceGet* = Call_MeshServiceGet_566169(name: "meshServiceGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}",
    validator: validate_MeshServiceGet_566170, base: "", url: url_MeshServiceGet_566171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaList_566179 = ref object of OpenApiRestCall_563566
proc url_MeshServiceReplicaList_566181(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaList_566180(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `applicationResourceName` field"
  var valid_566182 = path.getOrDefault("applicationResourceName")
  valid_566182 = validateParameter(valid_566182, JString, required = true,
                                 default = nil)
  if valid_566182 != nil:
    section.add "applicationResourceName", valid_566182
  var valid_566183 = path.getOrDefault("serviceResourceName")
  valid_566183 = validateParameter(valid_566183, JString, required = true,
                                 default = nil)
  if valid_566183 != nil:
    section.add "serviceResourceName", valid_566183
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566184 = query.getOrDefault("api-version")
  valid_566184 = validateParameter(valid_566184, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566184 != nil:
    section.add "api-version", valid_566184
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566185: Call_MeshServiceReplicaList_566179; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ## 
  let valid = call_566185.validator(path, query, header, formData, body)
  let scheme = call_566185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566185.url(scheme.get, call_566185.host, call_566185.base,
                         call_566185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566185, url, valid)

proc call*(call_566186: Call_MeshServiceReplicaList_566179;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaList
  ## Gets the information about all replicas of a service. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_566187 = newJObject()
  var query_566188 = newJObject()
  add(query_566188, "api-version", newJString(apiVersion))
  add(path_566187, "applicationResourceName", newJString(applicationResourceName))
  add(path_566187, "serviceResourceName", newJString(serviceResourceName))
  result = call_566186.call(path_566187, query_566188, nil, nil, nil)

var meshServiceReplicaList* = Call_MeshServiceReplicaList_566179(
    name: "meshServiceReplicaList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas",
    validator: validate_MeshServiceReplicaList_566180, base: "",
    url: url_MeshServiceReplicaList_566181, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshServiceReplicaGet_566189 = ref object of OpenApiRestCall_563566
proc url_MeshServiceReplicaGet_566191(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshServiceReplicaGet_566190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `replicaName` field"
  var valid_566192 = path.getOrDefault("replicaName")
  valid_566192 = validateParameter(valid_566192, JString, required = true,
                                 default = nil)
  if valid_566192 != nil:
    section.add "replicaName", valid_566192
  var valid_566193 = path.getOrDefault("applicationResourceName")
  valid_566193 = validateParameter(valid_566193, JString, required = true,
                                 default = nil)
  if valid_566193 != nil:
    section.add "applicationResourceName", valid_566193
  var valid_566194 = path.getOrDefault("serviceResourceName")
  valid_566194 = validateParameter(valid_566194, JString, required = true,
                                 default = nil)
  if valid_566194 != nil:
    section.add "serviceResourceName", valid_566194
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566195 = query.getOrDefault("api-version")
  valid_566195 = validateParameter(valid_566195, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566195 != nil:
    section.add "api-version", valid_566195
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566196: Call_MeshServiceReplicaGet_566189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ## 
  let valid = call_566196.validator(path, query, header, formData, body)
  let scheme = call_566196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566196.url(scheme.get, call_566196.host, call_566196.base,
                         call_566196.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566196, url, valid)

proc call*(call_566197: Call_MeshServiceReplicaGet_566189; replicaName: string;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshServiceReplicaGet
  ## Gets the information about the service replica with the given name. The information include the description and other properties of the service replica.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_566198 = newJObject()
  var query_566199 = newJObject()
  add(query_566199, "api-version", newJString(apiVersion))
  add(path_566198, "replicaName", newJString(replicaName))
  add(path_566198, "applicationResourceName", newJString(applicationResourceName))
  add(path_566198, "serviceResourceName", newJString(serviceResourceName))
  result = call_566197.call(path_566198, query_566199, nil, nil, nil)

var meshServiceReplicaGet* = Call_MeshServiceReplicaGet_566189(
    name: "meshServiceReplicaGet", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}",
    validator: validate_MeshServiceReplicaGet_566190, base: "",
    url: url_MeshServiceReplicaGet_566191, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshCodePackageGetContainerLogs_566200 = ref object of OpenApiRestCall_563566
proc url_MeshCodePackageGetContainerLogs_566202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "applicationResourceName" in path,
        "`applicationResourceName` is a required path parameter"
  assert "serviceResourceName" in path,
        "`serviceResourceName` is a required path parameter"
  assert "replicaName" in path, "`replicaName` is a required path parameter"
  assert "codePackageName" in path, "`codePackageName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Applications/"),
               (kind: VariableSegment, value: "applicationResourceName"),
               (kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceResourceName"),
               (kind: ConstantSegment, value: "/Replicas/"),
               (kind: VariableSegment, value: "replicaName"),
               (kind: ConstantSegment, value: "/CodePackages/"),
               (kind: VariableSegment, value: "codePackageName"),
               (kind: ConstantSegment, value: "/Logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshCodePackageGetContainerLogs_566201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   codePackageName: JString (required)
  ##                  : The name of code package of the service.
  ##   replicaName: JString (required)
  ##              : Service Fabric replica name.
  ##   applicationResourceName: JString (required)
  ##                          : The identity of the application.
  ##   serviceResourceName: JString (required)
  ##                      : The identity of the service.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `codePackageName` field"
  var valid_566203 = path.getOrDefault("codePackageName")
  valid_566203 = validateParameter(valid_566203, JString, required = true,
                                 default = nil)
  if valid_566203 != nil:
    section.add "codePackageName", valid_566203
  var valid_566204 = path.getOrDefault("replicaName")
  valid_566204 = validateParameter(valid_566204, JString, required = true,
                                 default = nil)
  if valid_566204 != nil:
    section.add "replicaName", valid_566204
  var valid_566205 = path.getOrDefault("applicationResourceName")
  valid_566205 = validateParameter(valid_566205, JString, required = true,
                                 default = nil)
  if valid_566205 != nil:
    section.add "applicationResourceName", valid_566205
  var valid_566206 = path.getOrDefault("serviceResourceName")
  valid_566206 = validateParameter(valid_566206, JString, required = true,
                                 default = nil)
  if valid_566206 != nil:
    section.add "serviceResourceName", valid_566206
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   Tail: JString
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566207 = query.getOrDefault("api-version")
  valid_566207 = validateParameter(valid_566207, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566207 != nil:
    section.add "api-version", valid_566207
  var valid_566208 = query.getOrDefault("Tail")
  valid_566208 = validateParameter(valid_566208, JString, required = false,
                                 default = nil)
  if valid_566208 != nil:
    section.add "Tail", valid_566208
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566209: Call_MeshCodePackageGetContainerLogs_566200;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logs for the container of the specified code package of the service replica.
  ## 
  let valid = call_566209.validator(path, query, header, formData, body)
  let scheme = call_566209.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566209.url(scheme.get, call_566209.host, call_566209.base,
                         call_566209.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566209, url, valid)

proc call*(call_566210: Call_MeshCodePackageGetContainerLogs_566200;
          codePackageName: string; replicaName: string;
          applicationResourceName: string; serviceResourceName: string;
          apiVersion: string = "6.4-preview"; Tail: string = ""): Recallable =
  ## meshCodePackageGetContainerLogs
  ## Gets the logs for the container of the specified code package of the service replica.
  ##   codePackageName: string (required)
  ##                  : The name of code package of the service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   replicaName: string (required)
  ##              : Service Fabric replica name.
  ##   applicationResourceName: string (required)
  ##                          : The identity of the application.
  ##   Tail: string
  ##       : Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
  ##   serviceResourceName: string (required)
  ##                      : The identity of the service.
  var path_566211 = newJObject()
  var query_566212 = newJObject()
  add(path_566211, "codePackageName", newJString(codePackageName))
  add(query_566212, "api-version", newJString(apiVersion))
  add(path_566211, "replicaName", newJString(replicaName))
  add(path_566211, "applicationResourceName", newJString(applicationResourceName))
  add(query_566212, "Tail", newJString(Tail))
  add(path_566211, "serviceResourceName", newJString(serviceResourceName))
  result = call_566210.call(path_566211, query_566212, nil, nil, nil)

var meshCodePackageGetContainerLogs* = Call_MeshCodePackageGetContainerLogs_566200(
    name: "meshCodePackageGetContainerLogs", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs",
    validator: validate_MeshCodePackageGetContainerLogs_566201, base: "",
    url: url_MeshCodePackageGetContainerLogs_566202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayList_566213 = ref object of OpenApiRestCall_563566
proc url_MeshGatewayList_566215(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshGatewayList_566214(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566216 = query.getOrDefault("api-version")
  valid_566216 = validateParameter(valid_566216, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566216 != nil:
    section.add "api-version", valid_566216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566217: Call_MeshGatewayList_566213; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_566217.validator(path, query, header, formData, body)
  let scheme = call_566217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566217.url(scheme.get, call_566217.host, call_566217.base,
                         call_566217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566217, url, valid)

proc call*(call_566218: Call_MeshGatewayList_566213;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayList
  ## Gets the information about all gateway resources in a given resource group. The information include the description and other properties of the Gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_566219 = newJObject()
  add(query_566219, "api-version", newJString(apiVersion))
  result = call_566218.call(nil, query_566219, nil, nil, nil)

var meshGatewayList* = Call_MeshGatewayList_566213(name: "meshGatewayList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways", validator: validate_MeshGatewayList_566214,
    base: "", url: url_MeshGatewayList_566215, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayCreateOrUpdate_566229 = ref object of OpenApiRestCall_563566
proc url_MeshGatewayCreateOrUpdate_566231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayCreateOrUpdate_566230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_566232 = path.getOrDefault("gatewayResourceName")
  valid_566232 = validateParameter(valid_566232, JString, required = true,
                                 default = nil)
  if valid_566232 != nil:
    section.add "gatewayResourceName", valid_566232
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566233 = query.getOrDefault("api-version")
  valid_566233 = validateParameter(valid_566233, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566233 != nil:
    section.add "api-version", valid_566233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566235: Call_MeshGatewayCreateOrUpdate_566229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ## 
  let valid = call_566235.validator(path, query, header, formData, body)
  let scheme = call_566235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566235.url(scheme.get, call_566235.host, call_566235.base,
                         call_566235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566235, url, valid)

proc call*(call_566236: Call_MeshGatewayCreateOrUpdate_566229;
          gatewayResourceName: string; gatewayResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayCreateOrUpdate
  ## Creates a Gateway resource with the specified name, description and properties. If Gateway resource with the same name exists, then it is updated with the specified description and properties. Use Gateway resource to provide public connectivity to application services.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  ##   gatewayResourceDescription: JObject (required)
  ##                             : Description for creating a Gateway resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var path_566237 = newJObject()
  var query_566238 = newJObject()
  var body_566239 = newJObject()
  add(path_566237, "gatewayResourceName", newJString(gatewayResourceName))
  if gatewayResourceDescription != nil:
    body_566239 = gatewayResourceDescription
  add(query_566238, "api-version", newJString(apiVersion))
  result = call_566236.call(path_566237, query_566238, nil, nil, body_566239)

var meshGatewayCreateOrUpdate* = Call_MeshGatewayCreateOrUpdate_566229(
    name: "meshGatewayCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayCreateOrUpdate_566230, base: "",
    url: url_MeshGatewayCreateOrUpdate_566231,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayGet_566220 = ref object of OpenApiRestCall_563566
proc url_MeshGatewayGet_566222(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayGet_566221(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_566223 = path.getOrDefault("gatewayResourceName")
  valid_566223 = validateParameter(valid_566223, JString, required = true,
                                 default = nil)
  if valid_566223 != nil:
    section.add "gatewayResourceName", valid_566223
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566224 = query.getOrDefault("api-version")
  valid_566224 = validateParameter(valid_566224, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566224 != nil:
    section.add "api-version", valid_566224
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566225: Call_MeshGatewayGet_566220; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ## 
  let valid = call_566225.validator(path, query, header, formData, body)
  let scheme = call_566225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566225.url(scheme.get, call_566225.host, call_566225.base,
                         call_566225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566225, url, valid)

proc call*(call_566226: Call_MeshGatewayGet_566220; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayGet
  ## Gets the information about the Gateway resource with the given name. The information include the description and other properties of the Gateway.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var path_566227 = newJObject()
  var query_566228 = newJObject()
  add(path_566227, "gatewayResourceName", newJString(gatewayResourceName))
  add(query_566228, "api-version", newJString(apiVersion))
  result = call_566226.call(path_566227, query_566228, nil, nil, nil)

var meshGatewayGet* = Call_MeshGatewayGet_566220(name: "meshGatewayGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayGet_566221, base: "", url: url_MeshGatewayGet_566222,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshGatewayDelete_566240 = ref object of OpenApiRestCall_563566
proc url_MeshGatewayDelete_566242(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "gatewayResourceName" in path,
        "`gatewayResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Gateways/"),
               (kind: VariableSegment, value: "gatewayResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshGatewayDelete_566241(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Gateway resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayResourceName: JString (required)
  ##                      : The identity of the gateway.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `gatewayResourceName` field"
  var valid_566243 = path.getOrDefault("gatewayResourceName")
  valid_566243 = validateParameter(valid_566243, JString, required = true,
                                 default = nil)
  if valid_566243 != nil:
    section.add "gatewayResourceName", valid_566243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566244 = query.getOrDefault("api-version")
  valid_566244 = validateParameter(valid_566244, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566244 != nil:
    section.add "api-version", valid_566244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566245: Call_MeshGatewayDelete_566240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Gateway resource identified by the name.
  ## 
  let valid = call_566245.validator(path, query, header, formData, body)
  let scheme = call_566245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566245.url(scheme.get, call_566245.host, call_566245.base,
                         call_566245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566245, url, valid)

proc call*(call_566246: Call_MeshGatewayDelete_566240; gatewayResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshGatewayDelete
  ## Deletes the Gateway resource identified by the name.
  ##   gatewayResourceName: string (required)
  ##                      : The identity of the gateway.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var path_566247 = newJObject()
  var query_566248 = newJObject()
  add(path_566247, "gatewayResourceName", newJString(gatewayResourceName))
  add(query_566248, "api-version", newJString(apiVersion))
  result = call_566246.call(path_566247, query_566248, nil, nil, nil)

var meshGatewayDelete* = Call_MeshGatewayDelete_566240(name: "meshGatewayDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Gateways/{gatewayResourceName}",
    validator: validate_MeshGatewayDelete_566241, base: "",
    url: url_MeshGatewayDelete_566242, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkList_566249 = ref object of OpenApiRestCall_563566
proc url_MeshNetworkList_566251(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshNetworkList_566250(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566252 = query.getOrDefault("api-version")
  valid_566252 = validateParameter(valid_566252, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566252 != nil:
    section.add "api-version", valid_566252
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566253: Call_MeshNetworkList_566249; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ## 
  let valid = call_566253.validator(path, query, header, formData, body)
  let scheme = call_566253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566253.url(scheme.get, call_566253.host, call_566253.base,
                         call_566253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566253, url, valid)

proc call*(call_566254: Call_MeshNetworkList_566249;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkList
  ## Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_566255 = newJObject()
  add(query_566255, "api-version", newJString(apiVersion))
  result = call_566254.call(nil, query_566255, nil, nil, nil)

var meshNetworkList* = Call_MeshNetworkList_566249(name: "meshNetworkList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks", validator: validate_MeshNetworkList_566250,
    base: "", url: url_MeshNetworkList_566251, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkCreateOrUpdate_566265 = ref object of OpenApiRestCall_563566
proc url_MeshNetworkCreateOrUpdate_566267(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkCreateOrUpdate_566266(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_566268 = path.getOrDefault("networkResourceName")
  valid_566268 = validateParameter(valid_566268, JString, required = true,
                                 default = nil)
  if valid_566268 != nil:
    section.add "networkResourceName", valid_566268
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566269 = query.getOrDefault("api-version")
  valid_566269 = validateParameter(valid_566269, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566269 != nil:
    section.add "api-version", valid_566269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566271: Call_MeshNetworkCreateOrUpdate_566265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ## 
  let valid = call_566271.validator(path, query, header, formData, body)
  let scheme = call_566271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566271.url(scheme.get, call_566271.host, call_566271.base,
                         call_566271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566271, url, valid)

proc call*(call_566272: Call_MeshNetworkCreateOrUpdate_566265;
          networkResourceDescription: JsonNode; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkCreateOrUpdate
  ## Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
  ##   networkResourceDescription: JObject (required)
  ##                             : Description for creating a Network resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_566273 = newJObject()
  var query_566274 = newJObject()
  var body_566275 = newJObject()
  if networkResourceDescription != nil:
    body_566275 = networkResourceDescription
  add(query_566274, "api-version", newJString(apiVersion))
  add(path_566273, "networkResourceName", newJString(networkResourceName))
  result = call_566272.call(path_566273, query_566274, nil, nil, body_566275)

var meshNetworkCreateOrUpdate* = Call_MeshNetworkCreateOrUpdate_566265(
    name: "meshNetworkCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkCreateOrUpdate_566266, base: "",
    url: url_MeshNetworkCreateOrUpdate_566267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkGet_566256 = ref object of OpenApiRestCall_563566
proc url_MeshNetworkGet_566258(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkGet_566257(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_566259 = path.getOrDefault("networkResourceName")
  valid_566259 = validateParameter(valid_566259, JString, required = true,
                                 default = nil)
  if valid_566259 != nil:
    section.add "networkResourceName", valid_566259
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566260 = query.getOrDefault("api-version")
  valid_566260 = validateParameter(valid_566260, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566260 != nil:
    section.add "api-version", valid_566260
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566261: Call_MeshNetworkGet_566256; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ## 
  let valid = call_566261.validator(path, query, header, formData, body)
  let scheme = call_566261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566261.url(scheme.get, call_566261.host, call_566261.base,
                         call_566261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566261, url, valid)

proc call*(call_566262: Call_MeshNetworkGet_566256; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkGet
  ## Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_566263 = newJObject()
  var query_566264 = newJObject()
  add(query_566264, "api-version", newJString(apiVersion))
  add(path_566263, "networkResourceName", newJString(networkResourceName))
  result = call_566262.call(path_566263, query_566264, nil, nil, nil)

var meshNetworkGet* = Call_MeshNetworkGet_566256(name: "meshNetworkGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkGet_566257, base: "", url: url_MeshNetworkGet_566258,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshNetworkDelete_566276 = ref object of OpenApiRestCall_563566
proc url_MeshNetworkDelete_566278(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "networkResourceName" in path,
        "`networkResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Networks/"),
               (kind: VariableSegment, value: "networkResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshNetworkDelete_566277(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes the Network resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   networkResourceName: JString (required)
  ##                      : The identity of the network.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `networkResourceName` field"
  var valid_566279 = path.getOrDefault("networkResourceName")
  valid_566279 = validateParameter(valid_566279, JString, required = true,
                                 default = nil)
  if valid_566279 != nil:
    section.add "networkResourceName", valid_566279
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566280 = query.getOrDefault("api-version")
  valid_566280 = validateParameter(valid_566280, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566280 != nil:
    section.add "api-version", valid_566280
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566281: Call_MeshNetworkDelete_566276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Network resource identified by the name.
  ## 
  let valid = call_566281.validator(path, query, header, formData, body)
  let scheme = call_566281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566281.url(scheme.get, call_566281.host, call_566281.base,
                         call_566281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566281, url, valid)

proc call*(call_566282: Call_MeshNetworkDelete_566276; networkResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshNetworkDelete
  ## Deletes the Network resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   networkResourceName: string (required)
  ##                      : The identity of the network.
  var path_566283 = newJObject()
  var query_566284 = newJObject()
  add(query_566284, "api-version", newJString(apiVersion))
  add(path_566283, "networkResourceName", newJString(networkResourceName))
  result = call_566282.call(path_566283, query_566284, nil, nil, nil)

var meshNetworkDelete* = Call_MeshNetworkDelete_566276(name: "meshNetworkDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Networks/{networkResourceName}",
    validator: validate_MeshNetworkDelete_566277, base: "",
    url: url_MeshNetworkDelete_566278, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretList_566285 = ref object of OpenApiRestCall_563566
proc url_MeshSecretList_566287(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshSecretList_566286(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566288 = query.getOrDefault("api-version")
  valid_566288 = validateParameter(valid_566288, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566288 != nil:
    section.add "api-version", valid_566288
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566289: Call_MeshSecretList_566285; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ## 
  let valid = call_566289.validator(path, query, header, formData, body)
  let scheme = call_566289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566289.url(scheme.get, call_566289.host, call_566289.base,
                         call_566289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566289, url, valid)

proc call*(call_566290: Call_MeshSecretList_566285;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretList
  ## Gets the information about all secret resources in a given resource group. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_566291 = newJObject()
  add(query_566291, "api-version", newJString(apiVersion))
  result = call_566290.call(nil, query_566291, nil, nil, nil)

var meshSecretList* = Call_MeshSecretList_566285(name: "meshSecretList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets", validator: validate_MeshSecretList_566286,
    base: "", url: url_MeshSecretList_566287, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretCreateOrUpdate_566301 = ref object of OpenApiRestCall_563566
proc url_MeshSecretCreateOrUpdate_566303(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretCreateOrUpdate_566302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566304 = path.getOrDefault("secretResourceName")
  valid_566304 = validateParameter(valid_566304, JString, required = true,
                                 default = nil)
  if valid_566304 != nil:
    section.add "secretResourceName", valid_566304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566305 = query.getOrDefault("api-version")
  valid_566305 = validateParameter(valid_566305, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566305 != nil:
    section.add "api-version", valid_566305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566307: Call_MeshSecretCreateOrUpdate_566301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ## 
  let valid = call_566307.validator(path, query, header, formData, body)
  let scheme = call_566307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566307.url(scheme.get, call_566307.host, call_566307.base,
                         call_566307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566307, url, valid)

proc call*(call_566308: Call_MeshSecretCreateOrUpdate_566301;
          secretResourceName: string; secretResourceDescription: JsonNode;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretCreateOrUpdate
  ## Creates a Secret resource with the specified name, description and properties. If Secret resource with the same name exists, then it is updated with the specified description and properties. Once created, the kind and contentType of a secret resource cannot be updated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretResourceDescription: JObject (required)
  ##                            : Description for creating a secret resource.
  var path_566309 = newJObject()
  var query_566310 = newJObject()
  var body_566311 = newJObject()
  add(query_566310, "api-version", newJString(apiVersion))
  add(path_566309, "secretResourceName", newJString(secretResourceName))
  if secretResourceDescription != nil:
    body_566311 = secretResourceDescription
  result = call_566308.call(path_566309, query_566310, nil, nil, body_566311)

var meshSecretCreateOrUpdate* = Call_MeshSecretCreateOrUpdate_566301(
    name: "meshSecretCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretCreateOrUpdate_566302, base: "",
    url: url_MeshSecretCreateOrUpdate_566303, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretGet_566292 = ref object of OpenApiRestCall_563566
proc url_MeshSecretGet_566294(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretGet_566293(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566295 = path.getOrDefault("secretResourceName")
  valid_566295 = validateParameter(valid_566295, JString, required = true,
                                 default = nil)
  if valid_566295 != nil:
    section.add "secretResourceName", valid_566295
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566296 = query.getOrDefault("api-version")
  valid_566296 = validateParameter(valid_566296, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566296 != nil:
    section.add "api-version", valid_566296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566297: Call_MeshSecretGet_566292; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ## 
  let valid = call_566297.validator(path, query, header, formData, body)
  let scheme = call_566297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566297.url(scheme.get, call_566297.host, call_566297.base,
                         call_566297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566297, url, valid)

proc call*(call_566298: Call_MeshSecretGet_566292; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretGet
  ## Gets the information about the Secret resource with the given name. The information include the description and other properties of the Secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_566299 = newJObject()
  var query_566300 = newJObject()
  add(query_566300, "api-version", newJString(apiVersion))
  add(path_566299, "secretResourceName", newJString(secretResourceName))
  result = call_566298.call(path_566299, query_566300, nil, nil, nil)

var meshSecretGet* = Call_MeshSecretGet_566292(name: "meshSecretGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretGet_566293, base: "", url: url_MeshSecretGet_566294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretDelete_566312 = ref object of OpenApiRestCall_563566
proc url_MeshSecretDelete_566314(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretDelete_566313(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566315 = path.getOrDefault("secretResourceName")
  valid_566315 = validateParameter(valid_566315, JString, required = true,
                                 default = nil)
  if valid_566315 != nil:
    section.add "secretResourceName", valid_566315
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566316 = query.getOrDefault("api-version")
  valid_566316 = validateParameter(valid_566316, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566316 != nil:
    section.add "api-version", valid_566316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566317: Call_MeshSecretDelete_566312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified Secret resource and all of its named values.
  ## 
  let valid = call_566317.validator(path, query, header, formData, body)
  let scheme = call_566317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566317.url(scheme.get, call_566317.host, call_566317.base,
                         call_566317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566317, url, valid)

proc call*(call_566318: Call_MeshSecretDelete_566312; secretResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretDelete
  ## Deletes the specified Secret resource and all of its named values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_566319 = newJObject()
  var query_566320 = newJObject()
  add(query_566320, "api-version", newJString(apiVersion))
  add(path_566319, "secretResourceName", newJString(secretResourceName))
  result = call_566318.call(path_566319, query_566320, nil, nil, nil)

var meshSecretDelete* = Call_MeshSecretDelete_566312(name: "meshSecretDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}",
    validator: validate_MeshSecretDelete_566313, base: "",
    url: url_MeshSecretDelete_566314, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueList_566321 = ref object of OpenApiRestCall_563566
proc url_MeshSecretValueList_566323(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueList_566322(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566324 = path.getOrDefault("secretResourceName")
  valid_566324 = validateParameter(valid_566324, JString, required = true,
                                 default = nil)
  if valid_566324 != nil:
    section.add "secretResourceName", valid_566324
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566325 = query.getOrDefault("api-version")
  valid_566325 = validateParameter(valid_566325, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566325 != nil:
    section.add "api-version", valid_566325
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566326: Call_MeshSecretValueList_566321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ## 
  let valid = call_566326.validator(path, query, header, formData, body)
  let scheme = call_566326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566326.url(scheme.get, call_566326.host, call_566326.base,
                         call_566326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566326, url, valid)

proc call*(call_566327: Call_MeshSecretValueList_566321;
          secretResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueList
  ## Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  var path_566328 = newJObject()
  var query_566329 = newJObject()
  add(query_566329, "api-version", newJString(apiVersion))
  add(path_566328, "secretResourceName", newJString(secretResourceName))
  result = call_566327.call(path_566328, query_566329, nil, nil, nil)

var meshSecretValueList* = Call_MeshSecretValueList_566321(
    name: "meshSecretValueList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Resources/Secrets/{secretResourceName}/values",
    validator: validate_MeshSecretValueList_566322, base: "",
    url: url_MeshSecretValueList_566323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueAddValue_566340 = ref object of OpenApiRestCall_563566
proc url_MeshSecretValueAddValue_566342(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueAddValue_566341(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566343 = path.getOrDefault("secretResourceName")
  valid_566343 = validateParameter(valid_566343, JString, required = true,
                                 default = nil)
  if valid_566343 != nil:
    section.add "secretResourceName", valid_566343
  var valid_566344 = path.getOrDefault("secretValueResourceName")
  valid_566344 = validateParameter(valid_566344, JString, required = true,
                                 default = nil)
  if valid_566344 != nil:
    section.add "secretValueResourceName", valid_566344
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566345 = query.getOrDefault("api-version")
  valid_566345 = validateParameter(valid_566345, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566345 != nil:
    section.add "api-version", valid_566345
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566347: Call_MeshSecretValueAddValue_566340; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ## 
  let valid = call_566347.validator(path, query, header, formData, body)
  let scheme = call_566347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566347.url(scheme.get, call_566347.host, call_566347.base,
                         call_566347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566347, url, valid)

proc call*(call_566348: Call_MeshSecretValueAddValue_566340;
          secretValueResourceDescription: JsonNode; secretResourceName: string;
          secretValueResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueAddValue
  ## Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed.
  ##   secretValueResourceDescription: JObject (required)
  ##                                 : Description for creating a value of a secret resource.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  var path_566349 = newJObject()
  var query_566350 = newJObject()
  var body_566351 = newJObject()
  if secretValueResourceDescription != nil:
    body_566351 = secretValueResourceDescription
  add(query_566350, "api-version", newJString(apiVersion))
  add(path_566349, "secretResourceName", newJString(secretResourceName))
  add(path_566349, "secretValueResourceName", newJString(secretValueResourceName))
  result = call_566348.call(path_566349, query_566350, nil, nil, body_566351)

var meshSecretValueAddValue* = Call_MeshSecretValueAddValue_566340(
    name: "meshSecretValueAddValue", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueAddValue_566341, base: "",
    url: url_MeshSecretValueAddValue_566342, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueGet_566330 = ref object of OpenApiRestCall_563566
proc url_MeshSecretValueGet_566332(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueGet_566331(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566333 = path.getOrDefault("secretResourceName")
  valid_566333 = validateParameter(valid_566333, JString, required = true,
                                 default = nil)
  if valid_566333 != nil:
    section.add "secretResourceName", valid_566333
  var valid_566334 = path.getOrDefault("secretValueResourceName")
  valid_566334 = validateParameter(valid_566334, JString, required = true,
                                 default = nil)
  if valid_566334 != nil:
    section.add "secretValueResourceName", valid_566334
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566335 = query.getOrDefault("api-version")
  valid_566335 = validateParameter(valid_566335, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566335 != nil:
    section.add "api-version", valid_566335
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566336: Call_MeshSecretValueGet_566330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ## 
  let valid = call_566336.validator(path, query, header, formData, body)
  let scheme = call_566336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566336.url(scheme.get, call_566336.host, call_566336.base,
                         call_566336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566336, url, valid)

proc call*(call_566337: Call_MeshSecretValueGet_566330; secretResourceName: string;
          secretValueResourceName: string; apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueGet
  ## Get the information about the specified named secret value resources. The information does not include the actual value of the secret.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  var path_566338 = newJObject()
  var query_566339 = newJObject()
  add(query_566339, "api-version", newJString(apiVersion))
  add(path_566338, "secretResourceName", newJString(secretResourceName))
  add(path_566338, "secretValueResourceName", newJString(secretValueResourceName))
  result = call_566337.call(path_566338, query_566339, nil, nil, nil)

var meshSecretValueGet* = Call_MeshSecretValueGet_566330(
    name: "meshSecretValueGet", meth: HttpMethod.HttpGet, host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueGet_566331, base: "",
    url: url_MeshSecretValueGet_566332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueDelete_566352 = ref object of OpenApiRestCall_563566
proc url_MeshSecretValueDelete_566354(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueDelete_566353(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566355 = path.getOrDefault("secretResourceName")
  valid_566355 = validateParameter(valid_566355, JString, required = true,
                                 default = nil)
  if valid_566355 != nil:
    section.add "secretResourceName", valid_566355
  var valid_566356 = path.getOrDefault("secretValueResourceName")
  valid_566356 = validateParameter(valid_566356, JString, required = true,
                                 default = nil)
  if valid_566356 != nil:
    section.add "secretValueResourceName", valid_566356
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566357 = query.getOrDefault("api-version")
  valid_566357 = validateParameter(valid_566357, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566357 != nil:
    section.add "api-version", valid_566357
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566358: Call_MeshSecretValueDelete_566352; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ## 
  let valid = call_566358.validator(path, query, header, formData, body)
  let scheme = call_566358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566358.url(scheme.get, call_566358.host, call_566358.base,
                         call_566358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566358, url, valid)

proc call*(call_566359: Call_MeshSecretValueDelete_566352;
          secretResourceName: string; secretValueResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueDelete
  ## Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  var path_566360 = newJObject()
  var query_566361 = newJObject()
  add(query_566361, "api-version", newJString(apiVersion))
  add(path_566360, "secretResourceName", newJString(secretResourceName))
  add(path_566360, "secretValueResourceName", newJString(secretValueResourceName))
  result = call_566359.call(path_566360, query_566361, nil, nil, nil)

var meshSecretValueDelete* = Call_MeshSecretValueDelete_566352(
    name: "meshSecretValueDelete", meth: HttpMethod.HttpDelete,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}",
    validator: validate_MeshSecretValueDelete_566353, base: "",
    url: url_MeshSecretValueDelete_566354, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshSecretValueShow_566362 = ref object of OpenApiRestCall_563566
proc url_MeshSecretValueShow_566364(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "secretResourceName" in path,
        "`secretResourceName` is a required path parameter"
  assert "secretValueResourceName" in path,
        "`secretValueResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Secrets/"),
               (kind: VariableSegment, value: "secretResourceName"),
               (kind: ConstantSegment, value: "/values/"),
               (kind: VariableSegment, value: "secretValueResourceName"),
               (kind: ConstantSegment, value: "/list_value")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshSecretValueShow_566363(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   secretResourceName: JString (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: JString (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `secretResourceName` field"
  var valid_566365 = path.getOrDefault("secretResourceName")
  valid_566365 = validateParameter(valid_566365, JString, required = true,
                                 default = nil)
  if valid_566365 != nil:
    section.add "secretResourceName", valid_566365
  var valid_566366 = path.getOrDefault("secretValueResourceName")
  valid_566366 = validateParameter(valid_566366, JString, required = true,
                                 default = nil)
  if valid_566366 != nil:
    section.add "secretValueResourceName", valid_566366
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566367 = query.getOrDefault("api-version")
  valid_566367 = validateParameter(valid_566367, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566367 != nil:
    section.add "api-version", valid_566367
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566368: Call_MeshSecretValueShow_566362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ## 
  let valid = call_566368.validator(path, query, header, formData, body)
  let scheme = call_566368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566368.url(scheme.get, call_566368.host, call_566368.base,
                         call_566368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566368, url, valid)

proc call*(call_566369: Call_MeshSecretValueShow_566362;
          secretResourceName: string; secretValueResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshSecretValueShow
  ## Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   secretResourceName: string (required)
  ##                     : The name of the secret resource.
  ##   secretValueResourceName: string (required)
  ##                          : The name of the secret resource value which is typically the version identifier for the value.
  var path_566370 = newJObject()
  var query_566371 = newJObject()
  add(query_566371, "api-version", newJString(apiVersion))
  add(path_566370, "secretResourceName", newJString(secretResourceName))
  add(path_566370, "secretValueResourceName", newJString(secretValueResourceName))
  result = call_566369.call(path_566370, query_566371, nil, nil, nil)

var meshSecretValueShow* = Call_MeshSecretValueShow_566362(
    name: "meshSecretValueShow", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value",
    validator: validate_MeshSecretValueShow_566363, base: "",
    url: url_MeshSecretValueShow_566364, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeList_566372 = ref object of OpenApiRestCall_563566
proc url_MeshVolumeList_566374(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_MeshVolumeList_566373(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566375 = query.getOrDefault("api-version")
  valid_566375 = validateParameter(valid_566375, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566375 != nil:
    section.add "api-version", valid_566375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566376: Call_MeshVolumeList_566372; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ## 
  let valid = call_566376.validator(path, query, header, formData, body)
  let scheme = call_566376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566376.url(scheme.get, call_566376.host, call_566376.base,
                         call_566376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566376, url, valid)

proc call*(call_566377: Call_MeshVolumeList_566372;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeList
  ## Gets the information about all volume resources in a given resource group. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  var query_566378 = newJObject()
  add(query_566378, "api-version", newJString(apiVersion))
  result = call_566377.call(nil, query_566378, nil, nil, nil)

var meshVolumeList* = Call_MeshVolumeList_566372(name: "meshVolumeList",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes", validator: validate_MeshVolumeList_566373,
    base: "", url: url_MeshVolumeList_566374, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeCreateOrUpdate_566388 = ref object of OpenApiRestCall_563566
proc url_MeshVolumeCreateOrUpdate_566390(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeCreateOrUpdate_566389(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_566391 = path.getOrDefault("volumeResourceName")
  valid_566391 = validateParameter(valid_566391, JString, required = true,
                                 default = nil)
  if valid_566391 != nil:
    section.add "volumeResourceName", valid_566391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566392 = query.getOrDefault("api-version")
  valid_566392 = validateParameter(valid_566392, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566392 != nil:
    section.add "api-version", valid_566392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566394: Call_MeshVolumeCreateOrUpdate_566388; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ## 
  let valid = call_566394.validator(path, query, header, formData, body)
  let scheme = call_566394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566394.url(scheme.get, call_566394.host, call_566394.base,
                         call_566394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566394, url, valid)

proc call*(call_566395: Call_MeshVolumeCreateOrUpdate_566388;
          volumeResourceDescription: JsonNode; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeCreateOrUpdate
  ## Creates a Volume resource with the specified name, description and properties. If Volume resource with the same name exists, then it is updated with the specified description and properties.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceDescription: JObject (required)
  ##                            : Description for creating a Volume resource.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_566396 = newJObject()
  var query_566397 = newJObject()
  var body_566398 = newJObject()
  add(query_566397, "api-version", newJString(apiVersion))
  if volumeResourceDescription != nil:
    body_566398 = volumeResourceDescription
  add(path_566396, "volumeResourceName", newJString(volumeResourceName))
  result = call_566395.call(path_566396, query_566397, nil, nil, body_566398)

var meshVolumeCreateOrUpdate* = Call_MeshVolumeCreateOrUpdate_566388(
    name: "meshVolumeCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "azure.local:19080", route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeCreateOrUpdate_566389, base: "",
    url: url_MeshVolumeCreateOrUpdate_566390, schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeGet_566379 = ref object of OpenApiRestCall_563566
proc url_MeshVolumeGet_566381(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeGet_566380(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_566382 = path.getOrDefault("volumeResourceName")
  valid_566382 = validateParameter(valid_566382, JString, required = true,
                                 default = nil)
  if valid_566382 != nil:
    section.add "volumeResourceName", valid_566382
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566383 = query.getOrDefault("api-version")
  valid_566383 = validateParameter(valid_566383, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566383 != nil:
    section.add "api-version", valid_566383
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566384: Call_MeshVolumeGet_566379; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ## 
  let valid = call_566384.validator(path, query, header, formData, body)
  let scheme = call_566384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566384.url(scheme.get, call_566384.host, call_566384.base,
                         call_566384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566384, url, valid)

proc call*(call_566385: Call_MeshVolumeGet_566379; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeGet
  ## Gets the information about the Volume resource with the given name. The information include the description and other properties of the Volume.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_566386 = newJObject()
  var query_566387 = newJObject()
  add(query_566387, "api-version", newJString(apiVersion))
  add(path_566386, "volumeResourceName", newJString(volumeResourceName))
  result = call_566385.call(path_566386, query_566387, nil, nil, nil)

var meshVolumeGet* = Call_MeshVolumeGet_566379(name: "meshVolumeGet",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeGet_566380, base: "", url: url_MeshVolumeGet_566381,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_MeshVolumeDelete_566399 = ref object of OpenApiRestCall_563566
proc url_MeshVolumeDelete_566401(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "volumeResourceName" in path,
        "`volumeResourceName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Resources/Volumes/"),
               (kind: VariableSegment, value: "volumeResourceName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_MeshVolumeDelete_566400(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Deletes the Volume resource identified by the name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   volumeResourceName: JString (required)
  ##                     : The identity of the volume.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `volumeResourceName` field"
  var valid_566402 = path.getOrDefault("volumeResourceName")
  valid_566402 = validateParameter(valid_566402, JString, required = true,
                                 default = nil)
  if valid_566402 != nil:
    section.add "volumeResourceName", valid_566402
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4-preview'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566403 = query.getOrDefault("api-version")
  valid_566403 = validateParameter(valid_566403, JString, required = true,
                                 default = newJString("6.4-preview"))
  if valid_566403 != nil:
    section.add "api-version", valid_566403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566404: Call_MeshVolumeDelete_566399; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the Volume resource identified by the name.
  ## 
  let valid = call_566404.validator(path, query, header, formData, body)
  let scheme = call_566404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566404.url(scheme.get, call_566404.host, call_566404.base,
                         call_566404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566404, url, valid)

proc call*(call_566405: Call_MeshVolumeDelete_566399; volumeResourceName: string;
          apiVersion: string = "6.4-preview"): Recallable =
  ## meshVolumeDelete
  ## Deletes the Volume resource identified by the name.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4-preview'.
  ##   volumeResourceName: string (required)
  ##                     : The identity of the volume.
  var path_566406 = newJObject()
  var query_566407 = newJObject()
  add(query_566407, "api-version", newJString(apiVersion))
  add(path_566406, "volumeResourceName", newJString(volumeResourceName))
  result = call_566405.call(path_566406, query_566407, nil, nil, nil)

var meshVolumeDelete* = Call_MeshVolumeDelete_566399(name: "meshVolumeDelete",
    meth: HttpMethod.HttpDelete, host: "azure.local:19080",
    route: "/Resources/Volumes/{volumeResourceName}",
    validator: validate_MeshVolumeDelete_566400, base: "",
    url: url_MeshVolumeDelete_566401, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RecoverServicePartitions_566408 = ref object of OpenApiRestCall_563566
proc url_RecoverServicePartitions_566410(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/$/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions/$/Recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_RecoverServicePartitions_566409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566411 = path.getOrDefault("serviceId")
  valid_566411 = validateParameter(valid_566411, JString, required = true,
                                 default = nil)
  if valid_566411 != nil:
    section.add "serviceId", valid_566411
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566412 = query.getOrDefault("api-version")
  valid_566412 = validateParameter(valid_566412, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566412 != nil:
    section.add "api-version", valid_566412
  var valid_566413 = query.getOrDefault("timeout")
  valid_566413 = validateParameter(valid_566413, JInt, required = false,
                                 default = newJInt(60))
  if valid_566413 != nil:
    section.add "timeout", valid_566413
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566414: Call_RecoverServicePartitions_566408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ## 
  let valid = call_566414.validator(path, query, header, formData, body)
  let scheme = call_566414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566414.url(scheme.get, call_566414.host, call_566414.base,
                         call_566414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566414, url, valid)

proc call*(call_566415: Call_RecoverServicePartitions_566408; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## recoverServicePartitions
  ## Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566416 = newJObject()
  var query_566417 = newJObject()
  add(query_566417, "api-version", newJString(apiVersion))
  add(query_566417, "timeout", newJInt(timeout))
  add(path_566416, "serviceId", newJString(serviceId))
  result = call_566415.call(path_566416, query_566417, nil, nil, nil)

var recoverServicePartitions* = Call_RecoverServicePartitions_566408(
    name: "recoverServicePartitions", meth: HttpMethod.HttpPost,
    host: "azure.local:19080",
    route: "/Services/$/{serviceId}/$/GetPartitions/$/Recover",
    validator: validate_RecoverServicePartitions_566409, base: "",
    url: url_RecoverServicePartitions_566410, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteService_566418 = ref object of OpenApiRestCall_563566
proc url_DeleteService_566420(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DeleteService_566419(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566421 = path.getOrDefault("serviceId")
  valid_566421 = validateParameter(valid_566421, JString, required = true,
                                 default = nil)
  if valid_566421 != nil:
    section.add "serviceId", valid_566421
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ForceRemove: JBool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566422 = query.getOrDefault("api-version")
  valid_566422 = validateParameter(valid_566422, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566422 != nil:
    section.add "api-version", valid_566422
  var valid_566423 = query.getOrDefault("timeout")
  valid_566423 = validateParameter(valid_566423, JInt, required = false,
                                 default = newJInt(60))
  if valid_566423 != nil:
    section.add "timeout", valid_566423
  var valid_566424 = query.getOrDefault("ForceRemove")
  valid_566424 = validateParameter(valid_566424, JBool, required = false, default = nil)
  if valid_566424 != nil:
    section.add "ForceRemove", valid_566424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566425: Call_DeleteService_566418; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ## 
  let valid = call_566425.validator(path, query, header, formData, body)
  let scheme = call_566425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566425.url(scheme.get, call_566425.host, call_566425.base,
                         call_566425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566425, url, valid)

proc call*(call_566426: Call_DeleteService_566418; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60; ForceRemove: bool = false): Recallable =
  ## deleteService
  ## A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ForceRemove: bool
  ##              : Remove a Service Fabric application or service forcefully without going through the graceful shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete is timing out due to issues in the service code that prevents graceful close of replicas.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566427 = newJObject()
  var query_566428 = newJObject()
  add(query_566428, "api-version", newJString(apiVersion))
  add(query_566428, "timeout", newJInt(timeout))
  add(query_566428, "ForceRemove", newJBool(ForceRemove))
  add(path_566427, "serviceId", newJString(serviceId))
  result = call_566426.call(path_566427, query_566428, nil, nil, nil)

var deleteService* = Call_DeleteService_566418(name: "deleteService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Delete", validator: validate_DeleteService_566419,
    base: "", url: url_DeleteService_566420, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableServiceBackup_566429 = ref object of OpenApiRestCall_563566
proc url_DisableServiceBackup_566431(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/DisableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DisableServiceBackup_566430(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566432 = path.getOrDefault("serviceId")
  valid_566432 = validateParameter(valid_566432, JString, required = true,
                                 default = nil)
  if valid_566432 != nil:
    section.add "serviceId", valid_566432
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566433 = query.getOrDefault("api-version")
  valid_566433 = validateParameter(valid_566433, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566433 != nil:
    section.add "api-version", valid_566433
  var valid_566434 = query.getOrDefault("timeout")
  valid_566434 = validateParameter(valid_566434, JInt, required = false,
                                 default = newJInt(60))
  if valid_566434 != nil:
    section.add "timeout", valid_566434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566436: Call_DisableServiceBackup_566429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ## 
  let valid = call_566436.validator(path, query, header, formData, body)
  let scheme = call_566436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566436.url(scheme.get, call_566436.host, call_566436.base,
                         call_566436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566436, url, valid)

proc call*(call_566437: Call_DisableServiceBackup_566429; serviceId: string;
          apiVersion: string = "6.4"; DisableBackupDescription: JsonNode = nil;
          timeout: int = 60): Recallable =
  ## disableServiceBackup
  ## Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled.
  ## In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   DisableBackupDescription: JObject
  ##                           : Specifies the parameters to disable backup for any backup entity.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566438 = newJObject()
  var query_566439 = newJObject()
  var body_566440 = newJObject()
  add(query_566439, "api-version", newJString(apiVersion))
  if DisableBackupDescription != nil:
    body_566440 = DisableBackupDescription
  add(query_566439, "timeout", newJInt(timeout))
  add(path_566438, "serviceId", newJString(serviceId))
  result = call_566437.call(path_566438, query_566439, nil, nil, body_566440)

var disableServiceBackup* = Call_DisableServiceBackup_566429(
    name: "disableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/DisableBackup",
    validator: validate_DisableServiceBackup_566430, base: "",
    url: url_DisableServiceBackup_566431, schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableServiceBackup_566441 = ref object of OpenApiRestCall_563566
proc url_EnableServiceBackup_566443(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/EnableBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_EnableServiceBackup_566442(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566444 = path.getOrDefault("serviceId")
  valid_566444 = validateParameter(valid_566444, JString, required = true,
                                 default = nil)
  if valid_566444 != nil:
    section.add "serviceId", valid_566444
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566445 = query.getOrDefault("api-version")
  valid_566445 = validateParameter(valid_566445, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566445 != nil:
    section.add "api-version", valid_566445
  var valid_566446 = query.getOrDefault("timeout")
  valid_566446 = validateParameter(valid_566446, JInt, required = false,
                                 default = newJInt(60))
  if valid_566446 != nil:
    section.add "timeout", valid_566446
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566448: Call_EnableServiceBackup_566441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ## 
  let valid = call_566448.validator(path, query, header, formData, body)
  let scheme = call_566448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566448.url(scheme.get, call_566448.host, call_566448.base,
                         call_566448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566448, url, valid)

proc call*(call_566449: Call_EnableServiceBackup_566441;
          EnableBackupDescription: JsonNode; serviceId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## enableServiceBackup
  ## Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level).
  ## Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EnableBackupDescription: JObject (required)
  ##                          : Specifies the parameters for enabling backup.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566450 = newJObject()
  var query_566451 = newJObject()
  var body_566452 = newJObject()
  add(query_566451, "api-version", newJString(apiVersion))
  add(query_566451, "timeout", newJInt(timeout))
  if EnableBackupDescription != nil:
    body_566452 = EnableBackupDescription
  add(path_566450, "serviceId", newJString(serviceId))
  result = call_566449.call(path_566450, query_566451, nil, nil, body_566452)

var enableServiceBackup* = Call_EnableServiceBackup_566441(
    name: "enableServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/EnableBackup",
    validator: validate_EnableServiceBackup_566442, base: "",
    url: url_EnableServiceBackup_566443, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplicationNameInfo_566453 = ref object of OpenApiRestCall_563566
proc url_GetApplicationNameInfo_566455(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetApplicationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetApplicationNameInfo_566454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566456 = path.getOrDefault("serviceId")
  valid_566456 = validateParameter(valid_566456, JString, required = true,
                                 default = nil)
  if valid_566456 != nil:
    section.add "serviceId", valid_566456
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566457 = query.getOrDefault("api-version")
  valid_566457 = validateParameter(valid_566457, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566457 != nil:
    section.add "api-version", valid_566457
  var valid_566458 = query.getOrDefault("timeout")
  valid_566458 = validateParameter(valid_566458, JInt, required = false,
                                 default = newJInt(60))
  if valid_566458 != nil:
    section.add "timeout", valid_566458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566459: Call_GetApplicationNameInfo_566453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ## 
  let valid = call_566459.validator(path, query, header, formData, body)
  let scheme = call_566459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566459.url(scheme.get, call_566459.host, call_566459.base,
                         call_566459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566459, url, valid)

proc call*(call_566460: Call_GetApplicationNameInfo_566453; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getApplicationNameInfo
  ## Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566461 = newJObject()
  var query_566462 = newJObject()
  add(query_566462, "api-version", newJString(apiVersion))
  add(query_566462, "timeout", newJInt(timeout))
  add(path_566461, "serviceId", newJString(serviceId))
  result = call_566460.call(path_566461, query_566462, nil, nil, nil)

var getApplicationNameInfo* = Call_GetApplicationNameInfo_566453(
    name: "getApplicationNameInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetApplicationName",
    validator: validate_GetApplicationNameInfo_566454, base: "",
    url: url_GetApplicationNameInfo_566455, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupConfigurationInfo_566463 = ref object of OpenApiRestCall_563566
proc url_GetServiceBackupConfigurationInfo_566465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackupConfigurationInfo")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupConfigurationInfo_566464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566466 = path.getOrDefault("serviceId")
  valid_566466 = validateParameter(valid_566466, JString, required = true,
                                 default = nil)
  if valid_566466 != nil:
    section.add "serviceId", valid_566466
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_566467 = query.getOrDefault("ContinuationToken")
  valid_566467 = validateParameter(valid_566467, JString, required = false,
                                 default = nil)
  if valid_566467 != nil:
    section.add "ContinuationToken", valid_566467
  var valid_566468 = query.getOrDefault("MaxResults")
  valid_566468 = validateParameter(valid_566468, JInt, required = false,
                                 default = newJInt(0))
  if valid_566468 != nil:
    section.add "MaxResults", valid_566468
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566469 = query.getOrDefault("api-version")
  valid_566469 = validateParameter(valid_566469, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566469 != nil:
    section.add "api-version", valid_566469
  var valid_566470 = query.getOrDefault("timeout")
  valid_566470 = validateParameter(valid_566470, JInt, required = false,
                                 default = newJInt(60))
  if valid_566470 != nil:
    section.add "timeout", valid_566470
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566471: Call_GetServiceBackupConfigurationInfo_566463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ## 
  let valid = call_566471.validator(path, query, header, formData, body)
  let scheme = call_566471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566471.url(scheme.get, call_566471.host, call_566471.base,
                         call_566471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566471, url, valid)

proc call*(call_566472: Call_GetServiceBackupConfigurationInfo_566463;
          serviceId: string; ContinuationToken: string = ""; MaxResults: int = 0;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getServiceBackupConfigurationInfo
  ## Gets the Service Fabric backup configuration information for the service and the partitions under this service.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566473 = newJObject()
  var query_566474 = newJObject()
  add(query_566474, "ContinuationToken", newJString(ContinuationToken))
  add(query_566474, "MaxResults", newJInt(MaxResults))
  add(query_566474, "api-version", newJString(apiVersion))
  add(query_566474, "timeout", newJInt(timeout))
  add(path_566473, "serviceId", newJString(serviceId))
  result = call_566472.call(path_566473, query_566474, nil, nil, nil)

var getServiceBackupConfigurationInfo* = Call_GetServiceBackupConfigurationInfo_566463(
    name: "getServiceBackupConfigurationInfo", meth: HttpMethod.HttpGet,
    host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetBackupConfigurationInfo",
    validator: validate_GetServiceBackupConfigurationInfo_566464, base: "",
    url: url_GetServiceBackupConfigurationInfo_566465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceBackupList_566475 = ref object of OpenApiRestCall_563566
proc url_GetServiceBackupList_566477(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetBackups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceBackupList_566476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566478 = path.getOrDefault("serviceId")
  valid_566478 = validateParameter(valid_566478, JString, required = true,
                                 default = nil)
  if valid_566478 != nil:
    section.add "serviceId", valid_566478
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartDateTimeFilter: JString
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: JBool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   EndDateTimeFilter: JString
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  section = newJObject()
  var valid_566479 = query.getOrDefault("ContinuationToken")
  valid_566479 = validateParameter(valid_566479, JString, required = false,
                                 default = nil)
  if valid_566479 != nil:
    section.add "ContinuationToken", valid_566479
  var valid_566480 = query.getOrDefault("MaxResults")
  valid_566480 = validateParameter(valid_566480, JInt, required = false,
                                 default = newJInt(0))
  if valid_566480 != nil:
    section.add "MaxResults", valid_566480
  var valid_566481 = query.getOrDefault("StartDateTimeFilter")
  valid_566481 = validateParameter(valid_566481, JString, required = false,
                                 default = nil)
  if valid_566481 != nil:
    section.add "StartDateTimeFilter", valid_566481
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566482 = query.getOrDefault("api-version")
  valid_566482 = validateParameter(valid_566482, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566482 != nil:
    section.add "api-version", valid_566482
  var valid_566483 = query.getOrDefault("timeout")
  valid_566483 = validateParameter(valid_566483, JInt, required = false,
                                 default = newJInt(60))
  if valid_566483 != nil:
    section.add "timeout", valid_566483
  var valid_566484 = query.getOrDefault("Latest")
  valid_566484 = validateParameter(valid_566484, JBool, required = false,
                                 default = newJBool(false))
  if valid_566484 != nil:
    section.add "Latest", valid_566484
  var valid_566485 = query.getOrDefault("EndDateTimeFilter")
  valid_566485 = validateParameter(valid_566485, JString, required = false,
                                 default = nil)
  if valid_566485 != nil:
    section.add "EndDateTimeFilter", valid_566485
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566486: Call_GetServiceBackupList_566475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ## 
  let valid = call_566486.validator(path, query, header, formData, body)
  let scheme = call_566486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566486.url(scheme.get, call_566486.host, call_566486.base,
                         call_566486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566486, url, valid)

proc call*(call_566487: Call_GetServiceBackupList_566475; serviceId: string;
          ContinuationToken: string = ""; MaxResults: int = 0;
          StartDateTimeFilter: string = ""; apiVersion: string = "6.4";
          timeout: int = 60; Latest: bool = false; EndDateTimeFilter: string = ""): Recallable =
  ## getServiceBackupList
  ## Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   StartDateTimeFilter: string
  ##                      : Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   Latest: bool
  ##         : Specifies whether to get only the most recent backup available for a partition for the specified time range.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   EndDateTimeFilter: string
  ##                    : Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup.
  var path_566488 = newJObject()
  var query_566489 = newJObject()
  add(query_566489, "ContinuationToken", newJString(ContinuationToken))
  add(query_566489, "MaxResults", newJInt(MaxResults))
  add(query_566489, "StartDateTimeFilter", newJString(StartDateTimeFilter))
  add(query_566489, "api-version", newJString(apiVersion))
  add(query_566489, "timeout", newJInt(timeout))
  add(query_566489, "Latest", newJBool(Latest))
  add(path_566488, "serviceId", newJString(serviceId))
  add(query_566489, "EndDateTimeFilter", newJString(EndDateTimeFilter))
  result = call_566487.call(path_566488, query_566489, nil, nil, nil)

var getServiceBackupList* = Call_GetServiceBackupList_566475(
    name: "getServiceBackupList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetBackups",
    validator: validate_GetServiceBackupList_566476, base: "",
    url: url_GetServiceBackupList_566477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceDescription_566490 = ref object of OpenApiRestCall_563566
proc url_GetServiceDescription_566492(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetDescription")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceDescription_566491(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566493 = path.getOrDefault("serviceId")
  valid_566493 = validateParameter(valid_566493, JString, required = true,
                                 default = nil)
  if valid_566493 != nil:
    section.add "serviceId", valid_566493
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566494 = query.getOrDefault("api-version")
  valid_566494 = validateParameter(valid_566494, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566494 != nil:
    section.add "api-version", valid_566494
  var valid_566495 = query.getOrDefault("timeout")
  valid_566495 = validateParameter(valid_566495, JInt, required = false,
                                 default = newJInt(60))
  if valid_566495 != nil:
    section.add "timeout", valid_566495
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566496: Call_GetServiceDescription_566490; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ## 
  let valid = call_566496.validator(path, query, header, formData, body)
  let scheme = call_566496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566496.url(scheme.get, call_566496.host, call_566496.base,
                         call_566496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566496, url, valid)

proc call*(call_566497: Call_GetServiceDescription_566490; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## getServiceDescription
  ## Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566498 = newJObject()
  var query_566499 = newJObject()
  add(query_566499, "api-version", newJString(apiVersion))
  add(query_566499, "timeout", newJInt(timeout))
  add(path_566498, "serviceId", newJString(serviceId))
  result = call_566497.call(path_566498, query_566499, nil, nil, nil)

var getServiceDescription* = Call_GetServiceDescription_566490(
    name: "getServiceDescription", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetDescription",
    validator: validate_GetServiceDescription_566491, base: "",
    url: url_GetServiceDescription_566492, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealthUsingPolicy_566513 = ref object of OpenApiRestCall_563566
proc url_GetServiceHealthUsingPolicy_566515(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealthUsingPolicy_566514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566516 = path.getOrDefault("serviceId")
  valid_566516 = validateParameter(valid_566516, JString, required = true,
                                 default = nil)
  if valid_566516 != nil:
    section.add "serviceId", valid_566516
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566517 = query.getOrDefault("api-version")
  valid_566517 = validateParameter(valid_566517, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566517 != nil:
    section.add "api-version", valid_566517
  var valid_566518 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_566518 = validateParameter(valid_566518, JInt, required = false,
                                 default = newJInt(0))
  if valid_566518 != nil:
    section.add "PartitionsHealthStateFilter", valid_566518
  var valid_566519 = query.getOrDefault("ExcludeHealthStatistics")
  valid_566519 = validateParameter(valid_566519, JBool, required = false,
                                 default = newJBool(false))
  if valid_566519 != nil:
    section.add "ExcludeHealthStatistics", valid_566519
  var valid_566520 = query.getOrDefault("timeout")
  valid_566520 = validateParameter(valid_566520, JInt, required = false,
                                 default = newJInt(60))
  if valid_566520 != nil:
    section.add "timeout", valid_566520
  var valid_566521 = query.getOrDefault("EventsHealthStateFilter")
  valid_566521 = validateParameter(valid_566521, JInt, required = false,
                                 default = newJInt(0))
  if valid_566521 != nil:
    section.add "EventsHealthStateFilter", valid_566521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566523: Call_GetServiceHealthUsingPolicy_566513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_566523.validator(path, query, header, formData, body)
  let scheme = call_566523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566523.url(scheme.get, call_566523.host, call_566523.base,
                         call_566523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566523, url, valid)

proc call*(call_566524: Call_GetServiceHealthUsingPolicy_566513; serviceId: string;
          ApplicationHealthPolicy: JsonNode = nil; apiVersion: string = "6.0";
          PartitionsHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealthUsingPolicy
  ## Gets the health information of the specified service.
  ## If the application health policy is specified, the health evaluation uses it to get the aggregated health state.
  ## If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   ApplicationHealthPolicy: JObject
  ##                          : Describes the health policies used to evaluate the health of an application or one of its children.
  ## If not present, the health evaluation uses the health policy from application manifest or the default health policy.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566525 = newJObject()
  var query_566526 = newJObject()
  var body_566527 = newJObject()
  if ApplicationHealthPolicy != nil:
    body_566527 = ApplicationHealthPolicy
  add(query_566526, "api-version", newJString(apiVersion))
  add(query_566526, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  add(query_566526, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_566526, "timeout", newJInt(timeout))
  add(query_566526, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_566525, "serviceId", newJString(serviceId))
  result = call_566524.call(path_566525, query_566526, nil, nil, body_566527)

var getServiceHealthUsingPolicy* = Call_GetServiceHealthUsingPolicy_566513(
    name: "getServiceHealthUsingPolicy", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealthUsingPolicy_566514, base: "",
    url: url_GetServiceHealthUsingPolicy_566515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetServiceHealth_566500 = ref object of OpenApiRestCall_563566
proc url_GetServiceHealth_566502(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetServiceHealth_566501(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566503 = path.getOrDefault("serviceId")
  valid_566503 = validateParameter(valid_566503, JString, required = true,
                                 default = nil)
  if valid_566503 != nil:
    section.add "serviceId", valid_566503
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionsHealthStateFilter: JInt
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: JBool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: JInt
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566504 = query.getOrDefault("api-version")
  valid_566504 = validateParameter(valid_566504, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566504 != nil:
    section.add "api-version", valid_566504
  var valid_566505 = query.getOrDefault("PartitionsHealthStateFilter")
  valid_566505 = validateParameter(valid_566505, JInt, required = false,
                                 default = newJInt(0))
  if valid_566505 != nil:
    section.add "PartitionsHealthStateFilter", valid_566505
  var valid_566506 = query.getOrDefault("ExcludeHealthStatistics")
  valid_566506 = validateParameter(valid_566506, JBool, required = false,
                                 default = newJBool(false))
  if valid_566506 != nil:
    section.add "ExcludeHealthStatistics", valid_566506
  var valid_566507 = query.getOrDefault("timeout")
  valid_566507 = validateParameter(valid_566507, JInt, required = false,
                                 default = newJInt(60))
  if valid_566507 != nil:
    section.add "timeout", valid_566507
  var valid_566508 = query.getOrDefault("EventsHealthStateFilter")
  valid_566508 = validateParameter(valid_566508, JInt, required = false,
                                 default = newJInt(0))
  if valid_566508 != nil:
    section.add "EventsHealthStateFilter", valid_566508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566509: Call_GetServiceHealth_566500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ## 
  let valid = call_566509.validator(path, query, header, formData, body)
  let scheme = call_566509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566509.url(scheme.get, call_566509.host, call_566509.base,
                         call_566509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566509, url, valid)

proc call*(call_566510: Call_GetServiceHealth_566500; serviceId: string;
          apiVersion: string = "6.0"; PartitionsHealthStateFilter: int = 0;
          ExcludeHealthStatistics: bool = false; timeout: int = 60;
          EventsHealthStateFilter: int = 0): Recallable =
  ## getServiceHealth
  ## Gets the health information of the specified service.
  ## Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.
  ## Use PartitionsHealthStateFilter to filter the collection of partitions returned.
  ## If you specify a service that does not exist in the health store, this request returns an error.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionsHealthStateFilter: int
  ##                              : Allows filtering of the partitions health state objects returned in the result of service health query based on their health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value
  ## obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   ExcludeHealthStatistics: bool
  ##                          : Indicates whether the health statistics should be returned as part of the query result. False by default.
  ## The statistics show the number of children entities in health state Ok, Warning, and Error.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EventsHealthStateFilter: int
  ##                          : Allows filtering the collection of HealthEvent objects returned based on health state.
  ## The possible values for this parameter include integer value of one of the following health states.
  ## Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
  ## If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
  ## 
  ## - Default - Default value. Matches any HealthState. The value is zero.
  ## - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.
  ## - Ok - Filter that matches input with HealthState value Ok. The value is 2.
  ## - Warning - Filter that matches input with HealthState value Warning. The value is 4.
  ## - Error - Filter that matches input with HealthState value Error. The value is 8.
  ## - All - Filter that matches input with any HealthState value. The value is 65535.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566511 = newJObject()
  var query_566512 = newJObject()
  add(query_566512, "api-version", newJString(apiVersion))
  add(query_566512, "PartitionsHealthStateFilter",
      newJInt(PartitionsHealthStateFilter))
  add(query_566512, "ExcludeHealthStatistics", newJBool(ExcludeHealthStatistics))
  add(query_566512, "timeout", newJInt(timeout))
  add(query_566512, "EventsHealthStateFilter", newJInt(EventsHealthStateFilter))
  add(path_566511, "serviceId", newJString(serviceId))
  result = call_566510.call(path_566511, query_566512, nil, nil, nil)

var getServiceHealth* = Call_GetServiceHealth_566500(name: "getServiceHealth",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/GetHealth",
    validator: validate_GetServiceHealth_566501, base: "",
    url: url_GetServiceHealth_566502, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPartitionInfoList_566528 = ref object of OpenApiRestCall_563566
proc url_GetPartitionInfoList_566530(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/GetPartitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_GetPartitionInfoList_566529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566531 = path.getOrDefault("serviceId")
  valid_566531 = validateParameter(valid_566531, JString, required = true,
                                 default = nil)
  if valid_566531 != nil:
    section.add "serviceId", valid_566531
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_566532 = query.getOrDefault("ContinuationToken")
  valid_566532 = validateParameter(valid_566532, JString, required = false,
                                 default = nil)
  if valid_566532 != nil:
    section.add "ContinuationToken", valid_566532
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566533 = query.getOrDefault("api-version")
  valid_566533 = validateParameter(valid_566533, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566533 != nil:
    section.add "api-version", valid_566533
  var valid_566534 = query.getOrDefault("timeout")
  valid_566534 = validateParameter(valid_566534, JInt, required = false,
                                 default = newJInt(60))
  if valid_566534 != nil:
    section.add "timeout", valid_566534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566535: Call_GetPartitionInfoList_566528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ## 
  let valid = call_566535.validator(path, query, header, formData, body)
  let scheme = call_566535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566535.url(scheme.get, call_566535.host, call_566535.base,
                         call_566535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566535, url, valid)

proc call*(call_566536: Call_GetPartitionInfoList_566528; serviceId: string;
          ContinuationToken: string = ""; apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## getPartitionInfoList
  ## The response includes the partition ID, partitioning scheme information, keys supported by the partition, status, health, and other details about the partition.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566537 = newJObject()
  var query_566538 = newJObject()
  add(query_566538, "ContinuationToken", newJString(ContinuationToken))
  add(query_566538, "api-version", newJString(apiVersion))
  add(query_566538, "timeout", newJInt(timeout))
  add(path_566537, "serviceId", newJString(serviceId))
  result = call_566536.call(path_566537, query_566538, nil, nil, nil)

var getPartitionInfoList* = Call_GetPartitionInfoList_566528(
    name: "getPartitionInfoList", meth: HttpMethod.HttpGet,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/GetPartitions",
    validator: validate_GetPartitionInfoList_566529, base: "",
    url: url_GetPartitionInfoList_566530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReportServiceHealth_566539 = ref object of OpenApiRestCall_563566
proc url_ReportServiceHealth_566541(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ReportHealth")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ReportServiceHealth_566540(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566542 = path.getOrDefault("serviceId")
  valid_566542 = validateParameter(valid_566542, JString, required = true,
                                 default = nil)
  if valid_566542 != nil:
    section.add "serviceId", valid_566542
  result.add "path", section
  ## parameters in `query` object:
  ##   Immediate: JBool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  var valid_566543 = query.getOrDefault("Immediate")
  valid_566543 = validateParameter(valid_566543, JBool, required = false,
                                 default = newJBool(false))
  if valid_566543 != nil:
    section.add "Immediate", valid_566543
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566544 = query.getOrDefault("api-version")
  valid_566544 = validateParameter(valid_566544, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566544 != nil:
    section.add "api-version", valid_566544
  var valid_566545 = query.getOrDefault("timeout")
  valid_566545 = validateParameter(valid_566545, JInt, required = false,
                                 default = newJInt(60))
  if valid_566545 != nil:
    section.add "timeout", valid_566545
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566547: Call_ReportServiceHealth_566539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ## 
  let valid = call_566547.validator(path, query, header, formData, body)
  let scheme = call_566547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566547.url(scheme.get, call_566547.host, call_566547.base,
                         call_566547.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566547, url, valid)

proc call*(call_566548: Call_ReportServiceHealth_566539;
          HealthInformation: JsonNode; serviceId: string; Immediate: bool = false;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## reportServiceHealth
  ## Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported.
  ## The report is sent to a Service Fabric gateway Service, which forwards to the health store.
  ## The report may be accepted by the gateway, but rejected by the health store after extra validation.
  ## For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.
  ## To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
  ##   Immediate: bool
  ##            : A flag that indicates whether the report should be sent immediately.
  ## A health report is sent to a Service Fabric gateway Application, which forwards to the health store.
  ## If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.
  ## This is useful for critical reports that should be sent as soon as possible.
  ## Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.
  ## If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.
  ## This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.
  ## By default, reports are not sent immediately.
  ##   HealthInformation: JObject (required)
  ##                    : Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566549 = newJObject()
  var query_566550 = newJObject()
  var body_566551 = newJObject()
  add(query_566550, "Immediate", newJBool(Immediate))
  if HealthInformation != nil:
    body_566551 = HealthInformation
  add(query_566550, "api-version", newJString(apiVersion))
  add(query_566550, "timeout", newJInt(timeout))
  add(path_566549, "serviceId", newJString(serviceId))
  result = call_566548.call(path_566549, query_566550, nil, nil, body_566551)

var reportServiceHealth* = Call_ReportServiceHealth_566539(
    name: "reportServiceHealth", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ReportHealth",
    validator: validate_ReportServiceHealth_566540, base: "",
    url: url_ReportServiceHealth_566541, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResolveService_566552 = ref object of OpenApiRestCall_563566
proc url_ResolveService_566554(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResolvePartition")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResolveService_566553(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566555 = path.getOrDefault("serviceId")
  valid_566555 = validateParameter(valid_566555, JString, required = true,
                                 default = nil)
  if valid_566555 != nil:
    section.add "serviceId", valid_566555
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyValue: JString
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyType: JInt
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   PreviousRspVersion: JString
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566556 = query.getOrDefault("api-version")
  valid_566556 = validateParameter(valid_566556, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566556 != nil:
    section.add "api-version", valid_566556
  var valid_566557 = query.getOrDefault("PartitionKeyValue")
  valid_566557 = validateParameter(valid_566557, JString, required = false,
                                 default = nil)
  if valid_566557 != nil:
    section.add "PartitionKeyValue", valid_566557
  var valid_566558 = query.getOrDefault("timeout")
  valid_566558 = validateParameter(valid_566558, JInt, required = false,
                                 default = newJInt(60))
  if valid_566558 != nil:
    section.add "timeout", valid_566558
  var valid_566559 = query.getOrDefault("PartitionKeyType")
  valid_566559 = validateParameter(valid_566559, JInt, required = false, default = nil)
  if valid_566559 != nil:
    section.add "PartitionKeyType", valid_566559
  var valid_566560 = query.getOrDefault("PreviousRspVersion")
  valid_566560 = validateParameter(valid_566560, JString, required = false,
                                 default = nil)
  if valid_566560 != nil:
    section.add "PreviousRspVersion", valid_566560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566561: Call_ResolveService_566552; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ## 
  let valid = call_566561.validator(path, query, header, formData, body)
  let scheme = call_566561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566561.url(scheme.get, call_566561.host, call_566561.base,
                         call_566561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566561, url, valid)

proc call*(call_566562: Call_ResolveService_566552; serviceId: string;
          apiVersion: string = "6.0"; PartitionKeyValue: string = ""; timeout: int = 60;
          PartitionKeyType: int = 0; PreviousRspVersion: string = ""): Recallable =
  ## resolveService
  ## Resolve a Service Fabric service partition to get the endpoints of the service replicas.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   PartitionKeyValue: string
  ##                    : Partition key. This is required if the partition scheme for the service is Int64Range or Named. 
  ## This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.
  ## For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an
  ## integer in that range. Query service description to see the range or name.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   PartitionKeyType: int
  ##                   : Key type for the partition. This parameter is required if the partition scheme for the service is Int64Range or Named. The possible values are following.
  ## - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.
  ## - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.
  ## - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  ##   PreviousRspVersion: string
  ##                     : The value in the Version field of the response that was received previously. This is required if the user knows that the result that was gotten previously is stale.
  var path_566563 = newJObject()
  var query_566564 = newJObject()
  add(query_566564, "api-version", newJString(apiVersion))
  add(query_566564, "PartitionKeyValue", newJString(PartitionKeyValue))
  add(query_566564, "timeout", newJInt(timeout))
  add(query_566564, "PartitionKeyType", newJInt(PartitionKeyType))
  add(path_566563, "serviceId", newJString(serviceId))
  add(query_566564, "PreviousRspVersion", newJString(PreviousRspVersion))
  result = call_566562.call(path_566563, query_566564, nil, nil, nil)

var resolveService* = Call_ResolveService_566552(name: "resolveService",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/ResolvePartition",
    validator: validate_ResolveService_566553, base: "", url: url_ResolveService_566554,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResumeServiceBackup_566565 = ref object of OpenApiRestCall_563566
proc url_ResumeServiceBackup_566567(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/ResumeBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ResumeServiceBackup_566566(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566568 = path.getOrDefault("serviceId")
  valid_566568 = validateParameter(valid_566568, JString, required = true,
                                 default = nil)
  if valid_566568 != nil:
    section.add "serviceId", valid_566568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566569 = query.getOrDefault("api-version")
  valid_566569 = validateParameter(valid_566569, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566569 != nil:
    section.add "api-version", valid_566569
  var valid_566570 = query.getOrDefault("timeout")
  valid_566570 = validateParameter(valid_566570, JInt, required = false,
                                 default = newJInt(60))
  if valid_566570 != nil:
    section.add "timeout", valid_566570
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566571: Call_ResumeServiceBackup_566565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ## 
  let valid = call_566571.validator(path, query, header, formData, body)
  let scheme = call_566571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566571.url(scheme.get, call_566571.host, call_566571.base,
                         call_566571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566571, url, valid)

proc call*(call_566572: Call_ResumeServiceBackup_566565; serviceId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## resumeServiceBackup
  ## The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566573 = newJObject()
  var query_566574 = newJObject()
  add(query_566574, "api-version", newJString(apiVersion))
  add(query_566574, "timeout", newJInt(timeout))
  add(path_566573, "serviceId", newJString(serviceId))
  result = call_566572.call(path_566573, query_566574, nil, nil, nil)

var resumeServiceBackup* = Call_ResumeServiceBackup_566565(
    name: "resumeServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/ResumeBackup",
    validator: validate_ResumeServiceBackup_566566, base: "",
    url: url_ResumeServiceBackup_566567, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SuspendServiceBackup_566575 = ref object of OpenApiRestCall_563566
proc url_SuspendServiceBackup_566577(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/SuspendBackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_SuspendServiceBackup_566576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566578 = path.getOrDefault("serviceId")
  valid_566578 = validateParameter(valid_566578, JString, required = true,
                                 default = nil)
  if valid_566578 != nil:
    section.add "serviceId", valid_566578
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566579 = query.getOrDefault("api-version")
  valid_566579 = validateParameter(valid_566579, JString, required = true,
                                 default = newJString("6.4"))
  if valid_566579 != nil:
    section.add "api-version", valid_566579
  var valid_566580 = query.getOrDefault("timeout")
  valid_566580 = validateParameter(valid_566580, JInt, required = false,
                                 default = newJInt(60))
  if valid_566580 != nil:
    section.add "timeout", valid_566580
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566581: Call_SuspendServiceBackup_566575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ## 
  let valid = call_566581.validator(path, query, header, formData, body)
  let scheme = call_566581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566581.url(scheme.get, call_566581.host, call_566581.base,
                         call_566581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566581, url, valid)

proc call*(call_566582: Call_SuspendServiceBackup_566575; serviceId: string;
          apiVersion: string = "6.4"; timeout: int = 60): Recallable =
  ## suspendServiceBackup
  ## The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this service are now suspended for backup.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.4'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566583 = newJObject()
  var query_566584 = newJObject()
  add(query_566584, "api-version", newJString(apiVersion))
  add(query_566584, "timeout", newJInt(timeout))
  add(path_566583, "serviceId", newJString(serviceId))
  result = call_566582.call(path_566583, query_566584, nil, nil, nil)

var suspendServiceBackup* = Call_SuspendServiceBackup_566575(
    name: "suspendServiceBackup", meth: HttpMethod.HttpPost,
    host: "azure.local:19080", route: "/Services/{serviceId}/$/SuspendBackup",
    validator: validate_SuspendServiceBackup_566576, base: "",
    url: url_SuspendServiceBackup_566577, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateService_566585 = ref object of OpenApiRestCall_563566
proc url_UpdateService_566587(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "serviceId" in path, "`serviceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/Services/"),
               (kind: VariableSegment, value: "serviceId"),
               (kind: ConstantSegment, value: "/$/Update")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_UpdateService_566586(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serviceId: JString (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `serviceId` field"
  var valid_566588 = path.getOrDefault("serviceId")
  valid_566588 = validateParameter(valid_566588, JString, required = true,
                                 default = nil)
  if valid_566588 != nil:
    section.add "serviceId", valid_566588
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566589 = query.getOrDefault("api-version")
  valid_566589 = validateParameter(valid_566589, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566589 != nil:
    section.add "api-version", valid_566589
  var valid_566590 = query.getOrDefault("timeout")
  valid_566590 = validateParameter(valid_566590, JInt, required = false,
                                 default = newJInt(60))
  if valid_566590 != nil:
    section.add "timeout", valid_566590
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566592: Call_UpdateService_566585; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ## 
  let valid = call_566592.validator(path, query, header, formData, body)
  let scheme = call_566592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566592.url(scheme.get, call_566592.host, call_566592.base,
                         call_566592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566592, url, valid)

proc call*(call_566593: Call_UpdateService_566585;
          ServiceUpdateDescription: JsonNode; serviceId: string;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## updateService
  ## This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   ServiceUpdateDescription: JObject (required)
  ##                           : The information necessary to update a service.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   serviceId: string (required)
  ##            : The identity of the service. This ID is typically the full name of the service without the 'fabric:' URI scheme.
  ## Starting from version 6.0, hierarchical names are delimited with the "~" character.
  ## For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
  var path_566594 = newJObject()
  var query_566595 = newJObject()
  var body_566596 = newJObject()
  add(query_566595, "api-version", newJString(apiVersion))
  if ServiceUpdateDescription != nil:
    body_566596 = ServiceUpdateDescription
  add(query_566595, "timeout", newJInt(timeout))
  add(path_566594, "serviceId", newJString(serviceId))
  result = call_566593.call(path_566594, query_566595, nil, nil, body_566596)

var updateService* = Call_UpdateService_566585(name: "updateService",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Services/{serviceId}/$/Update", validator: validate_UpdateService_566586,
    base: "", url: url_UpdateService_566587, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaos_566597 = ref object of OpenApiRestCall_563566
proc url_GetChaos_566599(protocol: Scheme; host: string; base: string; route: string;
                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaos_566598(path: JsonNode; query: JsonNode; header: JsonNode;
                             formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566600 = query.getOrDefault("api-version")
  valid_566600 = validateParameter(valid_566600, JString, required = true,
                                 default = newJString("6.2"))
  if valid_566600 != nil:
    section.add "api-version", valid_566600
  var valid_566601 = query.getOrDefault("timeout")
  valid_566601 = validateParameter(valid_566601, JInt, required = false,
                                 default = newJInt(60))
  if valid_566601 != nil:
    section.add "timeout", valid_566601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566602: Call_GetChaos_566597; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ## 
  let valid = call_566602.validator(path, query, header, formData, body)
  let scheme = call_566602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566602.url(scheme.get, call_566602.host, call_566602.base,
                         call_566602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566602, url, valid)

proc call*(call_566603: Call_GetChaos_566597; apiVersion: string = "6.2";
          timeout: int = 60): Recallable =
  ## getChaos
  ## Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_566604 = newJObject()
  add(query_566604, "api-version", newJString(apiVersion))
  add(query_566604, "timeout", newJInt(timeout))
  result = call_566603.call(nil, query_566604, nil, nil, nil)

var getChaos* = Call_GetChaos_566597(name: "getChaos", meth: HttpMethod.HttpGet,
                                  host: "azure.local:19080",
                                  route: "/Tools/Chaos",
                                  validator: validate_GetChaos_566598, base: "",
                                  url: url_GetChaos_566599,
                                  schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartChaos_566605 = ref object of OpenApiRestCall_563566
proc url_StartChaos_566607(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StartChaos_566606(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566608 = query.getOrDefault("api-version")
  valid_566608 = validateParameter(valid_566608, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566608 != nil:
    section.add "api-version", valid_566608
  var valid_566609 = query.getOrDefault("timeout")
  valid_566609 = validateParameter(valid_566609, JInt, required = false,
                                 default = newJInt(60))
  if valid_566609 != nil:
    section.add "timeout", valid_566609
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566611: Call_StartChaos_566605; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ## 
  let valid = call_566611.validator(path, query, header, formData, body)
  let scheme = call_566611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566611.url(scheme.get, call_566611.host, call_566611.base,
                         call_566611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566611, url, valid)

proc call*(call_566612: Call_StartChaos_566605; ChaosParameters: JsonNode;
          apiVersion: string = "6.0"; timeout: int = 60): Recallable =
  ## startChaos
  ## If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters.
  ## If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.
  ## Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ChaosParameters: JObject (required)
  ##                  : Describes all the parameters to configure a Chaos run.
  var query_566613 = newJObject()
  var body_566614 = newJObject()
  add(query_566613, "api-version", newJString(apiVersion))
  add(query_566613, "timeout", newJInt(timeout))
  if ChaosParameters != nil:
    body_566614 = ChaosParameters
  result = call_566612.call(nil, query_566613, nil, nil, body_566614)

var startChaos* = Call_StartChaos_566605(name: "startChaos",
                                      meth: HttpMethod.HttpPost,
                                      host: "azure.local:19080",
                                      route: "/Tools/Chaos/$/Start",
                                      validator: validate_StartChaos_566606,
                                      base: "", url: url_StartChaos_566607,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopChaos_566615 = ref object of OpenApiRestCall_563566
proc url_StopChaos_566617(protocol: Scheme; host: string; base: string; route: string;
                         path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_StopChaos_566616(path: JsonNode; query: JsonNode; header: JsonNode;
                              formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566618 = query.getOrDefault("api-version")
  valid_566618 = validateParameter(valid_566618, JString, required = true,
                                 default = newJString("6.0"))
  if valid_566618 != nil:
    section.add "api-version", valid_566618
  var valid_566619 = query.getOrDefault("timeout")
  valid_566619 = validateParameter(valid_566619, JInt, required = false,
                                 default = newJInt(60))
  if valid_566619 != nil:
    section.add "timeout", valid_566619
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566620: Call_StopChaos_566615; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ## 
  let valid = call_566620.validator(path, query, header, formData, body)
  let scheme = call_566620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566620.url(scheme.get, call_566620.host, call_566620.base,
                         call_566620.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566620, url, valid)

proc call*(call_566621: Call_StopChaos_566615; apiVersion: string = "6.0";
          timeout: int = 60): Recallable =
  ## stopChaos
  ## Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state.
  ## Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.0'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_566622 = newJObject()
  add(query_566622, "api-version", newJString(apiVersion))
  add(query_566622, "timeout", newJInt(timeout))
  result = call_566621.call(nil, query_566622, nil, nil, nil)

var stopChaos* = Call_StopChaos_566615(name: "stopChaos", meth: HttpMethod.HttpPost,
                                    host: "azure.local:19080",
                                    route: "/Tools/Chaos/$/Stop",
                                    validator: validate_StopChaos_566616,
                                    base: "", url: url_StopChaos_566617,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosEvents_566623 = ref object of OpenApiRestCall_563566
proc url_GetChaosEvents_566625(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosEvents_566624(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContinuationToken: JString
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: JInt
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: JString
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   StartTimeUtc: JString
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  section = newJObject()
  var valid_566626 = query.getOrDefault("ContinuationToken")
  valid_566626 = validateParameter(valid_566626, JString, required = false,
                                 default = nil)
  if valid_566626 != nil:
    section.add "ContinuationToken", valid_566626
  var valid_566627 = query.getOrDefault("MaxResults")
  valid_566627 = validateParameter(valid_566627, JInt, required = false,
                                 default = newJInt(0))
  if valid_566627 != nil:
    section.add "MaxResults", valid_566627
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566628 = query.getOrDefault("api-version")
  valid_566628 = validateParameter(valid_566628, JString, required = true,
                                 default = newJString("6.2"))
  if valid_566628 != nil:
    section.add "api-version", valid_566628
  var valid_566629 = query.getOrDefault("timeout")
  valid_566629 = validateParameter(valid_566629, JInt, required = false,
                                 default = newJInt(60))
  if valid_566629 != nil:
    section.add "timeout", valid_566629
  var valid_566630 = query.getOrDefault("EndTimeUtc")
  valid_566630 = validateParameter(valid_566630, JString, required = false,
                                 default = nil)
  if valid_566630 != nil:
    section.add "EndTimeUtc", valid_566630
  var valid_566631 = query.getOrDefault("StartTimeUtc")
  valid_566631 = validateParameter(valid_566631, JString, required = false,
                                 default = nil)
  if valid_566631 != nil:
    section.add "StartTimeUtc", valid_566631
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566632: Call_GetChaosEvents_566623; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ## 
  let valid = call_566632.validator(path, query, header, formData, body)
  let scheme = call_566632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566632.url(scheme.get, call_566632.host, call_566632.base,
                         call_566632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566632, url, valid)

proc call*(call_566633: Call_GetChaosEvents_566623; ContinuationToken: string = "";
          MaxResults: int = 0; apiVersion: string = "6.2"; timeout: int = 60;
          EndTimeUtc: string = ""; StartTimeUtc: string = ""): Recallable =
  ## getChaosEvents
  ## To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range
  ## through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.
  ## When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
  ##   ContinuationToken: string
  ##                    : The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
  ##   MaxResults: int
  ##             : The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   EndTimeUtc: string
  ##             : The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  ##   StartTimeUtc: string
  ##               : The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc 
  ## Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
  var query_566634 = newJObject()
  add(query_566634, "ContinuationToken", newJString(ContinuationToken))
  add(query_566634, "MaxResults", newJInt(MaxResults))
  add(query_566634, "api-version", newJString(apiVersion))
  add(query_566634, "timeout", newJInt(timeout))
  add(query_566634, "EndTimeUtc", newJString(EndTimeUtc))
  add(query_566634, "StartTimeUtc", newJString(StartTimeUtc))
  result = call_566633.call(nil, query_566634, nil, nil, nil)

var getChaosEvents* = Call_GetChaosEvents_566623(name: "getChaosEvents",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Events", validator: validate_GetChaosEvents_566624,
    base: "", url: url_GetChaosEvents_566625, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChaosSchedule_566643 = ref object of OpenApiRestCall_563566
proc url_PostChaosSchedule_566645(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostChaosSchedule_566644(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566646 = query.getOrDefault("api-version")
  valid_566646 = validateParameter(valid_566646, JString, required = true,
                                 default = newJString("6.2"))
  if valid_566646 != nil:
    section.add "api-version", valid_566646
  var valid_566647 = query.getOrDefault("timeout")
  valid_566647 = validateParameter(valid_566647, JInt, required = false,
                                 default = newJInt(60))
  if valid_566647 != nil:
    section.add "timeout", valid_566647
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566649: Call_PostChaosSchedule_566643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ## 
  let valid = call_566649.validator(path, query, header, formData, body)
  let scheme = call_566649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566649.url(scheme.get, call_566649.host, call_566649.base,
                         call_566649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566649, url, valid)

proc call*(call_566650: Call_PostChaosSchedule_566643; ChaosSchedule: JsonNode;
          apiVersion: string = "6.2"; timeout: int = 60): Recallable =
  ## postChaosSchedule
  ## Chaos will automatically schedule runs based on the Chaos Schedule.
  ## The Chaos Schedule will be updated if the provided version matches the version on the server.
  ## When updating the Chaos Schedule, the version on the server is incremented by 1.
  ## The version on the server will wrap back to 0 after reaching a large number.
  ## If Chaos is running when this call is made, the call will fail.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  ##   ChaosSchedule: JObject (required)
  ##                : Describes the schedule used by Chaos.
  var query_566651 = newJObject()
  var body_566652 = newJObject()
  add(query_566651, "api-version", newJString(apiVersion))
  add(query_566651, "timeout", newJInt(timeout))
  if ChaosSchedule != nil:
    body_566652 = ChaosSchedule
  result = call_566650.call(nil, query_566651, nil, nil, body_566652)

var postChaosSchedule* = Call_PostChaosSchedule_566643(name: "postChaosSchedule",
    meth: HttpMethod.HttpPost, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_PostChaosSchedule_566644,
    base: "", url: url_PostChaosSchedule_566645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChaosSchedule_566635 = ref object of OpenApiRestCall_563566
proc url_GetChaosSchedule_566637(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChaosSchedule_566636(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: JInt
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566638 = query.getOrDefault("api-version")
  valid_566638 = validateParameter(valid_566638, JString, required = true,
                                 default = newJString("6.2"))
  if valid_566638 != nil:
    section.add "api-version", valid_566638
  var valid_566639 = query.getOrDefault("timeout")
  valid_566639 = validateParameter(valid_566639, JInt, required = false,
                                 default = newJInt(60))
  if valid_566639 != nil:
    section.add "timeout", valid_566639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566640: Call_GetChaosSchedule_566635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ## 
  let valid = call_566640.validator(path, query, header, formData, body)
  let scheme = call_566640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566640.url(scheme.get, call_566640.host, call_566640.base,
                         call_566640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566640, url, valid)

proc call*(call_566641: Call_GetChaosSchedule_566635; apiVersion: string = "6.2";
          timeout: int = 60): Recallable =
  ## getChaosSchedule
  ## Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
  ##   apiVersion: string (required)
  ##             : The version of the API. This parameter is required and its value must be '6.2'.
  ## 
  ## Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.
  ## 
  ## Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
  ##   timeout: int
  ##          : The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
  var query_566642 = newJObject()
  add(query_566642, "api-version", newJString(apiVersion))
  add(query_566642, "timeout", newJInt(timeout))
  result = call_566641.call(nil, query_566642, nil, nil, nil)

var getChaosSchedule* = Call_GetChaosSchedule_566635(name: "getChaosSchedule",
    meth: HttpMethod.HttpGet, host: "azure.local:19080",
    route: "/Tools/Chaos/Schedule", validator: validate_GetChaosSchedule_566636,
    base: "", url: url_GetChaosSchedule_566637, schemes: {Scheme.Https, Scheme.Http})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
