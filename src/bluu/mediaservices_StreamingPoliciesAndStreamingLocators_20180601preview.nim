
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: Azure Media Services
## version: 2018-06-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## This Swagger was generated by the API Framework.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567642 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567642](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567642): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "mediaservices-StreamingPoliciesAndStreamingLocators"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_StreamingLocatorsList_567864 = ref object of OpenApiRestCall_567642
proc url_StreamingLocatorsList_567866(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingLocators")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingLocatorsList_567865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the Streaming Locators in the account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568040 = path.getOrDefault("resourceGroupName")
  valid_568040 = validateParameter(valid_568040, JString, required = true,
                                 default = nil)
  if valid_568040 != nil:
    section.add "resourceGroupName", valid_568040
  var valid_568041 = path.getOrDefault("subscriptionId")
  valid_568041 = validateParameter(valid_568041, JString, required = true,
                                 default = nil)
  if valid_568041 != nil:
    section.add "subscriptionId", valid_568041
  var valid_568042 = path.getOrDefault("accountName")
  valid_568042 = validateParameter(valid_568042, JString, required = true,
                                 default = nil)
  if valid_568042 != nil:
    section.add "accountName", valid_568042
  result.add "path", section
  ## parameters in `query` object:
  ##   $orderby: JString
  ##           : Specifies the key by which the result collection should be ordered.
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  ##   $top: JInt
  ##       : Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
  ##   $filter: JString
  ##          : Restricts the set of items returned.
  section = newJObject()
  var valid_568043 = query.getOrDefault("$orderby")
  valid_568043 = validateParameter(valid_568043, JString, required = false,
                                 default = nil)
  if valid_568043 != nil:
    section.add "$orderby", valid_568043
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568044 = query.getOrDefault("api-version")
  valid_568044 = validateParameter(valid_568044, JString, required = true,
                                 default = nil)
  if valid_568044 != nil:
    section.add "api-version", valid_568044
  var valid_568045 = query.getOrDefault("$top")
  valid_568045 = validateParameter(valid_568045, JInt, required = false, default = nil)
  if valid_568045 != nil:
    section.add "$top", valid_568045
  var valid_568046 = query.getOrDefault("$filter")
  valid_568046 = validateParameter(valid_568046, JString, required = false,
                                 default = nil)
  if valid_568046 != nil:
    section.add "$filter", valid_568046
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568069: Call_StreamingLocatorsList_567864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the Streaming Locators in the account
  ## 
  let valid = call_568069.validator(path, query, header, formData, body)
  let scheme = call_568069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568069.url(scheme.get, call_568069.host, call_568069.base,
                         call_568069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568069, url, valid)

proc call*(call_568140: Call_StreamingLocatorsList_567864;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          accountName: string; Orderby: string = ""; Top: int = 0; Filter: string = ""): Recallable =
  ## streamingLocatorsList
  ## Lists the Streaming Locators in the account
  ##   Orderby: string
  ##          : Specifies the key by which the result collection should be ordered.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   Top: int
  ##      : Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  ##   Filter: string
  ##         : Restricts the set of items returned.
  var path_568141 = newJObject()
  var query_568143 = newJObject()
  add(query_568143, "$orderby", newJString(Orderby))
  add(path_568141, "resourceGroupName", newJString(resourceGroupName))
  add(query_568143, "api-version", newJString(apiVersion))
  add(path_568141, "subscriptionId", newJString(subscriptionId))
  add(query_568143, "$top", newJInt(Top))
  add(path_568141, "accountName", newJString(accountName))
  add(query_568143, "$filter", newJString(Filter))
  result = call_568140.call(path_568141, query_568143, nil, nil, nil)

var streamingLocatorsList* = Call_StreamingLocatorsList_567864(
    name: "streamingLocatorsList", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators",
    validator: validate_StreamingLocatorsList_567865, base: "",
    url: url_StreamingLocatorsList_567866, schemes: {Scheme.Https})
type
  Call_StreamingLocatorsCreate_568194 = ref object of OpenApiRestCall_567642
proc url_StreamingLocatorsCreate_568196(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingLocatorName" in path,
        "`streamingLocatorName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingLocators/"),
               (kind: VariableSegment, value: "streamingLocatorName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingLocatorsCreate_568195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a Streaming Locator in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: JString (required)
  ##                       : The Streaming Locator name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568197 = path.getOrDefault("resourceGroupName")
  valid_568197 = validateParameter(valid_568197, JString, required = true,
                                 default = nil)
  if valid_568197 != nil:
    section.add "resourceGroupName", valid_568197
  var valid_568198 = path.getOrDefault("subscriptionId")
  valid_568198 = validateParameter(valid_568198, JString, required = true,
                                 default = nil)
  if valid_568198 != nil:
    section.add "subscriptionId", valid_568198
  var valid_568199 = path.getOrDefault("streamingLocatorName")
  valid_568199 = validateParameter(valid_568199, JString, required = true,
                                 default = nil)
  if valid_568199 != nil:
    section.add "streamingLocatorName", valid_568199
  var valid_568200 = path.getOrDefault("accountName")
  valid_568200 = validateParameter(valid_568200, JString, required = true,
                                 default = nil)
  if valid_568200 != nil:
    section.add "accountName", valid_568200
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568201 = query.getOrDefault("api-version")
  valid_568201 = validateParameter(valid_568201, JString, required = true,
                                 default = nil)
  if valid_568201 != nil:
    section.add "api-version", valid_568201
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : The request parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568203: Call_StreamingLocatorsCreate_568194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a Streaming Locator in the Media Services account
  ## 
  let valid = call_568203.validator(path, query, header, formData, body)
  let scheme = call_568203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568203.url(scheme.get, call_568203.host, call_568203.base,
                         call_568203.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568203, url, valid)

proc call*(call_568204: Call_StreamingLocatorsCreate_568194;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingLocatorName: string; parameters: JsonNode; accountName: string): Recallable =
  ## streamingLocatorsCreate
  ## Create a Streaming Locator in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: string (required)
  ##                       : The Streaming Locator name.
  ##   parameters: JObject (required)
  ##             : The request parameters
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568205 = newJObject()
  var query_568206 = newJObject()
  var body_568207 = newJObject()
  add(path_568205, "resourceGroupName", newJString(resourceGroupName))
  add(query_568206, "api-version", newJString(apiVersion))
  add(path_568205, "subscriptionId", newJString(subscriptionId))
  add(path_568205, "streamingLocatorName", newJString(streamingLocatorName))
  if parameters != nil:
    body_568207 = parameters
  add(path_568205, "accountName", newJString(accountName))
  result = call_568204.call(path_568205, query_568206, nil, nil, body_568207)

var streamingLocatorsCreate* = Call_StreamingLocatorsCreate_568194(
    name: "streamingLocatorsCreate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
    validator: validate_StreamingLocatorsCreate_568195, base: "",
    url: url_StreamingLocatorsCreate_568196, schemes: {Scheme.Https})
type
  Call_StreamingLocatorsGet_568182 = ref object of OpenApiRestCall_567642
proc url_StreamingLocatorsGet_568184(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingLocatorName" in path,
        "`streamingLocatorName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingLocators/"),
               (kind: VariableSegment, value: "streamingLocatorName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingLocatorsGet_568183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the details of a Streaming Locator in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: JString (required)
  ##                       : The Streaming Locator name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568185 = path.getOrDefault("resourceGroupName")
  valid_568185 = validateParameter(valid_568185, JString, required = true,
                                 default = nil)
  if valid_568185 != nil:
    section.add "resourceGroupName", valid_568185
  var valid_568186 = path.getOrDefault("subscriptionId")
  valid_568186 = validateParameter(valid_568186, JString, required = true,
                                 default = nil)
  if valid_568186 != nil:
    section.add "subscriptionId", valid_568186
  var valid_568187 = path.getOrDefault("streamingLocatorName")
  valid_568187 = validateParameter(valid_568187, JString, required = true,
                                 default = nil)
  if valid_568187 != nil:
    section.add "streamingLocatorName", valid_568187
  var valid_568188 = path.getOrDefault("accountName")
  valid_568188 = validateParameter(valid_568188, JString, required = true,
                                 default = nil)
  if valid_568188 != nil:
    section.add "accountName", valid_568188
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568189 = query.getOrDefault("api-version")
  valid_568189 = validateParameter(valid_568189, JString, required = true,
                                 default = nil)
  if valid_568189 != nil:
    section.add "api-version", valid_568189
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568190: Call_StreamingLocatorsGet_568182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the details of a Streaming Locator in the Media Services account
  ## 
  let valid = call_568190.validator(path, query, header, formData, body)
  let scheme = call_568190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568190.url(scheme.get, call_568190.host, call_568190.base,
                         call_568190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568190, url, valid)

proc call*(call_568191: Call_StreamingLocatorsGet_568182;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingLocatorName: string; accountName: string): Recallable =
  ## streamingLocatorsGet
  ## Get the details of a Streaming Locator in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: string (required)
  ##                       : The Streaming Locator name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568192 = newJObject()
  var query_568193 = newJObject()
  add(path_568192, "resourceGroupName", newJString(resourceGroupName))
  add(query_568193, "api-version", newJString(apiVersion))
  add(path_568192, "subscriptionId", newJString(subscriptionId))
  add(path_568192, "streamingLocatorName", newJString(streamingLocatorName))
  add(path_568192, "accountName", newJString(accountName))
  result = call_568191.call(path_568192, query_568193, nil, nil, nil)

var streamingLocatorsGet* = Call_StreamingLocatorsGet_568182(
    name: "streamingLocatorsGet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
    validator: validate_StreamingLocatorsGet_568183, base: "",
    url: url_StreamingLocatorsGet_568184, schemes: {Scheme.Https})
type
  Call_StreamingLocatorsDelete_568208 = ref object of OpenApiRestCall_567642
proc url_StreamingLocatorsDelete_568210(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingLocatorName" in path,
        "`streamingLocatorName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingLocators/"),
               (kind: VariableSegment, value: "streamingLocatorName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingLocatorsDelete_568209(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Streaming Locator in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: JString (required)
  ##                       : The Streaming Locator name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568211 = path.getOrDefault("resourceGroupName")
  valid_568211 = validateParameter(valid_568211, JString, required = true,
                                 default = nil)
  if valid_568211 != nil:
    section.add "resourceGroupName", valid_568211
  var valid_568212 = path.getOrDefault("subscriptionId")
  valid_568212 = validateParameter(valid_568212, JString, required = true,
                                 default = nil)
  if valid_568212 != nil:
    section.add "subscriptionId", valid_568212
  var valid_568213 = path.getOrDefault("streamingLocatorName")
  valid_568213 = validateParameter(valid_568213, JString, required = true,
                                 default = nil)
  if valid_568213 != nil:
    section.add "streamingLocatorName", valid_568213
  var valid_568214 = path.getOrDefault("accountName")
  valid_568214 = validateParameter(valid_568214, JString, required = true,
                                 default = nil)
  if valid_568214 != nil:
    section.add "accountName", valid_568214
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568215 = query.getOrDefault("api-version")
  valid_568215 = validateParameter(valid_568215, JString, required = true,
                                 default = nil)
  if valid_568215 != nil:
    section.add "api-version", valid_568215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568216: Call_StreamingLocatorsDelete_568208; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a Streaming Locator in the Media Services account
  ## 
  let valid = call_568216.validator(path, query, header, formData, body)
  let scheme = call_568216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568216.url(scheme.get, call_568216.host, call_568216.base,
                         call_568216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568216, url, valid)

proc call*(call_568217: Call_StreamingLocatorsDelete_568208;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingLocatorName: string; accountName: string): Recallable =
  ## streamingLocatorsDelete
  ## Deletes a Streaming Locator in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: string (required)
  ##                       : The Streaming Locator name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568218 = newJObject()
  var query_568219 = newJObject()
  add(path_568218, "resourceGroupName", newJString(resourceGroupName))
  add(query_568219, "api-version", newJString(apiVersion))
  add(path_568218, "subscriptionId", newJString(subscriptionId))
  add(path_568218, "streamingLocatorName", newJString(streamingLocatorName))
  add(path_568218, "accountName", newJString(accountName))
  result = call_568217.call(path_568218, query_568219, nil, nil, nil)

var streamingLocatorsDelete* = Call_StreamingLocatorsDelete_568208(
    name: "streamingLocatorsDelete", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
    validator: validate_StreamingLocatorsDelete_568209, base: "",
    url: url_StreamingLocatorsDelete_568210, schemes: {Scheme.Https})
type
  Call_StreamingLocatorsListContentKeys_568220 = ref object of OpenApiRestCall_567642
proc url_StreamingLocatorsListContentKeys_568222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingLocatorName" in path,
        "`streamingLocatorName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingLocators/"),
               (kind: VariableSegment, value: "streamingLocatorName"),
               (kind: ConstantSegment, value: "/listContentKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingLocatorsListContentKeys_568221(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List Content Keys used by this Streaming Locator
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: JString (required)
  ##                       : The Streaming Locator name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568223 = path.getOrDefault("resourceGroupName")
  valid_568223 = validateParameter(valid_568223, JString, required = true,
                                 default = nil)
  if valid_568223 != nil:
    section.add "resourceGroupName", valid_568223
  var valid_568224 = path.getOrDefault("subscriptionId")
  valid_568224 = validateParameter(valid_568224, JString, required = true,
                                 default = nil)
  if valid_568224 != nil:
    section.add "subscriptionId", valid_568224
  var valid_568225 = path.getOrDefault("streamingLocatorName")
  valid_568225 = validateParameter(valid_568225, JString, required = true,
                                 default = nil)
  if valid_568225 != nil:
    section.add "streamingLocatorName", valid_568225
  var valid_568226 = path.getOrDefault("accountName")
  valid_568226 = validateParameter(valid_568226, JString, required = true,
                                 default = nil)
  if valid_568226 != nil:
    section.add "accountName", valid_568226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568227 = query.getOrDefault("api-version")
  valid_568227 = validateParameter(valid_568227, JString, required = true,
                                 default = nil)
  if valid_568227 != nil:
    section.add "api-version", valid_568227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568228: Call_StreamingLocatorsListContentKeys_568220;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List Content Keys used by this Streaming Locator
  ## 
  let valid = call_568228.validator(path, query, header, formData, body)
  let scheme = call_568228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568228.url(scheme.get, call_568228.host, call_568228.base,
                         call_568228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568228, url, valid)

proc call*(call_568229: Call_StreamingLocatorsListContentKeys_568220;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingLocatorName: string; accountName: string): Recallable =
  ## streamingLocatorsListContentKeys
  ## List Content Keys used by this Streaming Locator
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: string (required)
  ##                       : The Streaming Locator name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568230 = newJObject()
  var query_568231 = newJObject()
  add(path_568230, "resourceGroupName", newJString(resourceGroupName))
  add(query_568231, "api-version", newJString(apiVersion))
  add(path_568230, "subscriptionId", newJString(subscriptionId))
  add(path_568230, "streamingLocatorName", newJString(streamingLocatorName))
  add(path_568230, "accountName", newJString(accountName))
  result = call_568229.call(path_568230, query_568231, nil, nil, nil)

var streamingLocatorsListContentKeys* = Call_StreamingLocatorsListContentKeys_568220(
    name: "streamingLocatorsListContentKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listContentKeys",
    validator: validate_StreamingLocatorsListContentKeys_568221, base: "",
    url: url_StreamingLocatorsListContentKeys_568222, schemes: {Scheme.Https})
type
  Call_StreamingLocatorsListPaths_568232 = ref object of OpenApiRestCall_567642
proc url_StreamingLocatorsListPaths_568234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingLocatorName" in path,
        "`streamingLocatorName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingLocators/"),
               (kind: VariableSegment, value: "streamingLocatorName"),
               (kind: ConstantSegment, value: "/listPaths")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingLocatorsListPaths_568233(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List Paths supported by this Streaming Locator
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: JString (required)
  ##                       : The Streaming Locator name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568235 = path.getOrDefault("resourceGroupName")
  valid_568235 = validateParameter(valid_568235, JString, required = true,
                                 default = nil)
  if valid_568235 != nil:
    section.add "resourceGroupName", valid_568235
  var valid_568236 = path.getOrDefault("subscriptionId")
  valid_568236 = validateParameter(valid_568236, JString, required = true,
                                 default = nil)
  if valid_568236 != nil:
    section.add "subscriptionId", valid_568236
  var valid_568237 = path.getOrDefault("streamingLocatorName")
  valid_568237 = validateParameter(valid_568237, JString, required = true,
                                 default = nil)
  if valid_568237 != nil:
    section.add "streamingLocatorName", valid_568237
  var valid_568238 = path.getOrDefault("accountName")
  valid_568238 = validateParameter(valid_568238, JString, required = true,
                                 default = nil)
  if valid_568238 != nil:
    section.add "accountName", valid_568238
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568239 = query.getOrDefault("api-version")
  valid_568239 = validateParameter(valid_568239, JString, required = true,
                                 default = nil)
  if valid_568239 != nil:
    section.add "api-version", valid_568239
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568240: Call_StreamingLocatorsListPaths_568232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List Paths supported by this Streaming Locator
  ## 
  let valid = call_568240.validator(path, query, header, formData, body)
  let scheme = call_568240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568240.url(scheme.get, call_568240.host, call_568240.base,
                         call_568240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568240, url, valid)

proc call*(call_568241: Call_StreamingLocatorsListPaths_568232;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingLocatorName: string; accountName: string): Recallable =
  ## streamingLocatorsListPaths
  ## List Paths supported by this Streaming Locator
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingLocatorName: string (required)
  ##                       : The Streaming Locator name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568242 = newJObject()
  var query_568243 = newJObject()
  add(path_568242, "resourceGroupName", newJString(resourceGroupName))
  add(query_568243, "api-version", newJString(apiVersion))
  add(path_568242, "subscriptionId", newJString(subscriptionId))
  add(path_568242, "streamingLocatorName", newJString(streamingLocatorName))
  add(path_568242, "accountName", newJString(accountName))
  result = call_568241.call(path_568242, query_568243, nil, nil, nil)

var streamingLocatorsListPaths* = Call_StreamingLocatorsListPaths_568232(
    name: "streamingLocatorsListPaths", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listPaths",
    validator: validate_StreamingLocatorsListPaths_568233, base: "",
    url: url_StreamingLocatorsListPaths_568234, schemes: {Scheme.Https})
type
  Call_StreamingPoliciesList_568244 = ref object of OpenApiRestCall_567642
proc url_StreamingPoliciesList_568246(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingPolicies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingPoliciesList_568245(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the Streaming Policies in the account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568247 = path.getOrDefault("resourceGroupName")
  valid_568247 = validateParameter(valid_568247, JString, required = true,
                                 default = nil)
  if valid_568247 != nil:
    section.add "resourceGroupName", valid_568247
  var valid_568248 = path.getOrDefault("subscriptionId")
  valid_568248 = validateParameter(valid_568248, JString, required = true,
                                 default = nil)
  if valid_568248 != nil:
    section.add "subscriptionId", valid_568248
  var valid_568249 = path.getOrDefault("accountName")
  valid_568249 = validateParameter(valid_568249, JString, required = true,
                                 default = nil)
  if valid_568249 != nil:
    section.add "accountName", valid_568249
  result.add "path", section
  ## parameters in `query` object:
  ##   $orderby: JString
  ##           : Specifies the key by which the result collection should be ordered.
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  ##   $top: JInt
  ##       : Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
  ##   $filter: JString
  ##          : Restricts the set of items returned.
  section = newJObject()
  var valid_568250 = query.getOrDefault("$orderby")
  valid_568250 = validateParameter(valid_568250, JString, required = false,
                                 default = nil)
  if valid_568250 != nil:
    section.add "$orderby", valid_568250
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568251 = query.getOrDefault("api-version")
  valid_568251 = validateParameter(valid_568251, JString, required = true,
                                 default = nil)
  if valid_568251 != nil:
    section.add "api-version", valid_568251
  var valid_568252 = query.getOrDefault("$top")
  valid_568252 = validateParameter(valid_568252, JInt, required = false, default = nil)
  if valid_568252 != nil:
    section.add "$top", valid_568252
  var valid_568253 = query.getOrDefault("$filter")
  valid_568253 = validateParameter(valid_568253, JString, required = false,
                                 default = nil)
  if valid_568253 != nil:
    section.add "$filter", valid_568253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568254: Call_StreamingPoliciesList_568244; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the Streaming Policies in the account
  ## 
  let valid = call_568254.validator(path, query, header, formData, body)
  let scheme = call_568254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568254.url(scheme.get, call_568254.host, call_568254.base,
                         call_568254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568254, url, valid)

proc call*(call_568255: Call_StreamingPoliciesList_568244;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          accountName: string; Orderby: string = ""; Top: int = 0; Filter: string = ""): Recallable =
  ## streamingPoliciesList
  ## Lists the Streaming Policies in the account
  ##   Orderby: string
  ##          : Specifies the key by which the result collection should be ordered.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   Top: int
  ##      : Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  ##   Filter: string
  ##         : Restricts the set of items returned.
  var path_568256 = newJObject()
  var query_568257 = newJObject()
  add(query_568257, "$orderby", newJString(Orderby))
  add(path_568256, "resourceGroupName", newJString(resourceGroupName))
  add(query_568257, "api-version", newJString(apiVersion))
  add(path_568256, "subscriptionId", newJString(subscriptionId))
  add(query_568257, "$top", newJInt(Top))
  add(path_568256, "accountName", newJString(accountName))
  add(query_568257, "$filter", newJString(Filter))
  result = call_568255.call(path_568256, query_568257, nil, nil, nil)

var streamingPoliciesList* = Call_StreamingPoliciesList_568244(
    name: "streamingPoliciesList", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies",
    validator: validate_StreamingPoliciesList_568245, base: "",
    url: url_StreamingPoliciesList_568246, schemes: {Scheme.Https})
type
  Call_StreamingPoliciesCreate_568270 = ref object of OpenApiRestCall_567642
proc url_StreamingPoliciesCreate_568272(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingPolicyName" in path,
        "`streamingPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingPolicies/"),
               (kind: VariableSegment, value: "streamingPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingPoliciesCreate_568271(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a Streaming Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingPolicyName: JString (required)
  ##                      : The Streaming Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568273 = path.getOrDefault("resourceGroupName")
  valid_568273 = validateParameter(valid_568273, JString, required = true,
                                 default = nil)
  if valid_568273 != nil:
    section.add "resourceGroupName", valid_568273
  var valid_568274 = path.getOrDefault("subscriptionId")
  valid_568274 = validateParameter(valid_568274, JString, required = true,
                                 default = nil)
  if valid_568274 != nil:
    section.add "subscriptionId", valid_568274
  var valid_568275 = path.getOrDefault("streamingPolicyName")
  valid_568275 = validateParameter(valid_568275, JString, required = true,
                                 default = nil)
  if valid_568275 != nil:
    section.add "streamingPolicyName", valid_568275
  var valid_568276 = path.getOrDefault("accountName")
  valid_568276 = validateParameter(valid_568276, JString, required = true,
                                 default = nil)
  if valid_568276 != nil:
    section.add "accountName", valid_568276
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568277 = query.getOrDefault("api-version")
  valid_568277 = validateParameter(valid_568277, JString, required = true,
                                 default = nil)
  if valid_568277 != nil:
    section.add "api-version", valid_568277
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : The request parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568279: Call_StreamingPoliciesCreate_568270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a Streaming Policy in the Media Services account
  ## 
  let valid = call_568279.validator(path, query, header, formData, body)
  let scheme = call_568279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568279.url(scheme.get, call_568279.host, call_568279.base,
                         call_568279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568279, url, valid)

proc call*(call_568280: Call_StreamingPoliciesCreate_568270;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingPolicyName: string; parameters: JsonNode; accountName: string): Recallable =
  ## streamingPoliciesCreate
  ## Create a Streaming Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingPolicyName: string (required)
  ##                      : The Streaming Policy name.
  ##   parameters: JObject (required)
  ##             : The request parameters
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568281 = newJObject()
  var query_568282 = newJObject()
  var body_568283 = newJObject()
  add(path_568281, "resourceGroupName", newJString(resourceGroupName))
  add(query_568282, "api-version", newJString(apiVersion))
  add(path_568281, "subscriptionId", newJString(subscriptionId))
  add(path_568281, "streamingPolicyName", newJString(streamingPolicyName))
  if parameters != nil:
    body_568283 = parameters
  add(path_568281, "accountName", newJString(accountName))
  result = call_568280.call(path_568281, query_568282, nil, nil, body_568283)

var streamingPoliciesCreate* = Call_StreamingPoliciesCreate_568270(
    name: "streamingPoliciesCreate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
    validator: validate_StreamingPoliciesCreate_568271, base: "",
    url: url_StreamingPoliciesCreate_568272, schemes: {Scheme.Https})
type
  Call_StreamingPoliciesGet_568258 = ref object of OpenApiRestCall_567642
proc url_StreamingPoliciesGet_568260(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingPolicyName" in path,
        "`streamingPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingPolicies/"),
               (kind: VariableSegment, value: "streamingPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingPoliciesGet_568259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the details of a Streaming Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingPolicyName: JString (required)
  ##                      : The Streaming Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568261 = path.getOrDefault("resourceGroupName")
  valid_568261 = validateParameter(valid_568261, JString, required = true,
                                 default = nil)
  if valid_568261 != nil:
    section.add "resourceGroupName", valid_568261
  var valid_568262 = path.getOrDefault("subscriptionId")
  valid_568262 = validateParameter(valid_568262, JString, required = true,
                                 default = nil)
  if valid_568262 != nil:
    section.add "subscriptionId", valid_568262
  var valid_568263 = path.getOrDefault("streamingPolicyName")
  valid_568263 = validateParameter(valid_568263, JString, required = true,
                                 default = nil)
  if valid_568263 != nil:
    section.add "streamingPolicyName", valid_568263
  var valid_568264 = path.getOrDefault("accountName")
  valid_568264 = validateParameter(valid_568264, JString, required = true,
                                 default = nil)
  if valid_568264 != nil:
    section.add "accountName", valid_568264
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568265 = query.getOrDefault("api-version")
  valid_568265 = validateParameter(valid_568265, JString, required = true,
                                 default = nil)
  if valid_568265 != nil:
    section.add "api-version", valid_568265
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568266: Call_StreamingPoliciesGet_568258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the details of a Streaming Policy in the Media Services account
  ## 
  let valid = call_568266.validator(path, query, header, formData, body)
  let scheme = call_568266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568266.url(scheme.get, call_568266.host, call_568266.base,
                         call_568266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568266, url, valid)

proc call*(call_568267: Call_StreamingPoliciesGet_568258;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingPolicyName: string; accountName: string): Recallable =
  ## streamingPoliciesGet
  ## Get the details of a Streaming Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingPolicyName: string (required)
  ##                      : The Streaming Policy name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568268 = newJObject()
  var query_568269 = newJObject()
  add(path_568268, "resourceGroupName", newJString(resourceGroupName))
  add(query_568269, "api-version", newJString(apiVersion))
  add(path_568268, "subscriptionId", newJString(subscriptionId))
  add(path_568268, "streamingPolicyName", newJString(streamingPolicyName))
  add(path_568268, "accountName", newJString(accountName))
  result = call_568267.call(path_568268, query_568269, nil, nil, nil)

var streamingPoliciesGet* = Call_StreamingPoliciesGet_568258(
    name: "streamingPoliciesGet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
    validator: validate_StreamingPoliciesGet_568259, base: "",
    url: url_StreamingPoliciesGet_568260, schemes: {Scheme.Https})
type
  Call_StreamingPoliciesDelete_568284 = ref object of OpenApiRestCall_567642
proc url_StreamingPoliciesDelete_568286(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "streamingPolicyName" in path,
        "`streamingPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/streamingPolicies/"),
               (kind: VariableSegment, value: "streamingPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_StreamingPoliciesDelete_568285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Streaming Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingPolicyName: JString (required)
  ##                      : The Streaming Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568287 = path.getOrDefault("resourceGroupName")
  valid_568287 = validateParameter(valid_568287, JString, required = true,
                                 default = nil)
  if valid_568287 != nil:
    section.add "resourceGroupName", valid_568287
  var valid_568288 = path.getOrDefault("subscriptionId")
  valid_568288 = validateParameter(valid_568288, JString, required = true,
                                 default = nil)
  if valid_568288 != nil:
    section.add "subscriptionId", valid_568288
  var valid_568289 = path.getOrDefault("streamingPolicyName")
  valid_568289 = validateParameter(valid_568289, JString, required = true,
                                 default = nil)
  if valid_568289 != nil:
    section.add "streamingPolicyName", valid_568289
  var valid_568290 = path.getOrDefault("accountName")
  valid_568290 = validateParameter(valid_568290, JString, required = true,
                                 default = nil)
  if valid_568290 != nil:
    section.add "accountName", valid_568290
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568291 = query.getOrDefault("api-version")
  valid_568291 = validateParameter(valid_568291, JString, required = true,
                                 default = nil)
  if valid_568291 != nil:
    section.add "api-version", valid_568291
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568292: Call_StreamingPoliciesDelete_568284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a Streaming Policy in the Media Services account
  ## 
  let valid = call_568292.validator(path, query, header, formData, body)
  let scheme = call_568292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568292.url(scheme.get, call_568292.host, call_568292.base,
                         call_568292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568292, url, valid)

proc call*(call_568293: Call_StreamingPoliciesDelete_568284;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          streamingPolicyName: string; accountName: string): Recallable =
  ## streamingPoliciesDelete
  ## Deletes a Streaming Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   streamingPolicyName: string (required)
  ##                      : The Streaming Policy name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_568294 = newJObject()
  var query_568295 = newJObject()
  add(path_568294, "resourceGroupName", newJString(resourceGroupName))
  add(query_568295, "api-version", newJString(apiVersion))
  add(path_568294, "subscriptionId", newJString(subscriptionId))
  add(path_568294, "streamingPolicyName", newJString(streamingPolicyName))
  add(path_568294, "accountName", newJString(accountName))
  result = call_568293.call(path_568294, query_568295, nil, nil, nil)

var streamingPoliciesDelete* = Call_StreamingPoliciesDelete_568284(
    name: "streamingPoliciesDelete", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
    validator: validate_StreamingPoliciesDelete_568285, base: "",
    url: url_StreamingPoliciesDelete_568286, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
